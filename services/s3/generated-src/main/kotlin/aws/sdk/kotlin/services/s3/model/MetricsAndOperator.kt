// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter.
 * The operator must have at least two predicates, and an object must match all of the
 * predicates in order for the filter to apply.
 */
class MetricsAndOperator private constructor(builder: BuilderImpl) {
    /**
     * The access point ARN used when evaluating an AND predicate.
     */
    val accessPointArn: String? = builder.accessPointArn
    /**
     * The prefix used when evaluating an AND predicate.
     */
    val prefix: String? = builder.prefix
    /**
     * The list of tags used when evaluating an AND predicate.
     */
    val tags: List<Tag>? = builder.tags

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): MetricsAndOperator = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("MetricsAndOperator(")
        append("accessPointArn=$accessPointArn,")
        append("prefix=$prefix,")
        append("tags=$tags)")
    }

    override fun hashCode(): kotlin.Int {
        var result = accessPointArn?.hashCode() ?: 0
        result = 31 * result + (prefix?.hashCode() ?: 0)
        result = 31 * result + (tags?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as MetricsAndOperator

        if (accessPointArn != other.accessPointArn) return false
        if (prefix != other.prefix) return false
        if (tags != other.tags) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): MetricsAndOperator = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): MetricsAndOperator
        /**
         * The access point ARN used when evaluating an AND predicate.
         */
        fun accessPointArn(accessPointArn: String): FluentBuilder
        /**
         * The prefix used when evaluating an AND predicate.
         */
        fun prefix(prefix: String): FluentBuilder
        /**
         * The list of tags used when evaluating an AND predicate.
         */
        fun tags(tags: List<Tag>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The access point ARN used when evaluating an AND predicate.
         */
        var accessPointArn: String?
        /**
         * The prefix used when evaluating an AND predicate.
         */
        var prefix: String?
        /**
         * The list of tags used when evaluating an AND predicate.
         */
        var tags: List<Tag>?

        fun build(): MetricsAndOperator
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var accessPointArn: String? = null
        override var prefix: String? = null
        override var tags: List<Tag>? = null

        constructor(x: MetricsAndOperator) : this() {
            this.accessPointArn = x.accessPointArn
            this.prefix = x.prefix
            this.tags = x.tags
        }

        override fun build(): MetricsAndOperator = MetricsAndOperator(this)
        override fun accessPointArn(accessPointArn: String): FluentBuilder = apply { this.accessPointArn = accessPointArn }
        override fun prefix(prefix: String): FluentBuilder = apply { this.prefix = prefix }
        override fun tags(tags: List<Tag>): FluentBuilder = apply { this.tags = tags }
    }
}
