// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model

import aws.smithy.kotlin.runtime.time.Instant

class GetObjectRequest private constructor(builder: BuilderImpl) {
    /**
     * The bucket name containing the object.
     * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
     * When using an Object Lambda access point the hostname takes the form AccessPointName-AccountId.s3-object-lambda.Region.amazonaws.com.
     * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
     */
    val bucket: String? = builder.bucket
    /**
     * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     */
    val expectedBucketOwner: String? = builder.expectedBucketOwner
    /**
     * Return the object only if its entity tag (ETag) is the same as the one specified,
     * otherwise return a 412 (precondition failed).
     */
    val ifMatch: String? = builder.ifMatch
    /**
     * Return the object only if it has been modified since the specified time, otherwise
     * return a 304 (not modified).
     */
    val ifModifiedSince: Instant? = builder.ifModifiedSince
    /**
     * Return the object only if its entity tag (ETag) is different from the one specified,
     * otherwise return a 304 (not modified).
     */
    val ifNoneMatch: String? = builder.ifNoneMatch
    /**
     * Return the object only if it has not been modified since the specified time, otherwise
     * return a 412 (precondition failed).
     */
    val ifUnmodifiedSince: Instant? = builder.ifUnmodifiedSince
    /**
     * Key of the object to get.
     */
    val key: String? = builder.key
    /**
     * Part number of the object being read. This is a positive integer between 1 and 10,000.
     * Effectively performs a 'ranged' GET request for the part specified. Useful for downloading
     * just a part of an object.
     */
    val partNumber: Int = builder.partNumber
    /**
     * Downloads the specified range bytes of an object. For more information about the HTTP
     * Range header, see <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35">https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.
     * Amazon S3 doesn't support retrieving multiple ranges of data per GET
     * request.
     */
    val range: String? = builder.range
    /**
     * Confirms that the requester knows that they will be charged for the request. Bucket
     * owners need not specify this parameter in their requests. For information about downloading
     * objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
     * Requestor Pays Buckets in the Amazon S3 User Guide.
     */
    val requestPayer: RequestPayer? = builder.requestPayer
    /**
     * Sets the Cache-Control header of the response.
     */
    val responseCacheControl: String? = builder.responseCacheControl
    /**
     * Sets the Content-Disposition header of the response
     */
    val responseContentDisposition: String? = builder.responseContentDisposition
    /**
     * Sets the Content-Encoding header of the response.
     */
    val responseContentEncoding: String? = builder.responseContentEncoding
    /**
     * Sets the Content-Language header of the response.
     */
    val responseContentLanguage: String? = builder.responseContentLanguage
    /**
     * Sets the Content-Type header of the response.
     */
    val responseContentType: String? = builder.responseContentType
    /**
     * Sets the Expires header of the response.
     */
    val responseExpires: Instant? = builder.responseExpires
    /**
     * Specifies the algorithm to use to when decrypting the object (for example,
     * AES256).
     */
    val sseCustomerAlgorithm: String? = builder.sseCustomerAlgorithm
    /**
     * Specifies the customer-provided encryption key for Amazon S3 used to encrypt the data. This
     * value is used to decrypt the object when recovering it and must match the one used when
     * storing the data. The key must be appropriate for use with the algorithm specified in the
     * x-amz-server-side-encryption-customer-algorithm header.
     */
    val sseCustomerKey: String? = builder.sseCustomerKey
    /**
     * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
     * this header for a message integrity check to ensure that the encryption key was transmitted
     * without error.
     */
    val sseCustomerKeyMd5: String? = builder.sseCustomerKeyMd5
    /**
     * VersionId used to reference a specific version of the object.
     */
    val versionId: String? = builder.versionId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): GetObjectRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("GetObjectRequest(")
        append("bucket=$bucket,")
        append("expectedBucketOwner=$expectedBucketOwner,")
        append("ifMatch=$ifMatch,")
        append("ifModifiedSince=$ifModifiedSince,")
        append("ifNoneMatch=$ifNoneMatch,")
        append("ifUnmodifiedSince=$ifUnmodifiedSince,")
        append("key=$key,")
        append("partNumber=$partNumber,")
        append("range=$range,")
        append("requestPayer=$requestPayer,")
        append("responseCacheControl=$responseCacheControl,")
        append("responseContentDisposition=$responseContentDisposition,")
        append("responseContentEncoding=$responseContentEncoding,")
        append("responseContentLanguage=$responseContentLanguage,")
        append("responseContentType=$responseContentType,")
        append("responseExpires=$responseExpires,")
        append("sseCustomerAlgorithm=$sseCustomerAlgorithm,")
        append("sseCustomerKey=*** Sensitive Data Redacted ***,")
        append("sseCustomerKeyMd5=$sseCustomerKeyMd5,")
        append("versionId=$versionId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = bucket?.hashCode() ?: 0
        result = 31 * result + (expectedBucketOwner?.hashCode() ?: 0)
        result = 31 * result + (ifMatch?.hashCode() ?: 0)
        result = 31 * result + (ifModifiedSince?.hashCode() ?: 0)
        result = 31 * result + (ifNoneMatch?.hashCode() ?: 0)
        result = 31 * result + (ifUnmodifiedSince?.hashCode() ?: 0)
        result = 31 * result + (key?.hashCode() ?: 0)
        result = 31 * result + (partNumber)
        result = 31 * result + (range?.hashCode() ?: 0)
        result = 31 * result + (requestPayer?.hashCode() ?: 0)
        result = 31 * result + (responseCacheControl?.hashCode() ?: 0)
        result = 31 * result + (responseContentDisposition?.hashCode() ?: 0)
        result = 31 * result + (responseContentEncoding?.hashCode() ?: 0)
        result = 31 * result + (responseContentLanguage?.hashCode() ?: 0)
        result = 31 * result + (responseContentType?.hashCode() ?: 0)
        result = 31 * result + (responseExpires?.hashCode() ?: 0)
        result = 31 * result + (sseCustomerAlgorithm?.hashCode() ?: 0)
        result = 31 * result + (sseCustomerKey?.hashCode() ?: 0)
        result = 31 * result + (sseCustomerKeyMd5?.hashCode() ?: 0)
        result = 31 * result + (versionId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as GetObjectRequest

        if (bucket != other.bucket) return false
        if (expectedBucketOwner != other.expectedBucketOwner) return false
        if (ifMatch != other.ifMatch) return false
        if (ifModifiedSince != other.ifModifiedSince) return false
        if (ifNoneMatch != other.ifNoneMatch) return false
        if (ifUnmodifiedSince != other.ifUnmodifiedSince) return false
        if (key != other.key) return false
        if (partNumber != other.partNumber) return false
        if (range != other.range) return false
        if (requestPayer != other.requestPayer) return false
        if (responseCacheControl != other.responseCacheControl) return false
        if (responseContentDisposition != other.responseContentDisposition) return false
        if (responseContentEncoding != other.responseContentEncoding) return false
        if (responseContentLanguage != other.responseContentLanguage) return false
        if (responseContentType != other.responseContentType) return false
        if (responseExpires != other.responseExpires) return false
        if (sseCustomerAlgorithm != other.sseCustomerAlgorithm) return false
        if (sseCustomerKey != other.sseCustomerKey) return false
        if (sseCustomerKeyMd5 != other.sseCustomerKeyMd5) return false
        if (versionId != other.versionId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): GetObjectRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): GetObjectRequest
        /**
         * The bucket name containing the object.
         * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
         * When using an Object Lambda access point the hostname takes the form AccessPointName-AccountId.s3-object-lambda.Region.amazonaws.com.
         * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
         */
        fun bucket(bucket: String): FluentBuilder
        /**
         * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        fun expectedBucketOwner(expectedBucketOwner: String): FluentBuilder
        /**
         * Return the object only if its entity tag (ETag) is the same as the one specified,
         * otherwise return a 412 (precondition failed).
         */
        fun ifMatch(ifMatch: String): FluentBuilder
        /**
         * Return the object only if it has been modified since the specified time, otherwise
         * return a 304 (not modified).
         */
        fun ifModifiedSince(ifModifiedSince: Instant): FluentBuilder
        /**
         * Return the object only if its entity tag (ETag) is different from the one specified,
         * otherwise return a 304 (not modified).
         */
        fun ifNoneMatch(ifNoneMatch: String): FluentBuilder
        /**
         * Return the object only if it has not been modified since the specified time, otherwise
         * return a 412 (precondition failed).
         */
        fun ifUnmodifiedSince(ifUnmodifiedSince: Instant): FluentBuilder
        /**
         * Key of the object to get.
         */
        fun key(key: String): FluentBuilder
        /**
         * Part number of the object being read. This is a positive integer between 1 and 10,000.
         * Effectively performs a 'ranged' GET request for the part specified. Useful for downloading
         * just a part of an object.
         */
        fun partNumber(partNumber: Int): FluentBuilder
        /**
         * Downloads the specified range bytes of an object. For more information about the HTTP
         * Range header, see <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35">https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.
         * Amazon S3 doesn't support retrieving multiple ranges of data per GET
         * request.
         */
        fun range(range: String): FluentBuilder
        /**
         * Confirms that the requester knows that they will be charged for the request. Bucket
         * owners need not specify this parameter in their requests. For information about downloading
         * objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
         * Requestor Pays Buckets in the Amazon S3 User Guide.
         */
        fun requestPayer(requestPayer: RequestPayer): FluentBuilder
        /**
         * Sets the Cache-Control header of the response.
         */
        fun responseCacheControl(responseCacheControl: String): FluentBuilder
        /**
         * Sets the Content-Disposition header of the response
         */
        fun responseContentDisposition(responseContentDisposition: String): FluentBuilder
        /**
         * Sets the Content-Encoding header of the response.
         */
        fun responseContentEncoding(responseContentEncoding: String): FluentBuilder
        /**
         * Sets the Content-Language header of the response.
         */
        fun responseContentLanguage(responseContentLanguage: String): FluentBuilder
        /**
         * Sets the Content-Type header of the response.
         */
        fun responseContentType(responseContentType: String): FluentBuilder
        /**
         * Sets the Expires header of the response.
         */
        fun responseExpires(responseExpires: Instant): FluentBuilder
        /**
         * Specifies the algorithm to use to when decrypting the object (for example,
         * AES256).
         */
        fun sseCustomerAlgorithm(sseCustomerAlgorithm: String): FluentBuilder
        /**
         * Specifies the customer-provided encryption key for Amazon S3 used to encrypt the data. This
         * value is used to decrypt the object when recovering it and must match the one used when
         * storing the data. The key must be appropriate for use with the algorithm specified in the
         * x-amz-server-side-encryption-customer-algorithm header.
         */
        fun sseCustomerKey(sseCustomerKey: String): FluentBuilder
        /**
         * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
         * this header for a message integrity check to ensure that the encryption key was transmitted
         * without error.
         */
        fun sseCustomerKeyMd5(sseCustomerKeyMd5: String): FluentBuilder
        /**
         * VersionId used to reference a specific version of the object.
         */
        fun versionId(versionId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The bucket name containing the object.
         * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
         * When using an Object Lambda access point the hostname takes the form AccessPointName-AccountId.s3-object-lambda.Region.amazonaws.com.
         * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
         */
        var bucket: String?
        /**
         * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        var expectedBucketOwner: String?
        /**
         * Return the object only if its entity tag (ETag) is the same as the one specified,
         * otherwise return a 412 (precondition failed).
         */
        var ifMatch: String?
        /**
         * Return the object only if it has been modified since the specified time, otherwise
         * return a 304 (not modified).
         */
        var ifModifiedSince: Instant?
        /**
         * Return the object only if its entity tag (ETag) is different from the one specified,
         * otherwise return a 304 (not modified).
         */
        var ifNoneMatch: String?
        /**
         * Return the object only if it has not been modified since the specified time, otherwise
         * return a 412 (precondition failed).
         */
        var ifUnmodifiedSince: Instant?
        /**
         * Key of the object to get.
         */
        var key: String?
        /**
         * Part number of the object being read. This is a positive integer between 1 and 10,000.
         * Effectively performs a 'ranged' GET request for the part specified. Useful for downloading
         * just a part of an object.
         */
        var partNumber: Int
        /**
         * Downloads the specified range bytes of an object. For more information about the HTTP
         * Range header, see <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35">https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.
         * Amazon S3 doesn't support retrieving multiple ranges of data per GET
         * request.
         */
        var range: String?
        /**
         * Confirms that the requester knows that they will be charged for the request. Bucket
         * owners need not specify this parameter in their requests. For information about downloading
         * objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
         * Requestor Pays Buckets in the Amazon S3 User Guide.
         */
        var requestPayer: RequestPayer?
        /**
         * Sets the Cache-Control header of the response.
         */
        var responseCacheControl: String?
        /**
         * Sets the Content-Disposition header of the response
         */
        var responseContentDisposition: String?
        /**
         * Sets the Content-Encoding header of the response.
         */
        var responseContentEncoding: String?
        /**
         * Sets the Content-Language header of the response.
         */
        var responseContentLanguage: String?
        /**
         * Sets the Content-Type header of the response.
         */
        var responseContentType: String?
        /**
         * Sets the Expires header of the response.
         */
        var responseExpires: Instant?
        /**
         * Specifies the algorithm to use to when decrypting the object (for example,
         * AES256).
         */
        var sseCustomerAlgorithm: String?
        /**
         * Specifies the customer-provided encryption key for Amazon S3 used to encrypt the data. This
         * value is used to decrypt the object when recovering it and must match the one used when
         * storing the data. The key must be appropriate for use with the algorithm specified in the
         * x-amz-server-side-encryption-customer-algorithm header.
         */
        var sseCustomerKey: String?
        /**
         * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
         * this header for a message integrity check to ensure that the encryption key was transmitted
         * without error.
         */
        var sseCustomerKeyMd5: String?
        /**
         * VersionId used to reference a specific version of the object.
         */
        var versionId: String?

        fun build(): GetObjectRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var bucket: String? = null
        override var expectedBucketOwner: String? = null
        override var ifMatch: String? = null
        override var ifModifiedSince: Instant? = null
        override var ifNoneMatch: String? = null
        override var ifUnmodifiedSince: Instant? = null
        override var key: String? = null
        override var partNumber: Int = 0
        override var range: String? = null
        override var requestPayer: RequestPayer? = null
        override var responseCacheControl: String? = null
        override var responseContentDisposition: String? = null
        override var responseContentEncoding: String? = null
        override var responseContentLanguage: String? = null
        override var responseContentType: String? = null
        override var responseExpires: Instant? = null
        override var sseCustomerAlgorithm: String? = null
        override var sseCustomerKey: String? = null
        override var sseCustomerKeyMd5: String? = null
        override var versionId: String? = null

        constructor(x: GetObjectRequest) : this() {
            this.bucket = x.bucket
            this.expectedBucketOwner = x.expectedBucketOwner
            this.ifMatch = x.ifMatch
            this.ifModifiedSince = x.ifModifiedSince
            this.ifNoneMatch = x.ifNoneMatch
            this.ifUnmodifiedSince = x.ifUnmodifiedSince
            this.key = x.key
            this.partNumber = x.partNumber
            this.range = x.range
            this.requestPayer = x.requestPayer
            this.responseCacheControl = x.responseCacheControl
            this.responseContentDisposition = x.responseContentDisposition
            this.responseContentEncoding = x.responseContentEncoding
            this.responseContentLanguage = x.responseContentLanguage
            this.responseContentType = x.responseContentType
            this.responseExpires = x.responseExpires
            this.sseCustomerAlgorithm = x.sseCustomerAlgorithm
            this.sseCustomerKey = x.sseCustomerKey
            this.sseCustomerKeyMd5 = x.sseCustomerKeyMd5
            this.versionId = x.versionId
        }

        override fun build(): GetObjectRequest = GetObjectRequest(this)
        override fun bucket(bucket: String): FluentBuilder = apply { this.bucket = bucket }
        override fun expectedBucketOwner(expectedBucketOwner: String): FluentBuilder = apply { this.expectedBucketOwner = expectedBucketOwner }
        override fun ifMatch(ifMatch: String): FluentBuilder = apply { this.ifMatch = ifMatch }
        override fun ifModifiedSince(ifModifiedSince: Instant): FluentBuilder = apply { this.ifModifiedSince = ifModifiedSince }
        override fun ifNoneMatch(ifNoneMatch: String): FluentBuilder = apply { this.ifNoneMatch = ifNoneMatch }
        override fun ifUnmodifiedSince(ifUnmodifiedSince: Instant): FluentBuilder = apply { this.ifUnmodifiedSince = ifUnmodifiedSince }
        override fun key(key: String): FluentBuilder = apply { this.key = key }
        override fun partNumber(partNumber: Int): FluentBuilder = apply { this.partNumber = partNumber }
        override fun range(range: String): FluentBuilder = apply { this.range = range }
        override fun requestPayer(requestPayer: RequestPayer): FluentBuilder = apply { this.requestPayer = requestPayer }
        override fun responseCacheControl(responseCacheControl: String): FluentBuilder = apply { this.responseCacheControl = responseCacheControl }
        override fun responseContentDisposition(responseContentDisposition: String): FluentBuilder = apply { this.responseContentDisposition = responseContentDisposition }
        override fun responseContentEncoding(responseContentEncoding: String): FluentBuilder = apply { this.responseContentEncoding = responseContentEncoding }
        override fun responseContentLanguage(responseContentLanguage: String): FluentBuilder = apply { this.responseContentLanguage = responseContentLanguage }
        override fun responseContentType(responseContentType: String): FluentBuilder = apply { this.responseContentType = responseContentType }
        override fun responseExpires(responseExpires: Instant): FluentBuilder = apply { this.responseExpires = responseExpires }
        override fun sseCustomerAlgorithm(sseCustomerAlgorithm: String): FluentBuilder = apply { this.sseCustomerAlgorithm = sseCustomerAlgorithm }
        override fun sseCustomerKey(sseCustomerKey: String): FluentBuilder = apply { this.sseCustomerKey = sseCustomerKey }
        override fun sseCustomerKeyMd5(sseCustomerKeyMd5: String): FluentBuilder = apply { this.sseCustomerKeyMd5 = sseCustomerKeyMd5 }
        override fun versionId(versionId: String): FluentBuilder = apply { this.versionId = versionId }
    }
}
