// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.transform

import aws.sdk.kotlin.runtime.UnknownServiceErrorException
import aws.sdk.kotlin.runtime.http.withPayload
import aws.sdk.kotlin.services.s3.internal.S3ErrorDetails
import aws.sdk.kotlin.services.s3.internal.parseS3ErrorResponse
import aws.sdk.kotlin.services.s3.internal.setS3ErrorMetadata
import aws.sdk.kotlin.services.s3.model.GetBucketInventoryConfigurationResponse
import aws.sdk.kotlin.services.s3.model.S3Exception
import aws.smithy.kotlin.runtime.client.ExecutionContext
import aws.smithy.kotlin.runtime.http.HttpStatusCode
import aws.smithy.kotlin.runtime.http.isSuccess
import aws.smithy.kotlin.runtime.http.operation.HttpDeserialize
import aws.smithy.kotlin.runtime.http.readAll
import aws.smithy.kotlin.runtime.http.response.HttpResponse
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer


internal class GetBucketInventoryConfigurationOperationDeserializer: HttpDeserialize<GetBucketInventoryConfigurationResponse> {

    override suspend fun deserialize(context: ExecutionContext, response: HttpResponse): GetBucketInventoryConfigurationResponse {
        if (!response.status.isSuccess()) {
            throwGetBucketInventoryConfigurationError(context, response)
        }
        val builder = GetBucketInventoryConfigurationResponse.builder()

        val payload = response.body.readAll()
        if (payload != null) {
            deserializeGetBucketInventoryConfigurationOperationBody(builder, payload)
        }

        return builder.build()
    }
}

private suspend fun deserializeGetBucketInventoryConfigurationOperationBody(builder: GetBucketInventoryConfigurationResponse.DslBuilder, payload: ByteArray) {
    val deserializer = XmlDeserializer(payload)
    builder.inventoryConfiguration = deserializeInventoryConfigurationDocument(deserializer)
}

private suspend fun throwGetBucketInventoryConfigurationError(context: ExecutionContext, response: HttpResponse): kotlin.Nothing {
    val payload = response.body.readAll()
    val wrappedResponse = response.withPayload(payload)

    val errorDetails = try {
        if (payload == null && response.status == HttpStatusCode.NotFound) {
            S3ErrorDetails(code = "NotFound")
        } else {
            checkNotNull(payload){ "unable to parse error from empty response" }
            parseS3ErrorResponse(payload)
        }
    } catch (ex: Exception) {
        throw UnknownServiceErrorException("failed to parse response as restXml error", ex).also {
            setS3ErrorMetadata(it, wrappedResponse, null)
        }
    }

    throw S3Exception(errorDetails.message)
}
