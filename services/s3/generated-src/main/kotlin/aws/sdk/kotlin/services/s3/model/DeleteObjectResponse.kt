// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



class DeleteObjectResponse private constructor(builder: BuilderImpl) {
    /**
     * Specifies whether the versioned object that was permanently deleted was (true) or was
     * not (false) a delete marker.
     */
    val deleteMarker: Boolean = builder.deleteMarker
    /**
     * If present, indicates that the requester was successfully charged for the
     * request.
     */
    val requestCharged: RequestCharged? = builder.requestCharged
    /**
     * Returns the version ID of the delete marker created as a result of the DELETE
     * operation.
     */
    val versionId: String? = builder.versionId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DeleteObjectResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DeleteObjectResponse(")
        append("deleteMarker=$deleteMarker,")
        append("requestCharged=$requestCharged,")
        append("versionId=$versionId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = deleteMarker.hashCode()
        result = 31 * result + (requestCharged?.hashCode() ?: 0)
        result = 31 * result + (versionId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DeleteObjectResponse

        if (deleteMarker != other.deleteMarker) return false
        if (requestCharged != other.requestCharged) return false
        if (versionId != other.versionId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DeleteObjectResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DeleteObjectResponse
        /**
         * Specifies whether the versioned object that was permanently deleted was (true) or was
         * not (false) a delete marker.
         */
        fun deleteMarker(deleteMarker: Boolean): FluentBuilder
        /**
         * If present, indicates that the requester was successfully charged for the
         * request.
         */
        fun requestCharged(requestCharged: RequestCharged): FluentBuilder
        /**
         * Returns the version ID of the delete marker created as a result of the DELETE
         * operation.
         */
        fun versionId(versionId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Specifies whether the versioned object that was permanently deleted was (true) or was
         * not (false) a delete marker.
         */
        var deleteMarker: Boolean
        /**
         * If present, indicates that the requester was successfully charged for the
         * request.
         */
        var requestCharged: RequestCharged?
        /**
         * Returns the version ID of the delete marker created as a result of the DELETE
         * operation.
         */
        var versionId: String?

        fun build(): DeleteObjectResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var deleteMarker: Boolean = false
        override var requestCharged: RequestCharged? = null
        override var versionId: String? = null

        constructor(x: DeleteObjectResponse) : this() {
            this.deleteMarker = x.deleteMarker
            this.requestCharged = x.requestCharged
            this.versionId = x.versionId
        }

        override fun build(): DeleteObjectResponse = DeleteObjectResponse(this)
        override fun deleteMarker(deleteMarker: Boolean): FluentBuilder = apply { this.deleteMarker = deleteMarker }
        override fun requestCharged(requestCharged: RequestCharged): FluentBuilder = apply { this.requestCharged = requestCharged }
        override fun versionId(versionId: String): FluentBuilder = apply { this.versionId = versionId }
    }
}
