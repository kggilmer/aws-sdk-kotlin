// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



class ListMultipartUploadsRequest private constructor(builder: BuilderImpl) {
    /**
     * The name of the bucket to which the multipart upload was initiated.
     * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
     * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
     */
    val bucket: String? = builder.bucket
    /**
     * Character you use to group keys.
     * All keys that contain the same string between the prefix, if specified, and the first
     * occurrence of the delimiter after the prefix are grouped under a single result element,
     * CommonPrefixes. If you don't specify the prefix parameter, then the
     * substring starts at the beginning of the key. The keys that are grouped under
     * CommonPrefixes result element are not returned elsewhere in the
     * response.
     */
    val delimiter: String? = builder.delimiter
    /**
     * Requests Amazon S3 to encode the object keys in the response and specifies the encoding
     * method to use. An object key may contain any Unicode character; however, XML 1.0 parser
     * cannot parse some characters, such as characters with an ASCII value from 0 to 10. For
     * characters that are not supported in XML 1.0, you can add this parameter to request that
     * Amazon S3 encode the keys in the response.
     */
    val encodingType: EncodingType? = builder.encodingType
    /**
     * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     */
    val expectedBucketOwner: String? = builder.expectedBucketOwner
    /**
     * Together with upload-id-marker, this parameter specifies the multipart upload after
     * which listing should begin.
     * If upload-id-marker is not specified, only the keys lexicographically
     * greater than the specified key-marker will be included in the list.
     * If upload-id-marker is specified, any multipart uploads for a key equal to
     * the key-marker might also be included, provided those multipart uploads have
     * upload IDs lexicographically greater than the specified
     * upload-id-marker.
     */
    val keyMarker: String? = builder.keyMarker
    /**
     * Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response
     * body. 1,000 is the maximum number of uploads that can be returned in a response.
     */
    val maxUploads: Int = builder.maxUploads
    /**
     * Lists in-progress uploads only for those keys that begin with the specified prefix. You
     * can use prefixes to separate a bucket into different grouping of keys. (You can think of
     * using prefix to make groups in the same way you'd use a folder in a file system.)
     */
    val prefix: String? = builder.prefix
    /**
     * Together with key-marker, specifies the multipart upload after which listing should
     * begin. If key-marker is not specified, the upload-id-marker parameter is ignored.
     * Otherwise, any multipart uploads for a key equal to the key-marker might be included in the
     * list only if they have an upload ID lexicographically greater than the specified
     * upload-id-marker.
     */
    val uploadIdMarker: String? = builder.uploadIdMarker

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ListMultipartUploadsRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ListMultipartUploadsRequest(")
        append("bucket=$bucket,")
        append("delimiter=$delimiter,")
        append("encodingType=$encodingType,")
        append("expectedBucketOwner=$expectedBucketOwner,")
        append("keyMarker=$keyMarker,")
        append("maxUploads=$maxUploads,")
        append("prefix=$prefix,")
        append("uploadIdMarker=$uploadIdMarker)")
    }

    override fun hashCode(): kotlin.Int {
        var result = bucket?.hashCode() ?: 0
        result = 31 * result + (delimiter?.hashCode() ?: 0)
        result = 31 * result + (encodingType?.hashCode() ?: 0)
        result = 31 * result + (expectedBucketOwner?.hashCode() ?: 0)
        result = 31 * result + (keyMarker?.hashCode() ?: 0)
        result = 31 * result + (maxUploads)
        result = 31 * result + (prefix?.hashCode() ?: 0)
        result = 31 * result + (uploadIdMarker?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ListMultipartUploadsRequest

        if (bucket != other.bucket) return false
        if (delimiter != other.delimiter) return false
        if (encodingType != other.encodingType) return false
        if (expectedBucketOwner != other.expectedBucketOwner) return false
        if (keyMarker != other.keyMarker) return false
        if (maxUploads != other.maxUploads) return false
        if (prefix != other.prefix) return false
        if (uploadIdMarker != other.uploadIdMarker) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ListMultipartUploadsRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ListMultipartUploadsRequest
        /**
         * The name of the bucket to which the multipart upload was initiated.
         * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
         * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
         */
        fun bucket(bucket: String): FluentBuilder
        /**
         * Character you use to group keys.
         * All keys that contain the same string between the prefix, if specified, and the first
         * occurrence of the delimiter after the prefix are grouped under a single result element,
         * CommonPrefixes. If you don't specify the prefix parameter, then the
         * substring starts at the beginning of the key. The keys that are grouped under
         * CommonPrefixes result element are not returned elsewhere in the
         * response.
         */
        fun delimiter(delimiter: String): FluentBuilder
        /**
         * Requests Amazon S3 to encode the object keys in the response and specifies the encoding
         * method to use. An object key may contain any Unicode character; however, XML 1.0 parser
         * cannot parse some characters, such as characters with an ASCII value from 0 to 10. For
         * characters that are not supported in XML 1.0, you can add this parameter to request that
         * Amazon S3 encode the keys in the response.
         */
        fun encodingType(encodingType: EncodingType): FluentBuilder
        /**
         * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        fun expectedBucketOwner(expectedBucketOwner: String): FluentBuilder
        /**
         * Together with upload-id-marker, this parameter specifies the multipart upload after
         * which listing should begin.
         * If upload-id-marker is not specified, only the keys lexicographically
         * greater than the specified key-marker will be included in the list.
         * If upload-id-marker is specified, any multipart uploads for a key equal to
         * the key-marker might also be included, provided those multipart uploads have
         * upload IDs lexicographically greater than the specified
         * upload-id-marker.
         */
        fun keyMarker(keyMarker: String): FluentBuilder
        /**
         * Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response
         * body. 1,000 is the maximum number of uploads that can be returned in a response.
         */
        fun maxUploads(maxUploads: Int): FluentBuilder
        /**
         * Lists in-progress uploads only for those keys that begin with the specified prefix. You
         * can use prefixes to separate a bucket into different grouping of keys. (You can think of
         * using prefix to make groups in the same way you'd use a folder in a file system.)
         */
        fun prefix(prefix: String): FluentBuilder
        /**
         * Together with key-marker, specifies the multipart upload after which listing should
         * begin. If key-marker is not specified, the upload-id-marker parameter is ignored.
         * Otherwise, any multipart uploads for a key equal to the key-marker might be included in the
         * list only if they have an upload ID lexicographically greater than the specified
         * upload-id-marker.
         */
        fun uploadIdMarker(uploadIdMarker: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The name of the bucket to which the multipart upload was initiated.
         * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
         * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
         */
        var bucket: String?
        /**
         * Character you use to group keys.
         * All keys that contain the same string between the prefix, if specified, and the first
         * occurrence of the delimiter after the prefix are grouped under a single result element,
         * CommonPrefixes. If you don't specify the prefix parameter, then the
         * substring starts at the beginning of the key. The keys that are grouped under
         * CommonPrefixes result element are not returned elsewhere in the
         * response.
         */
        var delimiter: String?
        /**
         * Requests Amazon S3 to encode the object keys in the response and specifies the encoding
         * method to use. An object key may contain any Unicode character; however, XML 1.0 parser
         * cannot parse some characters, such as characters with an ASCII value from 0 to 10. For
         * characters that are not supported in XML 1.0, you can add this parameter to request that
         * Amazon S3 encode the keys in the response.
         */
        var encodingType: EncodingType?
        /**
         * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        var expectedBucketOwner: String?
        /**
         * Together with upload-id-marker, this parameter specifies the multipart upload after
         * which listing should begin.
         * If upload-id-marker is not specified, only the keys lexicographically
         * greater than the specified key-marker will be included in the list.
         * If upload-id-marker is specified, any multipart uploads for a key equal to
         * the key-marker might also be included, provided those multipart uploads have
         * upload IDs lexicographically greater than the specified
         * upload-id-marker.
         */
        var keyMarker: String?
        /**
         * Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response
         * body. 1,000 is the maximum number of uploads that can be returned in a response.
         */
        var maxUploads: Int
        /**
         * Lists in-progress uploads only for those keys that begin with the specified prefix. You
         * can use prefixes to separate a bucket into different grouping of keys. (You can think of
         * using prefix to make groups in the same way you'd use a folder in a file system.)
         */
        var prefix: String?
        /**
         * Together with key-marker, specifies the multipart upload after which listing should
         * begin. If key-marker is not specified, the upload-id-marker parameter is ignored.
         * Otherwise, any multipart uploads for a key equal to the key-marker might be included in the
         * list only if they have an upload ID lexicographically greater than the specified
         * upload-id-marker.
         */
        var uploadIdMarker: String?

        fun build(): ListMultipartUploadsRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var bucket: String? = null
        override var delimiter: String? = null
        override var encodingType: EncodingType? = null
        override var expectedBucketOwner: String? = null
        override var keyMarker: String? = null
        override var maxUploads: Int = 0
        override var prefix: String? = null
        override var uploadIdMarker: String? = null

        constructor(x: ListMultipartUploadsRequest) : this() {
            this.bucket = x.bucket
            this.delimiter = x.delimiter
            this.encodingType = x.encodingType
            this.expectedBucketOwner = x.expectedBucketOwner
            this.keyMarker = x.keyMarker
            this.maxUploads = x.maxUploads
            this.prefix = x.prefix
            this.uploadIdMarker = x.uploadIdMarker
        }

        override fun build(): ListMultipartUploadsRequest = ListMultipartUploadsRequest(this)
        override fun bucket(bucket: String): FluentBuilder = apply { this.bucket = bucket }
        override fun delimiter(delimiter: String): FluentBuilder = apply { this.delimiter = delimiter }
        override fun encodingType(encodingType: EncodingType): FluentBuilder = apply { this.encodingType = encodingType }
        override fun expectedBucketOwner(expectedBucketOwner: String): FluentBuilder = apply { this.expectedBucketOwner = expectedBucketOwner }
        override fun keyMarker(keyMarker: String): FluentBuilder = apply { this.keyMarker = keyMarker }
        override fun maxUploads(maxUploads: Int): FluentBuilder = apply { this.maxUploads = maxUploads }
        override fun prefix(prefix: String): FluentBuilder = apply { this.prefix = prefix }
        override fun uploadIdMarker(uploadIdMarker: String): FluentBuilder = apply { this.uploadIdMarker = uploadIdMarker }
    }
}
