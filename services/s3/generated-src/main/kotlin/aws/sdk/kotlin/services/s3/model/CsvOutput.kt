// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Describes how uncompressed comma-separated values (CSV)-formatted results are
 * formatted.
 */
class CsvOutput private constructor(builder: BuilderImpl) {
    /**
     * The value used to separate individual fields in a record. You can specify an arbitrary
     * delimiter.
     */
    val fieldDelimiter: String? = builder.fieldDelimiter
    /**
     * A single character used for escaping when the field delimiter is part of the value. For
     * example, if the value is a, b, Amazon S3 wraps this field value in quotation marks,
     * as follows: " a , b ".
     */
    val quoteCharacter: String? = builder.quoteCharacter
    /**
     * The single character used for escaping the quote character inside an already escaped
     * value.
     */
    val quoteEscapeCharacter: String? = builder.quoteEscapeCharacter
    /**
     * Indicates whether to use quotation marks around output fields.
     * ALWAYS: Always use quotation marks for output fields.
     * ASNEEDED: Use quotation marks for output fields when needed.
     */
    val quoteFields: QuoteFields? = builder.quoteFields
    /**
     * A single character used to separate individual records in the output. Instead of the
     * default value, you can specify an arbitrary delimiter.
     */
    val recordDelimiter: String? = builder.recordDelimiter

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CsvOutput = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CsvOutput(")
        append("fieldDelimiter=$fieldDelimiter,")
        append("quoteCharacter=$quoteCharacter,")
        append("quoteEscapeCharacter=$quoteEscapeCharacter,")
        append("quoteFields=$quoteFields,")
        append("recordDelimiter=$recordDelimiter)")
    }

    override fun hashCode(): kotlin.Int {
        var result = fieldDelimiter?.hashCode() ?: 0
        result = 31 * result + (quoteCharacter?.hashCode() ?: 0)
        result = 31 * result + (quoteEscapeCharacter?.hashCode() ?: 0)
        result = 31 * result + (quoteFields?.hashCode() ?: 0)
        result = 31 * result + (recordDelimiter?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CsvOutput

        if (fieldDelimiter != other.fieldDelimiter) return false
        if (quoteCharacter != other.quoteCharacter) return false
        if (quoteEscapeCharacter != other.quoteEscapeCharacter) return false
        if (quoteFields != other.quoteFields) return false
        if (recordDelimiter != other.recordDelimiter) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CsvOutput = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CsvOutput
        /**
         * The value used to separate individual fields in a record. You can specify an arbitrary
         * delimiter.
         */
        fun fieldDelimiter(fieldDelimiter: String): FluentBuilder
        /**
         * A single character used for escaping when the field delimiter is part of the value. For
         * example, if the value is a, b, Amazon S3 wraps this field value in quotation marks,
         * as follows: " a , b ".
         */
        fun quoteCharacter(quoteCharacter: String): FluentBuilder
        /**
         * The single character used for escaping the quote character inside an already escaped
         * value.
         */
        fun quoteEscapeCharacter(quoteEscapeCharacter: String): FluentBuilder
        /**
         * Indicates whether to use quotation marks around output fields.
         * ALWAYS: Always use quotation marks for output fields.
         * ASNEEDED: Use quotation marks for output fields when needed.
         */
        fun quoteFields(quoteFields: QuoteFields): FluentBuilder
        /**
         * A single character used to separate individual records in the output. Instead of the
         * default value, you can specify an arbitrary delimiter.
         */
        fun recordDelimiter(recordDelimiter: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The value used to separate individual fields in a record. You can specify an arbitrary
         * delimiter.
         */
        var fieldDelimiter: String?
        /**
         * A single character used for escaping when the field delimiter is part of the value. For
         * example, if the value is a, b, Amazon S3 wraps this field value in quotation marks,
         * as follows: " a , b ".
         */
        var quoteCharacter: String?
        /**
         * The single character used for escaping the quote character inside an already escaped
         * value.
         */
        var quoteEscapeCharacter: String?
        /**
         * Indicates whether to use quotation marks around output fields.
         * ALWAYS: Always use quotation marks for output fields.
         * ASNEEDED: Use quotation marks for output fields when needed.
         */
        var quoteFields: QuoteFields?
        /**
         * A single character used to separate individual records in the output. Instead of the
         * default value, you can specify an arbitrary delimiter.
         */
        var recordDelimiter: String?

        fun build(): CsvOutput
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var fieldDelimiter: String? = null
        override var quoteCharacter: String? = null
        override var quoteEscapeCharacter: String? = null
        override var quoteFields: QuoteFields? = null
        override var recordDelimiter: String? = null

        constructor(x: CsvOutput) : this() {
            this.fieldDelimiter = x.fieldDelimiter
            this.quoteCharacter = x.quoteCharacter
            this.quoteEscapeCharacter = x.quoteEscapeCharacter
            this.quoteFields = x.quoteFields
            this.recordDelimiter = x.recordDelimiter
        }

        override fun build(): CsvOutput = CsvOutput(this)
        override fun fieldDelimiter(fieldDelimiter: String): FluentBuilder = apply { this.fieldDelimiter = fieldDelimiter }
        override fun quoteCharacter(quoteCharacter: String): FluentBuilder = apply { this.quoteCharacter = quoteCharacter }
        override fun quoteEscapeCharacter(quoteEscapeCharacter: String): FluentBuilder = apply { this.quoteEscapeCharacter = quoteEscapeCharacter }
        override fun quoteFields(quoteFields: QuoteFields): FluentBuilder = apply { this.quoteFields = quoteFields }
        override fun recordDelimiter(recordDelimiter: String): FluentBuilder = apply { this.recordDelimiter = recordDelimiter }
    }
}
