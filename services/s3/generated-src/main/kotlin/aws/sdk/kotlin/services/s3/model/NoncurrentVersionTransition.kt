// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Container for the transition rule that describes when noncurrent objects transition to
 * the STANDARD_IA, ONEZONE_IA, INTELLIGENT_TIERING,
 * GLACIER, or DEEP_ARCHIVE storage class. If your bucket is
 * versioning-enabled (or versioning is suspended), you can set this action to request that
 * Amazon S3 transition noncurrent object versions to the STANDARD_IA,
 * ONEZONE_IA, INTELLIGENT_TIERING, GLACIER, or
 * DEEP_ARCHIVE storage class at a specific period in the object's
 * lifetime.
 */
class NoncurrentVersionTransition private constructor(builder: BuilderImpl) {
    /**
     * Specifies the number of days an object is noncurrent before Amazon S3 can perform the
     * associated action. For information about the noncurrent days calculations, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations">How
     * Amazon S3 Calculates How Long an Object Has Been Noncurrent in the
     * Amazon S3 User Guide.
     */
    val noncurrentDays: Int = builder.noncurrentDays
    /**
     * The class of storage used to store the object.
     */
    val storageClass: TransitionStorageClass? = builder.storageClass

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): NoncurrentVersionTransition = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("NoncurrentVersionTransition(")
        append("noncurrentDays=$noncurrentDays,")
        append("storageClass=$storageClass)")
    }

    override fun hashCode(): kotlin.Int {
        var result = noncurrentDays
        result = 31 * result + (storageClass?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as NoncurrentVersionTransition

        if (noncurrentDays != other.noncurrentDays) return false
        if (storageClass != other.storageClass) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): NoncurrentVersionTransition = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): NoncurrentVersionTransition
        /**
         * Specifies the number of days an object is noncurrent before Amazon S3 can perform the
         * associated action. For information about the noncurrent days calculations, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations">How
         * Amazon S3 Calculates How Long an Object Has Been Noncurrent in the
         * Amazon S3 User Guide.
         */
        fun noncurrentDays(noncurrentDays: Int): FluentBuilder
        /**
         * The class of storage used to store the object.
         */
        fun storageClass(storageClass: TransitionStorageClass): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Specifies the number of days an object is noncurrent before Amazon S3 can perform the
         * associated action. For information about the noncurrent days calculations, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations">How
         * Amazon S3 Calculates How Long an Object Has Been Noncurrent in the
         * Amazon S3 User Guide.
         */
        var noncurrentDays: Int
        /**
         * The class of storage used to store the object.
         */
        var storageClass: TransitionStorageClass?

        fun build(): NoncurrentVersionTransition
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var noncurrentDays: Int = 0
        override var storageClass: TransitionStorageClass? = null

        constructor(x: NoncurrentVersionTransition) : this() {
            this.noncurrentDays = x.noncurrentDays
            this.storageClass = x.storageClass
        }

        override fun build(): NoncurrentVersionTransition = NoncurrentVersionTransition(this)
        override fun noncurrentDays(noncurrentDays: Int): FluentBuilder = apply { this.noncurrentDays = noncurrentDays }
        override fun storageClass(storageClass: TransitionStorageClass): FluentBuilder = apply { this.storageClass = storageClass }
    }
}
