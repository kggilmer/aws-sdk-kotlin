// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



class ListObjectsV2Response private constructor(builder: BuilderImpl) {
    /**
     * All of the keys (up to 1,000) rolled up into a common prefix count as a single return when calculating
     * the number of returns.
     * A response can contain CommonPrefixes only if you specify a
     * delimiter.
     * CommonPrefixes contains all (if there are any) keys between
     * Prefix and the next occurrence of the string specified by a
     * delimiter.
     * CommonPrefixes lists keys that act like subdirectories in the directory
     * specified by Prefix.
     * For example, if the prefix is notes/ and the delimiter is a slash
     * (/) as in notes/summer/july, the common prefix is
     * notes/summer/. All of the keys that roll up into a common prefix count as a
     * single return when calculating the number of returns.
     */
    val commonPrefixes: List<CommonPrefix>? = builder.commonPrefixes
    /**
     * Metadata about each object returned.
     */
    val contents: List<Object>? = builder.contents
    /**
     * If ContinuationToken was sent with the request, it is included in the response.
     */
    val continuationToken: String? = builder.continuationToken
    /**
     * Causes keys that contain the same string between the prefix and the first occurrence of
     * the delimiter to be rolled up into a single result element in the CommonPrefixes
     * collection. These rolled-up keys are not returned elsewhere in the response. Each rolled-up
     * result counts as only one return against the MaxKeys value.
     */
    val delimiter: String? = builder.delimiter
    /**
     * Encoding type used by Amazon S3 to encode object key names in the XML response.
     * If you specify the encoding-type request parameter, Amazon S3 includes this element in the
     * response, and returns encoded key name values in the following response elements:
     * Delimiter, Prefix, Key, and StartAfter.
     */
    val encodingType: EncodingType? = builder.encodingType
    /**
     * Set to false if all of the results were returned. Set to true if more keys are available
     * to return. If the number of results exceeds that specified by MaxKeys, all of the results
     * might not be returned.
     */
    val isTruncated: Boolean = builder.isTruncated
    /**
     * KeyCount is the number of keys returned with this request. KeyCount will always be less
     * than or equals to MaxKeys field. Say you ask for 50 keys, your result will include less than
     * equals 50 keys
     */
    val keyCount: Int = builder.keyCount
    /**
     * Sets the maximum number of keys returned in the response. By default the action returns up
     * to 1,000 key names. The response might contain fewer keys but will never contain
     * more.
     */
    val maxKeys: Int = builder.maxKeys
    /**
     * The bucket name.
     * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
     * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
     */
    val name: String? = builder.name
    /**
     * NextContinuationToken is sent when isTruncated is true, which
     * means there are more keys in the bucket that can be listed. The next list requests to Amazon S3
     * can be continued with this NextContinuationToken.
     * NextContinuationToken is obfuscated and is not a real key
     */
    val nextContinuationToken: String? = builder.nextContinuationToken
    /**
     * Keys that begin with the indicated prefix.
     */
    val prefix: String? = builder.prefix
    /**
     * If StartAfter was sent with the request, it is included in the response.
     */
    val startAfter: String? = builder.startAfter

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ListObjectsV2Response = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ListObjectsV2Response(")
        append("commonPrefixes=$commonPrefixes,")
        append("contents=$contents,")
        append("continuationToken=$continuationToken,")
        append("delimiter=$delimiter,")
        append("encodingType=$encodingType,")
        append("isTruncated=$isTruncated,")
        append("keyCount=$keyCount,")
        append("maxKeys=$maxKeys,")
        append("name=$name,")
        append("nextContinuationToken=$nextContinuationToken,")
        append("prefix=$prefix,")
        append("startAfter=$startAfter)")
    }

    override fun hashCode(): kotlin.Int {
        var result = commonPrefixes?.hashCode() ?: 0
        result = 31 * result + (contents?.hashCode() ?: 0)
        result = 31 * result + (continuationToken?.hashCode() ?: 0)
        result = 31 * result + (delimiter?.hashCode() ?: 0)
        result = 31 * result + (encodingType?.hashCode() ?: 0)
        result = 31 * result + (isTruncated.hashCode())
        result = 31 * result + (keyCount)
        result = 31 * result + (maxKeys)
        result = 31 * result + (name?.hashCode() ?: 0)
        result = 31 * result + (nextContinuationToken?.hashCode() ?: 0)
        result = 31 * result + (prefix?.hashCode() ?: 0)
        result = 31 * result + (startAfter?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ListObjectsV2Response

        if (commonPrefixes != other.commonPrefixes) return false
        if (contents != other.contents) return false
        if (continuationToken != other.continuationToken) return false
        if (delimiter != other.delimiter) return false
        if (encodingType != other.encodingType) return false
        if (isTruncated != other.isTruncated) return false
        if (keyCount != other.keyCount) return false
        if (maxKeys != other.maxKeys) return false
        if (name != other.name) return false
        if (nextContinuationToken != other.nextContinuationToken) return false
        if (prefix != other.prefix) return false
        if (startAfter != other.startAfter) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ListObjectsV2Response = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ListObjectsV2Response
        /**
         * All of the keys (up to 1,000) rolled up into a common prefix count as a single return when calculating
         * the number of returns.
         * A response can contain CommonPrefixes only if you specify a
         * delimiter.
         * CommonPrefixes contains all (if there are any) keys between
         * Prefix and the next occurrence of the string specified by a
         * delimiter.
         * CommonPrefixes lists keys that act like subdirectories in the directory
         * specified by Prefix.
         * For example, if the prefix is notes/ and the delimiter is a slash
         * (/) as in notes/summer/july, the common prefix is
         * notes/summer/. All of the keys that roll up into a common prefix count as a
         * single return when calculating the number of returns.
         */
        fun commonPrefixes(commonPrefixes: List<CommonPrefix>): FluentBuilder
        /**
         * Metadata about each object returned.
         */
        fun contents(contents: List<Object>): FluentBuilder
        /**
         * If ContinuationToken was sent with the request, it is included in the response.
         */
        fun continuationToken(continuationToken: String): FluentBuilder
        /**
         * Causes keys that contain the same string between the prefix and the first occurrence of
         * the delimiter to be rolled up into a single result element in the CommonPrefixes
         * collection. These rolled-up keys are not returned elsewhere in the response. Each rolled-up
         * result counts as only one return against the MaxKeys value.
         */
        fun delimiter(delimiter: String): FluentBuilder
        /**
         * Encoding type used by Amazon S3 to encode object key names in the XML response.
         * If you specify the encoding-type request parameter, Amazon S3 includes this element in the
         * response, and returns encoded key name values in the following response elements:
         * Delimiter, Prefix, Key, and StartAfter.
         */
        fun encodingType(encodingType: EncodingType): FluentBuilder
        /**
         * Set to false if all of the results were returned. Set to true if more keys are available
         * to return. If the number of results exceeds that specified by MaxKeys, all of the results
         * might not be returned.
         */
        fun isTruncated(isTruncated: Boolean): FluentBuilder
        /**
         * KeyCount is the number of keys returned with this request. KeyCount will always be less
         * than or equals to MaxKeys field. Say you ask for 50 keys, your result will include less than
         * equals 50 keys
         */
        fun keyCount(keyCount: Int): FluentBuilder
        /**
         * Sets the maximum number of keys returned in the response. By default the action returns up
         * to 1,000 key names. The response might contain fewer keys but will never contain
         * more.
         */
        fun maxKeys(maxKeys: Int): FluentBuilder
        /**
         * The bucket name.
         * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
         * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
         */
        fun name(name: String): FluentBuilder
        /**
         * NextContinuationToken is sent when isTruncated is true, which
         * means there are more keys in the bucket that can be listed. The next list requests to Amazon S3
         * can be continued with this NextContinuationToken.
         * NextContinuationToken is obfuscated and is not a real key
         */
        fun nextContinuationToken(nextContinuationToken: String): FluentBuilder
        /**
         * Keys that begin with the indicated prefix.
         */
        fun prefix(prefix: String): FluentBuilder
        /**
         * If StartAfter was sent with the request, it is included in the response.
         */
        fun startAfter(startAfter: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * All of the keys (up to 1,000) rolled up into a common prefix count as a single return when calculating
         * the number of returns.
         * A response can contain CommonPrefixes only if you specify a
         * delimiter.
         * CommonPrefixes contains all (if there are any) keys between
         * Prefix and the next occurrence of the string specified by a
         * delimiter.
         * CommonPrefixes lists keys that act like subdirectories in the directory
         * specified by Prefix.
         * For example, if the prefix is notes/ and the delimiter is a slash
         * (/) as in notes/summer/july, the common prefix is
         * notes/summer/. All of the keys that roll up into a common prefix count as a
         * single return when calculating the number of returns.
         */
        var commonPrefixes: List<CommonPrefix>?
        /**
         * Metadata about each object returned.
         */
        var contents: List<Object>?
        /**
         * If ContinuationToken was sent with the request, it is included in the response.
         */
        var continuationToken: String?
        /**
         * Causes keys that contain the same string between the prefix and the first occurrence of
         * the delimiter to be rolled up into a single result element in the CommonPrefixes
         * collection. These rolled-up keys are not returned elsewhere in the response. Each rolled-up
         * result counts as only one return against the MaxKeys value.
         */
        var delimiter: String?
        /**
         * Encoding type used by Amazon S3 to encode object key names in the XML response.
         * If you specify the encoding-type request parameter, Amazon S3 includes this element in the
         * response, and returns encoded key name values in the following response elements:
         * Delimiter, Prefix, Key, and StartAfter.
         */
        var encodingType: EncodingType?
        /**
         * Set to false if all of the results were returned. Set to true if more keys are available
         * to return. If the number of results exceeds that specified by MaxKeys, all of the results
         * might not be returned.
         */
        var isTruncated: Boolean
        /**
         * KeyCount is the number of keys returned with this request. KeyCount will always be less
         * than or equals to MaxKeys field. Say you ask for 50 keys, your result will include less than
         * equals 50 keys
         */
        var keyCount: Int
        /**
         * Sets the maximum number of keys returned in the response. By default the action returns up
         * to 1,000 key names. The response might contain fewer keys but will never contain
         * more.
         */
        var maxKeys: Int
        /**
         * The bucket name.
         * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
         * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
         */
        var name: String?
        /**
         * NextContinuationToken is sent when isTruncated is true, which
         * means there are more keys in the bucket that can be listed. The next list requests to Amazon S3
         * can be continued with this NextContinuationToken.
         * NextContinuationToken is obfuscated and is not a real key
         */
        var nextContinuationToken: String?
        /**
         * Keys that begin with the indicated prefix.
         */
        var prefix: String?
        /**
         * If StartAfter was sent with the request, it is included in the response.
         */
        var startAfter: String?

        fun build(): ListObjectsV2Response
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var commonPrefixes: List<CommonPrefix>? = null
        override var contents: List<Object>? = null
        override var continuationToken: String? = null
        override var delimiter: String? = null
        override var encodingType: EncodingType? = null
        override var isTruncated: Boolean = false
        override var keyCount: Int = 0
        override var maxKeys: Int = 0
        override var name: String? = null
        override var nextContinuationToken: String? = null
        override var prefix: String? = null
        override var startAfter: String? = null

        constructor(x: ListObjectsV2Response) : this() {
            this.commonPrefixes = x.commonPrefixes
            this.contents = x.contents
            this.continuationToken = x.continuationToken
            this.delimiter = x.delimiter
            this.encodingType = x.encodingType
            this.isTruncated = x.isTruncated
            this.keyCount = x.keyCount
            this.maxKeys = x.maxKeys
            this.name = x.name
            this.nextContinuationToken = x.nextContinuationToken
            this.prefix = x.prefix
            this.startAfter = x.startAfter
        }

        override fun build(): ListObjectsV2Response = ListObjectsV2Response(this)
        override fun commonPrefixes(commonPrefixes: List<CommonPrefix>): FluentBuilder = apply { this.commonPrefixes = commonPrefixes }
        override fun contents(contents: List<Object>): FluentBuilder = apply { this.contents = contents }
        override fun continuationToken(continuationToken: String): FluentBuilder = apply { this.continuationToken = continuationToken }
        override fun delimiter(delimiter: String): FluentBuilder = apply { this.delimiter = delimiter }
        override fun encodingType(encodingType: EncodingType): FluentBuilder = apply { this.encodingType = encodingType }
        override fun isTruncated(isTruncated: Boolean): FluentBuilder = apply { this.isTruncated = isTruncated }
        override fun keyCount(keyCount: Int): FluentBuilder = apply { this.keyCount = keyCount }
        override fun maxKeys(maxKeys: Int): FluentBuilder = apply { this.maxKeys = maxKeys }
        override fun name(name: String): FluentBuilder = apply { this.name = name }
        override fun nextContinuationToken(nextContinuationToken: String): FluentBuilder = apply { this.nextContinuationToken = nextContinuationToken }
        override fun prefix(prefix: String): FluentBuilder = apply { this.prefix = prefix }
        override fun startAfter(startAfter: String): FluentBuilder = apply { this.startAfter = startAfter }
    }
}
