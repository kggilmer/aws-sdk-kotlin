// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Specifies the byte range of the object to get the records from. A record is processed
 * when its first byte is contained by the range. This parameter is optional, but when
 * specified, it must not be empty. See RFC 2616, Section 14.35.1 about how to specify the
 * start and end of the range.
 */
class ScanRange private constructor(builder: BuilderImpl) {
    /**
     * Specifies the end of the byte range. This parameter is optional. Valid values:
     * non-negative integers. The default value is one less than the size of the object being
     * queried. If only the End parameter is supplied, it is interpreted to mean scan the last N
     * bytes of the file. For example,
     * <scanrange><end>50</end></scanrange> means scan the
     * last 50 bytes.
     */
    val end: Long = builder.end
    /**
     * Specifies the start of the byte range. This parameter is optional. Valid values:
     * non-negative integers. The default value is 0. If only start is supplied, it means scan
     * from that point to the end of the file.For example;
     * <scanrange><start>50</start></scanrange> means scan
     * from byte 50 until the end of the file.
     */
    val start: Long = builder.start

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ScanRange = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ScanRange(")
        append("end=$end,")
        append("start=$start)")
    }

    override fun hashCode(): kotlin.Int {
        var result = end.hashCode()
        result = 31 * result + (start.hashCode())
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ScanRange

        if (end != other.end) return false
        if (start != other.start) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ScanRange = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ScanRange
        /**
         * Specifies the end of the byte range. This parameter is optional. Valid values:
         * non-negative integers. The default value is one less than the size of the object being
         * queried. If only the End parameter is supplied, it is interpreted to mean scan the last N
         * bytes of the file. For example,
         * <scanrange><end>50</end></scanrange> means scan the
         * last 50 bytes.
         */
        fun end(end: Long): FluentBuilder
        /**
         * Specifies the start of the byte range. This parameter is optional. Valid values:
         * non-negative integers. The default value is 0. If only start is supplied, it means scan
         * from that point to the end of the file.For example;
         * <scanrange><start>50</start></scanrange> means scan
         * from byte 50 until the end of the file.
         */
        fun start(start: Long): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Specifies the end of the byte range. This parameter is optional. Valid values:
         * non-negative integers. The default value is one less than the size of the object being
         * queried. If only the End parameter is supplied, it is interpreted to mean scan the last N
         * bytes of the file. For example,
         * <scanrange><end>50</end></scanrange> means scan the
         * last 50 bytes.
         */
        var end: Long
        /**
         * Specifies the start of the byte range. This parameter is optional. Valid values:
         * non-negative integers. The default value is 0. If only start is supplied, it means scan
         * from that point to the end of the file.For example;
         * <scanrange><start>50</start></scanrange> means scan
         * from byte 50 until the end of the file.
         */
        var start: Long

        fun build(): ScanRange
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var end: Long = 0L
        override var start: Long = 0L

        constructor(x: ScanRange) : this() {
            this.end = x.end
            this.start = x.start
        }

        override fun build(): ScanRange = ScanRange(this)
        override fun end(end: Long): FluentBuilder = apply { this.end = end }
        override fun start(start: Long): FluentBuilder = apply { this.start = start }
    }
}
