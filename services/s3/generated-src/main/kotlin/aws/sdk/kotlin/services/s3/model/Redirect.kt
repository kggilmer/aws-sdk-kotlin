// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Specifies how requests are redirected. In the event of an error, you can specify a
 * different error code to return.
 */
class Redirect private constructor(builder: BuilderImpl) {
    /**
     * The host name to use in the redirect request.
     */
    val hostName: String? = builder.hostName
    /**
     * The HTTP redirect code to use on the response. Not required if one of the siblings is
     * present.
     */
    val httpRedirectCode: String? = builder.httpRedirectCode
    /**
     * Protocol to use when redirecting requests. The default is the protocol that is used in
     * the original request.
     */
    val protocol: Protocol? = builder.protocol
    /**
     * The object key prefix to use in the redirect request. For example, to redirect requests
     * for all pages with prefix docs/ (objects in the docs/ folder) to
     * documents/, you can set a condition block with KeyPrefixEquals
     * set to docs/ and in the Redirect set ReplaceKeyPrefixWith to
     * /documents. Not required if one of the siblings is present. Can be present
     * only if ReplaceKeyWith is not provided.
     * Replacement must be made for object keys containing special characters (such as carriage returns) when using
     * XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
     * XML related object key constraints.
     */
    val replaceKeyPrefixWith: String? = builder.replaceKeyPrefixWith
    /**
     * The specific object key to use in the redirect request. For example, redirect request to
     * error.html. Not required if one of the siblings is present. Can be present
     * only if ReplaceKeyPrefixWith is not provided.
     * Replacement must be made for object keys containing special characters (such as carriage returns) when using
     * XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
     * XML related object key constraints.
     */
    val replaceKeyWith: String? = builder.replaceKeyWith

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): Redirect = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("Redirect(")
        append("hostName=$hostName,")
        append("httpRedirectCode=$httpRedirectCode,")
        append("protocol=$protocol,")
        append("replaceKeyPrefixWith=$replaceKeyPrefixWith,")
        append("replaceKeyWith=$replaceKeyWith)")
    }

    override fun hashCode(): kotlin.Int {
        var result = hostName?.hashCode() ?: 0
        result = 31 * result + (httpRedirectCode?.hashCode() ?: 0)
        result = 31 * result + (protocol?.hashCode() ?: 0)
        result = 31 * result + (replaceKeyPrefixWith?.hashCode() ?: 0)
        result = 31 * result + (replaceKeyWith?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Redirect

        if (hostName != other.hostName) return false
        if (httpRedirectCode != other.httpRedirectCode) return false
        if (protocol != other.protocol) return false
        if (replaceKeyPrefixWith != other.replaceKeyPrefixWith) return false
        if (replaceKeyWith != other.replaceKeyWith) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): Redirect = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): Redirect
        /**
         * The host name to use in the redirect request.
         */
        fun hostName(hostName: String): FluentBuilder
        /**
         * The HTTP redirect code to use on the response. Not required if one of the siblings is
         * present.
         */
        fun httpRedirectCode(httpRedirectCode: String): FluentBuilder
        /**
         * Protocol to use when redirecting requests. The default is the protocol that is used in
         * the original request.
         */
        fun protocol(protocol: Protocol): FluentBuilder
        /**
         * The object key prefix to use in the redirect request. For example, to redirect requests
         * for all pages with prefix docs/ (objects in the docs/ folder) to
         * documents/, you can set a condition block with KeyPrefixEquals
         * set to docs/ and in the Redirect set ReplaceKeyPrefixWith to
         * /documents. Not required if one of the siblings is present. Can be present
         * only if ReplaceKeyWith is not provided.
         * Replacement must be made for object keys containing special characters (such as carriage returns) when using
         * XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
         * XML related object key constraints.
         */
        fun replaceKeyPrefixWith(replaceKeyPrefixWith: String): FluentBuilder
        /**
         * The specific object key to use in the redirect request. For example, redirect request to
         * error.html. Not required if one of the siblings is present. Can be present
         * only if ReplaceKeyPrefixWith is not provided.
         * Replacement must be made for object keys containing special characters (such as carriage returns) when using
         * XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
         * XML related object key constraints.
         */
        fun replaceKeyWith(replaceKeyWith: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The host name to use in the redirect request.
         */
        var hostName: String?
        /**
         * The HTTP redirect code to use on the response. Not required if one of the siblings is
         * present.
         */
        var httpRedirectCode: String?
        /**
         * Protocol to use when redirecting requests. The default is the protocol that is used in
         * the original request.
         */
        var protocol: Protocol?
        /**
         * The object key prefix to use in the redirect request. For example, to redirect requests
         * for all pages with prefix docs/ (objects in the docs/ folder) to
         * documents/, you can set a condition block with KeyPrefixEquals
         * set to docs/ and in the Redirect set ReplaceKeyPrefixWith to
         * /documents. Not required if one of the siblings is present. Can be present
         * only if ReplaceKeyWith is not provided.
         * Replacement must be made for object keys containing special characters (such as carriage returns) when using
         * XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
         * XML related object key constraints.
         */
        var replaceKeyPrefixWith: String?
        /**
         * The specific object key to use in the redirect request. For example, redirect request to
         * error.html. Not required if one of the siblings is present. Can be present
         * only if ReplaceKeyPrefixWith is not provided.
         * Replacement must be made for object keys containing special characters (such as carriage returns) when using
         * XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
         * XML related object key constraints.
         */
        var replaceKeyWith: String?

        fun build(): Redirect
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var hostName: String? = null
        override var httpRedirectCode: String? = null
        override var protocol: Protocol? = null
        override var replaceKeyPrefixWith: String? = null
        override var replaceKeyWith: String? = null

        constructor(x: Redirect) : this() {
            this.hostName = x.hostName
            this.httpRedirectCode = x.httpRedirectCode
            this.protocol = x.protocol
            this.replaceKeyPrefixWith = x.replaceKeyPrefixWith
            this.replaceKeyWith = x.replaceKeyWith
        }

        override fun build(): Redirect = Redirect(this)
        override fun hostName(hostName: String): FluentBuilder = apply { this.hostName = hostName }
        override fun httpRedirectCode(httpRedirectCode: String): FluentBuilder = apply { this.httpRedirectCode = httpRedirectCode }
        override fun protocol(protocol: Protocol): FluentBuilder = apply { this.protocol = protocol }
        override fun replaceKeyPrefixWith(replaceKeyPrefixWith: String): FluentBuilder = apply { this.replaceKeyPrefixWith = replaceKeyPrefixWith }
        override fun replaceKeyWith(replaceKeyWith: String): FluentBuilder = apply { this.replaceKeyWith = replaceKeyWith }
    }
}
