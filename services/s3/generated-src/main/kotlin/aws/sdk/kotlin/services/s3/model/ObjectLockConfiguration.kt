// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * The container element for Object Lock configuration parameters.
 */
class ObjectLockConfiguration private constructor(builder: BuilderImpl) {
    /**
     * Indicates whether this bucket has an Object Lock configuration enabled.
     * Enable ObjectLockEnabled when you apply ObjectLockConfiguration
     * to a bucket.
     */
    val objectLockEnabled: ObjectLockEnabled? = builder.objectLockEnabled
    /**
     * Specifies the Object Lock rule for the specified object. Enable the this rule when you apply
     * ObjectLockConfiguration to a bucket. Bucket settings require both a mode and a period.
     * The period can be either Days or Years but you must select one.
     * You cannot specify Days and Years at the same time.
     */
    val rule: ObjectLockRule? = builder.rule

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ObjectLockConfiguration = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ObjectLockConfiguration(")
        append("objectLockEnabled=$objectLockEnabled,")
        append("rule=$rule)")
    }

    override fun hashCode(): kotlin.Int {
        var result = objectLockEnabled?.hashCode() ?: 0
        result = 31 * result + (rule?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ObjectLockConfiguration

        if (objectLockEnabled != other.objectLockEnabled) return false
        if (rule != other.rule) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ObjectLockConfiguration = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ObjectLockConfiguration
        /**
         * Indicates whether this bucket has an Object Lock configuration enabled.
         * Enable ObjectLockEnabled when you apply ObjectLockConfiguration
         * to a bucket.
         */
        fun objectLockEnabled(objectLockEnabled: ObjectLockEnabled): FluentBuilder
        /**
         * Specifies the Object Lock rule for the specified object. Enable the this rule when you apply
         * ObjectLockConfiguration to a bucket. Bucket settings require both a mode and a period.
         * The period can be either Days or Years but you must select one.
         * You cannot specify Days and Years at the same time.
         */
        fun rule(rule: ObjectLockRule): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Indicates whether this bucket has an Object Lock configuration enabled.
         * Enable ObjectLockEnabled when you apply ObjectLockConfiguration
         * to a bucket.
         */
        var objectLockEnabled: ObjectLockEnabled?
        /**
         * Specifies the Object Lock rule for the specified object. Enable the this rule when you apply
         * ObjectLockConfiguration to a bucket. Bucket settings require both a mode and a period.
         * The period can be either Days or Years but you must select one.
         * You cannot specify Days and Years at the same time.
         */
        var rule: ObjectLockRule?

        fun build(): ObjectLockConfiguration
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.ObjectLockRule] inside the given [block]
         */
        fun rule(block: ObjectLockRule.DslBuilder.() -> kotlin.Unit) {
            this.rule = ObjectLockRule.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var objectLockEnabled: ObjectLockEnabled? = null
        override var rule: ObjectLockRule? = null

        constructor(x: ObjectLockConfiguration) : this() {
            this.objectLockEnabled = x.objectLockEnabled
            this.rule = x.rule
        }

        override fun build(): ObjectLockConfiguration = ObjectLockConfiguration(this)
        override fun objectLockEnabled(objectLockEnabled: ObjectLockEnabled): FluentBuilder = apply { this.objectLockEnabled = objectLockEnabled }
        override fun rule(rule: ObjectLockRule): FluentBuilder = apply { this.rule = rule }
    }
}
