// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model

import aws.smithy.kotlin.runtime.time.Instant

class ListPartsResponse private constructor(builder: BuilderImpl) {
    /**
     * If the bucket has a lifecycle rule configured with an action to abort incomplete
     * multipart uploads and the prefix in the lifecycle rule matches the object name in the
     * request, then the response includes this header indicating when the initiated multipart
     * upload will become eligible for abort operation. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config">Aborting
     * Incomplete Multipart Uploads Using a Bucket Lifecycle Policy.
     * The response will also include the x-amz-abort-rule-id header that will
     * provide the ID of the lifecycle configuration rule that defines this action.
     */
    val abortDate: Instant? = builder.abortDate
    /**
     * This header is returned along with the x-amz-abort-date header. It
     * identifies applicable lifecycle configuration rule that defines the action to abort
     * incomplete multipart uploads.
     */
    val abortRuleId: String? = builder.abortRuleId
    /**
     * The name of the bucket to which the multipart upload was initiated. Does not return the access point ARN or access point alias if used.
     */
    val bucket: String? = builder.bucket
    /**
     * Container element that identifies who initiated the multipart upload. If the initiator
     * is an Amazon Web Services account, this element provides the same information as the Owner
     * element. If the initiator is an IAM User, this element provides the user ARN and display
     * name.
     */
    val initiator: Initiator? = builder.initiator
    /**
     * Indicates whether the returned list of parts is truncated. A true value indicates that
     * the list was truncated. A list can be truncated if the number of parts exceeds the limit
     * returned in the MaxParts element.
     */
    val isTruncated: Boolean = builder.isTruncated
    /**
     * Object key for which the multipart upload was initiated.
     */
    val key: String? = builder.key
    /**
     * Maximum number of parts that were allowed in the response.
     */
    val maxParts: Int = builder.maxParts
    /**
     * When a list is truncated, this element specifies the last part in the list, as well as
     * the value to use for the part-number-marker request parameter in a subsequent
     * request.
     */
    val nextPartNumberMarker: String? = builder.nextPartNumberMarker
    /**
     * Container element that identifies the object owner, after the object is created. If
     * multipart upload is initiated by an IAM user, this element provides the parent account ID
     * and display name.
     */
    val owner: Owner? = builder.owner
    /**
     * When a list is truncated, this element specifies the last part in the list, as well as
     * the value to use for the part-number-marker request parameter in a subsequent
     * request.
     */
    val partNumberMarker: String? = builder.partNumberMarker
    /**
     * Container for elements related to a particular part. A response can contain zero or
     * more Part elements.
     */
    val parts: List<Part>? = builder.parts
    /**
     * If present, indicates that the requester was successfully charged for the
     * request.
     */
    val requestCharged: RequestCharged? = builder.requestCharged
    /**
     * Class of storage (STANDARD or REDUCED_REDUNDANCY) used to store the uploaded
     * object.
     */
    val storageClass: StorageClass? = builder.storageClass
    /**
     * Upload ID identifying the multipart upload whose parts are being listed.
     */
    val uploadId: String? = builder.uploadId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ListPartsResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ListPartsResponse(")
        append("abortDate=$abortDate,")
        append("abortRuleId=$abortRuleId,")
        append("bucket=$bucket,")
        append("initiator=$initiator,")
        append("isTruncated=$isTruncated,")
        append("key=$key,")
        append("maxParts=$maxParts,")
        append("nextPartNumberMarker=$nextPartNumberMarker,")
        append("owner=$owner,")
        append("partNumberMarker=$partNumberMarker,")
        append("parts=$parts,")
        append("requestCharged=$requestCharged,")
        append("storageClass=$storageClass,")
        append("uploadId=$uploadId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = abortDate?.hashCode() ?: 0
        result = 31 * result + (abortRuleId?.hashCode() ?: 0)
        result = 31 * result + (bucket?.hashCode() ?: 0)
        result = 31 * result + (initiator?.hashCode() ?: 0)
        result = 31 * result + (isTruncated.hashCode())
        result = 31 * result + (key?.hashCode() ?: 0)
        result = 31 * result + (maxParts)
        result = 31 * result + (nextPartNumberMarker?.hashCode() ?: 0)
        result = 31 * result + (owner?.hashCode() ?: 0)
        result = 31 * result + (partNumberMarker?.hashCode() ?: 0)
        result = 31 * result + (parts?.hashCode() ?: 0)
        result = 31 * result + (requestCharged?.hashCode() ?: 0)
        result = 31 * result + (storageClass?.hashCode() ?: 0)
        result = 31 * result + (uploadId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ListPartsResponse

        if (abortDate != other.abortDate) return false
        if (abortRuleId != other.abortRuleId) return false
        if (bucket != other.bucket) return false
        if (initiator != other.initiator) return false
        if (isTruncated != other.isTruncated) return false
        if (key != other.key) return false
        if (maxParts != other.maxParts) return false
        if (nextPartNumberMarker != other.nextPartNumberMarker) return false
        if (owner != other.owner) return false
        if (partNumberMarker != other.partNumberMarker) return false
        if (parts != other.parts) return false
        if (requestCharged != other.requestCharged) return false
        if (storageClass != other.storageClass) return false
        if (uploadId != other.uploadId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ListPartsResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ListPartsResponse
        /**
         * If the bucket has a lifecycle rule configured with an action to abort incomplete
         * multipart uploads and the prefix in the lifecycle rule matches the object name in the
         * request, then the response includes this header indicating when the initiated multipart
         * upload will become eligible for abort operation. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config">Aborting
         * Incomplete Multipart Uploads Using a Bucket Lifecycle Policy.
         * The response will also include the x-amz-abort-rule-id header that will
         * provide the ID of the lifecycle configuration rule that defines this action.
         */
        fun abortDate(abortDate: Instant): FluentBuilder
        /**
         * This header is returned along with the x-amz-abort-date header. It
         * identifies applicable lifecycle configuration rule that defines the action to abort
         * incomplete multipart uploads.
         */
        fun abortRuleId(abortRuleId: String): FluentBuilder
        /**
         * The name of the bucket to which the multipart upload was initiated. Does not return the access point ARN or access point alias if used.
         */
        fun bucket(bucket: String): FluentBuilder
        /**
         * Container element that identifies who initiated the multipart upload. If the initiator
         * is an Amazon Web Services account, this element provides the same information as the Owner
         * element. If the initiator is an IAM User, this element provides the user ARN and display
         * name.
         */
        fun initiator(initiator: Initiator): FluentBuilder
        /**
         * Indicates whether the returned list of parts is truncated. A true value indicates that
         * the list was truncated. A list can be truncated if the number of parts exceeds the limit
         * returned in the MaxParts element.
         */
        fun isTruncated(isTruncated: Boolean): FluentBuilder
        /**
         * Object key for which the multipart upload was initiated.
         */
        fun key(key: String): FluentBuilder
        /**
         * Maximum number of parts that were allowed in the response.
         */
        fun maxParts(maxParts: Int): FluentBuilder
        /**
         * When a list is truncated, this element specifies the last part in the list, as well as
         * the value to use for the part-number-marker request parameter in a subsequent
         * request.
         */
        fun nextPartNumberMarker(nextPartNumberMarker: String): FluentBuilder
        /**
         * Container element that identifies the object owner, after the object is created. If
         * multipart upload is initiated by an IAM user, this element provides the parent account ID
         * and display name.
         */
        fun owner(owner: Owner): FluentBuilder
        /**
         * When a list is truncated, this element specifies the last part in the list, as well as
         * the value to use for the part-number-marker request parameter in a subsequent
         * request.
         */
        fun partNumberMarker(partNumberMarker: String): FluentBuilder
        /**
         * Container for elements related to a particular part. A response can contain zero or
         * more Part elements.
         */
        fun parts(parts: List<Part>): FluentBuilder
        /**
         * If present, indicates that the requester was successfully charged for the
         * request.
         */
        fun requestCharged(requestCharged: RequestCharged): FluentBuilder
        /**
         * Class of storage (STANDARD or REDUCED_REDUNDANCY) used to store the uploaded
         * object.
         */
        fun storageClass(storageClass: StorageClass): FluentBuilder
        /**
         * Upload ID identifying the multipart upload whose parts are being listed.
         */
        fun uploadId(uploadId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * If the bucket has a lifecycle rule configured with an action to abort incomplete
         * multipart uploads and the prefix in the lifecycle rule matches the object name in the
         * request, then the response includes this header indicating when the initiated multipart
         * upload will become eligible for abort operation. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config">Aborting
         * Incomplete Multipart Uploads Using a Bucket Lifecycle Policy.
         * The response will also include the x-amz-abort-rule-id header that will
         * provide the ID of the lifecycle configuration rule that defines this action.
         */
        var abortDate: Instant?
        /**
         * This header is returned along with the x-amz-abort-date header. It
         * identifies applicable lifecycle configuration rule that defines the action to abort
         * incomplete multipart uploads.
         */
        var abortRuleId: String?
        /**
         * The name of the bucket to which the multipart upload was initiated. Does not return the access point ARN or access point alias if used.
         */
        var bucket: String?
        /**
         * Container element that identifies who initiated the multipart upload. If the initiator
         * is an Amazon Web Services account, this element provides the same information as the Owner
         * element. If the initiator is an IAM User, this element provides the user ARN and display
         * name.
         */
        var initiator: Initiator?
        /**
         * Indicates whether the returned list of parts is truncated. A true value indicates that
         * the list was truncated. A list can be truncated if the number of parts exceeds the limit
         * returned in the MaxParts element.
         */
        var isTruncated: Boolean
        /**
         * Object key for which the multipart upload was initiated.
         */
        var key: String?
        /**
         * Maximum number of parts that were allowed in the response.
         */
        var maxParts: Int
        /**
         * When a list is truncated, this element specifies the last part in the list, as well as
         * the value to use for the part-number-marker request parameter in a subsequent
         * request.
         */
        var nextPartNumberMarker: String?
        /**
         * Container element that identifies the object owner, after the object is created. If
         * multipart upload is initiated by an IAM user, this element provides the parent account ID
         * and display name.
         */
        var owner: Owner?
        /**
         * When a list is truncated, this element specifies the last part in the list, as well as
         * the value to use for the part-number-marker request parameter in a subsequent
         * request.
         */
        var partNumberMarker: String?
        /**
         * Container for elements related to a particular part. A response can contain zero or
         * more Part elements.
         */
        var parts: List<Part>?
        /**
         * If present, indicates that the requester was successfully charged for the
         * request.
         */
        var requestCharged: RequestCharged?
        /**
         * Class of storage (STANDARD or REDUCED_REDUNDANCY) used to store the uploaded
         * object.
         */
        var storageClass: StorageClass?
        /**
         * Upload ID identifying the multipart upload whose parts are being listed.
         */
        var uploadId: String?

        fun build(): ListPartsResponse
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.Initiator] inside the given [block]
         */
        fun initiator(block: Initiator.DslBuilder.() -> kotlin.Unit) {
            this.initiator = Initiator.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.Owner] inside the given [block]
         */
        fun owner(block: Owner.DslBuilder.() -> kotlin.Unit) {
            this.owner = Owner.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var abortDate: Instant? = null
        override var abortRuleId: String? = null
        override var bucket: String? = null
        override var initiator: Initiator? = null
        override var isTruncated: Boolean = false
        override var key: String? = null
        override var maxParts: Int = 0
        override var nextPartNumberMarker: String? = null
        override var owner: Owner? = null
        override var partNumberMarker: String? = null
        override var parts: List<Part>? = null
        override var requestCharged: RequestCharged? = null
        override var storageClass: StorageClass? = null
        override var uploadId: String? = null

        constructor(x: ListPartsResponse) : this() {
            this.abortDate = x.abortDate
            this.abortRuleId = x.abortRuleId
            this.bucket = x.bucket
            this.initiator = x.initiator
            this.isTruncated = x.isTruncated
            this.key = x.key
            this.maxParts = x.maxParts
            this.nextPartNumberMarker = x.nextPartNumberMarker
            this.owner = x.owner
            this.partNumberMarker = x.partNumberMarker
            this.parts = x.parts
            this.requestCharged = x.requestCharged
            this.storageClass = x.storageClass
            this.uploadId = x.uploadId
        }

        override fun build(): ListPartsResponse = ListPartsResponse(this)
        override fun abortDate(abortDate: Instant): FluentBuilder = apply { this.abortDate = abortDate }
        override fun abortRuleId(abortRuleId: String): FluentBuilder = apply { this.abortRuleId = abortRuleId }
        override fun bucket(bucket: String): FluentBuilder = apply { this.bucket = bucket }
        override fun initiator(initiator: Initiator): FluentBuilder = apply { this.initiator = initiator }
        override fun isTruncated(isTruncated: Boolean): FluentBuilder = apply { this.isTruncated = isTruncated }
        override fun key(key: String): FluentBuilder = apply { this.key = key }
        override fun maxParts(maxParts: Int): FluentBuilder = apply { this.maxParts = maxParts }
        override fun nextPartNumberMarker(nextPartNumberMarker: String): FluentBuilder = apply { this.nextPartNumberMarker = nextPartNumberMarker }
        override fun owner(owner: Owner): FluentBuilder = apply { this.owner = owner }
        override fun partNumberMarker(partNumberMarker: String): FluentBuilder = apply { this.partNumberMarker = partNumberMarker }
        override fun parts(parts: List<Part>): FluentBuilder = apply { this.parts = parts }
        override fun requestCharged(requestCharged: RequestCharged): FluentBuilder = apply { this.requestCharged = requestCharged }
        override fun storageClass(storageClass: StorageClass): FluentBuilder = apply { this.storageClass = storageClass }
        override fun uploadId(uploadId: String): FluentBuilder = apply { this.uploadId = uploadId }
    }
}
