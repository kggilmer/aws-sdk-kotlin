// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



class GetBucketWebsiteResponse private constructor(builder: BuilderImpl) {
    /**
     * The object key name of the website error document to use for 4XX class errors.
     */
    val errorDocument: ErrorDocument? = builder.errorDocument
    /**
     * The name of the index document for the website (for example
     * index.html).
     */
    val indexDocument: IndexDocument? = builder.indexDocument
    /**
     * Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3
     * bucket.
     */
    val redirectAllRequestsTo: RedirectAllRequestsTo? = builder.redirectAllRequestsTo
    /**
     * Rules that define when a redirect is applied and the redirect behavior.
     */
    val routingRules: List<RoutingRule>? = builder.routingRules

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): GetBucketWebsiteResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("GetBucketWebsiteResponse(")
        append("errorDocument=$errorDocument,")
        append("indexDocument=$indexDocument,")
        append("redirectAllRequestsTo=$redirectAllRequestsTo,")
        append("routingRules=$routingRules)")
    }

    override fun hashCode(): kotlin.Int {
        var result = errorDocument?.hashCode() ?: 0
        result = 31 * result + (indexDocument?.hashCode() ?: 0)
        result = 31 * result + (redirectAllRequestsTo?.hashCode() ?: 0)
        result = 31 * result + (routingRules?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as GetBucketWebsiteResponse

        if (errorDocument != other.errorDocument) return false
        if (indexDocument != other.indexDocument) return false
        if (redirectAllRequestsTo != other.redirectAllRequestsTo) return false
        if (routingRules != other.routingRules) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): GetBucketWebsiteResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): GetBucketWebsiteResponse
        /**
         * The object key name of the website error document to use for 4XX class errors.
         */
        fun errorDocument(errorDocument: ErrorDocument): FluentBuilder
        /**
         * The name of the index document for the website (for example
         * index.html).
         */
        fun indexDocument(indexDocument: IndexDocument): FluentBuilder
        /**
         * Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3
         * bucket.
         */
        fun redirectAllRequestsTo(redirectAllRequestsTo: RedirectAllRequestsTo): FluentBuilder
        /**
         * Rules that define when a redirect is applied and the redirect behavior.
         */
        fun routingRules(routingRules: List<RoutingRule>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The object key name of the website error document to use for 4XX class errors.
         */
        var errorDocument: ErrorDocument?
        /**
         * The name of the index document for the website (for example
         * index.html).
         */
        var indexDocument: IndexDocument?
        /**
         * Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3
         * bucket.
         */
        var redirectAllRequestsTo: RedirectAllRequestsTo?
        /**
         * Rules that define when a redirect is applied and the redirect behavior.
         */
        var routingRules: List<RoutingRule>?

        fun build(): GetBucketWebsiteResponse
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.ErrorDocument] inside the given [block]
         */
        fun errorDocument(block: ErrorDocument.DslBuilder.() -> kotlin.Unit) {
            this.errorDocument = ErrorDocument.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.IndexDocument] inside the given [block]
         */
        fun indexDocument(block: IndexDocument.DslBuilder.() -> kotlin.Unit) {
            this.indexDocument = IndexDocument.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.RedirectAllRequestsTo] inside the given [block]
         */
        fun redirectAllRequestsTo(block: RedirectAllRequestsTo.DslBuilder.() -> kotlin.Unit) {
            this.redirectAllRequestsTo = RedirectAllRequestsTo.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var errorDocument: ErrorDocument? = null
        override var indexDocument: IndexDocument? = null
        override var redirectAllRequestsTo: RedirectAllRequestsTo? = null
        override var routingRules: List<RoutingRule>? = null

        constructor(x: GetBucketWebsiteResponse) : this() {
            this.errorDocument = x.errorDocument
            this.indexDocument = x.indexDocument
            this.redirectAllRequestsTo = x.redirectAllRequestsTo
            this.routingRules = x.routingRules
        }

        override fun build(): GetBucketWebsiteResponse = GetBucketWebsiteResponse(this)
        override fun errorDocument(errorDocument: ErrorDocument): FluentBuilder = apply { this.errorDocument = errorDocument }
        override fun indexDocument(indexDocument: IndexDocument): FluentBuilder = apply { this.indexDocument = indexDocument }
        override fun redirectAllRequestsTo(redirectAllRequestsTo: RedirectAllRequestsTo): FluentBuilder = apply { this.redirectAllRequestsTo = redirectAllRequestsTo }
        override fun routingRules(routingRules: List<RoutingRule>): FluentBuilder = apply { this.routingRules = routingRules }
    }
}
