// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Describes the parameters for Select job types.
 */
class SelectParameters private constructor(builder: BuilderImpl) {
    /**
     * The expression that is used to query the object.
     */
    val expression: String? = builder.expression
    /**
     * The type of the provided expression (for example, SQL).
     */
    val expressionType: ExpressionType? = builder.expressionType
    /**
     * Describes the serialization format of the object.
     */
    val inputSerialization: InputSerialization? = builder.inputSerialization
    /**
     * Describes how the results of the Select job are serialized.
     */
    val outputSerialization: OutputSerialization? = builder.outputSerialization

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): SelectParameters = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("SelectParameters(")
        append("expression=$expression,")
        append("expressionType=$expressionType,")
        append("inputSerialization=$inputSerialization,")
        append("outputSerialization=$outputSerialization)")
    }

    override fun hashCode(): kotlin.Int {
        var result = expression?.hashCode() ?: 0
        result = 31 * result + (expressionType?.hashCode() ?: 0)
        result = 31 * result + (inputSerialization?.hashCode() ?: 0)
        result = 31 * result + (outputSerialization?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as SelectParameters

        if (expression != other.expression) return false
        if (expressionType != other.expressionType) return false
        if (inputSerialization != other.inputSerialization) return false
        if (outputSerialization != other.outputSerialization) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): SelectParameters = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): SelectParameters
        /**
         * The expression that is used to query the object.
         */
        fun expression(expression: String): FluentBuilder
        /**
         * The type of the provided expression (for example, SQL).
         */
        fun expressionType(expressionType: ExpressionType): FluentBuilder
        /**
         * Describes the serialization format of the object.
         */
        fun inputSerialization(inputSerialization: InputSerialization): FluentBuilder
        /**
         * Describes how the results of the Select job are serialized.
         */
        fun outputSerialization(outputSerialization: OutputSerialization): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The expression that is used to query the object.
         */
        var expression: String?
        /**
         * The type of the provided expression (for example, SQL).
         */
        var expressionType: ExpressionType?
        /**
         * Describes the serialization format of the object.
         */
        var inputSerialization: InputSerialization?
        /**
         * Describes how the results of the Select job are serialized.
         */
        var outputSerialization: OutputSerialization?

        fun build(): SelectParameters
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.InputSerialization] inside the given [block]
         */
        fun inputSerialization(block: InputSerialization.DslBuilder.() -> kotlin.Unit) {
            this.inputSerialization = InputSerialization.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.OutputSerialization] inside the given [block]
         */
        fun outputSerialization(block: OutputSerialization.DslBuilder.() -> kotlin.Unit) {
            this.outputSerialization = OutputSerialization.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var expression: String? = null
        override var expressionType: ExpressionType? = null
        override var inputSerialization: InputSerialization? = null
        override var outputSerialization: OutputSerialization? = null

        constructor(x: SelectParameters) : this() {
            this.expression = x.expression
            this.expressionType = x.expressionType
            this.inputSerialization = x.inputSerialization
            this.outputSerialization = x.outputSerialization
        }

        override fun build(): SelectParameters = SelectParameters(this)
        override fun expression(expression: String): FluentBuilder = apply { this.expression = expression }
        override fun expressionType(expressionType: ExpressionType): FluentBuilder = apply { this.expressionType = expressionType }
        override fun inputSerialization(inputSerialization: InputSerialization): FluentBuilder = apply { this.inputSerialization = inputSerialization }
        override fun outputSerialization(outputSerialization: OutputSerialization): FluentBuilder = apply { this.outputSerialization = outputSerialization }
    }
}
