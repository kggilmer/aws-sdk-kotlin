// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



class GetBucketPolicyStatusResponse private constructor(builder: BuilderImpl) {
    /**
     * The policy status for the specified bucket.
     */
    val policyStatus: PolicyStatus? = builder.policyStatus

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): GetBucketPolicyStatusResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("GetBucketPolicyStatusResponse(")
        append("policyStatus=$policyStatus)")
    }

    override fun hashCode(): kotlin.Int {
        var result = policyStatus?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as GetBucketPolicyStatusResponse

        if (policyStatus != other.policyStatus) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): GetBucketPolicyStatusResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): GetBucketPolicyStatusResponse
        /**
         * The policy status for the specified bucket.
         */
        fun policyStatus(policyStatus: PolicyStatus): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The policy status for the specified bucket.
         */
        var policyStatus: PolicyStatus?

        fun build(): GetBucketPolicyStatusResponse
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.PolicyStatus] inside the given [block]
         */
        fun policyStatus(block: PolicyStatus.DslBuilder.() -> kotlin.Unit) {
            this.policyStatus = PolicyStatus.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var policyStatus: PolicyStatus? = null

        constructor(x: GetBucketPolicyStatusResponse) : this() {
            this.policyStatus = x.policyStatus
        }

        override fun build(): GetBucketPolicyStatusResponse = GetBucketPolicyStatusResponse(this)
        override fun policyStatus(policyStatus: PolicyStatus): FluentBuilder = apply { this.policyStatus = policyStatus }
    }
}
