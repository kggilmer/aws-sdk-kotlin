// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



sealed class CompressionType {

    abstract val value: kotlin.String

    object Bzip2 : aws.sdk.kotlin.services.s3.model.CompressionType() {
        override val value: kotlin.String = "BZIP2"
        override fun toString(): kotlin.String = value
    }

    object Gzip : aws.sdk.kotlin.services.s3.model.CompressionType() {
        override val value: kotlin.String = "GZIP"
        override fun toString(): kotlin.String = value
    }

    object None : aws.sdk.kotlin.services.s3.model.CompressionType() {
        override val value: kotlin.String = "NONE"
        override fun toString(): kotlin.String = value
    }

    data class SdkUnknown(override val value: kotlin.String) : aws.sdk.kotlin.services.s3.model.CompressionType() {
        override fun toString(): kotlin.String = value
    }

    companion object {
        /**
         * Convert a raw value to one of the sealed variants or [SdkUnknown]
         */
        fun fromValue(str: kotlin.String): aws.sdk.kotlin.services.s3.model.CompressionType = when(str) {
            "BZIP2" -> Bzip2
            "GZIP" -> Gzip
            "NONE" -> None
            else -> SdkUnknown(str)
        }

        /**
         * Get a list of all possible variants
         */
        fun values(): kotlin.collections.List<aws.sdk.kotlin.services.s3.model.CompressionType> = listOf(
            Bzip2,
            Gzip,
            None
        )
    }
}
