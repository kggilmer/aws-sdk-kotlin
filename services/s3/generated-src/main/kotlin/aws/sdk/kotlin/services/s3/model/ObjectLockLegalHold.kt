// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * A Legal Hold configuration for an object.
 */
class ObjectLockLegalHold private constructor(builder: BuilderImpl) {
    /**
     * Indicates whether the specified object has a Legal Hold in place.
     */
    val status: ObjectLockLegalHoldStatus? = builder.status

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ObjectLockLegalHold = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ObjectLockLegalHold(")
        append("status=$status)")
    }

    override fun hashCode(): kotlin.Int {
        var result = status?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ObjectLockLegalHold

        if (status != other.status) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ObjectLockLegalHold = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ObjectLockLegalHold
        /**
         * Indicates whether the specified object has a Legal Hold in place.
         */
        fun status(status: ObjectLockLegalHoldStatus): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Indicates whether the specified object has a Legal Hold in place.
         */
        var status: ObjectLockLegalHoldStatus?

        fun build(): ObjectLockLegalHold
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var status: ObjectLockLegalHoldStatus? = null

        constructor(x: ObjectLockLegalHold) : this() {
            this.status = x.status
        }

        override fun build(): ObjectLockLegalHold = ObjectLockLegalHold(this)
        override fun status(status: ObjectLockLegalHoldStatus): FluentBuilder = apply { this.status = status }
    }
}
