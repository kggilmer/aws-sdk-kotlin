// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3
 * bucket.
 */
class RedirectAllRequestsTo private constructor(builder: BuilderImpl) {
    /**
     * Name of the host where requests are redirected.
     */
    val hostName: String? = builder.hostName
    /**
     * Protocol to use when redirecting requests. The default is the protocol that is used in
     * the original request.
     */
    val protocol: Protocol? = builder.protocol

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): RedirectAllRequestsTo = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("RedirectAllRequestsTo(")
        append("hostName=$hostName,")
        append("protocol=$protocol)")
    }

    override fun hashCode(): kotlin.Int {
        var result = hostName?.hashCode() ?: 0
        result = 31 * result + (protocol?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as RedirectAllRequestsTo

        if (hostName != other.hostName) return false
        if (protocol != other.protocol) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): RedirectAllRequestsTo = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): RedirectAllRequestsTo
        /**
         * Name of the host where requests are redirected.
         */
        fun hostName(hostName: String): FluentBuilder
        /**
         * Protocol to use when redirecting requests. The default is the protocol that is used in
         * the original request.
         */
        fun protocol(protocol: Protocol): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Name of the host where requests are redirected.
         */
        var hostName: String?
        /**
         * Protocol to use when redirecting requests. The default is the protocol that is used in
         * the original request.
         */
        var protocol: Protocol?

        fun build(): RedirectAllRequestsTo
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var hostName: String? = null
        override var protocol: Protocol? = null

        constructor(x: RedirectAllRequestsTo) : this() {
            this.hostName = x.hostName
            this.protocol = x.protocol
        }

        override fun build(): RedirectAllRequestsTo = RedirectAllRequestsTo(this)
        override fun hostName(hostName: String): FluentBuilder = apply { this.hostName = hostName }
        override fun protocol(protocol: Protocol): FluentBuilder = apply { this.protocol = protocol }
    }
}
