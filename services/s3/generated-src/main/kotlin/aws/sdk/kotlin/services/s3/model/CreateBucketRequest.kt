// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



class CreateBucketRequest private constructor(builder: BuilderImpl) {
    /**
     * The canned ACL to apply to the bucket.
     */
    val acl: BucketCannedAcl? = builder.acl
    /**
     * The name of the bucket to create.
     */
    val bucket: String? = builder.bucket
    /**
     * The configuration information for the bucket.
     */
    val createBucketConfiguration: CreateBucketConfiguration? = builder.createBucketConfiguration
    /**
     * Allows grantee the read, write, read ACP, and write ACP permissions on the
     * bucket.
     */
    val grantFullControl: String? = builder.grantFullControl
    /**
     * Allows grantee to list the objects in the bucket.
     */
    val grantRead: String? = builder.grantRead
    /**
     * Allows grantee to read the bucket ACL.
     */
    val grantReadAcp: String? = builder.grantReadAcp
    /**
     * Allows grantee to create new objects in the bucket.
     * For the bucket and object owners of existing objects, also allows deletions and overwrites of those objects.
     */
    val grantWrite: String? = builder.grantWrite
    /**
     * Allows grantee to write the ACL for the applicable bucket.
     */
    val grantWriteAcp: String? = builder.grantWriteAcp
    /**
     * Specifies whether you want S3 Object Lock to be enabled for the new bucket.
     */
    val objectLockEnabledForBucket: Boolean = builder.objectLockEnabledForBucket

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CreateBucketRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CreateBucketRequest(")
        append("acl=$acl,")
        append("bucket=$bucket,")
        append("createBucketConfiguration=$createBucketConfiguration,")
        append("grantFullControl=$grantFullControl,")
        append("grantRead=$grantRead,")
        append("grantReadAcp=$grantReadAcp,")
        append("grantWrite=$grantWrite,")
        append("grantWriteAcp=$grantWriteAcp,")
        append("objectLockEnabledForBucket=$objectLockEnabledForBucket)")
    }

    override fun hashCode(): kotlin.Int {
        var result = acl?.hashCode() ?: 0
        result = 31 * result + (bucket?.hashCode() ?: 0)
        result = 31 * result + (createBucketConfiguration?.hashCode() ?: 0)
        result = 31 * result + (grantFullControl?.hashCode() ?: 0)
        result = 31 * result + (grantRead?.hashCode() ?: 0)
        result = 31 * result + (grantReadAcp?.hashCode() ?: 0)
        result = 31 * result + (grantWrite?.hashCode() ?: 0)
        result = 31 * result + (grantWriteAcp?.hashCode() ?: 0)
        result = 31 * result + (objectLockEnabledForBucket.hashCode())
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CreateBucketRequest

        if (acl != other.acl) return false
        if (bucket != other.bucket) return false
        if (createBucketConfiguration != other.createBucketConfiguration) return false
        if (grantFullControl != other.grantFullControl) return false
        if (grantRead != other.grantRead) return false
        if (grantReadAcp != other.grantReadAcp) return false
        if (grantWrite != other.grantWrite) return false
        if (grantWriteAcp != other.grantWriteAcp) return false
        if (objectLockEnabledForBucket != other.objectLockEnabledForBucket) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CreateBucketRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CreateBucketRequest
        /**
         * The canned ACL to apply to the bucket.
         */
        fun acl(acl: BucketCannedAcl): FluentBuilder
        /**
         * The name of the bucket to create.
         */
        fun bucket(bucket: String): FluentBuilder
        /**
         * The configuration information for the bucket.
         */
        fun createBucketConfiguration(createBucketConfiguration: CreateBucketConfiguration): FluentBuilder
        /**
         * Allows grantee the read, write, read ACP, and write ACP permissions on the
         * bucket.
         */
        fun grantFullControl(grantFullControl: String): FluentBuilder
        /**
         * Allows grantee to list the objects in the bucket.
         */
        fun grantRead(grantRead: String): FluentBuilder
        /**
         * Allows grantee to read the bucket ACL.
         */
        fun grantReadAcp(grantReadAcp: String): FluentBuilder
        /**
         * Allows grantee to create new objects in the bucket.
         * For the bucket and object owners of existing objects, also allows deletions and overwrites of those objects.
         */
        fun grantWrite(grantWrite: String): FluentBuilder
        /**
         * Allows grantee to write the ACL for the applicable bucket.
         */
        fun grantWriteAcp(grantWriteAcp: String): FluentBuilder
        /**
         * Specifies whether you want S3 Object Lock to be enabled for the new bucket.
         */
        fun objectLockEnabledForBucket(objectLockEnabledForBucket: Boolean): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The canned ACL to apply to the bucket.
         */
        var acl: BucketCannedAcl?
        /**
         * The name of the bucket to create.
         */
        var bucket: String?
        /**
         * The configuration information for the bucket.
         */
        var createBucketConfiguration: CreateBucketConfiguration?
        /**
         * Allows grantee the read, write, read ACP, and write ACP permissions on the
         * bucket.
         */
        var grantFullControl: String?
        /**
         * Allows grantee to list the objects in the bucket.
         */
        var grantRead: String?
        /**
         * Allows grantee to read the bucket ACL.
         */
        var grantReadAcp: String?
        /**
         * Allows grantee to create new objects in the bucket.
         * For the bucket and object owners of existing objects, also allows deletions and overwrites of those objects.
         */
        var grantWrite: String?
        /**
         * Allows grantee to write the ACL for the applicable bucket.
         */
        var grantWriteAcp: String?
        /**
         * Specifies whether you want S3 Object Lock to be enabled for the new bucket.
         */
        var objectLockEnabledForBucket: Boolean

        fun build(): CreateBucketRequest
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.CreateBucketConfiguration] inside the given [block]
         */
        fun createBucketConfiguration(block: CreateBucketConfiguration.DslBuilder.() -> kotlin.Unit) {
            this.createBucketConfiguration = CreateBucketConfiguration.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var acl: BucketCannedAcl? = null
        override var bucket: String? = null
        override var createBucketConfiguration: CreateBucketConfiguration? = null
        override var grantFullControl: String? = null
        override var grantRead: String? = null
        override var grantReadAcp: String? = null
        override var grantWrite: String? = null
        override var grantWriteAcp: String? = null
        override var objectLockEnabledForBucket: Boolean = false

        constructor(x: CreateBucketRequest) : this() {
            this.acl = x.acl
            this.bucket = x.bucket
            this.createBucketConfiguration = x.createBucketConfiguration
            this.grantFullControl = x.grantFullControl
            this.grantRead = x.grantRead
            this.grantReadAcp = x.grantReadAcp
            this.grantWrite = x.grantWrite
            this.grantWriteAcp = x.grantWriteAcp
            this.objectLockEnabledForBucket = x.objectLockEnabledForBucket
        }

        override fun build(): CreateBucketRequest = CreateBucketRequest(this)
        override fun acl(acl: BucketCannedAcl): FluentBuilder = apply { this.acl = acl }
        override fun bucket(bucket: String): FluentBuilder = apply { this.bucket = bucket }
        override fun createBucketConfiguration(createBucketConfiguration: CreateBucketConfiguration): FluentBuilder = apply { this.createBucketConfiguration = createBucketConfiguration }
        override fun grantFullControl(grantFullControl: String): FluentBuilder = apply { this.grantFullControl = grantFullControl }
        override fun grantRead(grantRead: String): FluentBuilder = apply { this.grantRead = grantRead }
        override fun grantReadAcp(grantReadAcp: String): FluentBuilder = apply { this.grantReadAcp = grantReadAcp }
        override fun grantWrite(grantWrite: String): FluentBuilder = apply { this.grantWrite = grantWrite }
        override fun grantWriteAcp(grantWriteAcp: String): FluentBuilder = apply { this.grantWriteAcp = grantWriteAcp }
        override fun objectLockEnabledForBucket(objectLockEnabledForBucket: Boolean): FluentBuilder = apply { this.objectLockEnabledForBucket = objectLockEnabledForBucket }
    }
}
