// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Container for specifying if periodic QueryProgress messages should be
 * sent.
 */
class RequestProgress private constructor(builder: BuilderImpl) {
    /**
     * Specifies whether periodic QueryProgress frames should be sent. Valid values: TRUE,
     * FALSE. Default value: FALSE.
     */
    val enabled: Boolean = builder.enabled

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): RequestProgress = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("RequestProgress(")
        append("enabled=$enabled)")
    }

    override fun hashCode(): kotlin.Int {
        var result = enabled.hashCode()
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as RequestProgress

        if (enabled != other.enabled) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): RequestProgress = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): RequestProgress
        /**
         * Specifies whether periodic QueryProgress frames should be sent. Valid values: TRUE,
         * FALSE. Default value: FALSE.
         */
        fun enabled(enabled: Boolean): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Specifies whether periodic QueryProgress frames should be sent. Valid values: TRUE,
         * FALSE. Default value: FALSE.
         */
        var enabled: Boolean

        fun build(): RequestProgress
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var enabled: Boolean = false

        constructor(x: RequestProgress) : this() {
            this.enabled = x.enabled
        }

        override fun build(): RequestProgress = RequestProgress(this)
        override fun enabled(enabled: Boolean): FluentBuilder = apply { this.enabled = enabled }
    }
}
