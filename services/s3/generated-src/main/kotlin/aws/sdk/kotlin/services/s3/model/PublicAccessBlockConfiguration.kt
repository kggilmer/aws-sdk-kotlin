// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * The PublicAccessBlock configuration that you want to apply to this Amazon S3 bucket. You can
 * enable the configuration options in any combination. For more information about when Amazon S3
 * considers a bucket or object public, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status">The Meaning of "Public" in the Amazon S3 User Guide.
 */
class PublicAccessBlockConfiguration private constructor(builder: BuilderImpl) {
    /**
     * Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket
     * and objects in this bucket. Setting this element to TRUE causes the following
     * behavior:
     * PUT Bucket acl and PUT Object acl calls fail if the specified ACL is
     * public.
     * PUT Object calls fail if the request includes a public ACL.
     * PUT Bucket calls fail if the request includes a public ACL.
     * Enabling this setting doesn't affect existing policies or ACLs.
     */
    val blockPublicAcls: Boolean = builder.blockPublicAcls
    /**
     * Specifies whether Amazon S3 should block public bucket policies for this bucket. Setting this
     * element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the
     * specified bucket policy allows public access.
     * Enabling this setting doesn't affect existing bucket policies.
     */
    val blockPublicPolicy: Boolean = builder.blockPublicPolicy
    /**
     * Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this
     * bucket. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on
     * this bucket and objects in this bucket.
     * Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't
     * prevent new public ACLs from being set.
     */
    val ignorePublicAcls: Boolean = builder.ignorePublicAcls
    /**
     * Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting
     * this element to TRUE restricts access to this bucket to only Amazon Web Service
     * principals and authorized users within this account if the bucket has a public
     * policy.
     * Enabling this setting doesn't affect previously stored bucket policies, except that
     * public and cross-account access within any public bucket policy, including non-public
     * delegation to specific accounts, is blocked.
     */
    val restrictPublicBuckets: Boolean = builder.restrictPublicBuckets

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): PublicAccessBlockConfiguration = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("PublicAccessBlockConfiguration(")
        append("blockPublicAcls=$blockPublicAcls,")
        append("blockPublicPolicy=$blockPublicPolicy,")
        append("ignorePublicAcls=$ignorePublicAcls,")
        append("restrictPublicBuckets=$restrictPublicBuckets)")
    }

    override fun hashCode(): kotlin.Int {
        var result = blockPublicAcls.hashCode()
        result = 31 * result + (blockPublicPolicy.hashCode())
        result = 31 * result + (ignorePublicAcls.hashCode())
        result = 31 * result + (restrictPublicBuckets.hashCode())
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as PublicAccessBlockConfiguration

        if (blockPublicAcls != other.blockPublicAcls) return false
        if (blockPublicPolicy != other.blockPublicPolicy) return false
        if (ignorePublicAcls != other.ignorePublicAcls) return false
        if (restrictPublicBuckets != other.restrictPublicBuckets) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): PublicAccessBlockConfiguration = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): PublicAccessBlockConfiguration
        /**
         * Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket
         * and objects in this bucket. Setting this element to TRUE causes the following
         * behavior:
         * PUT Bucket acl and PUT Object acl calls fail if the specified ACL is
         * public.
         * PUT Object calls fail if the request includes a public ACL.
         * PUT Bucket calls fail if the request includes a public ACL.
         * Enabling this setting doesn't affect existing policies or ACLs.
         */
        fun blockPublicAcls(blockPublicAcls: Boolean): FluentBuilder
        /**
         * Specifies whether Amazon S3 should block public bucket policies for this bucket. Setting this
         * element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the
         * specified bucket policy allows public access.
         * Enabling this setting doesn't affect existing bucket policies.
         */
        fun blockPublicPolicy(blockPublicPolicy: Boolean): FluentBuilder
        /**
         * Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this
         * bucket. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on
         * this bucket and objects in this bucket.
         * Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't
         * prevent new public ACLs from being set.
         */
        fun ignorePublicAcls(ignorePublicAcls: Boolean): FluentBuilder
        /**
         * Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting
         * this element to TRUE restricts access to this bucket to only Amazon Web Service
         * principals and authorized users within this account if the bucket has a public
         * policy.
         * Enabling this setting doesn't affect previously stored bucket policies, except that
         * public and cross-account access within any public bucket policy, including non-public
         * delegation to specific accounts, is blocked.
         */
        fun restrictPublicBuckets(restrictPublicBuckets: Boolean): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket
         * and objects in this bucket. Setting this element to TRUE causes the following
         * behavior:
         * PUT Bucket acl and PUT Object acl calls fail if the specified ACL is
         * public.
         * PUT Object calls fail if the request includes a public ACL.
         * PUT Bucket calls fail if the request includes a public ACL.
         * Enabling this setting doesn't affect existing policies or ACLs.
         */
        var blockPublicAcls: Boolean
        /**
         * Specifies whether Amazon S3 should block public bucket policies for this bucket. Setting this
         * element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the
         * specified bucket policy allows public access.
         * Enabling this setting doesn't affect existing bucket policies.
         */
        var blockPublicPolicy: Boolean
        /**
         * Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this
         * bucket. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on
         * this bucket and objects in this bucket.
         * Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't
         * prevent new public ACLs from being set.
         */
        var ignorePublicAcls: Boolean
        /**
         * Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting
         * this element to TRUE restricts access to this bucket to only Amazon Web Service
         * principals and authorized users within this account if the bucket has a public
         * policy.
         * Enabling this setting doesn't affect previously stored bucket policies, except that
         * public and cross-account access within any public bucket policy, including non-public
         * delegation to specific accounts, is blocked.
         */
        var restrictPublicBuckets: Boolean

        fun build(): PublicAccessBlockConfiguration
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var blockPublicAcls: Boolean = false
        override var blockPublicPolicy: Boolean = false
        override var ignorePublicAcls: Boolean = false
        override var restrictPublicBuckets: Boolean = false

        constructor(x: PublicAccessBlockConfiguration) : this() {
            this.blockPublicAcls = x.blockPublicAcls
            this.blockPublicPolicy = x.blockPublicPolicy
            this.ignorePublicAcls = x.ignorePublicAcls
            this.restrictPublicBuckets = x.restrictPublicBuckets
        }

        override fun build(): PublicAccessBlockConfiguration = PublicAccessBlockConfiguration(this)
        override fun blockPublicAcls(blockPublicAcls: Boolean): FluentBuilder = apply { this.blockPublicAcls = blockPublicAcls }
        override fun blockPublicPolicy(blockPublicPolicy: Boolean): FluentBuilder = apply { this.blockPublicPolicy = blockPublicPolicy }
        override fun ignorePublicAcls(ignorePublicAcls: Boolean): FluentBuilder = apply { this.ignorePublicAcls = ignorePublicAcls }
        override fun restrictPublicBuckets(restrictPublicBuckets: Boolean): FluentBuilder = apply { this.restrictPublicBuckets = restrictPublicBuckets }
    }
}
