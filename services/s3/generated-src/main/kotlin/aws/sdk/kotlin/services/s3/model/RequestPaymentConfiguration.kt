// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Container for Payer.
 */
class RequestPaymentConfiguration private constructor(builder: BuilderImpl) {
    /**
     * Specifies who pays for the download and request fees.
     */
    val payer: Payer? = builder.payer

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): RequestPaymentConfiguration = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("RequestPaymentConfiguration(")
        append("payer=$payer)")
    }

    override fun hashCode(): kotlin.Int {
        var result = payer?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as RequestPaymentConfiguration

        if (payer != other.payer) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): RequestPaymentConfiguration = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): RequestPaymentConfiguration
        /**
         * Specifies who pays for the download and request fees.
         */
        fun payer(payer: Payer): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Specifies who pays for the download and request fees.
         */
        var payer: Payer?

        fun build(): RequestPaymentConfiguration
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var payer: Payer? = null

        constructor(x: RequestPaymentConfiguration) : this() {
            this.payer = x.payer
        }

        override fun build(): RequestPaymentConfiguration = RequestPaymentConfiguration(this)
        override fun payer(payer: Payer): FluentBuilder = apply { this.payer = payer }
    }
}
