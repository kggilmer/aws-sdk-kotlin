// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Specifies a cross-origin access rule for an Amazon S3 bucket.
 */
class CorsRule private constructor(builder: BuilderImpl) {
    /**
     * Headers that are specified in the Access-Control-Request-Headers header.
     * These headers are allowed in a preflight OPTIONS request. In response to any preflight
     * OPTIONS request, Amazon S3 returns any requested headers that are allowed.
     */
    val allowedHeaders: List<String>? = builder.allowedHeaders
    /**
     * An HTTP method that you allow the origin to execute. Valid values are GET,
     * PUT, HEAD, POST, and DELETE.
     */
    val allowedMethods: List<String>? = builder.allowedMethods
    /**
     * One or more origins you want customers to be able to access the bucket from.
     */
    val allowedOrigins: List<String>? = builder.allowedOrigins
    /**
     * One or more headers in the response that you want customers to be able to access from
     * their applications (for example, from a JavaScript XMLHttpRequest
     * object).
     */
    val exposeHeaders: List<String>? = builder.exposeHeaders
    /**
     * Unique identifier for the rule. The value cannot be longer than 255 characters.
     */
    val id: String? = builder.id
    /**
     * The time in seconds that your browser is to cache the preflight response for the
     * specified resource.
     */
    val maxAgeSeconds: Int = builder.maxAgeSeconds

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CorsRule = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CorsRule(")
        append("allowedHeaders=$allowedHeaders,")
        append("allowedMethods=$allowedMethods,")
        append("allowedOrigins=$allowedOrigins,")
        append("exposeHeaders=$exposeHeaders,")
        append("id=$id,")
        append("maxAgeSeconds=$maxAgeSeconds)")
    }

    override fun hashCode(): kotlin.Int {
        var result = allowedHeaders?.hashCode() ?: 0
        result = 31 * result + (allowedMethods?.hashCode() ?: 0)
        result = 31 * result + (allowedOrigins?.hashCode() ?: 0)
        result = 31 * result + (exposeHeaders?.hashCode() ?: 0)
        result = 31 * result + (id?.hashCode() ?: 0)
        result = 31 * result + (maxAgeSeconds)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CorsRule

        if (allowedHeaders != other.allowedHeaders) return false
        if (allowedMethods != other.allowedMethods) return false
        if (allowedOrigins != other.allowedOrigins) return false
        if (exposeHeaders != other.exposeHeaders) return false
        if (id != other.id) return false
        if (maxAgeSeconds != other.maxAgeSeconds) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CorsRule = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CorsRule
        /**
         * Headers that are specified in the Access-Control-Request-Headers header.
         * These headers are allowed in a preflight OPTIONS request. In response to any preflight
         * OPTIONS request, Amazon S3 returns any requested headers that are allowed.
         */
        fun allowedHeaders(allowedHeaders: List<String>): FluentBuilder
        /**
         * An HTTP method that you allow the origin to execute. Valid values are GET,
         * PUT, HEAD, POST, and DELETE.
         */
        fun allowedMethods(allowedMethods: List<String>): FluentBuilder
        /**
         * One or more origins you want customers to be able to access the bucket from.
         */
        fun allowedOrigins(allowedOrigins: List<String>): FluentBuilder
        /**
         * One or more headers in the response that you want customers to be able to access from
         * their applications (for example, from a JavaScript XMLHttpRequest
         * object).
         */
        fun exposeHeaders(exposeHeaders: List<String>): FluentBuilder
        /**
         * Unique identifier for the rule. The value cannot be longer than 255 characters.
         */
        fun id(id: String): FluentBuilder
        /**
         * The time in seconds that your browser is to cache the preflight response for the
         * specified resource.
         */
        fun maxAgeSeconds(maxAgeSeconds: Int): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Headers that are specified in the Access-Control-Request-Headers header.
         * These headers are allowed in a preflight OPTIONS request. In response to any preflight
         * OPTIONS request, Amazon S3 returns any requested headers that are allowed.
         */
        var allowedHeaders: List<String>?
        /**
         * An HTTP method that you allow the origin to execute. Valid values are GET,
         * PUT, HEAD, POST, and DELETE.
         */
        var allowedMethods: List<String>?
        /**
         * One or more origins you want customers to be able to access the bucket from.
         */
        var allowedOrigins: List<String>?
        /**
         * One or more headers in the response that you want customers to be able to access from
         * their applications (for example, from a JavaScript XMLHttpRequest
         * object).
         */
        var exposeHeaders: List<String>?
        /**
         * Unique identifier for the rule. The value cannot be longer than 255 characters.
         */
        var id: String?
        /**
         * The time in seconds that your browser is to cache the preflight response for the
         * specified resource.
         */
        var maxAgeSeconds: Int

        fun build(): CorsRule
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var allowedHeaders: List<String>? = null
        override var allowedMethods: List<String>? = null
        override var allowedOrigins: List<String>? = null
        override var exposeHeaders: List<String>? = null
        override var id: String? = null
        override var maxAgeSeconds: Int = 0

        constructor(x: CorsRule) : this() {
            this.allowedHeaders = x.allowedHeaders
            this.allowedMethods = x.allowedMethods
            this.allowedOrigins = x.allowedOrigins
            this.exposeHeaders = x.exposeHeaders
            this.id = x.id
            this.maxAgeSeconds = x.maxAgeSeconds
        }

        override fun build(): CorsRule = CorsRule(this)
        override fun allowedHeaders(allowedHeaders: List<String>): FluentBuilder = apply { this.allowedHeaders = allowedHeaders }
        override fun allowedMethods(allowedMethods: List<String>): FluentBuilder = apply { this.allowedMethods = allowedMethods }
        override fun allowedOrigins(allowedOrigins: List<String>): FluentBuilder = apply { this.allowedOrigins = allowedOrigins }
        override fun exposeHeaders(exposeHeaders: List<String>): FluentBuilder = apply { this.exposeHeaders = exposeHeaders }
        override fun id(id: String): FluentBuilder = apply { this.id = id }
        override fun maxAgeSeconds(maxAgeSeconds: Int): FluentBuilder = apply { this.maxAgeSeconds = maxAgeSeconds }
    }
}
