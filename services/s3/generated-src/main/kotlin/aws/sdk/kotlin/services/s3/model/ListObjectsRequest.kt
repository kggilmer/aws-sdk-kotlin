// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



class ListObjectsRequest private constructor(builder: BuilderImpl) {
    /**
     * The name of the bucket containing the objects.
     * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
     * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
     */
    val bucket: String? = builder.bucket
    /**
     * A delimiter is a character you use to group keys.
     */
    val delimiter: String? = builder.delimiter
    /**
     * Requests Amazon S3 to encode the object keys in the response and specifies the encoding
     * method to use. An object key may contain any Unicode character; however, XML 1.0 parser
     * cannot parse some characters, such as characters with an ASCII value from 0 to 10. For
     * characters that are not supported in XML 1.0, you can add this parameter to request that
     * Amazon S3 encode the keys in the response.
     */
    val encodingType: EncodingType? = builder.encodingType
    /**
     * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     */
    val expectedBucketOwner: String? = builder.expectedBucketOwner
    /**
     * Marker is where you want Amazon S3 to start listing from. Amazon S3 starts listing after
     * this specified key. Marker can be any key in the bucket.
     */
    val marker: String? = builder.marker
    /**
     * Sets the maximum number of keys returned in the response. By default the action returns up
     * to 1,000 key names. The response might contain fewer keys but will never contain more.
     */
    val maxKeys: Int = builder.maxKeys
    /**
     * Limits the response to keys that begin with the specified prefix.
     */
    val prefix: String? = builder.prefix
    /**
     * Confirms that the requester knows that she or he will be charged for the list objects
     * request. Bucket owners need not specify this parameter in their requests.
     */
    val requestPayer: RequestPayer? = builder.requestPayer

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ListObjectsRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ListObjectsRequest(")
        append("bucket=$bucket,")
        append("delimiter=$delimiter,")
        append("encodingType=$encodingType,")
        append("expectedBucketOwner=$expectedBucketOwner,")
        append("marker=$marker,")
        append("maxKeys=$maxKeys,")
        append("prefix=$prefix,")
        append("requestPayer=$requestPayer)")
    }

    override fun hashCode(): kotlin.Int {
        var result = bucket?.hashCode() ?: 0
        result = 31 * result + (delimiter?.hashCode() ?: 0)
        result = 31 * result + (encodingType?.hashCode() ?: 0)
        result = 31 * result + (expectedBucketOwner?.hashCode() ?: 0)
        result = 31 * result + (marker?.hashCode() ?: 0)
        result = 31 * result + (maxKeys)
        result = 31 * result + (prefix?.hashCode() ?: 0)
        result = 31 * result + (requestPayer?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ListObjectsRequest

        if (bucket != other.bucket) return false
        if (delimiter != other.delimiter) return false
        if (encodingType != other.encodingType) return false
        if (expectedBucketOwner != other.expectedBucketOwner) return false
        if (marker != other.marker) return false
        if (maxKeys != other.maxKeys) return false
        if (prefix != other.prefix) return false
        if (requestPayer != other.requestPayer) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ListObjectsRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ListObjectsRequest
        /**
         * The name of the bucket containing the objects.
         * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
         * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
         */
        fun bucket(bucket: String): FluentBuilder
        /**
         * A delimiter is a character you use to group keys.
         */
        fun delimiter(delimiter: String): FluentBuilder
        /**
         * Requests Amazon S3 to encode the object keys in the response and specifies the encoding
         * method to use. An object key may contain any Unicode character; however, XML 1.0 parser
         * cannot parse some characters, such as characters with an ASCII value from 0 to 10. For
         * characters that are not supported in XML 1.0, you can add this parameter to request that
         * Amazon S3 encode the keys in the response.
         */
        fun encodingType(encodingType: EncodingType): FluentBuilder
        /**
         * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        fun expectedBucketOwner(expectedBucketOwner: String): FluentBuilder
        /**
         * Marker is where you want Amazon S3 to start listing from. Amazon S3 starts listing after
         * this specified key. Marker can be any key in the bucket.
         */
        fun marker(marker: String): FluentBuilder
        /**
         * Sets the maximum number of keys returned in the response. By default the action returns up
         * to 1,000 key names. The response might contain fewer keys but will never contain more.
         */
        fun maxKeys(maxKeys: Int): FluentBuilder
        /**
         * Limits the response to keys that begin with the specified prefix.
         */
        fun prefix(prefix: String): FluentBuilder
        /**
         * Confirms that the requester knows that she or he will be charged for the list objects
         * request. Bucket owners need not specify this parameter in their requests.
         */
        fun requestPayer(requestPayer: RequestPayer): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The name of the bucket containing the objects.
         * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
         * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
         */
        var bucket: String?
        /**
         * A delimiter is a character you use to group keys.
         */
        var delimiter: String?
        /**
         * Requests Amazon S3 to encode the object keys in the response and specifies the encoding
         * method to use. An object key may contain any Unicode character; however, XML 1.0 parser
         * cannot parse some characters, such as characters with an ASCII value from 0 to 10. For
         * characters that are not supported in XML 1.0, you can add this parameter to request that
         * Amazon S3 encode the keys in the response.
         */
        var encodingType: EncodingType?
        /**
         * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        var expectedBucketOwner: String?
        /**
         * Marker is where you want Amazon S3 to start listing from. Amazon S3 starts listing after
         * this specified key. Marker can be any key in the bucket.
         */
        var marker: String?
        /**
         * Sets the maximum number of keys returned in the response. By default the action returns up
         * to 1,000 key names. The response might contain fewer keys but will never contain more.
         */
        var maxKeys: Int
        /**
         * Limits the response to keys that begin with the specified prefix.
         */
        var prefix: String?
        /**
         * Confirms that the requester knows that she or he will be charged for the list objects
         * request. Bucket owners need not specify this parameter in their requests.
         */
        var requestPayer: RequestPayer?

        fun build(): ListObjectsRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var bucket: String? = null
        override var delimiter: String? = null
        override var encodingType: EncodingType? = null
        override var expectedBucketOwner: String? = null
        override var marker: String? = null
        override var maxKeys: Int = 0
        override var prefix: String? = null
        override var requestPayer: RequestPayer? = null

        constructor(x: ListObjectsRequest) : this() {
            this.bucket = x.bucket
            this.delimiter = x.delimiter
            this.encodingType = x.encodingType
            this.expectedBucketOwner = x.expectedBucketOwner
            this.marker = x.marker
            this.maxKeys = x.maxKeys
            this.prefix = x.prefix
            this.requestPayer = x.requestPayer
        }

        override fun build(): ListObjectsRequest = ListObjectsRequest(this)
        override fun bucket(bucket: String): FluentBuilder = apply { this.bucket = bucket }
        override fun delimiter(delimiter: String): FluentBuilder = apply { this.delimiter = delimiter }
        override fun encodingType(encodingType: EncodingType): FluentBuilder = apply { this.encodingType = encodingType }
        override fun expectedBucketOwner(expectedBucketOwner: String): FluentBuilder = apply { this.expectedBucketOwner = expectedBucketOwner }
        override fun marker(marker: String): FluentBuilder = apply { this.marker = marker }
        override fun maxKeys(maxKeys: Int): FluentBuilder = apply { this.maxKeys = maxKeys }
        override fun prefix(prefix: String): FluentBuilder = apply { this.prefix = prefix }
        override fun requestPayer(requestPayer: RequestPayer): FluentBuilder = apply { this.requestPayer = requestPayer }
    }
}
