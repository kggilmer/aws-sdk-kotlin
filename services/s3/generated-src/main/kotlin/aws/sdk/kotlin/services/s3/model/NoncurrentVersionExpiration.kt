// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently
 * deletes the noncurrent object versions. You set this lifecycle configuration action on a
 * bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent
 * object versions at a specific period in the object's lifetime.
 */
class NoncurrentVersionExpiration private constructor(builder: BuilderImpl) {
    /**
     * Specifies the number of days an object is noncurrent before Amazon S3 can perform the
     * associated action. For information about the noncurrent days calculations, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations">How
     * Amazon S3 Calculates When an Object Became Noncurrent in the Amazon S3 User Guide.
     */
    val noncurrentDays: Int = builder.noncurrentDays

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): NoncurrentVersionExpiration = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("NoncurrentVersionExpiration(")
        append("noncurrentDays=$noncurrentDays)")
    }

    override fun hashCode(): kotlin.Int {
        var result = noncurrentDays
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as NoncurrentVersionExpiration

        if (noncurrentDays != other.noncurrentDays) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): NoncurrentVersionExpiration = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): NoncurrentVersionExpiration
        /**
         * Specifies the number of days an object is noncurrent before Amazon S3 can perform the
         * associated action. For information about the noncurrent days calculations, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations">How
         * Amazon S3 Calculates When an Object Became Noncurrent in the Amazon S3 User Guide.
         */
        fun noncurrentDays(noncurrentDays: Int): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Specifies the number of days an object is noncurrent before Amazon S3 can perform the
         * associated action. For information about the noncurrent days calculations, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations">How
         * Amazon S3 Calculates When an Object Became Noncurrent in the Amazon S3 User Guide.
         */
        var noncurrentDays: Int

        fun build(): NoncurrentVersionExpiration
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var noncurrentDays: Int = 0

        constructor(x: NoncurrentVersionExpiration) : this() {
            this.noncurrentDays = x.noncurrentDays
        }

        override fun build(): NoncurrentVersionExpiration = NoncurrentVersionExpiration(this)
        override fun noncurrentDays(noncurrentDays: Int): FluentBuilder = apply { this.noncurrentDays = noncurrentDays }
    }
}
