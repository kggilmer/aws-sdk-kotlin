// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Describes the serialization format of the object.
 */
class InputSerialization private constructor(builder: BuilderImpl) {
    /**
     * Specifies object's compression format. Valid values: NONE, GZIP, BZIP2. Default Value:
     * NONE.
     */
    val compressionType: CompressionType? = builder.compressionType
    /**
     * Describes the serialization of a CSV-encoded object.
     */
    val csv: CsvInput? = builder.csv
    /**
     * Specifies JSON as object's input serialization format.
     */
    val json: JsonInput? = builder.json
    /**
     * Specifies Parquet as object's input serialization format.
     */
    val parquet: ParquetInput? = builder.parquet

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): InputSerialization = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("InputSerialization(")
        append("compressionType=$compressionType,")
        append("csv=$csv,")
        append("json=$json,")
        append("parquet=$parquet)")
    }

    override fun hashCode(): kotlin.Int {
        var result = compressionType?.hashCode() ?: 0
        result = 31 * result + (csv?.hashCode() ?: 0)
        result = 31 * result + (json?.hashCode() ?: 0)
        result = 31 * result + (parquet?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as InputSerialization

        if (compressionType != other.compressionType) return false
        if (csv != other.csv) return false
        if (json != other.json) return false
        if (parquet != other.parquet) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): InputSerialization = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): InputSerialization
        /**
         * Specifies object's compression format. Valid values: NONE, GZIP, BZIP2. Default Value:
         * NONE.
         */
        fun compressionType(compressionType: CompressionType): FluentBuilder
        /**
         * Describes the serialization of a CSV-encoded object.
         */
        fun csv(csv: CsvInput): FluentBuilder
        /**
         * Specifies JSON as object's input serialization format.
         */
        fun json(json: JsonInput): FluentBuilder
        /**
         * Specifies Parquet as object's input serialization format.
         */
        fun parquet(parquet: ParquetInput): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Specifies object's compression format. Valid values: NONE, GZIP, BZIP2. Default Value:
         * NONE.
         */
        var compressionType: CompressionType?
        /**
         * Describes the serialization of a CSV-encoded object.
         */
        var csv: CsvInput?
        /**
         * Specifies JSON as object's input serialization format.
         */
        var json: JsonInput?
        /**
         * Specifies Parquet as object's input serialization format.
         */
        var parquet: ParquetInput?

        fun build(): InputSerialization
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.CsvInput] inside the given [block]
         */
        fun csv(block: CsvInput.DslBuilder.() -> kotlin.Unit) {
            this.csv = CsvInput.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.JsonInput] inside the given [block]
         */
        fun json(block: JsonInput.DslBuilder.() -> kotlin.Unit) {
            this.json = JsonInput.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.ParquetInput] inside the given [block]
         */
        fun parquet(block: ParquetInput.DslBuilder.() -> kotlin.Unit) {
            this.parquet = ParquetInput.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var compressionType: CompressionType? = null
        override var csv: CsvInput? = null
        override var json: JsonInput? = null
        override var parquet: ParquetInput? = null

        constructor(x: InputSerialization) : this() {
            this.compressionType = x.compressionType
            this.csv = x.csv
            this.json = x.json
            this.parquet = x.parquet
        }

        override fun build(): InputSerialization = InputSerialization(this)
        override fun compressionType(compressionType: CompressionType): FluentBuilder = apply { this.compressionType = compressionType }
        override fun csv(csv: CsvInput): FluentBuilder = apply { this.csv = csv }
        override fun json(json: JsonInput): FluentBuilder = apply { this.json = json }
        override fun parquet(parquet: ParquetInput): FluentBuilder = apply { this.parquet = parquet }
    }
}
