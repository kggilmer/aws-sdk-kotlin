// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model

import aws.smithy.kotlin.runtime.content.ByteStream

class UploadPartRequest private constructor(builder: BuilderImpl) {
    /**
     * Object data.
     */
    val body: ByteStream? = builder.body
    /**
     * The name of the bucket to which the multipart upload was initiated.
     * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
     * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
     */
    val bucket: String? = builder.bucket
    /**
     * Size of the body in bytes. This parameter is useful when the size of the body cannot be
     * determined automatically.
     */
    val contentLength: Long = builder.contentLength
    /**
     * The base64-encoded 128-bit MD5 digest of the part data. This parameter is auto-populated
     * when using the command from the CLI. This parameter is required if object lock parameters
     * are specified.
     */
    val contentMd5: String? = builder.contentMd5
    /**
     * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     */
    val expectedBucketOwner: String? = builder.expectedBucketOwner
    /**
     * Object key for which the multipart upload was initiated.
     */
    val key: String? = builder.key
    /**
     * Part number of part being uploaded. This is a positive integer between 1 and
     * 10,000.
     */
    val partNumber: Int = builder.partNumber
    /**
     * Confirms that the requester knows that they will be charged for the request. Bucket
     * owners need not specify this parameter in their requests. For information about downloading
     * objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
     * Requestor Pays Buckets in the Amazon S3 User Guide.
     */
    val requestPayer: RequestPayer? = builder.requestPayer
    /**
     * Specifies the algorithm to use to when encrypting the object (for example,
     * AES256).
     */
    val sseCustomerAlgorithm: String? = builder.sseCustomerAlgorithm
    /**
     * Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This
     * value is used to store the object and then it is discarded; Amazon S3 does not store the
     * encryption key. The key must be appropriate for use with the algorithm specified in the
     * x-amz-server-side-encryption-customer-algorithm header. This must be the
     * same encryption key specified in the initiate multipart upload request.
     */
    val sseCustomerKey: String? = builder.sseCustomerKey
    /**
     * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
     * this header for a message integrity check to ensure that the encryption key was transmitted
     * without error.
     */
    val sseCustomerKeyMd5: String? = builder.sseCustomerKeyMd5
    /**
     * Upload ID identifying the multipart upload whose part is being uploaded.
     */
    val uploadId: String? = builder.uploadId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): UploadPartRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("UploadPartRequest(")
        append("body=$body,")
        append("bucket=$bucket,")
        append("contentLength=$contentLength,")
        append("contentMd5=$contentMd5,")
        append("expectedBucketOwner=$expectedBucketOwner,")
        append("key=$key,")
        append("partNumber=$partNumber,")
        append("requestPayer=$requestPayer,")
        append("sseCustomerAlgorithm=$sseCustomerAlgorithm,")
        append("sseCustomerKey=*** Sensitive Data Redacted ***,")
        append("sseCustomerKeyMd5=$sseCustomerKeyMd5,")
        append("uploadId=$uploadId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = body?.hashCode() ?: 0
        result = 31 * result + (bucket?.hashCode() ?: 0)
        result = 31 * result + (contentLength.hashCode())
        result = 31 * result + (contentMd5?.hashCode() ?: 0)
        result = 31 * result + (expectedBucketOwner?.hashCode() ?: 0)
        result = 31 * result + (key?.hashCode() ?: 0)
        result = 31 * result + (partNumber)
        result = 31 * result + (requestPayer?.hashCode() ?: 0)
        result = 31 * result + (sseCustomerAlgorithm?.hashCode() ?: 0)
        result = 31 * result + (sseCustomerKey?.hashCode() ?: 0)
        result = 31 * result + (sseCustomerKeyMd5?.hashCode() ?: 0)
        result = 31 * result + (uploadId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as UploadPartRequest

        if (body != other.body) return false
        if (bucket != other.bucket) return false
        if (contentLength != other.contentLength) return false
        if (contentMd5 != other.contentMd5) return false
        if (expectedBucketOwner != other.expectedBucketOwner) return false
        if (key != other.key) return false
        if (partNumber != other.partNumber) return false
        if (requestPayer != other.requestPayer) return false
        if (sseCustomerAlgorithm != other.sseCustomerAlgorithm) return false
        if (sseCustomerKey != other.sseCustomerKey) return false
        if (sseCustomerKeyMd5 != other.sseCustomerKeyMd5) return false
        if (uploadId != other.uploadId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): UploadPartRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): UploadPartRequest
        /**
         * Object data.
         */
        fun body(body: ByteStream): FluentBuilder
        /**
         * The name of the bucket to which the multipart upload was initiated.
         * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
         * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
         */
        fun bucket(bucket: String): FluentBuilder
        /**
         * Size of the body in bytes. This parameter is useful when the size of the body cannot be
         * determined automatically.
         */
        fun contentLength(contentLength: Long): FluentBuilder
        /**
         * The base64-encoded 128-bit MD5 digest of the part data. This parameter is auto-populated
         * when using the command from the CLI. This parameter is required if object lock parameters
         * are specified.
         */
        fun contentMd5(contentMd5: String): FluentBuilder
        /**
         * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        fun expectedBucketOwner(expectedBucketOwner: String): FluentBuilder
        /**
         * Object key for which the multipart upload was initiated.
         */
        fun key(key: String): FluentBuilder
        /**
         * Part number of part being uploaded. This is a positive integer between 1 and
         * 10,000.
         */
        fun partNumber(partNumber: Int): FluentBuilder
        /**
         * Confirms that the requester knows that they will be charged for the request. Bucket
         * owners need not specify this parameter in their requests. For information about downloading
         * objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
         * Requestor Pays Buckets in the Amazon S3 User Guide.
         */
        fun requestPayer(requestPayer: RequestPayer): FluentBuilder
        /**
         * Specifies the algorithm to use to when encrypting the object (for example,
         * AES256).
         */
        fun sseCustomerAlgorithm(sseCustomerAlgorithm: String): FluentBuilder
        /**
         * Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This
         * value is used to store the object and then it is discarded; Amazon S3 does not store the
         * encryption key. The key must be appropriate for use with the algorithm specified in the
         * x-amz-server-side-encryption-customer-algorithm header. This must be the
         * same encryption key specified in the initiate multipart upload request.
         */
        fun sseCustomerKey(sseCustomerKey: String): FluentBuilder
        /**
         * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
         * this header for a message integrity check to ensure that the encryption key was transmitted
         * without error.
         */
        fun sseCustomerKeyMd5(sseCustomerKeyMd5: String): FluentBuilder
        /**
         * Upload ID identifying the multipart upload whose part is being uploaded.
         */
        fun uploadId(uploadId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Object data.
         */
        var body: ByteStream?
        /**
         * The name of the bucket to which the multipart upload was initiated.
         * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
         * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
         */
        var bucket: String?
        /**
         * Size of the body in bytes. This parameter is useful when the size of the body cannot be
         * determined automatically.
         */
        var contentLength: Long
        /**
         * The base64-encoded 128-bit MD5 digest of the part data. This parameter is auto-populated
         * when using the command from the CLI. This parameter is required if object lock parameters
         * are specified.
         */
        var contentMd5: String?
        /**
         * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        var expectedBucketOwner: String?
        /**
         * Object key for which the multipart upload was initiated.
         */
        var key: String?
        /**
         * Part number of part being uploaded. This is a positive integer between 1 and
         * 10,000.
         */
        var partNumber: Int
        /**
         * Confirms that the requester knows that they will be charged for the request. Bucket
         * owners need not specify this parameter in their requests. For information about downloading
         * objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
         * Requestor Pays Buckets in the Amazon S3 User Guide.
         */
        var requestPayer: RequestPayer?
        /**
         * Specifies the algorithm to use to when encrypting the object (for example,
         * AES256).
         */
        var sseCustomerAlgorithm: String?
        /**
         * Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This
         * value is used to store the object and then it is discarded; Amazon S3 does not store the
         * encryption key. The key must be appropriate for use with the algorithm specified in the
         * x-amz-server-side-encryption-customer-algorithm header. This must be the
         * same encryption key specified in the initiate multipart upload request.
         */
        var sseCustomerKey: String?
        /**
         * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
         * this header for a message integrity check to ensure that the encryption key was transmitted
         * without error.
         */
        var sseCustomerKeyMd5: String?
        /**
         * Upload ID identifying the multipart upload whose part is being uploaded.
         */
        var uploadId: String?

        fun build(): UploadPartRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var body: ByteStream? = null
        override var bucket: String? = null
        override var contentLength: Long = 0L
        override var contentMd5: String? = null
        override var expectedBucketOwner: String? = null
        override var key: String? = null
        override var partNumber: Int = 0
        override var requestPayer: RequestPayer? = null
        override var sseCustomerAlgorithm: String? = null
        override var sseCustomerKey: String? = null
        override var sseCustomerKeyMd5: String? = null
        override var uploadId: String? = null

        constructor(x: UploadPartRequest) : this() {
            this.body = x.body
            this.bucket = x.bucket
            this.contentLength = x.contentLength
            this.contentMd5 = x.contentMd5
            this.expectedBucketOwner = x.expectedBucketOwner
            this.key = x.key
            this.partNumber = x.partNumber
            this.requestPayer = x.requestPayer
            this.sseCustomerAlgorithm = x.sseCustomerAlgorithm
            this.sseCustomerKey = x.sseCustomerKey
            this.sseCustomerKeyMd5 = x.sseCustomerKeyMd5
            this.uploadId = x.uploadId
        }

        override fun build(): UploadPartRequest = UploadPartRequest(this)
        override fun body(body: ByteStream): FluentBuilder = apply { this.body = body }
        override fun bucket(bucket: String): FluentBuilder = apply { this.bucket = bucket }
        override fun contentLength(contentLength: Long): FluentBuilder = apply { this.contentLength = contentLength }
        override fun contentMd5(contentMd5: String): FluentBuilder = apply { this.contentMd5 = contentMd5 }
        override fun expectedBucketOwner(expectedBucketOwner: String): FluentBuilder = apply { this.expectedBucketOwner = expectedBucketOwner }
        override fun key(key: String): FluentBuilder = apply { this.key = key }
        override fun partNumber(partNumber: Int): FluentBuilder = apply { this.partNumber = partNumber }
        override fun requestPayer(requestPayer: RequestPayer): FluentBuilder = apply { this.requestPayer = requestPayer }
        override fun sseCustomerAlgorithm(sseCustomerAlgorithm: String): FluentBuilder = apply { this.sseCustomerAlgorithm = sseCustomerAlgorithm }
        override fun sseCustomerKey(sseCustomerKey: String): FluentBuilder = apply { this.sseCustomerKey = sseCustomerKey }
        override fun sseCustomerKeyMd5(sseCustomerKeyMd5: String): FluentBuilder = apply { this.sseCustomerKeyMd5 = sseCustomerKeyMd5 }
        override fun uploadId(uploadId: String): FluentBuilder = apply { this.uploadId = uploadId }
    }
}
