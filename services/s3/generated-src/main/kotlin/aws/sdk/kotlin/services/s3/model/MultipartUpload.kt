// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model

import aws.smithy.kotlin.runtime.time.Instant

/**
 * Container for the MultipartUpload for the Amazon S3 object.
 */
class MultipartUpload private constructor(builder: BuilderImpl) {
    /**
     * Date and time at which the multipart upload was initiated.
     */
    val initiated: Instant? = builder.initiated
    /**
     * Identifies who initiated the multipart upload.
     */
    val initiator: Initiator? = builder.initiator
    /**
     * Key of the object for which the multipart upload was initiated.
     */
    val key: String? = builder.key
    /**
     * Specifies the owner of the object that is part of the multipart upload.
     */
    val owner: Owner? = builder.owner
    /**
     * The class of storage used to store the object.
     */
    val storageClass: StorageClass? = builder.storageClass
    /**
     * Upload ID that identifies the multipart upload.
     */
    val uploadId: String? = builder.uploadId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): MultipartUpload = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("MultipartUpload(")
        append("initiated=$initiated,")
        append("initiator=$initiator,")
        append("key=$key,")
        append("owner=$owner,")
        append("storageClass=$storageClass,")
        append("uploadId=$uploadId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = initiated?.hashCode() ?: 0
        result = 31 * result + (initiator?.hashCode() ?: 0)
        result = 31 * result + (key?.hashCode() ?: 0)
        result = 31 * result + (owner?.hashCode() ?: 0)
        result = 31 * result + (storageClass?.hashCode() ?: 0)
        result = 31 * result + (uploadId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as MultipartUpload

        if (initiated != other.initiated) return false
        if (initiator != other.initiator) return false
        if (key != other.key) return false
        if (owner != other.owner) return false
        if (storageClass != other.storageClass) return false
        if (uploadId != other.uploadId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): MultipartUpload = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): MultipartUpload
        /**
         * Date and time at which the multipart upload was initiated.
         */
        fun initiated(initiated: Instant): FluentBuilder
        /**
         * Identifies who initiated the multipart upload.
         */
        fun initiator(initiator: Initiator): FluentBuilder
        /**
         * Key of the object for which the multipart upload was initiated.
         */
        fun key(key: String): FluentBuilder
        /**
         * Specifies the owner of the object that is part of the multipart upload.
         */
        fun owner(owner: Owner): FluentBuilder
        /**
         * The class of storage used to store the object.
         */
        fun storageClass(storageClass: StorageClass): FluentBuilder
        /**
         * Upload ID that identifies the multipart upload.
         */
        fun uploadId(uploadId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Date and time at which the multipart upload was initiated.
         */
        var initiated: Instant?
        /**
         * Identifies who initiated the multipart upload.
         */
        var initiator: Initiator?
        /**
         * Key of the object for which the multipart upload was initiated.
         */
        var key: String?
        /**
         * Specifies the owner of the object that is part of the multipart upload.
         */
        var owner: Owner?
        /**
         * The class of storage used to store the object.
         */
        var storageClass: StorageClass?
        /**
         * Upload ID that identifies the multipart upload.
         */
        var uploadId: String?

        fun build(): MultipartUpload
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.Initiator] inside the given [block]
         */
        fun initiator(block: Initiator.DslBuilder.() -> kotlin.Unit) {
            this.initiator = Initiator.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.Owner] inside the given [block]
         */
        fun owner(block: Owner.DslBuilder.() -> kotlin.Unit) {
            this.owner = Owner.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var initiated: Instant? = null
        override var initiator: Initiator? = null
        override var key: String? = null
        override var owner: Owner? = null
        override var storageClass: StorageClass? = null
        override var uploadId: String? = null

        constructor(x: MultipartUpload) : this() {
            this.initiated = x.initiated
            this.initiator = x.initiator
            this.key = x.key
            this.owner = x.owner
            this.storageClass = x.storageClass
            this.uploadId = x.uploadId
        }

        override fun build(): MultipartUpload = MultipartUpload(this)
        override fun initiated(initiated: Instant): FluentBuilder = apply { this.initiated = initiated }
        override fun initiator(initiator: Initiator): FluentBuilder = apply { this.initiator = initiator }
        override fun key(key: String): FluentBuilder = apply { this.key = key }
        override fun owner(owner: Owner): FluentBuilder = apply { this.owner = owner }
        override fun storageClass(storageClass: StorageClass): FluentBuilder = apply { this.storageClass = storageClass }
        override fun uploadId(uploadId: String): FluentBuilder = apply { this.uploadId = uploadId }
    }
}
