// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * A metadata key-value pair to store with an object.
 */
class MetadataEntry private constructor(builder: BuilderImpl) {
    /**
     * Name of the Object.
     */
    val name: String? = builder.name
    /**
     * Value of the Object.
     */
    val value: String? = builder.value

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): MetadataEntry = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("MetadataEntry(")
        append("name=$name,")
        append("value=$value)")
    }

    override fun hashCode(): kotlin.Int {
        var result = name?.hashCode() ?: 0
        result = 31 * result + (value?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as MetadataEntry

        if (name != other.name) return false
        if (value != other.value) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): MetadataEntry = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): MetadataEntry
        /**
         * Name of the Object.
         */
        fun name(name: String): FluentBuilder
        /**
         * Value of the Object.
         */
        fun value(value: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Name of the Object.
         */
        var name: String?
        /**
         * Value of the Object.
         */
        var value: String?

        fun build(): MetadataEntry
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var name: String? = null
        override var value: String? = null

        constructor(x: MetadataEntry) : this() {
            this.name = x.name
            this.value = x.value
        }

        override fun build(): MetadataEntry = MetadataEntry(this)
        override fun name(name: String): FluentBuilder = apply { this.name = name }
        override fun value(value: String): FluentBuilder = apply { this.value = value }
    }
}
