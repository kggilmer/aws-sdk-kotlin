// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



class PutBucketNotificationConfigurationRequest private constructor(builder: BuilderImpl) {
    /**
     * The name of the bucket.
     */
    val bucket: String? = builder.bucket
    /**
     * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     */
    val expectedBucketOwner: String? = builder.expectedBucketOwner
    /**
     * A container for specifying the notification configuration of the bucket. If this element
     * is empty, notifications are turned off for the bucket.
     */
    val notificationConfiguration: NotificationConfiguration? = builder.notificationConfiguration

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): PutBucketNotificationConfigurationRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("PutBucketNotificationConfigurationRequest(")
        append("bucket=$bucket,")
        append("expectedBucketOwner=$expectedBucketOwner,")
        append("notificationConfiguration=$notificationConfiguration)")
    }

    override fun hashCode(): kotlin.Int {
        var result = bucket?.hashCode() ?: 0
        result = 31 * result + (expectedBucketOwner?.hashCode() ?: 0)
        result = 31 * result + (notificationConfiguration?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as PutBucketNotificationConfigurationRequest

        if (bucket != other.bucket) return false
        if (expectedBucketOwner != other.expectedBucketOwner) return false
        if (notificationConfiguration != other.notificationConfiguration) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): PutBucketNotificationConfigurationRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): PutBucketNotificationConfigurationRequest
        /**
         * The name of the bucket.
         */
        fun bucket(bucket: String): FluentBuilder
        /**
         * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        fun expectedBucketOwner(expectedBucketOwner: String): FluentBuilder
        /**
         * A container for specifying the notification configuration of the bucket. If this element
         * is empty, notifications are turned off for the bucket.
         */
        fun notificationConfiguration(notificationConfiguration: NotificationConfiguration): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The name of the bucket.
         */
        var bucket: String?
        /**
         * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        var expectedBucketOwner: String?
        /**
         * A container for specifying the notification configuration of the bucket. If this element
         * is empty, notifications are turned off for the bucket.
         */
        var notificationConfiguration: NotificationConfiguration?

        fun build(): PutBucketNotificationConfigurationRequest
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.NotificationConfiguration] inside the given [block]
         */
        fun notificationConfiguration(block: NotificationConfiguration.DslBuilder.() -> kotlin.Unit) {
            this.notificationConfiguration = NotificationConfiguration.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var bucket: String? = null
        override var expectedBucketOwner: String? = null
        override var notificationConfiguration: NotificationConfiguration? = null

        constructor(x: PutBucketNotificationConfigurationRequest) : this() {
            this.bucket = x.bucket
            this.expectedBucketOwner = x.expectedBucketOwner
            this.notificationConfiguration = x.notificationConfiguration
        }

        override fun build(): PutBucketNotificationConfigurationRequest = PutBucketNotificationConfigurationRequest(this)
        override fun bucket(bucket: String): FluentBuilder = apply { this.bucket = bucket }
        override fun expectedBucketOwner(expectedBucketOwner: String): FluentBuilder = apply { this.expectedBucketOwner = expectedBucketOwner }
        override fun notificationConfiguration(notificationConfiguration: NotificationConfiguration): FluentBuilder = apply { this.notificationConfiguration = notificationConfiguration }
    }
}
