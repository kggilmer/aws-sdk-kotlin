// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Specifies JSON as object's input serialization format.
 */
class JsonInput private constructor(builder: BuilderImpl) {
    /**
     * The type of JSON. Valid values: Document, Lines.
     */
    val type: JsonType? = builder.type

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): JsonInput = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("JsonInput(")
        append("type=$type)")
    }

    override fun hashCode(): kotlin.Int {
        var result = type?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as JsonInput

        if (type != other.type) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): JsonInput = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): JsonInput
        /**
         * The type of JSON. Valid values: Document, Lines.
         */
        fun type(type: JsonType): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The type of JSON. Valid values: Document, Lines.
         */
        var type: JsonType?

        fun build(): JsonInput
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var type: JsonType? = null

        constructor(x: JsonInput) : this() {
            this.type = x.type
        }

        override fun build(): JsonInput = JsonInput(this)
        override fun type(type: JsonType): FluentBuilder = apply { this.type = type }
    }
}
