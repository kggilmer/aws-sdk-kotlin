// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * The container element for a bucket's ownership controls.
 */
class OwnershipControls private constructor(builder: BuilderImpl) {
    /**
     * The container element for an ownership control rule.
     */
    val rules: List<OwnershipControlsRule>? = builder.rules

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): OwnershipControls = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("OwnershipControls(")
        append("rules=$rules)")
    }

    override fun hashCode(): kotlin.Int {
        var result = rules?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as OwnershipControls

        if (rules != other.rules) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): OwnershipControls = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): OwnershipControls
        /**
         * The container element for an ownership control rule.
         */
        fun rules(rules: List<OwnershipControlsRule>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The container element for an ownership control rule.
         */
        var rules: List<OwnershipControlsRule>?

        fun build(): OwnershipControls
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var rules: List<OwnershipControlsRule>? = null

        constructor(x: OwnershipControls) : this() {
            this.rules = x.rules
        }

        override fun build(): OwnershipControls = OwnershipControls(this)
        override fun rules(rules: List<OwnershipControlsRule>): FluentBuilder = apply { this.rules = rules }
    }
}
