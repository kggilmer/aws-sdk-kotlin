// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Specifies JSON as request's output serialization format.
 */
class JsonOutput private constructor(builder: BuilderImpl) {
    /**
     * The value used to separate individual records in the output. If no value is specified,
     * Amazon S3 uses a newline character ('\n').
     */
    val recordDelimiter: String? = builder.recordDelimiter

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): JsonOutput = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("JsonOutput(")
        append("recordDelimiter=$recordDelimiter)")
    }

    override fun hashCode(): kotlin.Int {
        var result = recordDelimiter?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as JsonOutput

        if (recordDelimiter != other.recordDelimiter) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): JsonOutput = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): JsonOutput
        /**
         * The value used to separate individual records in the output. If no value is specified,
         * Amazon S3 uses a newline character ('\n').
         */
        fun recordDelimiter(recordDelimiter: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The value used to separate individual records in the output. If no value is specified,
         * Amazon S3 uses a newline character ('\n').
         */
        var recordDelimiter: String?

        fun build(): JsonOutput
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var recordDelimiter: String? = null

        constructor(x: JsonOutput) : this() {
            this.recordDelimiter = x.recordDelimiter
        }

        override fun build(): JsonOutput = JsonOutput(this)
        override fun recordDelimiter(recordDelimiter: String): FluentBuilder = apply { this.recordDelimiter = recordDelimiter }
    }
}
