// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * This data type contains information about the progress event of an operation.
 */
class ProgressEvent private constructor(builder: BuilderImpl) {
    /**
     * The Progress event details.
     */
    val details: Progress? = builder.details

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ProgressEvent = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ProgressEvent(")
        append("details=$details)")
    }

    override fun hashCode(): kotlin.Int {
        var result = details?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ProgressEvent

        if (details != other.details) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ProgressEvent = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ProgressEvent
        /**
         * The Progress event details.
         */
        fun details(details: Progress): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The Progress event details.
         */
        var details: Progress?

        fun build(): ProgressEvent
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.Progress] inside the given [block]
         */
        fun details(block: Progress.DslBuilder.() -> kotlin.Unit) {
            this.details = Progress.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var details: Progress? = null

        constructor(x: ProgressEvent) : this() {
            this.details = x.details
        }

        override fun build(): ProgressEvent = ProgressEvent(this)
        override fun details(details: Progress): FluentBuilder = apply { this.details = details }
    }
}
