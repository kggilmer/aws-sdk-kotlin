// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3

import aws.sdk.kotlin.runtime.auth.signing.AwsSigV4SigningMiddleware
import aws.sdk.kotlin.runtime.auth.signing.AwsSignedBodyHeaderType
import aws.sdk.kotlin.runtime.http.ApiMetadata
import aws.sdk.kotlin.runtime.http.AwsUserAgentMetadata
import aws.sdk.kotlin.runtime.http.middleware.ResolveAwsEndpoint
import aws.sdk.kotlin.runtime.http.middleware.UserAgent
import aws.sdk.kotlin.runtime.http.retries.AwsDefaultRetryPolicy
import aws.sdk.kotlin.services.s3.model.*
import aws.smithy.kotlin.runtime.http.middleware.Md5Checksum
import aws.smithy.kotlin.runtime.http.middleware.RetryFeature
import aws.smithy.kotlin.runtime.http.operation.SdkHttpOperation

private val awsUserAgentMetadata = AwsUserAgentMetadata.fromEnvironment(ApiMetadata(ServiceId, SdkVersion))

internal fun registerAbortMultipartUploadMiddleware(config: S3Client.Config, op: SdkHttpOperation<AbortMultipartUploadRequest,AbortMultipartUploadResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerCompleteMultipartUploadMiddleware(config: S3Client.Config, op: SdkHttpOperation<CompleteMultipartUploadRequest,CompleteMultipartUploadResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerCopyObjectMiddleware(config: S3Client.Config, op: SdkHttpOperation<CopyObjectRequest,CopyObjectResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerCreateBucketMiddleware(config: S3Client.Config, op: SdkHttpOperation<CreateBucketRequest,CreateBucketResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerCreateMultipartUploadMiddleware(config: S3Client.Config, op: SdkHttpOperation<CreateMultipartUploadRequest,CreateMultipartUploadResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerDeleteBucketMiddleware(config: S3Client.Config, op: SdkHttpOperation<DeleteBucketRequest,DeleteBucketResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerDeleteBucketAnalyticsConfigurationMiddleware(config: S3Client.Config, op: SdkHttpOperation<DeleteBucketAnalyticsConfigurationRequest,DeleteBucketAnalyticsConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerDeleteBucketCorsMiddleware(config: S3Client.Config, op: SdkHttpOperation<DeleteBucketCorsRequest,DeleteBucketCorsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerDeleteBucketEncryptionMiddleware(config: S3Client.Config, op: SdkHttpOperation<DeleteBucketEncryptionRequest,DeleteBucketEncryptionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerDeleteBucketIntelligentTieringConfigurationMiddleware(config: S3Client.Config, op: SdkHttpOperation<DeleteBucketIntelligentTieringConfigurationRequest,DeleteBucketIntelligentTieringConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerDeleteBucketInventoryConfigurationMiddleware(config: S3Client.Config, op: SdkHttpOperation<DeleteBucketInventoryConfigurationRequest,DeleteBucketInventoryConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerDeleteBucketLifecycleMiddleware(config: S3Client.Config, op: SdkHttpOperation<DeleteBucketLifecycleRequest,DeleteBucketLifecycleResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerDeleteBucketMetricsConfigurationMiddleware(config: S3Client.Config, op: SdkHttpOperation<DeleteBucketMetricsConfigurationRequest,DeleteBucketMetricsConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerDeleteBucketOwnershipControlsMiddleware(config: S3Client.Config, op: SdkHttpOperation<DeleteBucketOwnershipControlsRequest,DeleteBucketOwnershipControlsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerDeleteBucketPolicyMiddleware(config: S3Client.Config, op: SdkHttpOperation<DeleteBucketPolicyRequest,DeleteBucketPolicyResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerDeleteBucketReplicationMiddleware(config: S3Client.Config, op: SdkHttpOperation<DeleteBucketReplicationRequest,DeleteBucketReplicationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerDeleteBucketTaggingMiddleware(config: S3Client.Config, op: SdkHttpOperation<DeleteBucketTaggingRequest,DeleteBucketTaggingResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerDeleteBucketWebsiteMiddleware(config: S3Client.Config, op: SdkHttpOperation<DeleteBucketWebsiteRequest,DeleteBucketWebsiteResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerDeleteObjectMiddleware(config: S3Client.Config, op: SdkHttpOperation<DeleteObjectRequest,DeleteObjectResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerDeleteObjectTaggingMiddleware(config: S3Client.Config, op: SdkHttpOperation<DeleteObjectTaggingRequest,DeleteObjectTaggingResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerDeleteObjectsMiddleware(config: S3Client.Config, op: SdkHttpOperation<DeleteObjectsRequest,DeleteObjectsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
        op.install(Md5Checksum)
    }
}

internal fun registerDeletePublicAccessBlockMiddleware(config: S3Client.Config, op: SdkHttpOperation<DeletePublicAccessBlockRequest,DeletePublicAccessBlockResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetBucketAccelerateConfigurationMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetBucketAccelerateConfigurationRequest,GetBucketAccelerateConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetBucketAclMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetBucketAclRequest,GetBucketAclResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetBucketAnalyticsConfigurationMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetBucketAnalyticsConfigurationRequest,GetBucketAnalyticsConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetBucketCorsMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetBucketCorsRequest,GetBucketCorsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetBucketEncryptionMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetBucketEncryptionRequest,GetBucketEncryptionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetBucketIntelligentTieringConfigurationMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetBucketIntelligentTieringConfigurationRequest,GetBucketIntelligentTieringConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetBucketInventoryConfigurationMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetBucketInventoryConfigurationRequest,GetBucketInventoryConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetBucketLifecycleConfigurationMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetBucketLifecycleConfigurationRequest,GetBucketLifecycleConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetBucketLocationMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetBucketLocationRequest,GetBucketLocationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetBucketLoggingMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetBucketLoggingRequest,GetBucketLoggingResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetBucketMetricsConfigurationMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetBucketMetricsConfigurationRequest,GetBucketMetricsConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetBucketNotificationConfigurationMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetBucketNotificationConfigurationRequest,GetBucketNotificationConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetBucketOwnershipControlsMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetBucketOwnershipControlsRequest,GetBucketOwnershipControlsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetBucketPolicyMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetBucketPolicyRequest,GetBucketPolicyResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetBucketPolicyStatusMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetBucketPolicyStatusRequest,GetBucketPolicyStatusResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetBucketReplicationMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetBucketReplicationRequest,GetBucketReplicationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetBucketRequestPaymentMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetBucketRequestPaymentRequest,GetBucketRequestPaymentResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetBucketTaggingMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetBucketTaggingRequest,GetBucketTaggingResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetBucketVersioningMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetBucketVersioningRequest,GetBucketVersioningResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetBucketWebsiteMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetBucketWebsiteRequest,GetBucketWebsiteResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetObjectMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetObjectRequest,GetObjectResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetObjectAclMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetObjectAclRequest,GetObjectAclResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetObjectLegalHoldMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetObjectLegalHoldRequest,GetObjectLegalHoldResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetObjectLockConfigurationMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetObjectLockConfigurationRequest,GetObjectLockConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetObjectRetentionMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetObjectRetentionRequest,GetObjectRetentionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetObjectTaggingMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetObjectTaggingRequest,GetObjectTaggingResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetObjectTorrentMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetObjectTorrentRequest,GetObjectTorrentResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerGetPublicAccessBlockMiddleware(config: S3Client.Config, op: SdkHttpOperation<GetPublicAccessBlockRequest,GetPublicAccessBlockResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerHeadBucketMiddleware(config: S3Client.Config, op: SdkHttpOperation<HeadBucketRequest,HeadBucketResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerHeadObjectMiddleware(config: S3Client.Config, op: SdkHttpOperation<HeadObjectRequest,HeadObjectResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerListBucketAnalyticsConfigurationsMiddleware(config: S3Client.Config, op: SdkHttpOperation<ListBucketAnalyticsConfigurationsRequest,ListBucketAnalyticsConfigurationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerListBucketIntelligentTieringConfigurationsMiddleware(config: S3Client.Config, op: SdkHttpOperation<ListBucketIntelligentTieringConfigurationsRequest,ListBucketIntelligentTieringConfigurationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerListBucketInventoryConfigurationsMiddleware(config: S3Client.Config, op: SdkHttpOperation<ListBucketInventoryConfigurationsRequest,ListBucketInventoryConfigurationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerListBucketMetricsConfigurationsMiddleware(config: S3Client.Config, op: SdkHttpOperation<ListBucketMetricsConfigurationsRequest,ListBucketMetricsConfigurationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerListBucketsMiddleware(config: S3Client.Config, op: SdkHttpOperation<ListBucketsRequest,ListBucketsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerListMultipartUploadsMiddleware(config: S3Client.Config, op: SdkHttpOperation<ListMultipartUploadsRequest,ListMultipartUploadsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerListObjectVersionsMiddleware(config: S3Client.Config, op: SdkHttpOperation<ListObjectVersionsRequest,ListObjectVersionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerListObjectsMiddleware(config: S3Client.Config, op: SdkHttpOperation<ListObjectsRequest,ListObjectsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerListObjectsV2Middleware(config: S3Client.Config, op: SdkHttpOperation<ListObjectsV2Request,ListObjectsV2Response>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerListPartsMiddleware(config: S3Client.Config, op: SdkHttpOperation<ListPartsRequest,ListPartsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerPutBucketAccelerateConfigurationMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutBucketAccelerateConfigurationRequest,PutBucketAccelerateConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerPutBucketAclMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutBucketAclRequest,PutBucketAclResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
        op.install(Md5Checksum)
    }
}

internal fun registerPutBucketAnalyticsConfigurationMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutBucketAnalyticsConfigurationRequest,PutBucketAnalyticsConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerPutBucketCorsMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutBucketCorsRequest,PutBucketCorsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
        op.install(Md5Checksum)
    }
}

internal fun registerPutBucketEncryptionMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutBucketEncryptionRequest,PutBucketEncryptionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
        op.install(Md5Checksum)
    }
}

internal fun registerPutBucketIntelligentTieringConfigurationMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutBucketIntelligentTieringConfigurationRequest,PutBucketIntelligentTieringConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerPutBucketInventoryConfigurationMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutBucketInventoryConfigurationRequest,PutBucketInventoryConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerPutBucketLifecycleConfigurationMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutBucketLifecycleConfigurationRequest,PutBucketLifecycleConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
        op.install(Md5Checksum)
    }
}

internal fun registerPutBucketLoggingMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutBucketLoggingRequest,PutBucketLoggingResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
        op.install(Md5Checksum)
    }
}

internal fun registerPutBucketMetricsConfigurationMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutBucketMetricsConfigurationRequest,PutBucketMetricsConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerPutBucketNotificationConfigurationMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutBucketNotificationConfigurationRequest,PutBucketNotificationConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerPutBucketOwnershipControlsMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutBucketOwnershipControlsRequest,PutBucketOwnershipControlsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
        op.install(Md5Checksum)
    }
}

internal fun registerPutBucketPolicyMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutBucketPolicyRequest,PutBucketPolicyResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
        op.install(Md5Checksum)
    }
}

internal fun registerPutBucketReplicationMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutBucketReplicationRequest,PutBucketReplicationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
        op.install(Md5Checksum)
    }
}

internal fun registerPutBucketRequestPaymentMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutBucketRequestPaymentRequest,PutBucketRequestPaymentResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
        op.install(Md5Checksum)
    }
}

internal fun registerPutBucketTaggingMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutBucketTaggingRequest,PutBucketTaggingResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
        op.install(Md5Checksum)
    }
}

internal fun registerPutBucketVersioningMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutBucketVersioningRequest,PutBucketVersioningResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
        op.install(Md5Checksum)
    }
}

internal fun registerPutBucketWebsiteMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutBucketWebsiteRequest,PutBucketWebsiteResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
        op.install(Md5Checksum)
    }
}

internal fun registerPutObjectMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutObjectRequest,PutObjectResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerPutObjectAclMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutObjectAclRequest,PutObjectAclResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
        op.install(Md5Checksum)
    }
}

internal fun registerPutObjectLegalHoldMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutObjectLegalHoldRequest,PutObjectLegalHoldResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
        op.install(Md5Checksum)
    }
}

internal fun registerPutObjectLockConfigurationMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutObjectLockConfigurationRequest,PutObjectLockConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
        op.install(Md5Checksum)
    }
}

internal fun registerPutObjectRetentionMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutObjectRetentionRequest,PutObjectRetentionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
        op.install(Md5Checksum)
    }
}

internal fun registerPutObjectTaggingMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutObjectTaggingRequest,PutObjectTaggingResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
        op.install(Md5Checksum)
    }
}

internal fun registerPutPublicAccessBlockMiddleware(config: S3Client.Config, op: SdkHttpOperation<PutPublicAccessBlockRequest,PutPublicAccessBlockResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
        op.install(Md5Checksum)
    }
}

internal fun registerRestoreObjectMiddleware(config: S3Client.Config, op: SdkHttpOperation<RestoreObjectRequest,RestoreObjectResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerSelectObjectContentMiddleware(config: S3Client.Config, op: SdkHttpOperation<SelectObjectContentRequest,SelectObjectContentResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerUploadPartMiddleware(config: S3Client.Config, op: SdkHttpOperation<UploadPartRequest,UploadPartResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerUploadPartCopyMiddleware(config: S3Client.Config, op: SdkHttpOperation<UploadPartCopyRequest,UploadPartCopyResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}

internal fun registerWriteGetObjectResponseMiddleware(config: S3Client.Config, op: SdkHttpOperation<WriteGetObjectResponseRequest,WriteGetObjectResponseResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "s3"
            signedBodyHeaderType = AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA256
            useDoubleUriEncode = false
            normalizeUriPath = false
        }
    }
}
