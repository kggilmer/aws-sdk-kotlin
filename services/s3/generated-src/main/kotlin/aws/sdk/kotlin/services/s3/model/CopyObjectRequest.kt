// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model

import aws.smithy.kotlin.runtime.time.Instant

class CopyObjectRequest private constructor(builder: BuilderImpl) {
    /**
     * The canned ACL to apply to the object.
     * This action is not supported by Amazon S3 on Outposts.
     */
    val acl: ObjectCannedAcl? = builder.acl
    /**
     * The name of the destination bucket.
     * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
     * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
     */
    val bucket: String? = builder.bucket
    /**
     * Specifies whether Amazon S3 should use an S3 Bucket Key for object encryption with server-side encryption using AWS KMS (SSE-KMS). Setting this header to true causes Amazon S3 to use an S3 Bucket Key for object encryption with SSE-KMS.
     * Specifying this header with a COPY action doesnâ€™t affect bucket-level settings for S3 Bucket Key.
     */
    val bucketKeyEnabled: Boolean = builder.bucketKeyEnabled
    /**
     * Specifies caching behavior along the request/reply chain.
     */
    val cacheControl: String? = builder.cacheControl
    /**
     * Specifies presentational information for the object.
     */
    val contentDisposition: String? = builder.contentDisposition
    /**
     * Specifies what content encodings have been applied to the object and thus what decoding
     * mechanisms must be applied to obtain the media-type referenced by the Content-Type header
     * field.
     */
    val contentEncoding: String? = builder.contentEncoding
    /**
     * The language the content is in.
     */
    val contentLanguage: String? = builder.contentLanguage
    /**
     * A standard MIME type describing the format of the object data.
     */
    val contentType: String? = builder.contentType
    /**
     * Specifies the source object for the copy operation. You specify the value in one of two
     * formats, depending on whether you want to access the source object through an <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points.html">access point:
     * For objects not accessed through an access point, specify the name of the source
     * bucket and the key of the source object, separated by a slash (/). For example, to
     * copy the object reports/january.pdf from the bucket
     * awsexamplebucket, use
     * awsexamplebucket/reports/january.pdf. The value must be URL
     * encoded.
     * For objects accessed through access points, specify the Amazon Resource Name (ARN) of the object as accessed through the access point, in the format arn:aws:s3:<Region>:<account-id>:accesspoint/<access-point-name>/object/<key>. For example, to copy the object reports/january.pdf through access point my-access-point owned by account 123456789012 in Region us-west-2, use the URL encoding of arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf. The value must be URL encoded.
     * Amazon S3 supports copy operations using access points only when the source and destination buckets are in the same Amazon Web Services Region.
     * Alternatively, for objects accessed through Amazon S3 on Outposts, specify the ARN of the object as accessed in the format arn:aws:s3-outposts:<Region>:<account-id>:outpost/<outpost-id>/object/<key>. For example, to copy the object reports/january.pdf through outpost my-outpost owned by account 123456789012 in Region us-west-2, use the URL encoding of arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf. The value must be URL encoded.
     * To copy a specific version of an object, append ?versionId=<version-id>
     * to the value (for example,
     * awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893).
     * If you don't specify a version ID, Amazon S3 copies the latest version of the source
     * object.
     */
    val copySource: String? = builder.copySource
    /**
     * Copies the object if its entity tag (ETag) matches the specified tag.
     */
    val copySourceIfMatch: String? = builder.copySourceIfMatch
    /**
     * Copies the object if it has been modified since the specified time.
     */
    val copySourceIfModifiedSince: Instant? = builder.copySourceIfModifiedSince
    /**
     * Copies the object if its entity tag (ETag) is different than the specified ETag.
     */
    val copySourceIfNoneMatch: String? = builder.copySourceIfNoneMatch
    /**
     * Copies the object if it hasn't been modified since the specified time.
     */
    val copySourceIfUnmodifiedSince: Instant? = builder.copySourceIfUnmodifiedSince
    /**
     * Specifies the algorithm to use when decrypting the source object (for example,
     * AES256).
     */
    val copySourceSseCustomerAlgorithm: String? = builder.copySourceSseCustomerAlgorithm
    /**
     * Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source
     * object. The encryption key provided in this header must be one that was used when the
     * source object was created.
     */
    val copySourceSseCustomerKey: String? = builder.copySourceSseCustomerKey
    /**
     * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
     * this header for a message integrity check to ensure that the encryption key was transmitted
     * without error.
     */
    val copySourceSseCustomerKeyMd5: String? = builder.copySourceSseCustomerKeyMd5
    /**
     * The account ID of the expected destination bucket owner. If the destination bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     */
    val expectedBucketOwner: String? = builder.expectedBucketOwner
    /**
     * The account ID of the expected source bucket owner. If the source bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     */
    val expectedSourceBucketOwner: String? = builder.expectedSourceBucketOwner
    /**
     * The date and time at which the object is no longer cacheable.
     */
    val expires: Instant? = builder.expires
    /**
     * Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the
     * object.
     * This action is not supported by Amazon S3 on Outposts.
     */
    val grantFullControl: String? = builder.grantFullControl
    /**
     * Allows grantee to read the object data and its
     * metadata.
     * This action is not supported by Amazon S3 on Outposts.
     */
    val grantRead: String? = builder.grantRead
    /**
     * Allows grantee to read the object ACL.
     * This action is not supported by Amazon S3 on Outposts.
     */
    val grantReadAcp: String? = builder.grantReadAcp
    /**
     * Allows grantee to write the ACL for the applicable
     * object.
     * This action is not supported by Amazon S3 on Outposts.
     */
    val grantWriteAcp: String? = builder.grantWriteAcp
    /**
     * The key of the destination object.
     */
    val key: String? = builder.key
    /**
     * A map of metadata to store with the object in S3.
     */
    val metadata: Map<String, String>? = builder.metadata
    /**
     * Specifies whether the metadata is copied from the source object or replaced with
     * metadata provided in the request.
     */
    val metadataDirective: MetadataDirective? = builder.metadataDirective
    /**
     * Specifies whether you want to apply a Legal Hold to the copied object.
     */
    val objectLockLegalHoldStatus: ObjectLockLegalHoldStatus? = builder.objectLockLegalHoldStatus
    /**
     * The Object Lock mode that you want to apply to the copied object.
     */
    val objectLockMode: ObjectLockMode? = builder.objectLockMode
    /**
     * The date and time when you want the copied object's Object Lock to expire.
     */
    val objectLockRetainUntilDate: Instant? = builder.objectLockRetainUntilDate
    /**
     * Confirms that the requester knows that they will be charged for the request. Bucket
     * owners need not specify this parameter in their requests. For information about downloading
     * objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
     * Requestor Pays Buckets in the Amazon S3 User Guide.
     */
    val requestPayer: RequestPayer? = builder.requestPayer
    /**
     * The server-side encryption algorithm used when storing this object in Amazon S3 (for example,
     * AES256, aws:kms).
     */
    val serverSideEncryption: ServerSideEncryption? = builder.serverSideEncryption
    /**
     * Specifies the algorithm to use to when encrypting the object (for example,
     * AES256).
     */
    val sseCustomerAlgorithm: String? = builder.sseCustomerAlgorithm
    /**
     * Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This
     * value is used to store the object and then it is discarded; Amazon S3 does not store the
     * encryption key. The key must be appropriate for use with the algorithm specified in the
     * x-amz-server-side-encryption-customer-algorithm header.
     */
    val sseCustomerKey: String? = builder.sseCustomerKey
    /**
     * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
     * this header for a message integrity check to ensure that the encryption key was transmitted
     * without error.
     */
    val sseCustomerKeyMd5: String? = builder.sseCustomerKeyMd5
    /**
     * Specifies the Amazon Web Services KMS Encryption Context to use for object encryption. The value of this
     * header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value
     * pairs.
     */
    val ssekmsEncryptionContext: String? = builder.ssekmsEncryptionContext
    /**
     * Specifies the Amazon Web Services KMS key ID to use for object encryption. All GET and PUT requests for
     * an object protected by Amazon Web Services KMS will fail if not made via SSL or using SigV4. For
     * information about configuring using any of the officially supported Amazon Web Services SDKs and Amazon Web Services CLI,
     * see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version">Specifying the
     * Signature Version in Request Authentication in the Amazon S3 User Guide.
     */
    val ssekmsKeyId: String? = builder.ssekmsKeyId
    /**
     * By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The
     * STANDARD storage class provides high durability and high availability. Depending on
     * performance needs, you can specify a different Storage Class. Amazon S3 on Outposts only uses
     * the OUTPOSTS Storage Class. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html">Storage Classes in the
     * Amazon S3 User Guide.
     */
    val storageClass: StorageClass? = builder.storageClass
    /**
     * The tag-set for the object destination object this value must be used in conjunction
     * with the TaggingDirective. The tag-set must be encoded as URL Query
     * parameters.
     */
    val tagging: String? = builder.tagging
    /**
     * Specifies whether the object tag-set are copied from the source object or replaced with
     * tag-set provided in the request.
     */
    val taggingDirective: TaggingDirective? = builder.taggingDirective
    /**
     * If the bucket is configured as a website, redirects requests for this object to another
     * object in the same bucket or to an external URL. Amazon S3 stores the value of this header in
     * the object metadata.
     */
    val websiteRedirectLocation: String? = builder.websiteRedirectLocation

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CopyObjectRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CopyObjectRequest(")
        append("acl=$acl,")
        append("bucket=$bucket,")
        append("bucketKeyEnabled=$bucketKeyEnabled,")
        append("cacheControl=$cacheControl,")
        append("contentDisposition=$contentDisposition,")
        append("contentEncoding=$contentEncoding,")
        append("contentLanguage=$contentLanguage,")
        append("contentType=$contentType,")
        append("copySource=$copySource,")
        append("copySourceIfMatch=$copySourceIfMatch,")
        append("copySourceIfModifiedSince=$copySourceIfModifiedSince,")
        append("copySourceIfNoneMatch=$copySourceIfNoneMatch,")
        append("copySourceIfUnmodifiedSince=$copySourceIfUnmodifiedSince,")
        append("copySourceSseCustomerAlgorithm=$copySourceSseCustomerAlgorithm,")
        append("copySourceSseCustomerKey=*** Sensitive Data Redacted ***,")
        append("copySourceSseCustomerKeyMd5=$copySourceSseCustomerKeyMd5,")
        append("expectedBucketOwner=$expectedBucketOwner,")
        append("expectedSourceBucketOwner=$expectedSourceBucketOwner,")
        append("expires=$expires,")
        append("grantFullControl=$grantFullControl,")
        append("grantRead=$grantRead,")
        append("grantReadAcp=$grantReadAcp,")
        append("grantWriteAcp=$grantWriteAcp,")
        append("key=$key,")
        append("metadata=$metadata,")
        append("metadataDirective=$metadataDirective,")
        append("objectLockLegalHoldStatus=$objectLockLegalHoldStatus,")
        append("objectLockMode=$objectLockMode,")
        append("objectLockRetainUntilDate=$objectLockRetainUntilDate,")
        append("requestPayer=$requestPayer,")
        append("serverSideEncryption=$serverSideEncryption,")
        append("sseCustomerAlgorithm=$sseCustomerAlgorithm,")
        append("sseCustomerKey=*** Sensitive Data Redacted ***,")
        append("sseCustomerKeyMd5=$sseCustomerKeyMd5,")
        append("ssekmsEncryptionContext=*** Sensitive Data Redacted ***,")
        append("ssekmsKeyId=*** Sensitive Data Redacted ***,")
        append("storageClass=$storageClass,")
        append("tagging=$tagging,")
        append("taggingDirective=$taggingDirective,")
        append("websiteRedirectLocation=$websiteRedirectLocation)")
    }

    override fun hashCode(): kotlin.Int {
        var result = acl?.hashCode() ?: 0
        result = 31 * result + (bucket?.hashCode() ?: 0)
        result = 31 * result + (bucketKeyEnabled.hashCode())
        result = 31 * result + (cacheControl?.hashCode() ?: 0)
        result = 31 * result + (contentDisposition?.hashCode() ?: 0)
        result = 31 * result + (contentEncoding?.hashCode() ?: 0)
        result = 31 * result + (contentLanguage?.hashCode() ?: 0)
        result = 31 * result + (contentType?.hashCode() ?: 0)
        result = 31 * result + (copySource?.hashCode() ?: 0)
        result = 31 * result + (copySourceIfMatch?.hashCode() ?: 0)
        result = 31 * result + (copySourceIfModifiedSince?.hashCode() ?: 0)
        result = 31 * result + (copySourceIfNoneMatch?.hashCode() ?: 0)
        result = 31 * result + (copySourceIfUnmodifiedSince?.hashCode() ?: 0)
        result = 31 * result + (copySourceSseCustomerAlgorithm?.hashCode() ?: 0)
        result = 31 * result + (copySourceSseCustomerKey?.hashCode() ?: 0)
        result = 31 * result + (copySourceSseCustomerKeyMd5?.hashCode() ?: 0)
        result = 31 * result + (expectedBucketOwner?.hashCode() ?: 0)
        result = 31 * result + (expectedSourceBucketOwner?.hashCode() ?: 0)
        result = 31 * result + (expires?.hashCode() ?: 0)
        result = 31 * result + (grantFullControl?.hashCode() ?: 0)
        result = 31 * result + (grantRead?.hashCode() ?: 0)
        result = 31 * result + (grantReadAcp?.hashCode() ?: 0)
        result = 31 * result + (grantWriteAcp?.hashCode() ?: 0)
        result = 31 * result + (key?.hashCode() ?: 0)
        result = 31 * result + (metadata?.hashCode() ?: 0)
        result = 31 * result + (metadataDirective?.hashCode() ?: 0)
        result = 31 * result + (objectLockLegalHoldStatus?.hashCode() ?: 0)
        result = 31 * result + (objectLockMode?.hashCode() ?: 0)
        result = 31 * result + (objectLockRetainUntilDate?.hashCode() ?: 0)
        result = 31 * result + (requestPayer?.hashCode() ?: 0)
        result = 31 * result + (serverSideEncryption?.hashCode() ?: 0)
        result = 31 * result + (sseCustomerAlgorithm?.hashCode() ?: 0)
        result = 31 * result + (sseCustomerKey?.hashCode() ?: 0)
        result = 31 * result + (sseCustomerKeyMd5?.hashCode() ?: 0)
        result = 31 * result + (ssekmsEncryptionContext?.hashCode() ?: 0)
        result = 31 * result + (ssekmsKeyId?.hashCode() ?: 0)
        result = 31 * result + (storageClass?.hashCode() ?: 0)
        result = 31 * result + (tagging?.hashCode() ?: 0)
        result = 31 * result + (taggingDirective?.hashCode() ?: 0)
        result = 31 * result + (websiteRedirectLocation?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CopyObjectRequest

        if (acl != other.acl) return false
        if (bucket != other.bucket) return false
        if (bucketKeyEnabled != other.bucketKeyEnabled) return false
        if (cacheControl != other.cacheControl) return false
        if (contentDisposition != other.contentDisposition) return false
        if (contentEncoding != other.contentEncoding) return false
        if (contentLanguage != other.contentLanguage) return false
        if (contentType != other.contentType) return false
        if (copySource != other.copySource) return false
        if (copySourceIfMatch != other.copySourceIfMatch) return false
        if (copySourceIfModifiedSince != other.copySourceIfModifiedSince) return false
        if (copySourceIfNoneMatch != other.copySourceIfNoneMatch) return false
        if (copySourceIfUnmodifiedSince != other.copySourceIfUnmodifiedSince) return false
        if (copySourceSseCustomerAlgorithm != other.copySourceSseCustomerAlgorithm) return false
        if (copySourceSseCustomerKey != other.copySourceSseCustomerKey) return false
        if (copySourceSseCustomerKeyMd5 != other.copySourceSseCustomerKeyMd5) return false
        if (expectedBucketOwner != other.expectedBucketOwner) return false
        if (expectedSourceBucketOwner != other.expectedSourceBucketOwner) return false
        if (expires != other.expires) return false
        if (grantFullControl != other.grantFullControl) return false
        if (grantRead != other.grantRead) return false
        if (grantReadAcp != other.grantReadAcp) return false
        if (grantWriteAcp != other.grantWriteAcp) return false
        if (key != other.key) return false
        if (metadata != other.metadata) return false
        if (metadataDirective != other.metadataDirective) return false
        if (objectLockLegalHoldStatus != other.objectLockLegalHoldStatus) return false
        if (objectLockMode != other.objectLockMode) return false
        if (objectLockRetainUntilDate != other.objectLockRetainUntilDate) return false
        if (requestPayer != other.requestPayer) return false
        if (serverSideEncryption != other.serverSideEncryption) return false
        if (sseCustomerAlgorithm != other.sseCustomerAlgorithm) return false
        if (sseCustomerKey != other.sseCustomerKey) return false
        if (sseCustomerKeyMd5 != other.sseCustomerKeyMd5) return false
        if (ssekmsEncryptionContext != other.ssekmsEncryptionContext) return false
        if (ssekmsKeyId != other.ssekmsKeyId) return false
        if (storageClass != other.storageClass) return false
        if (tagging != other.tagging) return false
        if (taggingDirective != other.taggingDirective) return false
        if (websiteRedirectLocation != other.websiteRedirectLocation) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CopyObjectRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CopyObjectRequest
        /**
         * The canned ACL to apply to the object.
         * This action is not supported by Amazon S3 on Outposts.
         */
        fun acl(acl: ObjectCannedAcl): FluentBuilder
        /**
         * The name of the destination bucket.
         * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
         * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
         */
        fun bucket(bucket: String): FluentBuilder
        /**
         * Specifies whether Amazon S3 should use an S3 Bucket Key for object encryption with server-side encryption using AWS KMS (SSE-KMS). Setting this header to true causes Amazon S3 to use an S3 Bucket Key for object encryption with SSE-KMS.
         * Specifying this header with a COPY action doesnâ€™t affect bucket-level settings for S3 Bucket Key.
         */
        fun bucketKeyEnabled(bucketKeyEnabled: Boolean): FluentBuilder
        /**
         * Specifies caching behavior along the request/reply chain.
         */
        fun cacheControl(cacheControl: String): FluentBuilder
        /**
         * Specifies presentational information for the object.
         */
        fun contentDisposition(contentDisposition: String): FluentBuilder
        /**
         * Specifies what content encodings have been applied to the object and thus what decoding
         * mechanisms must be applied to obtain the media-type referenced by the Content-Type header
         * field.
         */
        fun contentEncoding(contentEncoding: String): FluentBuilder
        /**
         * The language the content is in.
         */
        fun contentLanguage(contentLanguage: String): FluentBuilder
        /**
         * A standard MIME type describing the format of the object data.
         */
        fun contentType(contentType: String): FluentBuilder
        /**
         * Specifies the source object for the copy operation. You specify the value in one of two
         * formats, depending on whether you want to access the source object through an <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points.html">access point:
         * For objects not accessed through an access point, specify the name of the source
         * bucket and the key of the source object, separated by a slash (/). For example, to
         * copy the object reports/january.pdf from the bucket
         * awsexamplebucket, use
         * awsexamplebucket/reports/january.pdf. The value must be URL
         * encoded.
         * For objects accessed through access points, specify the Amazon Resource Name (ARN) of the object as accessed through the access point, in the format arn:aws:s3:<Region>:<account-id>:accesspoint/<access-point-name>/object/<key>. For example, to copy the object reports/january.pdf through access point my-access-point owned by account 123456789012 in Region us-west-2, use the URL encoding of arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf. The value must be URL encoded.
         * Amazon S3 supports copy operations using access points only when the source and destination buckets are in the same Amazon Web Services Region.
         * Alternatively, for objects accessed through Amazon S3 on Outposts, specify the ARN of the object as accessed in the format arn:aws:s3-outposts:<Region>:<account-id>:outpost/<outpost-id>/object/<key>. For example, to copy the object reports/january.pdf through outpost my-outpost owned by account 123456789012 in Region us-west-2, use the URL encoding of arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf. The value must be URL encoded.
         * To copy a specific version of an object, append ?versionId=<version-id>
         * to the value (for example,
         * awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893).
         * If you don't specify a version ID, Amazon S3 copies the latest version of the source
         * object.
         */
        fun copySource(copySource: String): FluentBuilder
        /**
         * Copies the object if its entity tag (ETag) matches the specified tag.
         */
        fun copySourceIfMatch(copySourceIfMatch: String): FluentBuilder
        /**
         * Copies the object if it has been modified since the specified time.
         */
        fun copySourceIfModifiedSince(copySourceIfModifiedSince: Instant): FluentBuilder
        /**
         * Copies the object if its entity tag (ETag) is different than the specified ETag.
         */
        fun copySourceIfNoneMatch(copySourceIfNoneMatch: String): FluentBuilder
        /**
         * Copies the object if it hasn't been modified since the specified time.
         */
        fun copySourceIfUnmodifiedSince(copySourceIfUnmodifiedSince: Instant): FluentBuilder
        /**
         * Specifies the algorithm to use when decrypting the source object (for example,
         * AES256).
         */
        fun copySourceSseCustomerAlgorithm(copySourceSseCustomerAlgorithm: String): FluentBuilder
        /**
         * Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source
         * object. The encryption key provided in this header must be one that was used when the
         * source object was created.
         */
        fun copySourceSseCustomerKey(copySourceSseCustomerKey: String): FluentBuilder
        /**
         * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
         * this header for a message integrity check to ensure that the encryption key was transmitted
         * without error.
         */
        fun copySourceSseCustomerKeyMd5(copySourceSseCustomerKeyMd5: String): FluentBuilder
        /**
         * The account ID of the expected destination bucket owner. If the destination bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        fun expectedBucketOwner(expectedBucketOwner: String): FluentBuilder
        /**
         * The account ID of the expected source bucket owner. If the source bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        fun expectedSourceBucketOwner(expectedSourceBucketOwner: String): FluentBuilder
        /**
         * The date and time at which the object is no longer cacheable.
         */
        fun expires(expires: Instant): FluentBuilder
        /**
         * Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the
         * object.
         * This action is not supported by Amazon S3 on Outposts.
         */
        fun grantFullControl(grantFullControl: String): FluentBuilder
        /**
         * Allows grantee to read the object data and its
         * metadata.
         * This action is not supported by Amazon S3 on Outposts.
         */
        fun grantRead(grantRead: String): FluentBuilder
        /**
         * Allows grantee to read the object ACL.
         * This action is not supported by Amazon S3 on Outposts.
         */
        fun grantReadAcp(grantReadAcp: String): FluentBuilder
        /**
         * Allows grantee to write the ACL for the applicable
         * object.
         * This action is not supported by Amazon S3 on Outposts.
         */
        fun grantWriteAcp(grantWriteAcp: String): FluentBuilder
        /**
         * The key of the destination object.
         */
        fun key(key: String): FluentBuilder
        /**
         * A map of metadata to store with the object in S3.
         */
        fun metadata(metadata: Map<String, String>): FluentBuilder
        /**
         * Specifies whether the metadata is copied from the source object or replaced with
         * metadata provided in the request.
         */
        fun metadataDirective(metadataDirective: MetadataDirective): FluentBuilder
        /**
         * Specifies whether you want to apply a Legal Hold to the copied object.
         */
        fun objectLockLegalHoldStatus(objectLockLegalHoldStatus: ObjectLockLegalHoldStatus): FluentBuilder
        /**
         * The Object Lock mode that you want to apply to the copied object.
         */
        fun objectLockMode(objectLockMode: ObjectLockMode): FluentBuilder
        /**
         * The date and time when you want the copied object's Object Lock to expire.
         */
        fun objectLockRetainUntilDate(objectLockRetainUntilDate: Instant): FluentBuilder
        /**
         * Confirms that the requester knows that they will be charged for the request. Bucket
         * owners need not specify this parameter in their requests. For information about downloading
         * objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
         * Requestor Pays Buckets in the Amazon S3 User Guide.
         */
        fun requestPayer(requestPayer: RequestPayer): FluentBuilder
        /**
         * The server-side encryption algorithm used when storing this object in Amazon S3 (for example,
         * AES256, aws:kms).
         */
        fun serverSideEncryption(serverSideEncryption: ServerSideEncryption): FluentBuilder
        /**
         * Specifies the algorithm to use to when encrypting the object (for example,
         * AES256).
         */
        fun sseCustomerAlgorithm(sseCustomerAlgorithm: String): FluentBuilder
        /**
         * Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This
         * value is used to store the object and then it is discarded; Amazon S3 does not store the
         * encryption key. The key must be appropriate for use with the algorithm specified in the
         * x-amz-server-side-encryption-customer-algorithm header.
         */
        fun sseCustomerKey(sseCustomerKey: String): FluentBuilder
        /**
         * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
         * this header for a message integrity check to ensure that the encryption key was transmitted
         * without error.
         */
        fun sseCustomerKeyMd5(sseCustomerKeyMd5: String): FluentBuilder
        /**
         * Specifies the Amazon Web Services KMS Encryption Context to use for object encryption. The value of this
         * header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value
         * pairs.
         */
        fun ssekmsEncryptionContext(ssekmsEncryptionContext: String): FluentBuilder
        /**
         * Specifies the Amazon Web Services KMS key ID to use for object encryption. All GET and PUT requests for
         * an object protected by Amazon Web Services KMS will fail if not made via SSL or using SigV4. For
         * information about configuring using any of the officially supported Amazon Web Services SDKs and Amazon Web Services CLI,
         * see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version">Specifying the
         * Signature Version in Request Authentication in the Amazon S3 User Guide.
         */
        fun ssekmsKeyId(ssekmsKeyId: String): FluentBuilder
        /**
         * By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The
         * STANDARD storage class provides high durability and high availability. Depending on
         * performance needs, you can specify a different Storage Class. Amazon S3 on Outposts only uses
         * the OUTPOSTS Storage Class. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html">Storage Classes in the
         * Amazon S3 User Guide.
         */
        fun storageClass(storageClass: StorageClass): FluentBuilder
        /**
         * The tag-set for the object destination object this value must be used in conjunction
         * with the TaggingDirective. The tag-set must be encoded as URL Query
         * parameters.
         */
        fun tagging(tagging: String): FluentBuilder
        /**
         * Specifies whether the object tag-set are copied from the source object or replaced with
         * tag-set provided in the request.
         */
        fun taggingDirective(taggingDirective: TaggingDirective): FluentBuilder
        /**
         * If the bucket is configured as a website, redirects requests for this object to another
         * object in the same bucket or to an external URL. Amazon S3 stores the value of this header in
         * the object metadata.
         */
        fun websiteRedirectLocation(websiteRedirectLocation: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The canned ACL to apply to the object.
         * This action is not supported by Amazon S3 on Outposts.
         */
        var acl: ObjectCannedAcl?
        /**
         * The name of the destination bucket.
         * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
         * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
         */
        var bucket: String?
        /**
         * Specifies whether Amazon S3 should use an S3 Bucket Key for object encryption with server-side encryption using AWS KMS (SSE-KMS). Setting this header to true causes Amazon S3 to use an S3 Bucket Key for object encryption with SSE-KMS.
         * Specifying this header with a COPY action doesnâ€™t affect bucket-level settings for S3 Bucket Key.
         */
        var bucketKeyEnabled: Boolean
        /**
         * Specifies caching behavior along the request/reply chain.
         */
        var cacheControl: String?
        /**
         * Specifies presentational information for the object.
         */
        var contentDisposition: String?
        /**
         * Specifies what content encodings have been applied to the object and thus what decoding
         * mechanisms must be applied to obtain the media-type referenced by the Content-Type header
         * field.
         */
        var contentEncoding: String?
        /**
         * The language the content is in.
         */
        var contentLanguage: String?
        /**
         * A standard MIME type describing the format of the object data.
         */
        var contentType: String?
        /**
         * Specifies the source object for the copy operation. You specify the value in one of two
         * formats, depending on whether you want to access the source object through an <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points.html">access point:
         * For objects not accessed through an access point, specify the name of the source
         * bucket and the key of the source object, separated by a slash (/). For example, to
         * copy the object reports/january.pdf from the bucket
         * awsexamplebucket, use
         * awsexamplebucket/reports/january.pdf. The value must be URL
         * encoded.
         * For objects accessed through access points, specify the Amazon Resource Name (ARN) of the object as accessed through the access point, in the format arn:aws:s3:<Region>:<account-id>:accesspoint/<access-point-name>/object/<key>. For example, to copy the object reports/january.pdf through access point my-access-point owned by account 123456789012 in Region us-west-2, use the URL encoding of arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf. The value must be URL encoded.
         * Amazon S3 supports copy operations using access points only when the source and destination buckets are in the same Amazon Web Services Region.
         * Alternatively, for objects accessed through Amazon S3 on Outposts, specify the ARN of the object as accessed in the format arn:aws:s3-outposts:<Region>:<account-id>:outpost/<outpost-id>/object/<key>. For example, to copy the object reports/january.pdf through outpost my-outpost owned by account 123456789012 in Region us-west-2, use the URL encoding of arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf. The value must be URL encoded.
         * To copy a specific version of an object, append ?versionId=<version-id>
         * to the value (for example,
         * awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893).
         * If you don't specify a version ID, Amazon S3 copies the latest version of the source
         * object.
         */
        var copySource: String?
        /**
         * Copies the object if its entity tag (ETag) matches the specified tag.
         */
        var copySourceIfMatch: String?
        /**
         * Copies the object if it has been modified since the specified time.
         */
        var copySourceIfModifiedSince: Instant?
        /**
         * Copies the object if its entity tag (ETag) is different than the specified ETag.
         */
        var copySourceIfNoneMatch: String?
        /**
         * Copies the object if it hasn't been modified since the specified time.
         */
        var copySourceIfUnmodifiedSince: Instant?
        /**
         * Specifies the algorithm to use when decrypting the source object (for example,
         * AES256).
         */
        var copySourceSseCustomerAlgorithm: String?
        /**
         * Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source
         * object. The encryption key provided in this header must be one that was used when the
         * source object was created.
         */
        var copySourceSseCustomerKey: String?
        /**
         * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
         * this header for a message integrity check to ensure that the encryption key was transmitted
         * without error.
         */
        var copySourceSseCustomerKeyMd5: String?
        /**
         * The account ID of the expected destination bucket owner. If the destination bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        var expectedBucketOwner: String?
        /**
         * The account ID of the expected source bucket owner. If the source bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        var expectedSourceBucketOwner: String?
        /**
         * The date and time at which the object is no longer cacheable.
         */
        var expires: Instant?
        /**
         * Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the
         * object.
         * This action is not supported by Amazon S3 on Outposts.
         */
        var grantFullControl: String?
        /**
         * Allows grantee to read the object data and its
         * metadata.
         * This action is not supported by Amazon S3 on Outposts.
         */
        var grantRead: String?
        /**
         * Allows grantee to read the object ACL.
         * This action is not supported by Amazon S3 on Outposts.
         */
        var grantReadAcp: String?
        /**
         * Allows grantee to write the ACL for the applicable
         * object.
         * This action is not supported by Amazon S3 on Outposts.
         */
        var grantWriteAcp: String?
        /**
         * The key of the destination object.
         */
        var key: String?
        /**
         * A map of metadata to store with the object in S3.
         */
        var metadata: Map<String, String>?
        /**
         * Specifies whether the metadata is copied from the source object or replaced with
         * metadata provided in the request.
         */
        var metadataDirective: MetadataDirective?
        /**
         * Specifies whether you want to apply a Legal Hold to the copied object.
         */
        var objectLockLegalHoldStatus: ObjectLockLegalHoldStatus?
        /**
         * The Object Lock mode that you want to apply to the copied object.
         */
        var objectLockMode: ObjectLockMode?
        /**
         * The date and time when you want the copied object's Object Lock to expire.
         */
        var objectLockRetainUntilDate: Instant?
        /**
         * Confirms that the requester knows that they will be charged for the request. Bucket
         * owners need not specify this parameter in their requests. For information about downloading
         * objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
         * Requestor Pays Buckets in the Amazon S3 User Guide.
         */
        var requestPayer: RequestPayer?
        /**
         * The server-side encryption algorithm used when storing this object in Amazon S3 (for example,
         * AES256, aws:kms).
         */
        var serverSideEncryption: ServerSideEncryption?
        /**
         * Specifies the algorithm to use to when encrypting the object (for example,
         * AES256).
         */
        var sseCustomerAlgorithm: String?
        /**
         * Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This
         * value is used to store the object and then it is discarded; Amazon S3 does not store the
         * encryption key. The key must be appropriate for use with the algorithm specified in the
         * x-amz-server-side-encryption-customer-algorithm header.
         */
        var sseCustomerKey: String?
        /**
         * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
         * this header for a message integrity check to ensure that the encryption key was transmitted
         * without error.
         */
        var sseCustomerKeyMd5: String?
        /**
         * Specifies the Amazon Web Services KMS Encryption Context to use for object encryption. The value of this
         * header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value
         * pairs.
         */
        var ssekmsEncryptionContext: String?
        /**
         * Specifies the Amazon Web Services KMS key ID to use for object encryption. All GET and PUT requests for
         * an object protected by Amazon Web Services KMS will fail if not made via SSL or using SigV4. For
         * information about configuring using any of the officially supported Amazon Web Services SDKs and Amazon Web Services CLI,
         * see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version">Specifying the
         * Signature Version in Request Authentication in the Amazon S3 User Guide.
         */
        var ssekmsKeyId: String?
        /**
         * By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The
         * STANDARD storage class provides high durability and high availability. Depending on
         * performance needs, you can specify a different Storage Class. Amazon S3 on Outposts only uses
         * the OUTPOSTS Storage Class. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html">Storage Classes in the
         * Amazon S3 User Guide.
         */
        var storageClass: StorageClass?
        /**
         * The tag-set for the object destination object this value must be used in conjunction
         * with the TaggingDirective. The tag-set must be encoded as URL Query
         * parameters.
         */
        var tagging: String?
        /**
         * Specifies whether the object tag-set are copied from the source object or replaced with
         * tag-set provided in the request.
         */
        var taggingDirective: TaggingDirective?
        /**
         * If the bucket is configured as a website, redirects requests for this object to another
         * object in the same bucket or to an external URL. Amazon S3 stores the value of this header in
         * the object metadata.
         */
        var websiteRedirectLocation: String?

        fun build(): CopyObjectRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var acl: ObjectCannedAcl? = null
        override var bucket: String? = null
        override var bucketKeyEnabled: Boolean = false
        override var cacheControl: String? = null
        override var contentDisposition: String? = null
        override var contentEncoding: String? = null
        override var contentLanguage: String? = null
        override var contentType: String? = null
        override var copySource: String? = null
        override var copySourceIfMatch: String? = null
        override var copySourceIfModifiedSince: Instant? = null
        override var copySourceIfNoneMatch: String? = null
        override var copySourceIfUnmodifiedSince: Instant? = null
        override var copySourceSseCustomerAlgorithm: String? = null
        override var copySourceSseCustomerKey: String? = null
        override var copySourceSseCustomerKeyMd5: String? = null
        override var expectedBucketOwner: String? = null
        override var expectedSourceBucketOwner: String? = null
        override var expires: Instant? = null
        override var grantFullControl: String? = null
        override var grantRead: String? = null
        override var grantReadAcp: String? = null
        override var grantWriteAcp: String? = null
        override var key: String? = null
        override var metadata: Map<String, String>? = null
        override var metadataDirective: MetadataDirective? = null
        override var objectLockLegalHoldStatus: ObjectLockLegalHoldStatus? = null
        override var objectLockMode: ObjectLockMode? = null
        override var objectLockRetainUntilDate: Instant? = null
        override var requestPayer: RequestPayer? = null
        override var serverSideEncryption: ServerSideEncryption? = null
        override var sseCustomerAlgorithm: String? = null
        override var sseCustomerKey: String? = null
        override var sseCustomerKeyMd5: String? = null
        override var ssekmsEncryptionContext: String? = null
        override var ssekmsKeyId: String? = null
        override var storageClass: StorageClass? = null
        override var tagging: String? = null
        override var taggingDirective: TaggingDirective? = null
        override var websiteRedirectLocation: String? = null

        constructor(x: CopyObjectRequest) : this() {
            this.acl = x.acl
            this.bucket = x.bucket
            this.bucketKeyEnabled = x.bucketKeyEnabled
            this.cacheControl = x.cacheControl
            this.contentDisposition = x.contentDisposition
            this.contentEncoding = x.contentEncoding
            this.contentLanguage = x.contentLanguage
            this.contentType = x.contentType
            this.copySource = x.copySource
            this.copySourceIfMatch = x.copySourceIfMatch
            this.copySourceIfModifiedSince = x.copySourceIfModifiedSince
            this.copySourceIfNoneMatch = x.copySourceIfNoneMatch
            this.copySourceIfUnmodifiedSince = x.copySourceIfUnmodifiedSince
            this.copySourceSseCustomerAlgorithm = x.copySourceSseCustomerAlgorithm
            this.copySourceSseCustomerKey = x.copySourceSseCustomerKey
            this.copySourceSseCustomerKeyMd5 = x.copySourceSseCustomerKeyMd5
            this.expectedBucketOwner = x.expectedBucketOwner
            this.expectedSourceBucketOwner = x.expectedSourceBucketOwner
            this.expires = x.expires
            this.grantFullControl = x.grantFullControl
            this.grantRead = x.grantRead
            this.grantReadAcp = x.grantReadAcp
            this.grantWriteAcp = x.grantWriteAcp
            this.key = x.key
            this.metadata = x.metadata
            this.metadataDirective = x.metadataDirective
            this.objectLockLegalHoldStatus = x.objectLockLegalHoldStatus
            this.objectLockMode = x.objectLockMode
            this.objectLockRetainUntilDate = x.objectLockRetainUntilDate
            this.requestPayer = x.requestPayer
            this.serverSideEncryption = x.serverSideEncryption
            this.sseCustomerAlgorithm = x.sseCustomerAlgorithm
            this.sseCustomerKey = x.sseCustomerKey
            this.sseCustomerKeyMd5 = x.sseCustomerKeyMd5
            this.ssekmsEncryptionContext = x.ssekmsEncryptionContext
            this.ssekmsKeyId = x.ssekmsKeyId
            this.storageClass = x.storageClass
            this.tagging = x.tagging
            this.taggingDirective = x.taggingDirective
            this.websiteRedirectLocation = x.websiteRedirectLocation
        }

        override fun build(): CopyObjectRequest = CopyObjectRequest(this)
        override fun acl(acl: ObjectCannedAcl): FluentBuilder = apply { this.acl = acl }
        override fun bucket(bucket: String): FluentBuilder = apply { this.bucket = bucket }
        override fun bucketKeyEnabled(bucketKeyEnabled: Boolean): FluentBuilder = apply { this.bucketKeyEnabled = bucketKeyEnabled }
        override fun cacheControl(cacheControl: String): FluentBuilder = apply { this.cacheControl = cacheControl }
        override fun contentDisposition(contentDisposition: String): FluentBuilder = apply { this.contentDisposition = contentDisposition }
        override fun contentEncoding(contentEncoding: String): FluentBuilder = apply { this.contentEncoding = contentEncoding }
        override fun contentLanguage(contentLanguage: String): FluentBuilder = apply { this.contentLanguage = contentLanguage }
        override fun contentType(contentType: String): FluentBuilder = apply { this.contentType = contentType }
        override fun copySource(copySource: String): FluentBuilder = apply { this.copySource = copySource }
        override fun copySourceIfMatch(copySourceIfMatch: String): FluentBuilder = apply { this.copySourceIfMatch = copySourceIfMatch }
        override fun copySourceIfModifiedSince(copySourceIfModifiedSince: Instant): FluentBuilder = apply { this.copySourceIfModifiedSince = copySourceIfModifiedSince }
        override fun copySourceIfNoneMatch(copySourceIfNoneMatch: String): FluentBuilder = apply { this.copySourceIfNoneMatch = copySourceIfNoneMatch }
        override fun copySourceIfUnmodifiedSince(copySourceIfUnmodifiedSince: Instant): FluentBuilder = apply { this.copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince }
        override fun copySourceSseCustomerAlgorithm(copySourceSseCustomerAlgorithm: String): FluentBuilder = apply { this.copySourceSseCustomerAlgorithm = copySourceSseCustomerAlgorithm }
        override fun copySourceSseCustomerKey(copySourceSseCustomerKey: String): FluentBuilder = apply { this.copySourceSseCustomerKey = copySourceSseCustomerKey }
        override fun copySourceSseCustomerKeyMd5(copySourceSseCustomerKeyMd5: String): FluentBuilder = apply { this.copySourceSseCustomerKeyMd5 = copySourceSseCustomerKeyMd5 }
        override fun expectedBucketOwner(expectedBucketOwner: String): FluentBuilder = apply { this.expectedBucketOwner = expectedBucketOwner }
        override fun expectedSourceBucketOwner(expectedSourceBucketOwner: String): FluentBuilder = apply { this.expectedSourceBucketOwner = expectedSourceBucketOwner }
        override fun expires(expires: Instant): FluentBuilder = apply { this.expires = expires }
        override fun grantFullControl(grantFullControl: String): FluentBuilder = apply { this.grantFullControl = grantFullControl }
        override fun grantRead(grantRead: String): FluentBuilder = apply { this.grantRead = grantRead }
        override fun grantReadAcp(grantReadAcp: String): FluentBuilder = apply { this.grantReadAcp = grantReadAcp }
        override fun grantWriteAcp(grantWriteAcp: String): FluentBuilder = apply { this.grantWriteAcp = grantWriteAcp }
        override fun key(key: String): FluentBuilder = apply { this.key = key }
        override fun metadata(metadata: Map<String, String>): FluentBuilder = apply { this.metadata = metadata }
        override fun metadataDirective(metadataDirective: MetadataDirective): FluentBuilder = apply { this.metadataDirective = metadataDirective }
        override fun objectLockLegalHoldStatus(objectLockLegalHoldStatus: ObjectLockLegalHoldStatus): FluentBuilder = apply { this.objectLockLegalHoldStatus = objectLockLegalHoldStatus }
        override fun objectLockMode(objectLockMode: ObjectLockMode): FluentBuilder = apply { this.objectLockMode = objectLockMode }
        override fun objectLockRetainUntilDate(objectLockRetainUntilDate: Instant): FluentBuilder = apply { this.objectLockRetainUntilDate = objectLockRetainUntilDate }
        override fun requestPayer(requestPayer: RequestPayer): FluentBuilder = apply { this.requestPayer = requestPayer }
        override fun serverSideEncryption(serverSideEncryption: ServerSideEncryption): FluentBuilder = apply { this.serverSideEncryption = serverSideEncryption }
        override fun sseCustomerAlgorithm(sseCustomerAlgorithm: String): FluentBuilder = apply { this.sseCustomerAlgorithm = sseCustomerAlgorithm }
        override fun sseCustomerKey(sseCustomerKey: String): FluentBuilder = apply { this.sseCustomerKey = sseCustomerKey }
        override fun sseCustomerKeyMd5(sseCustomerKeyMd5: String): FluentBuilder = apply { this.sseCustomerKeyMd5 = sseCustomerKeyMd5 }
        override fun ssekmsEncryptionContext(ssekmsEncryptionContext: String): FluentBuilder = apply { this.ssekmsEncryptionContext = ssekmsEncryptionContext }
        override fun ssekmsKeyId(ssekmsKeyId: String): FluentBuilder = apply { this.ssekmsKeyId = ssekmsKeyId }
        override fun storageClass(storageClass: StorageClass): FluentBuilder = apply { this.storageClass = storageClass }
        override fun tagging(tagging: String): FluentBuilder = apply { this.tagging = tagging }
        override fun taggingDirective(taggingDirective: TaggingDirective): FluentBuilder = apply { this.taggingDirective = taggingDirective }
        override fun websiteRedirectLocation(websiteRedirectLocation: String): FluentBuilder = apply { this.websiteRedirectLocation = websiteRedirectLocation }
    }
}
