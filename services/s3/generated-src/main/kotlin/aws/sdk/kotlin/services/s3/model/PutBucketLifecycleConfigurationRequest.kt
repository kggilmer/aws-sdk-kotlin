// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



class PutBucketLifecycleConfigurationRequest private constructor(builder: BuilderImpl) {
    /**
     * The name of the bucket for which to set the configuration.
     */
    val bucket: String? = builder.bucket
    /**
     * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     */
    val expectedBucketOwner: String? = builder.expectedBucketOwner
    /**
     * Container for lifecycle rules. You can add as many as 1,000 rules.
     */
    val lifecycleConfiguration: BucketLifecycleConfiguration? = builder.lifecycleConfiguration

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): PutBucketLifecycleConfigurationRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("PutBucketLifecycleConfigurationRequest(")
        append("bucket=$bucket,")
        append("expectedBucketOwner=$expectedBucketOwner,")
        append("lifecycleConfiguration=$lifecycleConfiguration)")
    }

    override fun hashCode(): kotlin.Int {
        var result = bucket?.hashCode() ?: 0
        result = 31 * result + (expectedBucketOwner?.hashCode() ?: 0)
        result = 31 * result + (lifecycleConfiguration?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as PutBucketLifecycleConfigurationRequest

        if (bucket != other.bucket) return false
        if (expectedBucketOwner != other.expectedBucketOwner) return false
        if (lifecycleConfiguration != other.lifecycleConfiguration) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): PutBucketLifecycleConfigurationRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): PutBucketLifecycleConfigurationRequest
        /**
         * The name of the bucket for which to set the configuration.
         */
        fun bucket(bucket: String): FluentBuilder
        /**
         * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        fun expectedBucketOwner(expectedBucketOwner: String): FluentBuilder
        /**
         * Container for lifecycle rules. You can add as many as 1,000 rules.
         */
        fun lifecycleConfiguration(lifecycleConfiguration: BucketLifecycleConfiguration): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The name of the bucket for which to set the configuration.
         */
        var bucket: String?
        /**
         * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        var expectedBucketOwner: String?
        /**
         * Container for lifecycle rules. You can add as many as 1,000 rules.
         */
        var lifecycleConfiguration: BucketLifecycleConfiguration?

        fun build(): PutBucketLifecycleConfigurationRequest
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.BucketLifecycleConfiguration] inside the given [block]
         */
        fun lifecycleConfiguration(block: BucketLifecycleConfiguration.DslBuilder.() -> kotlin.Unit) {
            this.lifecycleConfiguration = BucketLifecycleConfiguration.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var bucket: String? = null
        override var expectedBucketOwner: String? = null
        override var lifecycleConfiguration: BucketLifecycleConfiguration? = null

        constructor(x: PutBucketLifecycleConfigurationRequest) : this() {
            this.bucket = x.bucket
            this.expectedBucketOwner = x.expectedBucketOwner
            this.lifecycleConfiguration = x.lifecycleConfiguration
        }

        override fun build(): PutBucketLifecycleConfigurationRequest = PutBucketLifecycleConfigurationRequest(this)
        override fun bucket(bucket: String): FluentBuilder = apply { this.bucket = bucket }
        override fun expectedBucketOwner(expectedBucketOwner: String): FluentBuilder = apply { this.expectedBucketOwner = expectedBucketOwner }
        override fun lifecycleConfiguration(lifecycleConfiguration: BucketLifecycleConfiguration): FluentBuilder = apply { this.lifecycleConfiguration = lifecycleConfiguration }
    }
}
