// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Request to filter the contents of an Amazon S3 object based on a simple Structured Query
 * Language (SQL) statement. In the request, along with the SQL expression, you must specify a
 * data serialization format (JSON or CSV) of the object. Amazon S3 uses this to parse object data
 * into records. It returns only records that match the specified SQL expression. You must
 * also specify the data serialization format for the response. For more information, see
 * <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectSELECTContent.html">S3Select API Documentation.
 */
class SelectObjectContentRequest private constructor(builder: BuilderImpl) {
    /**
     * The S3 bucket.
     */
    val bucket: String? = builder.bucket
    /**
     * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     */
    val expectedBucketOwner: String? = builder.expectedBucketOwner
    /**
     * The expression that is used to query the object.
     */
    val expression: String? = builder.expression
    /**
     * The type of the provided expression (for example, SQL).
     */
    val expressionType: ExpressionType? = builder.expressionType
    /**
     * Describes the format of the data in the object that is being queried.
     */
    val inputSerialization: InputSerialization? = builder.inputSerialization
    /**
     * The object key.
     */
    val key: String? = builder.key
    /**
     * Describes the format of the data that you want Amazon S3 to return in response.
     */
    val outputSerialization: OutputSerialization? = builder.outputSerialization
    /**
     * Specifies if periodic request progress information should be enabled.
     */
    val requestProgress: RequestProgress? = builder.requestProgress
    /**
     * Specifies the byte range of the object to get the records from. A record is processed
     * when its first byte is contained by the range. This parameter is optional, but when
     * specified, it must not be empty. See RFC 2616, Section 14.35.1 about how to specify the
     * start and end of the range.
     * ScanRangemay be used in the following ways:
     * <scanrange><start>50</start><end>100</end></scanrange>
     * - process only the records starting between the bytes 50 and 100 (inclusive, counting
     * from zero)
     * <scanrange><start>50</start></scanrange> -
     * process only the records starting after the byte 50
     * <scanrange><end>50</end></scanrange> -
     * process only the records within the last 50 bytes of the file.
     */
    val scanRange: ScanRange? = builder.scanRange
    /**
     * The SSE Algorithm used to encrypt the object. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side Encryption (Using Customer-Provided Encryption Keys.
     */
    val sseCustomerAlgorithm: String? = builder.sseCustomerAlgorithm
    /**
     * The SSE Customer Key. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side Encryption
     * (Using Customer-Provided Encryption Keys.
     */
    val sseCustomerKey: String? = builder.sseCustomerKey
    /**
     * The SSE Customer Key MD5. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side Encryption
     * (Using Customer-Provided Encryption Keys.
     */
    val sseCustomerKeyMd5: String? = builder.sseCustomerKeyMd5

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): SelectObjectContentRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("SelectObjectContentRequest(")
        append("bucket=$bucket,")
        append("expectedBucketOwner=$expectedBucketOwner,")
        append("expression=$expression,")
        append("expressionType=$expressionType,")
        append("inputSerialization=$inputSerialization,")
        append("key=$key,")
        append("outputSerialization=$outputSerialization,")
        append("requestProgress=$requestProgress,")
        append("scanRange=$scanRange,")
        append("sseCustomerAlgorithm=$sseCustomerAlgorithm,")
        append("sseCustomerKey=*** Sensitive Data Redacted ***,")
        append("sseCustomerKeyMd5=$sseCustomerKeyMd5)")
    }

    override fun hashCode(): kotlin.Int {
        var result = bucket?.hashCode() ?: 0
        result = 31 * result + (expectedBucketOwner?.hashCode() ?: 0)
        result = 31 * result + (expression?.hashCode() ?: 0)
        result = 31 * result + (expressionType?.hashCode() ?: 0)
        result = 31 * result + (inputSerialization?.hashCode() ?: 0)
        result = 31 * result + (key?.hashCode() ?: 0)
        result = 31 * result + (outputSerialization?.hashCode() ?: 0)
        result = 31 * result + (requestProgress?.hashCode() ?: 0)
        result = 31 * result + (scanRange?.hashCode() ?: 0)
        result = 31 * result + (sseCustomerAlgorithm?.hashCode() ?: 0)
        result = 31 * result + (sseCustomerKey?.hashCode() ?: 0)
        result = 31 * result + (sseCustomerKeyMd5?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as SelectObjectContentRequest

        if (bucket != other.bucket) return false
        if (expectedBucketOwner != other.expectedBucketOwner) return false
        if (expression != other.expression) return false
        if (expressionType != other.expressionType) return false
        if (inputSerialization != other.inputSerialization) return false
        if (key != other.key) return false
        if (outputSerialization != other.outputSerialization) return false
        if (requestProgress != other.requestProgress) return false
        if (scanRange != other.scanRange) return false
        if (sseCustomerAlgorithm != other.sseCustomerAlgorithm) return false
        if (sseCustomerKey != other.sseCustomerKey) return false
        if (sseCustomerKeyMd5 != other.sseCustomerKeyMd5) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): SelectObjectContentRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): SelectObjectContentRequest
        /**
         * The S3 bucket.
         */
        fun bucket(bucket: String): FluentBuilder
        /**
         * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        fun expectedBucketOwner(expectedBucketOwner: String): FluentBuilder
        /**
         * The expression that is used to query the object.
         */
        fun expression(expression: String): FluentBuilder
        /**
         * The type of the provided expression (for example, SQL).
         */
        fun expressionType(expressionType: ExpressionType): FluentBuilder
        /**
         * Describes the format of the data in the object that is being queried.
         */
        fun inputSerialization(inputSerialization: InputSerialization): FluentBuilder
        /**
         * The object key.
         */
        fun key(key: String): FluentBuilder
        /**
         * Describes the format of the data that you want Amazon S3 to return in response.
         */
        fun outputSerialization(outputSerialization: OutputSerialization): FluentBuilder
        /**
         * Specifies if periodic request progress information should be enabled.
         */
        fun requestProgress(requestProgress: RequestProgress): FluentBuilder
        /**
         * Specifies the byte range of the object to get the records from. A record is processed
         * when its first byte is contained by the range. This parameter is optional, but when
         * specified, it must not be empty. See RFC 2616, Section 14.35.1 about how to specify the
         * start and end of the range.
         * ScanRangemay be used in the following ways:
         * <scanrange><start>50</start><end>100</end></scanrange>
         * - process only the records starting between the bytes 50 and 100 (inclusive, counting
         * from zero)
         * <scanrange><start>50</start></scanrange> -
         * process only the records starting after the byte 50
         * <scanrange><end>50</end></scanrange> -
         * process only the records within the last 50 bytes of the file.
         */
        fun scanRange(scanRange: ScanRange): FluentBuilder
        /**
         * The SSE Algorithm used to encrypt the object. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side Encryption (Using Customer-Provided Encryption Keys.
         */
        fun sseCustomerAlgorithm(sseCustomerAlgorithm: String): FluentBuilder
        /**
         * The SSE Customer Key. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side Encryption
         * (Using Customer-Provided Encryption Keys.
         */
        fun sseCustomerKey(sseCustomerKey: String): FluentBuilder
        /**
         * The SSE Customer Key MD5. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side Encryption
         * (Using Customer-Provided Encryption Keys.
         */
        fun sseCustomerKeyMd5(sseCustomerKeyMd5: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The S3 bucket.
         */
        var bucket: String?
        /**
         * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        var expectedBucketOwner: String?
        /**
         * The expression that is used to query the object.
         */
        var expression: String?
        /**
         * The type of the provided expression (for example, SQL).
         */
        var expressionType: ExpressionType?
        /**
         * Describes the format of the data in the object that is being queried.
         */
        var inputSerialization: InputSerialization?
        /**
         * The object key.
         */
        var key: String?
        /**
         * Describes the format of the data that you want Amazon S3 to return in response.
         */
        var outputSerialization: OutputSerialization?
        /**
         * Specifies if periodic request progress information should be enabled.
         */
        var requestProgress: RequestProgress?
        /**
         * Specifies the byte range of the object to get the records from. A record is processed
         * when its first byte is contained by the range. This parameter is optional, but when
         * specified, it must not be empty. See RFC 2616, Section 14.35.1 about how to specify the
         * start and end of the range.
         * ScanRangemay be used in the following ways:
         * <scanrange><start>50</start><end>100</end></scanrange>
         * - process only the records starting between the bytes 50 and 100 (inclusive, counting
         * from zero)
         * <scanrange><start>50</start></scanrange> -
         * process only the records starting after the byte 50
         * <scanrange><end>50</end></scanrange> -
         * process only the records within the last 50 bytes of the file.
         */
        var scanRange: ScanRange?
        /**
         * The SSE Algorithm used to encrypt the object. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side Encryption (Using Customer-Provided Encryption Keys.
         */
        var sseCustomerAlgorithm: String?
        /**
         * The SSE Customer Key. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side Encryption
         * (Using Customer-Provided Encryption Keys.
         */
        var sseCustomerKey: String?
        /**
         * The SSE Customer Key MD5. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side Encryption
         * (Using Customer-Provided Encryption Keys.
         */
        var sseCustomerKeyMd5: String?

        fun build(): SelectObjectContentRequest
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.InputSerialization] inside the given [block]
         */
        fun inputSerialization(block: InputSerialization.DslBuilder.() -> kotlin.Unit) {
            this.inputSerialization = InputSerialization.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.OutputSerialization] inside the given [block]
         */
        fun outputSerialization(block: OutputSerialization.DslBuilder.() -> kotlin.Unit) {
            this.outputSerialization = OutputSerialization.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.RequestProgress] inside the given [block]
         */
        fun requestProgress(block: RequestProgress.DslBuilder.() -> kotlin.Unit) {
            this.requestProgress = RequestProgress.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.ScanRange] inside the given [block]
         */
        fun scanRange(block: ScanRange.DslBuilder.() -> kotlin.Unit) {
            this.scanRange = ScanRange.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var bucket: String? = null
        override var expectedBucketOwner: String? = null
        override var expression: String? = null
        override var expressionType: ExpressionType? = null
        override var inputSerialization: InputSerialization? = null
        override var key: String? = null
        override var outputSerialization: OutputSerialization? = null
        override var requestProgress: RequestProgress? = null
        override var scanRange: ScanRange? = null
        override var sseCustomerAlgorithm: String? = null
        override var sseCustomerKey: String? = null
        override var sseCustomerKeyMd5: String? = null

        constructor(x: SelectObjectContentRequest) : this() {
            this.bucket = x.bucket
            this.expectedBucketOwner = x.expectedBucketOwner
            this.expression = x.expression
            this.expressionType = x.expressionType
            this.inputSerialization = x.inputSerialization
            this.key = x.key
            this.outputSerialization = x.outputSerialization
            this.requestProgress = x.requestProgress
            this.scanRange = x.scanRange
            this.sseCustomerAlgorithm = x.sseCustomerAlgorithm
            this.sseCustomerKey = x.sseCustomerKey
            this.sseCustomerKeyMd5 = x.sseCustomerKeyMd5
        }

        override fun build(): SelectObjectContentRequest = SelectObjectContentRequest(this)
        override fun bucket(bucket: String): FluentBuilder = apply { this.bucket = bucket }
        override fun expectedBucketOwner(expectedBucketOwner: String): FluentBuilder = apply { this.expectedBucketOwner = expectedBucketOwner }
        override fun expression(expression: String): FluentBuilder = apply { this.expression = expression }
        override fun expressionType(expressionType: ExpressionType): FluentBuilder = apply { this.expressionType = expressionType }
        override fun inputSerialization(inputSerialization: InputSerialization): FluentBuilder = apply { this.inputSerialization = inputSerialization }
        override fun key(key: String): FluentBuilder = apply { this.key = key }
        override fun outputSerialization(outputSerialization: OutputSerialization): FluentBuilder = apply { this.outputSerialization = outputSerialization }
        override fun requestProgress(requestProgress: RequestProgress): FluentBuilder = apply { this.requestProgress = requestProgress }
        override fun scanRange(scanRange: ScanRange): FluentBuilder = apply { this.scanRange = scanRange }
        override fun sseCustomerAlgorithm(sseCustomerAlgorithm: String): FluentBuilder = apply { this.sseCustomerAlgorithm = sseCustomerAlgorithm }
        override fun sseCustomerKey(sseCustomerKey: String): FluentBuilder = apply { this.sseCustomerKey = sseCustomerKey }
        override fun sseCustomerKeyMd5(sseCustomerKeyMd5: String): FluentBuilder = apply { this.sseCustomerKeyMd5 = sseCustomerKeyMd5 }
    }
}
