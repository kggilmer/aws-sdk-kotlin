// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model

import aws.smithy.kotlin.runtime.time.Instant

class UploadPartCopyRequest private constructor(builder: BuilderImpl) {
    /**
     * The bucket name.
     * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
     * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
     */
    val bucket: String? = builder.bucket
    /**
     * Specifies the source object for the copy operation. You specify the value in one of two
     * formats, depending on whether you want to access the source object through an <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points.html">access point:
     * For objects not accessed through an access point, specify the name of the source
     * bucket and key of the source object, separated by a slash (/). For example, to copy
     * the object reports/january.pdf from the bucket
     * awsexamplebucket, use
     * awsexamplebucket/reports/january.pdf. The value must be URL
     * encoded.
     * For objects accessed through access points, specify the Amazon Resource Name (ARN) of the object as accessed through the access point, in the format arn:aws:s3:<Region>:<account-id>:accesspoint/<access-point-name>/object/<key>. For example, to copy the object reports/january.pdf through access point my-access-point owned by account 123456789012 in Region us-west-2, use the URL encoding of arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf. The value must be URL encoded.
     * Amazon S3 supports copy operations using access points only when the source and destination buckets are in the same Amazon Web Services Region.
     * Alternatively, for objects accessed through Amazon S3 on Outposts, specify the ARN of the object as accessed in the format arn:aws:s3-outposts:<Region>:<account-id>:outpost/<outpost-id>/object/<key>. For example, to copy the object reports/january.pdf through outpost my-outpost owned by account 123456789012 in Region us-west-2, use the URL encoding of arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf. The value must be URL encoded.
     * To copy a specific version of an object, append ?versionId=<version-id>
     * to the value (for example,
     * awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893).
     * If you don't specify a version ID, Amazon S3 copies the latest version of the source
     * object.
     */
    val copySource: String? = builder.copySource
    /**
     * Copies the object if its entity tag (ETag) matches the specified tag.
     */
    val copySourceIfMatch: String? = builder.copySourceIfMatch
    /**
     * Copies the object if it has been modified since the specified time.
     */
    val copySourceIfModifiedSince: Instant? = builder.copySourceIfModifiedSince
    /**
     * Copies the object if its entity tag (ETag) is different than the specified ETag.
     */
    val copySourceIfNoneMatch: String? = builder.copySourceIfNoneMatch
    /**
     * Copies the object if it hasn't been modified since the specified time.
     */
    val copySourceIfUnmodifiedSince: Instant? = builder.copySourceIfUnmodifiedSince
    /**
     * The range of bytes to copy from the source object. The range value must use the form
     * bytes=first-last, where the first and last are the zero-based byte offsets to copy. For
     * example, bytes=0-9 indicates that you want to copy the first 10 bytes of the source. You
     * can copy a range only if the source object is greater than 5 MB.
     */
    val copySourceRange: String? = builder.copySourceRange
    /**
     * Specifies the algorithm to use when decrypting the source object (for example,
     * AES256).
     */
    val copySourceSseCustomerAlgorithm: String? = builder.copySourceSseCustomerAlgorithm
    /**
     * Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source
     * object. The encryption key provided in this header must be one that was used when the
     * source object was created.
     */
    val copySourceSseCustomerKey: String? = builder.copySourceSseCustomerKey
    /**
     * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
     * this header for a message integrity check to ensure that the encryption key was transmitted
     * without error.
     */
    val copySourceSseCustomerKeyMd5: String? = builder.copySourceSseCustomerKeyMd5
    /**
     * The account ID of the expected destination bucket owner. If the destination bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     */
    val expectedBucketOwner: String? = builder.expectedBucketOwner
    /**
     * The account ID of the expected source bucket owner. If the source bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     */
    val expectedSourceBucketOwner: String? = builder.expectedSourceBucketOwner
    /**
     * Object key for which the multipart upload was initiated.
     */
    val key: String? = builder.key
    /**
     * Part number of part being copied. This is a positive integer between 1 and
     * 10,000.
     */
    val partNumber: Int = builder.partNumber
    /**
     * Confirms that the requester knows that they will be charged for the request. Bucket
     * owners need not specify this parameter in their requests. For information about downloading
     * objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
     * Requestor Pays Buckets in the Amazon S3 User Guide.
     */
    val requestPayer: RequestPayer? = builder.requestPayer
    /**
     * Specifies the algorithm to use to when encrypting the object (for example,
     * AES256).
     */
    val sseCustomerAlgorithm: String? = builder.sseCustomerAlgorithm
    /**
     * Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This
     * value is used to store the object and then it is discarded; Amazon S3 does not store the
     * encryption key. The key must be appropriate for use with the algorithm specified in the
     * x-amz-server-side-encryption-customer-algorithm header. This must be the
     * same encryption key specified in the initiate multipart upload request.
     */
    val sseCustomerKey: String? = builder.sseCustomerKey
    /**
     * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
     * this header for a message integrity check to ensure that the encryption key was transmitted
     * without error.
     */
    val sseCustomerKeyMd5: String? = builder.sseCustomerKeyMd5
    /**
     * Upload ID identifying the multipart upload whose part is being copied.
     */
    val uploadId: String? = builder.uploadId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): UploadPartCopyRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("UploadPartCopyRequest(")
        append("bucket=$bucket,")
        append("copySource=$copySource,")
        append("copySourceIfMatch=$copySourceIfMatch,")
        append("copySourceIfModifiedSince=$copySourceIfModifiedSince,")
        append("copySourceIfNoneMatch=$copySourceIfNoneMatch,")
        append("copySourceIfUnmodifiedSince=$copySourceIfUnmodifiedSince,")
        append("copySourceRange=$copySourceRange,")
        append("copySourceSseCustomerAlgorithm=$copySourceSseCustomerAlgorithm,")
        append("copySourceSseCustomerKey=*** Sensitive Data Redacted ***,")
        append("copySourceSseCustomerKeyMd5=$copySourceSseCustomerKeyMd5,")
        append("expectedBucketOwner=$expectedBucketOwner,")
        append("expectedSourceBucketOwner=$expectedSourceBucketOwner,")
        append("key=$key,")
        append("partNumber=$partNumber,")
        append("requestPayer=$requestPayer,")
        append("sseCustomerAlgorithm=$sseCustomerAlgorithm,")
        append("sseCustomerKey=*** Sensitive Data Redacted ***,")
        append("sseCustomerKeyMd5=$sseCustomerKeyMd5,")
        append("uploadId=$uploadId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = bucket?.hashCode() ?: 0
        result = 31 * result + (copySource?.hashCode() ?: 0)
        result = 31 * result + (copySourceIfMatch?.hashCode() ?: 0)
        result = 31 * result + (copySourceIfModifiedSince?.hashCode() ?: 0)
        result = 31 * result + (copySourceIfNoneMatch?.hashCode() ?: 0)
        result = 31 * result + (copySourceIfUnmodifiedSince?.hashCode() ?: 0)
        result = 31 * result + (copySourceRange?.hashCode() ?: 0)
        result = 31 * result + (copySourceSseCustomerAlgorithm?.hashCode() ?: 0)
        result = 31 * result + (copySourceSseCustomerKey?.hashCode() ?: 0)
        result = 31 * result + (copySourceSseCustomerKeyMd5?.hashCode() ?: 0)
        result = 31 * result + (expectedBucketOwner?.hashCode() ?: 0)
        result = 31 * result + (expectedSourceBucketOwner?.hashCode() ?: 0)
        result = 31 * result + (key?.hashCode() ?: 0)
        result = 31 * result + (partNumber)
        result = 31 * result + (requestPayer?.hashCode() ?: 0)
        result = 31 * result + (sseCustomerAlgorithm?.hashCode() ?: 0)
        result = 31 * result + (sseCustomerKey?.hashCode() ?: 0)
        result = 31 * result + (sseCustomerKeyMd5?.hashCode() ?: 0)
        result = 31 * result + (uploadId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as UploadPartCopyRequest

        if (bucket != other.bucket) return false
        if (copySource != other.copySource) return false
        if (copySourceIfMatch != other.copySourceIfMatch) return false
        if (copySourceIfModifiedSince != other.copySourceIfModifiedSince) return false
        if (copySourceIfNoneMatch != other.copySourceIfNoneMatch) return false
        if (copySourceIfUnmodifiedSince != other.copySourceIfUnmodifiedSince) return false
        if (copySourceRange != other.copySourceRange) return false
        if (copySourceSseCustomerAlgorithm != other.copySourceSseCustomerAlgorithm) return false
        if (copySourceSseCustomerKey != other.copySourceSseCustomerKey) return false
        if (copySourceSseCustomerKeyMd5 != other.copySourceSseCustomerKeyMd5) return false
        if (expectedBucketOwner != other.expectedBucketOwner) return false
        if (expectedSourceBucketOwner != other.expectedSourceBucketOwner) return false
        if (key != other.key) return false
        if (partNumber != other.partNumber) return false
        if (requestPayer != other.requestPayer) return false
        if (sseCustomerAlgorithm != other.sseCustomerAlgorithm) return false
        if (sseCustomerKey != other.sseCustomerKey) return false
        if (sseCustomerKeyMd5 != other.sseCustomerKeyMd5) return false
        if (uploadId != other.uploadId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): UploadPartCopyRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): UploadPartCopyRequest
        /**
         * The bucket name.
         * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
         * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
         */
        fun bucket(bucket: String): FluentBuilder
        /**
         * Specifies the source object for the copy operation. You specify the value in one of two
         * formats, depending on whether you want to access the source object through an <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points.html">access point:
         * For objects not accessed through an access point, specify the name of the source
         * bucket and key of the source object, separated by a slash (/). For example, to copy
         * the object reports/january.pdf from the bucket
         * awsexamplebucket, use
         * awsexamplebucket/reports/january.pdf. The value must be URL
         * encoded.
         * For objects accessed through access points, specify the Amazon Resource Name (ARN) of the object as accessed through the access point, in the format arn:aws:s3:<Region>:<account-id>:accesspoint/<access-point-name>/object/<key>. For example, to copy the object reports/january.pdf through access point my-access-point owned by account 123456789012 in Region us-west-2, use the URL encoding of arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf. The value must be URL encoded.
         * Amazon S3 supports copy operations using access points only when the source and destination buckets are in the same Amazon Web Services Region.
         * Alternatively, for objects accessed through Amazon S3 on Outposts, specify the ARN of the object as accessed in the format arn:aws:s3-outposts:<Region>:<account-id>:outpost/<outpost-id>/object/<key>. For example, to copy the object reports/january.pdf through outpost my-outpost owned by account 123456789012 in Region us-west-2, use the URL encoding of arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf. The value must be URL encoded.
         * To copy a specific version of an object, append ?versionId=<version-id>
         * to the value (for example,
         * awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893).
         * If you don't specify a version ID, Amazon S3 copies the latest version of the source
         * object.
         */
        fun copySource(copySource: String): FluentBuilder
        /**
         * Copies the object if its entity tag (ETag) matches the specified tag.
         */
        fun copySourceIfMatch(copySourceIfMatch: String): FluentBuilder
        /**
         * Copies the object if it has been modified since the specified time.
         */
        fun copySourceIfModifiedSince(copySourceIfModifiedSince: Instant): FluentBuilder
        /**
         * Copies the object if its entity tag (ETag) is different than the specified ETag.
         */
        fun copySourceIfNoneMatch(copySourceIfNoneMatch: String): FluentBuilder
        /**
         * Copies the object if it hasn't been modified since the specified time.
         */
        fun copySourceIfUnmodifiedSince(copySourceIfUnmodifiedSince: Instant): FluentBuilder
        /**
         * The range of bytes to copy from the source object. The range value must use the form
         * bytes=first-last, where the first and last are the zero-based byte offsets to copy. For
         * example, bytes=0-9 indicates that you want to copy the first 10 bytes of the source. You
         * can copy a range only if the source object is greater than 5 MB.
         */
        fun copySourceRange(copySourceRange: String): FluentBuilder
        /**
         * Specifies the algorithm to use when decrypting the source object (for example,
         * AES256).
         */
        fun copySourceSseCustomerAlgorithm(copySourceSseCustomerAlgorithm: String): FluentBuilder
        /**
         * Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source
         * object. The encryption key provided in this header must be one that was used when the
         * source object was created.
         */
        fun copySourceSseCustomerKey(copySourceSseCustomerKey: String): FluentBuilder
        /**
         * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
         * this header for a message integrity check to ensure that the encryption key was transmitted
         * without error.
         */
        fun copySourceSseCustomerKeyMd5(copySourceSseCustomerKeyMd5: String): FluentBuilder
        /**
         * The account ID of the expected destination bucket owner. If the destination bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        fun expectedBucketOwner(expectedBucketOwner: String): FluentBuilder
        /**
         * The account ID of the expected source bucket owner. If the source bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        fun expectedSourceBucketOwner(expectedSourceBucketOwner: String): FluentBuilder
        /**
         * Object key for which the multipart upload was initiated.
         */
        fun key(key: String): FluentBuilder
        /**
         * Part number of part being copied. This is a positive integer between 1 and
         * 10,000.
         */
        fun partNumber(partNumber: Int): FluentBuilder
        /**
         * Confirms that the requester knows that they will be charged for the request. Bucket
         * owners need not specify this parameter in their requests. For information about downloading
         * objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
         * Requestor Pays Buckets in the Amazon S3 User Guide.
         */
        fun requestPayer(requestPayer: RequestPayer): FluentBuilder
        /**
         * Specifies the algorithm to use to when encrypting the object (for example,
         * AES256).
         */
        fun sseCustomerAlgorithm(sseCustomerAlgorithm: String): FluentBuilder
        /**
         * Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This
         * value is used to store the object and then it is discarded; Amazon S3 does not store the
         * encryption key. The key must be appropriate for use with the algorithm specified in the
         * x-amz-server-side-encryption-customer-algorithm header. This must be the
         * same encryption key specified in the initiate multipart upload request.
         */
        fun sseCustomerKey(sseCustomerKey: String): FluentBuilder
        /**
         * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
         * this header for a message integrity check to ensure that the encryption key was transmitted
         * without error.
         */
        fun sseCustomerKeyMd5(sseCustomerKeyMd5: String): FluentBuilder
        /**
         * Upload ID identifying the multipart upload whose part is being copied.
         */
        fun uploadId(uploadId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The bucket name.
         * When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points in the Amazon S3 User Guide.
         * When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts in the Amazon S3 User Guide.
         */
        var bucket: String?
        /**
         * Specifies the source object for the copy operation. You specify the value in one of two
         * formats, depending on whether you want to access the source object through an <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points.html">access point:
         * For objects not accessed through an access point, specify the name of the source
         * bucket and key of the source object, separated by a slash (/). For example, to copy
         * the object reports/january.pdf from the bucket
         * awsexamplebucket, use
         * awsexamplebucket/reports/january.pdf. The value must be URL
         * encoded.
         * For objects accessed through access points, specify the Amazon Resource Name (ARN) of the object as accessed through the access point, in the format arn:aws:s3:<Region>:<account-id>:accesspoint/<access-point-name>/object/<key>. For example, to copy the object reports/january.pdf through access point my-access-point owned by account 123456789012 in Region us-west-2, use the URL encoding of arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf. The value must be URL encoded.
         * Amazon S3 supports copy operations using access points only when the source and destination buckets are in the same Amazon Web Services Region.
         * Alternatively, for objects accessed through Amazon S3 on Outposts, specify the ARN of the object as accessed in the format arn:aws:s3-outposts:<Region>:<account-id>:outpost/<outpost-id>/object/<key>. For example, to copy the object reports/january.pdf through outpost my-outpost owned by account 123456789012 in Region us-west-2, use the URL encoding of arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf. The value must be URL encoded.
         * To copy a specific version of an object, append ?versionId=<version-id>
         * to the value (for example,
         * awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893).
         * If you don't specify a version ID, Amazon S3 copies the latest version of the source
         * object.
         */
        var copySource: String?
        /**
         * Copies the object if its entity tag (ETag) matches the specified tag.
         */
        var copySourceIfMatch: String?
        /**
         * Copies the object if it has been modified since the specified time.
         */
        var copySourceIfModifiedSince: Instant?
        /**
         * Copies the object if its entity tag (ETag) is different than the specified ETag.
         */
        var copySourceIfNoneMatch: String?
        /**
         * Copies the object if it hasn't been modified since the specified time.
         */
        var copySourceIfUnmodifiedSince: Instant?
        /**
         * The range of bytes to copy from the source object. The range value must use the form
         * bytes=first-last, where the first and last are the zero-based byte offsets to copy. For
         * example, bytes=0-9 indicates that you want to copy the first 10 bytes of the source. You
         * can copy a range only if the source object is greater than 5 MB.
         */
        var copySourceRange: String?
        /**
         * Specifies the algorithm to use when decrypting the source object (for example,
         * AES256).
         */
        var copySourceSseCustomerAlgorithm: String?
        /**
         * Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source
         * object. The encryption key provided in this header must be one that was used when the
         * source object was created.
         */
        var copySourceSseCustomerKey: String?
        /**
         * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
         * this header for a message integrity check to ensure that the encryption key was transmitted
         * without error.
         */
        var copySourceSseCustomerKeyMd5: String?
        /**
         * The account ID of the expected destination bucket owner. If the destination bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        var expectedBucketOwner: String?
        /**
         * The account ID of the expected source bucket owner. If the source bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        var expectedSourceBucketOwner: String?
        /**
         * Object key for which the multipart upload was initiated.
         */
        var key: String?
        /**
         * Part number of part being copied. This is a positive integer between 1 and
         * 10,000.
         */
        var partNumber: Int
        /**
         * Confirms that the requester knows that they will be charged for the request. Bucket
         * owners need not specify this parameter in their requests. For information about downloading
         * objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
         * Requestor Pays Buckets in the Amazon S3 User Guide.
         */
        var requestPayer: RequestPayer?
        /**
         * Specifies the algorithm to use to when encrypting the object (for example,
         * AES256).
         */
        var sseCustomerAlgorithm: String?
        /**
         * Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This
         * value is used to store the object and then it is discarded; Amazon S3 does not store the
         * encryption key. The key must be appropriate for use with the algorithm specified in the
         * x-amz-server-side-encryption-customer-algorithm header. This must be the
         * same encryption key specified in the initiate multipart upload request.
         */
        var sseCustomerKey: String?
        /**
         * Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
         * this header for a message integrity check to ensure that the encryption key was transmitted
         * without error.
         */
        var sseCustomerKeyMd5: String?
        /**
         * Upload ID identifying the multipart upload whose part is being copied.
         */
        var uploadId: String?

        fun build(): UploadPartCopyRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var bucket: String? = null
        override var copySource: String? = null
        override var copySourceIfMatch: String? = null
        override var copySourceIfModifiedSince: Instant? = null
        override var copySourceIfNoneMatch: String? = null
        override var copySourceIfUnmodifiedSince: Instant? = null
        override var copySourceRange: String? = null
        override var copySourceSseCustomerAlgorithm: String? = null
        override var copySourceSseCustomerKey: String? = null
        override var copySourceSseCustomerKeyMd5: String? = null
        override var expectedBucketOwner: String? = null
        override var expectedSourceBucketOwner: String? = null
        override var key: String? = null
        override var partNumber: Int = 0
        override var requestPayer: RequestPayer? = null
        override var sseCustomerAlgorithm: String? = null
        override var sseCustomerKey: String? = null
        override var sseCustomerKeyMd5: String? = null
        override var uploadId: String? = null

        constructor(x: UploadPartCopyRequest) : this() {
            this.bucket = x.bucket
            this.copySource = x.copySource
            this.copySourceIfMatch = x.copySourceIfMatch
            this.copySourceIfModifiedSince = x.copySourceIfModifiedSince
            this.copySourceIfNoneMatch = x.copySourceIfNoneMatch
            this.copySourceIfUnmodifiedSince = x.copySourceIfUnmodifiedSince
            this.copySourceRange = x.copySourceRange
            this.copySourceSseCustomerAlgorithm = x.copySourceSseCustomerAlgorithm
            this.copySourceSseCustomerKey = x.copySourceSseCustomerKey
            this.copySourceSseCustomerKeyMd5 = x.copySourceSseCustomerKeyMd5
            this.expectedBucketOwner = x.expectedBucketOwner
            this.expectedSourceBucketOwner = x.expectedSourceBucketOwner
            this.key = x.key
            this.partNumber = x.partNumber
            this.requestPayer = x.requestPayer
            this.sseCustomerAlgorithm = x.sseCustomerAlgorithm
            this.sseCustomerKey = x.sseCustomerKey
            this.sseCustomerKeyMd5 = x.sseCustomerKeyMd5
            this.uploadId = x.uploadId
        }

        override fun build(): UploadPartCopyRequest = UploadPartCopyRequest(this)
        override fun bucket(bucket: String): FluentBuilder = apply { this.bucket = bucket }
        override fun copySource(copySource: String): FluentBuilder = apply { this.copySource = copySource }
        override fun copySourceIfMatch(copySourceIfMatch: String): FluentBuilder = apply { this.copySourceIfMatch = copySourceIfMatch }
        override fun copySourceIfModifiedSince(copySourceIfModifiedSince: Instant): FluentBuilder = apply { this.copySourceIfModifiedSince = copySourceIfModifiedSince }
        override fun copySourceIfNoneMatch(copySourceIfNoneMatch: String): FluentBuilder = apply { this.copySourceIfNoneMatch = copySourceIfNoneMatch }
        override fun copySourceIfUnmodifiedSince(copySourceIfUnmodifiedSince: Instant): FluentBuilder = apply { this.copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince }
        override fun copySourceRange(copySourceRange: String): FluentBuilder = apply { this.copySourceRange = copySourceRange }
        override fun copySourceSseCustomerAlgorithm(copySourceSseCustomerAlgorithm: String): FluentBuilder = apply { this.copySourceSseCustomerAlgorithm = copySourceSseCustomerAlgorithm }
        override fun copySourceSseCustomerKey(copySourceSseCustomerKey: String): FluentBuilder = apply { this.copySourceSseCustomerKey = copySourceSseCustomerKey }
        override fun copySourceSseCustomerKeyMd5(copySourceSseCustomerKeyMd5: String): FluentBuilder = apply { this.copySourceSseCustomerKeyMd5 = copySourceSseCustomerKeyMd5 }
        override fun expectedBucketOwner(expectedBucketOwner: String): FluentBuilder = apply { this.expectedBucketOwner = expectedBucketOwner }
        override fun expectedSourceBucketOwner(expectedSourceBucketOwner: String): FluentBuilder = apply { this.expectedSourceBucketOwner = expectedSourceBucketOwner }
        override fun key(key: String): FluentBuilder = apply { this.key = key }
        override fun partNumber(partNumber: Int): FluentBuilder = apply { this.partNumber = partNumber }
        override fun requestPayer(requestPayer: RequestPayer): FluentBuilder = apply { this.requestPayer = requestPayer }
        override fun sseCustomerAlgorithm(sseCustomerAlgorithm: String): FluentBuilder = apply { this.sseCustomerAlgorithm = sseCustomerAlgorithm }
        override fun sseCustomerKey(sseCustomerKey: String): FluentBuilder = apply { this.sseCustomerKey = sseCustomerKey }
        override fun sseCustomerKeyMd5(sseCustomerKeyMd5: String): FluentBuilder = apply { this.sseCustomerKeyMd5 = sseCustomerKeyMd5 }
        override fun uploadId(uploadId: String): FluentBuilder = apply { this.uploadId = uploadId }
    }
}
