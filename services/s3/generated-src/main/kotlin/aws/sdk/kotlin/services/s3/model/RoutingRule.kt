// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Specifies the redirect behavior and when a redirect is applied. For more information
 * about routing rules, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html#advanced-conditional-redirects">Configuring advanced conditional redirects in the
 * Amazon S3 User Guide.
 */
class RoutingRule private constructor(builder: BuilderImpl) {
    /**
     * A container for describing a condition that must be met for the specified redirect to
     * apply. For example, 1. If request is for pages in the /docs folder, redirect
     * to the /documents folder. 2. If request results in HTTP error 4xx, redirect
     * request to another host where you might process the error.
     */
    val condition: Condition? = builder.condition
    /**
     * Container for redirect information. You can redirect requests to another host, to
     * another page, or with another protocol. In the event of an error, you can specify a
     * different error code to return.
     */
    val redirect: Redirect? = builder.redirect

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): RoutingRule = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("RoutingRule(")
        append("condition=$condition,")
        append("redirect=$redirect)")
    }

    override fun hashCode(): kotlin.Int {
        var result = condition?.hashCode() ?: 0
        result = 31 * result + (redirect?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as RoutingRule

        if (condition != other.condition) return false
        if (redirect != other.redirect) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): RoutingRule = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): RoutingRule
        /**
         * A container for describing a condition that must be met for the specified redirect to
         * apply. For example, 1. If request is for pages in the /docs folder, redirect
         * to the /documents folder. 2. If request results in HTTP error 4xx, redirect
         * request to another host where you might process the error.
         */
        fun condition(condition: Condition): FluentBuilder
        /**
         * Container for redirect information. You can redirect requests to another host, to
         * another page, or with another protocol. In the event of an error, you can specify a
         * different error code to return.
         */
        fun redirect(redirect: Redirect): FluentBuilder
    }

    interface DslBuilder {
        /**
         * A container for describing a condition that must be met for the specified redirect to
         * apply. For example, 1. If request is for pages in the /docs folder, redirect
         * to the /documents folder. 2. If request results in HTTP error 4xx, redirect
         * request to another host where you might process the error.
         */
        var condition: Condition?
        /**
         * Container for redirect information. You can redirect requests to another host, to
         * another page, or with another protocol. In the event of an error, you can specify a
         * different error code to return.
         */
        var redirect: Redirect?

        fun build(): RoutingRule
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.Condition] inside the given [block]
         */
        fun condition(block: Condition.DslBuilder.() -> kotlin.Unit) {
            this.condition = Condition.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.Redirect] inside the given [block]
         */
        fun redirect(block: Redirect.DslBuilder.() -> kotlin.Unit) {
            this.redirect = Redirect.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var condition: Condition? = null
        override var redirect: Redirect? = null

        constructor(x: RoutingRule) : this() {
            this.condition = x.condition
            this.redirect = x.redirect
        }

        override fun build(): RoutingRule = RoutingRule(this)
        override fun condition(condition: Condition): FluentBuilder = apply { this.condition = condition }
        override fun redirect(redirect: Redirect): FluentBuilder = apply { this.redirect = redirect }
    }
}
