// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * The container for the completed multipart upload details.
 */
class CompletedMultipartUpload private constructor(builder: BuilderImpl) {
    /**
     * Array of CompletedPart data types.
     */
    val parts: List<CompletedPart>? = builder.parts

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CompletedMultipartUpload = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CompletedMultipartUpload(")
        append("parts=$parts)")
    }

    override fun hashCode(): kotlin.Int {
        var result = parts?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CompletedMultipartUpload

        if (parts != other.parts) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CompletedMultipartUpload = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CompletedMultipartUpload
        /**
         * Array of CompletedPart data types.
         */
        fun parts(parts: List<CompletedPart>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Array of CompletedPart data types.
         */
        var parts: List<CompletedPart>?

        fun build(): CompletedMultipartUpload
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var parts: List<CompletedPart>? = null

        constructor(x: CompletedMultipartUpload) : this() {
            this.parts = x.parts
        }

        override fun build(): CompletedMultipartUpload = CompletedMultipartUpload(this)
        override fun parts(parts: List<CompletedPart>): FluentBuilder = apply { this.parts = parts }
    }
}
