// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys
 * for a bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html">PUT Bucket logging in the
 * Amazon S3 API Reference.
 */
class LoggingEnabled private constructor(builder: BuilderImpl) {
    /**
     * Specifies the bucket where you want Amazon S3 to store server access logs. You can have your
     * logs delivered to any bucket that you own, including the same bucket that is being logged.
     * You can also configure multiple buckets to deliver their logs to the same target bucket. In
     * this case, you should choose a different TargetPrefix for each source bucket
     * so that the delivered log files can be distinguished by key.
     */
    val targetBucket: String? = builder.targetBucket
    /**
     * Container for granting information.
     */
    val targetGrants: List<TargetGrant>? = builder.targetGrants
    /**
     * A prefix for all log object keys. If you store log files from multiple Amazon S3 buckets in a
     * single bucket, you can use a prefix to distinguish which log files came from which
     * bucket.
     */
    val targetPrefix: String? = builder.targetPrefix

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): LoggingEnabled = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("LoggingEnabled(")
        append("targetBucket=$targetBucket,")
        append("targetGrants=$targetGrants,")
        append("targetPrefix=$targetPrefix)")
    }

    override fun hashCode(): kotlin.Int {
        var result = targetBucket?.hashCode() ?: 0
        result = 31 * result + (targetGrants?.hashCode() ?: 0)
        result = 31 * result + (targetPrefix?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as LoggingEnabled

        if (targetBucket != other.targetBucket) return false
        if (targetGrants != other.targetGrants) return false
        if (targetPrefix != other.targetPrefix) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): LoggingEnabled = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): LoggingEnabled
        /**
         * Specifies the bucket where you want Amazon S3 to store server access logs. You can have your
         * logs delivered to any bucket that you own, including the same bucket that is being logged.
         * You can also configure multiple buckets to deliver their logs to the same target bucket. In
         * this case, you should choose a different TargetPrefix for each source bucket
         * so that the delivered log files can be distinguished by key.
         */
        fun targetBucket(targetBucket: String): FluentBuilder
        /**
         * Container for granting information.
         */
        fun targetGrants(targetGrants: List<TargetGrant>): FluentBuilder
        /**
         * A prefix for all log object keys. If you store log files from multiple Amazon S3 buckets in a
         * single bucket, you can use a prefix to distinguish which log files came from which
         * bucket.
         */
        fun targetPrefix(targetPrefix: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Specifies the bucket where you want Amazon S3 to store server access logs. You can have your
         * logs delivered to any bucket that you own, including the same bucket that is being logged.
         * You can also configure multiple buckets to deliver their logs to the same target bucket. In
         * this case, you should choose a different TargetPrefix for each source bucket
         * so that the delivered log files can be distinguished by key.
         */
        var targetBucket: String?
        /**
         * Container for granting information.
         */
        var targetGrants: List<TargetGrant>?
        /**
         * A prefix for all log object keys. If you store log files from multiple Amazon S3 buckets in a
         * single bucket, you can use a prefix to distinguish which log files came from which
         * bucket.
         */
        var targetPrefix: String?

        fun build(): LoggingEnabled
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var targetBucket: String? = null
        override var targetGrants: List<TargetGrant>? = null
        override var targetPrefix: String? = null

        constructor(x: LoggingEnabled) : this() {
            this.targetBucket = x.targetBucket
            this.targetGrants = x.targetGrants
            this.targetPrefix = x.targetPrefix
        }

        override fun build(): LoggingEnabled = LoggingEnabled(this)
        override fun targetBucket(targetBucket: String): FluentBuilder = apply { this.targetBucket = targetBucket }
        override fun targetGrants(targetGrants: List<TargetGrant>): FluentBuilder = apply { this.targetGrants = targetGrants }
        override fun targetPrefix(targetPrefix: String): FluentBuilder = apply { this.targetPrefix = targetPrefix }
    }
}
