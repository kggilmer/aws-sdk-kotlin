// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Specifies the configuration for publishing messages to an Amazon Simple Queue Service
 * (Amazon SQS) queue when Amazon S3 detects specified events.
 */
class QueueConfiguration private constructor(builder: BuilderImpl) {
    /**
     * A collection of bucket events for which to send notifications
     */
    val events: List<Event>? = builder.events
    /**
     * Specifies object key name filtering rules. For information about key name filtering, see
     * <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring
     * Event Notifications in the Amazon S3 User Guide.
     */
    val filter: NotificationConfigurationFilter? = builder.filter
    /**
     * An optional unique identifier for configurations in a notification configuration. If you
     * don't provide one, Amazon S3 will assign an ID.
     */
    val id: String? = builder.id
    /**
     * The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 publishes a message
     * when it detects events of the specified type.
     */
    val queueArn: String? = builder.queueArn

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): QueueConfiguration = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("QueueConfiguration(")
        append("events=$events,")
        append("filter=$filter,")
        append("id=$id,")
        append("queueArn=$queueArn)")
    }

    override fun hashCode(): kotlin.Int {
        var result = events?.hashCode() ?: 0
        result = 31 * result + (filter?.hashCode() ?: 0)
        result = 31 * result + (id?.hashCode() ?: 0)
        result = 31 * result + (queueArn?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as QueueConfiguration

        if (events != other.events) return false
        if (filter != other.filter) return false
        if (id != other.id) return false
        if (queueArn != other.queueArn) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): QueueConfiguration = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): QueueConfiguration
        /**
         * A collection of bucket events for which to send notifications
         */
        fun events(events: List<Event>): FluentBuilder
        /**
         * Specifies object key name filtering rules. For information about key name filtering, see
         * <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring
         * Event Notifications in the Amazon S3 User Guide.
         */
        fun filter(filter: NotificationConfigurationFilter): FluentBuilder
        /**
         * An optional unique identifier for configurations in a notification configuration. If you
         * don't provide one, Amazon S3 will assign an ID.
         */
        fun id(id: String): FluentBuilder
        /**
         * The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 publishes a message
         * when it detects events of the specified type.
         */
        fun queueArn(queueArn: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * A collection of bucket events for which to send notifications
         */
        var events: List<Event>?
        /**
         * Specifies object key name filtering rules. For information about key name filtering, see
         * <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring
         * Event Notifications in the Amazon S3 User Guide.
         */
        var filter: NotificationConfigurationFilter?
        /**
         * An optional unique identifier for configurations in a notification configuration. If you
         * don't provide one, Amazon S3 will assign an ID.
         */
        var id: String?
        /**
         * The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 publishes a message
         * when it detects events of the specified type.
         */
        var queueArn: String?

        fun build(): QueueConfiguration
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.NotificationConfigurationFilter] inside the given [block]
         */
        fun filter(block: NotificationConfigurationFilter.DslBuilder.() -> kotlin.Unit) {
            this.filter = NotificationConfigurationFilter.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var events: List<Event>? = null
        override var filter: NotificationConfigurationFilter? = null
        override var id: String? = null
        override var queueArn: String? = null

        constructor(x: QueueConfiguration) : this() {
            this.events = x.events
            this.filter = x.filter
            this.id = x.id
            this.queueArn = x.queueArn
        }

        override fun build(): QueueConfiguration = QueueConfiguration(this)
        override fun events(events: List<Event>): FluentBuilder = apply { this.events = events }
        override fun filter(filter: NotificationConfigurationFilter): FluentBuilder = apply { this.filter = filter }
        override fun id(id: String): FluentBuilder = apply { this.id = id }
        override fun queueArn(queueArn: String): FluentBuilder = apply { this.queueArn = queueArn }
    }
}
