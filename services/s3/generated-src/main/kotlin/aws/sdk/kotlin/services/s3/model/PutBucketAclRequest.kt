// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



class PutBucketAclRequest private constructor(builder: BuilderImpl) {
    /**
     * Contains the elements that set the ACL permissions for an object per grantee.
     */
    val accessControlPolicy: AccessControlPolicy? = builder.accessControlPolicy
    /**
     * The canned ACL to apply to the bucket.
     */
    val acl: BucketCannedAcl? = builder.acl
    /**
     * The bucket to which to apply the ACL.
     */
    val bucket: String? = builder.bucket
    /**
     * The base64-encoded 128-bit MD5 digest of the data. This header must be used as a message
     * integrity check to verify that the request body was not corrupted in transit. For more
     * information, go to <a href="http://www.ietf.org/rfc/rfc1864.txt">RFC
     * 1864.
     * For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
     */
    val contentMd5: String? = builder.contentMd5
    /**
     * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     */
    val expectedBucketOwner: String? = builder.expectedBucketOwner
    /**
     * Allows grantee the read, write, read ACP, and write ACP permissions on the
     * bucket.
     */
    val grantFullControl: String? = builder.grantFullControl
    /**
     * Allows grantee to list the objects in the bucket.
     */
    val grantRead: String? = builder.grantRead
    /**
     * Allows grantee to read the bucket ACL.
     */
    val grantReadAcp: String? = builder.grantReadAcp
    /**
     * Allows grantee to create new objects in the bucket.
     * For the bucket and object owners of existing objects, also allows deletions and overwrites of those objects.
     */
    val grantWrite: String? = builder.grantWrite
    /**
     * Allows grantee to write the ACL for the applicable bucket.
     */
    val grantWriteAcp: String? = builder.grantWriteAcp

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): PutBucketAclRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("PutBucketAclRequest(")
        append("accessControlPolicy=$accessControlPolicy,")
        append("acl=$acl,")
        append("bucket=$bucket,")
        append("contentMd5=$contentMd5,")
        append("expectedBucketOwner=$expectedBucketOwner,")
        append("grantFullControl=$grantFullControl,")
        append("grantRead=$grantRead,")
        append("grantReadAcp=$grantReadAcp,")
        append("grantWrite=$grantWrite,")
        append("grantWriteAcp=$grantWriteAcp)")
    }

    override fun hashCode(): kotlin.Int {
        var result = accessControlPolicy?.hashCode() ?: 0
        result = 31 * result + (acl?.hashCode() ?: 0)
        result = 31 * result + (bucket?.hashCode() ?: 0)
        result = 31 * result + (contentMd5?.hashCode() ?: 0)
        result = 31 * result + (expectedBucketOwner?.hashCode() ?: 0)
        result = 31 * result + (grantFullControl?.hashCode() ?: 0)
        result = 31 * result + (grantRead?.hashCode() ?: 0)
        result = 31 * result + (grantReadAcp?.hashCode() ?: 0)
        result = 31 * result + (grantWrite?.hashCode() ?: 0)
        result = 31 * result + (grantWriteAcp?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as PutBucketAclRequest

        if (accessControlPolicy != other.accessControlPolicy) return false
        if (acl != other.acl) return false
        if (bucket != other.bucket) return false
        if (contentMd5 != other.contentMd5) return false
        if (expectedBucketOwner != other.expectedBucketOwner) return false
        if (grantFullControl != other.grantFullControl) return false
        if (grantRead != other.grantRead) return false
        if (grantReadAcp != other.grantReadAcp) return false
        if (grantWrite != other.grantWrite) return false
        if (grantWriteAcp != other.grantWriteAcp) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): PutBucketAclRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): PutBucketAclRequest
        /**
         * Contains the elements that set the ACL permissions for an object per grantee.
         */
        fun accessControlPolicy(accessControlPolicy: AccessControlPolicy): FluentBuilder
        /**
         * The canned ACL to apply to the bucket.
         */
        fun acl(acl: BucketCannedAcl): FluentBuilder
        /**
         * The bucket to which to apply the ACL.
         */
        fun bucket(bucket: String): FluentBuilder
        /**
         * The base64-encoded 128-bit MD5 digest of the data. This header must be used as a message
         * integrity check to verify that the request body was not corrupted in transit. For more
         * information, go to <a href="http://www.ietf.org/rfc/rfc1864.txt">RFC
         * 1864.
         * For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
         */
        fun contentMd5(contentMd5: String): FluentBuilder
        /**
         * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        fun expectedBucketOwner(expectedBucketOwner: String): FluentBuilder
        /**
         * Allows grantee the read, write, read ACP, and write ACP permissions on the
         * bucket.
         */
        fun grantFullControl(grantFullControl: String): FluentBuilder
        /**
         * Allows grantee to list the objects in the bucket.
         */
        fun grantRead(grantRead: String): FluentBuilder
        /**
         * Allows grantee to read the bucket ACL.
         */
        fun grantReadAcp(grantReadAcp: String): FluentBuilder
        /**
         * Allows grantee to create new objects in the bucket.
         * For the bucket and object owners of existing objects, also allows deletions and overwrites of those objects.
         */
        fun grantWrite(grantWrite: String): FluentBuilder
        /**
         * Allows grantee to write the ACL for the applicable bucket.
         */
        fun grantWriteAcp(grantWriteAcp: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Contains the elements that set the ACL permissions for an object per grantee.
         */
        var accessControlPolicy: AccessControlPolicy?
        /**
         * The canned ACL to apply to the bucket.
         */
        var acl: BucketCannedAcl?
        /**
         * The bucket to which to apply the ACL.
         */
        var bucket: String?
        /**
         * The base64-encoded 128-bit MD5 digest of the data. This header must be used as a message
         * integrity check to verify that the request body was not corrupted in transit. For more
         * information, go to <a href="http://www.ietf.org/rfc/rfc1864.txt">RFC
         * 1864.
         * For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
         */
        var contentMd5: String?
        /**
         * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        var expectedBucketOwner: String?
        /**
         * Allows grantee the read, write, read ACP, and write ACP permissions on the
         * bucket.
         */
        var grantFullControl: String?
        /**
         * Allows grantee to list the objects in the bucket.
         */
        var grantRead: String?
        /**
         * Allows grantee to read the bucket ACL.
         */
        var grantReadAcp: String?
        /**
         * Allows grantee to create new objects in the bucket.
         * For the bucket and object owners of existing objects, also allows deletions and overwrites of those objects.
         */
        var grantWrite: String?
        /**
         * Allows grantee to write the ACL for the applicable bucket.
         */
        var grantWriteAcp: String?

        fun build(): PutBucketAclRequest
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.AccessControlPolicy] inside the given [block]
         */
        fun accessControlPolicy(block: AccessControlPolicy.DslBuilder.() -> kotlin.Unit) {
            this.accessControlPolicy = AccessControlPolicy.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var accessControlPolicy: AccessControlPolicy? = null
        override var acl: BucketCannedAcl? = null
        override var bucket: String? = null
        override var contentMd5: String? = null
        override var expectedBucketOwner: String? = null
        override var grantFullControl: String? = null
        override var grantRead: String? = null
        override var grantReadAcp: String? = null
        override var grantWrite: String? = null
        override var grantWriteAcp: String? = null

        constructor(x: PutBucketAclRequest) : this() {
            this.accessControlPolicy = x.accessControlPolicy
            this.acl = x.acl
            this.bucket = x.bucket
            this.contentMd5 = x.contentMd5
            this.expectedBucketOwner = x.expectedBucketOwner
            this.grantFullControl = x.grantFullControl
            this.grantRead = x.grantRead
            this.grantReadAcp = x.grantReadAcp
            this.grantWrite = x.grantWrite
            this.grantWriteAcp = x.grantWriteAcp
        }

        override fun build(): PutBucketAclRequest = PutBucketAclRequest(this)
        override fun accessControlPolicy(accessControlPolicy: AccessControlPolicy): FluentBuilder = apply { this.accessControlPolicy = accessControlPolicy }
        override fun acl(acl: BucketCannedAcl): FluentBuilder = apply { this.acl = acl }
        override fun bucket(bucket: String): FluentBuilder = apply { this.bucket = bucket }
        override fun contentMd5(contentMd5: String): FluentBuilder = apply { this.contentMd5 = contentMd5 }
        override fun expectedBucketOwner(expectedBucketOwner: String): FluentBuilder = apply { this.expectedBucketOwner = expectedBucketOwner }
        override fun grantFullControl(grantFullControl: String): FluentBuilder = apply { this.grantFullControl = grantFullControl }
        override fun grantRead(grantRead: String): FluentBuilder = apply { this.grantRead = grantRead }
        override fun grantReadAcp(grantReadAcp: String): FluentBuilder = apply { this.grantReadAcp = grantReadAcp }
        override fun grantWrite(grantWrite: String): FluentBuilder = apply { this.grantWrite = grantWrite }
        override fun grantWriteAcp(grantWriteAcp: String): FluentBuilder = apply { this.grantWriteAcp = grantWriteAcp }
    }
}
