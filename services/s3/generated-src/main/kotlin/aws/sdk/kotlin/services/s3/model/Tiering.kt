// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * The S3 Intelligent-Tiering storage class is designed to optimize storage costs by
 * automatically moving data to the most cost-effective storage access tier, without
 * additional operational overhead.
 */
class Tiering private constructor(builder: BuilderImpl) {
    /**
     * S3 Intelligent-Tiering access tier. See <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access">Storage class for
     * automatically optimizing frequently and infrequently accessed objects for a list
     * of access tiers in the S3 Intelligent-Tiering storage class.
     */
    val accessTier: IntelligentTieringAccessTier? = builder.accessTier
    /**
     * The number of consecutive days of no access after which an object will be eligible to be
     * transitioned to the corresponding tier. The minimum number of days specified for
     * Archive Access tier must be at least 90 days and Deep Archive Access tier must be at least
     * 180 days. The maximum can be up to 2 years (730 days).
     */
    val days: Int = builder.days

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): Tiering = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("Tiering(")
        append("accessTier=$accessTier,")
        append("days=$days)")
    }

    override fun hashCode(): kotlin.Int {
        var result = accessTier?.hashCode() ?: 0
        result = 31 * result + (days)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Tiering

        if (accessTier != other.accessTier) return false
        if (days != other.days) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): Tiering = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): Tiering
        /**
         * S3 Intelligent-Tiering access tier. See <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access">Storage class for
         * automatically optimizing frequently and infrequently accessed objects for a list
         * of access tiers in the S3 Intelligent-Tiering storage class.
         */
        fun accessTier(accessTier: IntelligentTieringAccessTier): FluentBuilder
        /**
         * The number of consecutive days of no access after which an object will be eligible to be
         * transitioned to the corresponding tier. The minimum number of days specified for
         * Archive Access tier must be at least 90 days and Deep Archive Access tier must be at least
         * 180 days. The maximum can be up to 2 years (730 days).
         */
        fun days(days: Int): FluentBuilder
    }

    interface DslBuilder {
        /**
         * S3 Intelligent-Tiering access tier. See <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access">Storage class for
         * automatically optimizing frequently and infrequently accessed objects for a list
         * of access tiers in the S3 Intelligent-Tiering storage class.
         */
        var accessTier: IntelligentTieringAccessTier?
        /**
         * The number of consecutive days of no access after which an object will be eligible to be
         * transitioned to the corresponding tier. The minimum number of days specified for
         * Archive Access tier must be at least 90 days and Deep Archive Access tier must be at least
         * 180 days. The maximum can be up to 2 years (730 days).
         */
        var days: Int

        fun build(): Tiering
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var accessTier: IntelligentTieringAccessTier? = null
        override var days: Int = 0

        constructor(x: Tiering) : this() {
            this.accessTier = x.accessTier
            this.days = x.days
        }

        override fun build(): Tiering = Tiering(this)
        override fun accessTier(accessTier: IntelligentTieringAccessTier): FluentBuilder = apply { this.accessTier = accessTier }
        override fun days(days: Int): FluentBuilder = apply { this.days = days }
    }
}
