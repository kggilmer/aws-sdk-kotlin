// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * The Filter is used to identify objects that the S3 Intelligent-Tiering
 * configuration applies to.
 */
class IntelligentTieringFilter private constructor(builder: BuilderImpl) {
    /**
     * A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter.
     * The operator must have at least two predicates, and an object must match all of the
     * predicates in order for the filter to apply.
     */
    val and: IntelligentTieringAndOperator? = builder.and
    /**
     * An object key name prefix that identifies the subset of objects to which the rule
     * applies.
     * Replacement must be made for object keys containing special characters (such as carriage returns) when using
     * XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
     * XML related object key constraints.
     */
    val prefix: String? = builder.prefix
    /**
     * A container of a key value name pair.
     */
    val tag: Tag? = builder.tag

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): IntelligentTieringFilter = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("IntelligentTieringFilter(")
        append("and=$and,")
        append("prefix=$prefix,")
        append("tag=$tag)")
    }

    override fun hashCode(): kotlin.Int {
        var result = and?.hashCode() ?: 0
        result = 31 * result + (prefix?.hashCode() ?: 0)
        result = 31 * result + (tag?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as IntelligentTieringFilter

        if (and != other.and) return false
        if (prefix != other.prefix) return false
        if (tag != other.tag) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): IntelligentTieringFilter = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): IntelligentTieringFilter
        /**
         * A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter.
         * The operator must have at least two predicates, and an object must match all of the
         * predicates in order for the filter to apply.
         */
        fun and(and: IntelligentTieringAndOperator): FluentBuilder
        /**
         * An object key name prefix that identifies the subset of objects to which the rule
         * applies.
         * Replacement must be made for object keys containing special characters (such as carriage returns) when using
         * XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
         * XML related object key constraints.
         */
        fun prefix(prefix: String): FluentBuilder
        /**
         * A container of a key value name pair.
         */
        fun tag(tag: Tag): FluentBuilder
    }

    interface DslBuilder {
        /**
         * A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter.
         * The operator must have at least two predicates, and an object must match all of the
         * predicates in order for the filter to apply.
         */
        var and: IntelligentTieringAndOperator?
        /**
         * An object key name prefix that identifies the subset of objects to which the rule
         * applies.
         * Replacement must be made for object keys containing special characters (such as carriage returns) when using
         * XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
         * XML related object key constraints.
         */
        var prefix: String?
        /**
         * A container of a key value name pair.
         */
        var tag: Tag?

        fun build(): IntelligentTieringFilter
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.IntelligentTieringAndOperator] inside the given [block]
         */
        fun and(block: IntelligentTieringAndOperator.DslBuilder.() -> kotlin.Unit) {
            this.and = IntelligentTieringAndOperator.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.Tag] inside the given [block]
         */
        fun tag(block: Tag.DslBuilder.() -> kotlin.Unit) {
            this.tag = Tag.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var and: IntelligentTieringAndOperator? = null
        override var prefix: String? = null
        override var tag: Tag? = null

        constructor(x: IntelligentTieringFilter) : this() {
            this.and = x.and
            this.prefix = x.prefix
            this.tag = x.tag
        }

        override fun build(): IntelligentTieringFilter = IntelligentTieringFilter(this)
        override fun and(and: IntelligentTieringAndOperator): FluentBuilder = apply { this.and = and }
        override fun prefix(prefix: String): FluentBuilder = apply { this.prefix = prefix }
        override fun tag(tag: Tag): FluentBuilder = apply { this.tag = tag }
    }
}
