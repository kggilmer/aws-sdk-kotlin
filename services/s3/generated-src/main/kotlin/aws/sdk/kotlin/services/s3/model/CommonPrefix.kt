// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Container for all (if there are any) keys between Prefix and the next occurrence of the
 * string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in
 * the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter
 * is a slash (/) as in notes/summer/july, the common prefix is notes/summer/.
 */
class CommonPrefix private constructor(builder: BuilderImpl) {
    /**
     * Container for the specified common prefix.
     */
    val prefix: String? = builder.prefix

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CommonPrefix = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CommonPrefix(")
        append("prefix=$prefix)")
    }

    override fun hashCode(): kotlin.Int {
        var result = prefix?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CommonPrefix

        if (prefix != other.prefix) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CommonPrefix = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CommonPrefix
        /**
         * Container for the specified common prefix.
         */
        fun prefix(prefix: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Container for the specified common prefix.
         */
        var prefix: String?

        fun build(): CommonPrefix
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var prefix: String? = null

        constructor(x: CommonPrefix) : this() {
            this.prefix = x.prefix
        }

        override fun build(): CommonPrefix = CommonPrefix(this)
        override fun prefix(prefix: String): FluentBuilder = apply { this.prefix = prefix }
    }
}
