// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Contains the bucket name, file format, bucket owner (optional), and prefix (optional)
 * where inventory results are published.
 */
class InventoryS3BucketDestination private constructor(builder: BuilderImpl) {
    /**
     * The account ID that owns the destination S3 bucket. If no account ID is provided, the
     * owner is not validated before exporting data.
     * Although this value is optional, we strongly recommend that you set it to help
     * prevent problems if the destination bucket ownership changes.
     */
    val accountId: String? = builder.accountId
    /**
     * The Amazon Resource Name (ARN) of the bucket where inventory results will be
     * published.
     */
    val bucket: String? = builder.bucket
    /**
     * Contains the type of server-side encryption used to encrypt the inventory
     * results.
     */
    val encryption: InventoryEncryption? = builder.encryption
    /**
     * Specifies the output format of the inventory results.
     */
    val format: InventoryFormat? = builder.format
    /**
     * The prefix that is prepended to all inventory results.
     */
    val prefix: String? = builder.prefix

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): InventoryS3BucketDestination = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("InventoryS3BucketDestination(")
        append("accountId=$accountId,")
        append("bucket=$bucket,")
        append("encryption=$encryption,")
        append("format=$format,")
        append("prefix=$prefix)")
    }

    override fun hashCode(): kotlin.Int {
        var result = accountId?.hashCode() ?: 0
        result = 31 * result + (bucket?.hashCode() ?: 0)
        result = 31 * result + (encryption?.hashCode() ?: 0)
        result = 31 * result + (format?.hashCode() ?: 0)
        result = 31 * result + (prefix?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as InventoryS3BucketDestination

        if (accountId != other.accountId) return false
        if (bucket != other.bucket) return false
        if (encryption != other.encryption) return false
        if (format != other.format) return false
        if (prefix != other.prefix) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): InventoryS3BucketDestination = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): InventoryS3BucketDestination
        /**
         * The account ID that owns the destination S3 bucket. If no account ID is provided, the
         * owner is not validated before exporting data.
         * Although this value is optional, we strongly recommend that you set it to help
         * prevent problems if the destination bucket ownership changes.
         */
        fun accountId(accountId: String): FluentBuilder
        /**
         * The Amazon Resource Name (ARN) of the bucket where inventory results will be
         * published.
         */
        fun bucket(bucket: String): FluentBuilder
        /**
         * Contains the type of server-side encryption used to encrypt the inventory
         * results.
         */
        fun encryption(encryption: InventoryEncryption): FluentBuilder
        /**
         * Specifies the output format of the inventory results.
         */
        fun format(format: InventoryFormat): FluentBuilder
        /**
         * The prefix that is prepended to all inventory results.
         */
        fun prefix(prefix: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The account ID that owns the destination S3 bucket. If no account ID is provided, the
         * owner is not validated before exporting data.
         * Although this value is optional, we strongly recommend that you set it to help
         * prevent problems if the destination bucket ownership changes.
         */
        var accountId: String?
        /**
         * The Amazon Resource Name (ARN) of the bucket where inventory results will be
         * published.
         */
        var bucket: String?
        /**
         * Contains the type of server-side encryption used to encrypt the inventory
         * results.
         */
        var encryption: InventoryEncryption?
        /**
         * Specifies the output format of the inventory results.
         */
        var format: InventoryFormat?
        /**
         * The prefix that is prepended to all inventory results.
         */
        var prefix: String?

        fun build(): InventoryS3BucketDestination
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.InventoryEncryption] inside the given [block]
         */
        fun encryption(block: InventoryEncryption.DslBuilder.() -> kotlin.Unit) {
            this.encryption = InventoryEncryption.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var accountId: String? = null
        override var bucket: String? = null
        override var encryption: InventoryEncryption? = null
        override var format: InventoryFormat? = null
        override var prefix: String? = null

        constructor(x: InventoryS3BucketDestination) : this() {
            this.accountId = x.accountId
            this.bucket = x.bucket
            this.encryption = x.encryption
            this.format = x.format
            this.prefix = x.prefix
        }

        override fun build(): InventoryS3BucketDestination = InventoryS3BucketDestination(this)
        override fun accountId(accountId: String): FluentBuilder = apply { this.accountId = accountId }
        override fun bucket(bucket: String): FluentBuilder = apply { this.bucket = bucket }
        override fun encryption(encryption: InventoryEncryption): FluentBuilder = apply { this.encryption = encryption }
        override fun format(format: InventoryFormat): FluentBuilder = apply { this.format = format }
        override fun prefix(prefix: String): FluentBuilder = apply { this.prefix = prefix }
    }
}
