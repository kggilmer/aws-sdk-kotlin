// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Specifies the use of SSE-KMS to encrypt delivered inventory reports.
 */
class Ssekms private constructor(builder: BuilderImpl) {
    /**
     * Specifies the ID of the Amazon Web Services Key Management Service (Amazon Web Services KMS) symmetric customer managed key
     * to use for encrypting inventory reports.
     */
    val keyId: String? = builder.keyId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): Ssekms = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("Ssekms(")
        append("keyId=*** Sensitive Data Redacted ***)")
    }

    override fun hashCode(): kotlin.Int {
        var result = keyId?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Ssekms

        if (keyId != other.keyId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): Ssekms = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): Ssekms
        /**
         * Specifies the ID of the Amazon Web Services Key Management Service (Amazon Web Services KMS) symmetric customer managed key
         * to use for encrypting inventory reports.
         */
        fun keyId(keyId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Specifies the ID of the Amazon Web Services Key Management Service (Amazon Web Services KMS) symmetric customer managed key
         * to use for encrypting inventory reports.
         */
        var keyId: String?

        fun build(): Ssekms
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var keyId: String? = null

        constructor(x: Ssekms) : this() {
            this.keyId = x.keyId
        }

        override fun build(): Ssekms = Ssekms(this)
        override fun keyId(keyId: String): FluentBuilder = apply { this.keyId = keyId }
    }
}
