// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * The container element for a bucket's policy status.
 */
class PolicyStatus private constructor(builder: BuilderImpl) {
    /**
     * The policy status for this bucket. TRUE indicates that this bucket is
     * public. FALSE indicates that the bucket is not public.
     */
    val isPublic: Boolean = builder.isPublic

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): PolicyStatus = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("PolicyStatus(")
        append("isPublic=$isPublic)")
    }

    override fun hashCode(): kotlin.Int {
        var result = isPublic.hashCode()
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as PolicyStatus

        if (isPublic != other.isPublic) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): PolicyStatus = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): PolicyStatus
        /**
         * The policy status for this bucket. TRUE indicates that this bucket is
         * public. FALSE indicates that the bucket is not public.
         */
        fun isPublic(isPublic: Boolean): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The policy status for this bucket. TRUE indicates that this bucket is
         * public. FALSE indicates that the bucket is not public.
         */
        var isPublic: Boolean

        fun build(): PolicyStatus
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var isPublic: Boolean = false

        constructor(x: PolicyStatus) : this() {
            this.isPublic = x.isPublic
        }

        override fun build(): PolicyStatus = PolicyStatus(this)
        override fun isPublic(isPublic: Boolean): FluentBuilder = apply { this.isPublic = isPublic }
    }
}
