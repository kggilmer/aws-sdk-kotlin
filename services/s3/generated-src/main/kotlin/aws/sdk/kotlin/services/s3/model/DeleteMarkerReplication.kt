// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Specifies whether Amazon S3 replicates delete markers. If you specify a Filter
 * in your replication configuration, you must also include a
 * DeleteMarkerReplication element. If your Filter includes a
 * Tag element, the DeleteMarkerReplication
 * Status must be set to Disabled, because Amazon S3 does not support replicating
 * delete markers for tag-based rules. For an example configuration, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config">Basic Rule Configuration.
 * For more information about delete marker replication, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html">Basic Rule
 * Configuration.
 * If you are using an earlier version of the replication configuration, Amazon S3 handles
 * replication of delete markers differently. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations">Backward Compatibility.
 */
class DeleteMarkerReplication private constructor(builder: BuilderImpl) {
    /**
     * Indicates whether to replicate delete markers.
     * Indicates whether to replicate delete markers.
     */
    val status: DeleteMarkerReplicationStatus? = builder.status

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DeleteMarkerReplication = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DeleteMarkerReplication(")
        append("status=$status)")
    }

    override fun hashCode(): kotlin.Int {
        var result = status?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DeleteMarkerReplication

        if (status != other.status) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DeleteMarkerReplication = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DeleteMarkerReplication
        /**
         * Indicates whether to replicate delete markers.
         * Indicates whether to replicate delete markers.
         */
        fun status(status: DeleteMarkerReplicationStatus): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Indicates whether to replicate delete markers.
         * Indicates whether to replicate delete markers.
         */
        var status: DeleteMarkerReplicationStatus?

        fun build(): DeleteMarkerReplication
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var status: DeleteMarkerReplicationStatus? = null

        constructor(x: DeleteMarkerReplication) : this() {
            this.status = x.status
        }

        override fun build(): DeleteMarkerReplication = DeleteMarkerReplication(this)
        override fun status(status: DeleteMarkerReplicationStatus): FluentBuilder = apply { this.status = status }
    }
}
