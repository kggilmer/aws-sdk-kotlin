// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * A lifecycle rule for individual objects in an Amazon S3 bucket.
 */
class LifecycleRule private constructor(builder: BuilderImpl) {
    /**
     * Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will
     * wait before permanently removing all parts of the upload. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config">
     * Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy in the
     * Amazon S3 User Guide.
     */
    val abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload? = builder.abortIncompleteMultipartUpload
    /**
     * Specifies the expiration for the lifecycle of the object in the form of date, days and,
     * whether the object has a delete marker.
     */
    val expiration: LifecycleExpiration? = builder.expiration
    /**
     * The Filter is used to identify objects that a Lifecycle Rule applies to. A
     * Filter must have exactly one of Prefix, Tag, or
     * And specified. Filter is required if the LifecycleRule
     * does not containt a Prefix element.
     */
    val filter: LifecycleRuleFilter? = builder.filter
    /**
     * Unique identifier for the rule. The value cannot be longer than 255 characters.
     */
    val id: String? = builder.id
    /**
     * Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently
     * deletes the noncurrent object versions. You set this lifecycle configuration action on a
     * bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent
     * object versions at a specific period in the object's lifetime.
     */
    val noncurrentVersionExpiration: NoncurrentVersionExpiration? = builder.noncurrentVersionExpiration
    /**
     * Specifies the transition rule for the lifecycle rule that describes when noncurrent
     * objects transition to a specific storage class. If your bucket is versioning-enabled (or
     * versioning is suspended), you can set this action to request that Amazon S3 transition
     * noncurrent object versions to a specific storage class at a set period in the object's
     * lifetime.
     */
    val noncurrentVersionTransitions: List<NoncurrentVersionTransition>? = builder.noncurrentVersionTransitions
    /**
     * Prefix identifying one or more objects to which the rule applies. This is
     * no longer used; use Filter instead.
     * Replacement must be made for object keys containing special characters (such as carriage returns) when using
     * XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
     * XML related object key constraints.
     */
    @Deprecated("No longer recommended for use. See AWS API documentation for more details.")
    val prefix: String? = builder.prefix
    /**
     * If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not
     * currently being applied.
     */
    val status: ExpirationStatus? = builder.status
    /**
     * Specifies when an Amazon S3 object transitions to a specified storage class.
     */
    val transitions: List<Transition>? = builder.transitions

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): LifecycleRule = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("LifecycleRule(")
        append("abortIncompleteMultipartUpload=$abortIncompleteMultipartUpload,")
        append("expiration=$expiration,")
        append("filter=$filter,")
        append("id=$id,")
        append("noncurrentVersionExpiration=$noncurrentVersionExpiration,")
        append("noncurrentVersionTransitions=$noncurrentVersionTransitions,")
        append("prefix=$prefix,")
        append("status=$status,")
        append("transitions=$transitions)")
    }

    override fun hashCode(): kotlin.Int {
        var result = abortIncompleteMultipartUpload?.hashCode() ?: 0
        result = 31 * result + (expiration?.hashCode() ?: 0)
        result = 31 * result + (filter?.hashCode() ?: 0)
        result = 31 * result + (id?.hashCode() ?: 0)
        result = 31 * result + (noncurrentVersionExpiration?.hashCode() ?: 0)
        result = 31 * result + (noncurrentVersionTransitions?.hashCode() ?: 0)
        result = 31 * result + (prefix?.hashCode() ?: 0)
        result = 31 * result + (status?.hashCode() ?: 0)
        result = 31 * result + (transitions?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as LifecycleRule

        if (abortIncompleteMultipartUpload != other.abortIncompleteMultipartUpload) return false
        if (expiration != other.expiration) return false
        if (filter != other.filter) return false
        if (id != other.id) return false
        if (noncurrentVersionExpiration != other.noncurrentVersionExpiration) return false
        if (noncurrentVersionTransitions != other.noncurrentVersionTransitions) return false
        if (prefix != other.prefix) return false
        if (status != other.status) return false
        if (transitions != other.transitions) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): LifecycleRule = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): LifecycleRule
        /**
         * Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will
         * wait before permanently removing all parts of the upload. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config">
         * Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy in the
         * Amazon S3 User Guide.
         */
        fun abortIncompleteMultipartUpload(abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload): FluentBuilder
        /**
         * Specifies the expiration for the lifecycle of the object in the form of date, days and,
         * whether the object has a delete marker.
         */
        fun expiration(expiration: LifecycleExpiration): FluentBuilder
        /**
         * The Filter is used to identify objects that a Lifecycle Rule applies to. A
         * Filter must have exactly one of Prefix, Tag, or
         * And specified. Filter is required if the LifecycleRule
         * does not containt a Prefix element.
         */
        fun filter(filter: LifecycleRuleFilter): FluentBuilder
        /**
         * Unique identifier for the rule. The value cannot be longer than 255 characters.
         */
        fun id(id: String): FluentBuilder
        /**
         * Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently
         * deletes the noncurrent object versions. You set this lifecycle configuration action on a
         * bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent
         * object versions at a specific period in the object's lifetime.
         */
        fun noncurrentVersionExpiration(noncurrentVersionExpiration: NoncurrentVersionExpiration): FluentBuilder
        /**
         * Specifies the transition rule for the lifecycle rule that describes when noncurrent
         * objects transition to a specific storage class. If your bucket is versioning-enabled (or
         * versioning is suspended), you can set this action to request that Amazon S3 transition
         * noncurrent object versions to a specific storage class at a set period in the object's
         * lifetime.
         */
        fun noncurrentVersionTransitions(noncurrentVersionTransitions: List<NoncurrentVersionTransition>): FluentBuilder
        /**
         * Prefix identifying one or more objects to which the rule applies. This is
         * no longer used; use Filter instead.
         * Replacement must be made for object keys containing special characters (such as carriage returns) when using
         * XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
         * XML related object key constraints.
         */
        @Deprecated("No longer recommended for use. See AWS API documentation for more details.")
        fun prefix(prefix: String): FluentBuilder
        /**
         * If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not
         * currently being applied.
         */
        fun status(status: ExpirationStatus): FluentBuilder
        /**
         * Specifies when an Amazon S3 object transitions to a specified storage class.
         */
        fun transitions(transitions: List<Transition>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will
         * wait before permanently removing all parts of the upload. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config">
         * Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy in the
         * Amazon S3 User Guide.
         */
        var abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload?
        /**
         * Specifies the expiration for the lifecycle of the object in the form of date, days and,
         * whether the object has a delete marker.
         */
        var expiration: LifecycleExpiration?
        /**
         * The Filter is used to identify objects that a Lifecycle Rule applies to. A
         * Filter must have exactly one of Prefix, Tag, or
         * And specified. Filter is required if the LifecycleRule
         * does not containt a Prefix element.
         */
        var filter: LifecycleRuleFilter?
        /**
         * Unique identifier for the rule. The value cannot be longer than 255 characters.
         */
        var id: String?
        /**
         * Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently
         * deletes the noncurrent object versions. You set this lifecycle configuration action on a
         * bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent
         * object versions at a specific period in the object's lifetime.
         */
        var noncurrentVersionExpiration: NoncurrentVersionExpiration?
        /**
         * Specifies the transition rule for the lifecycle rule that describes when noncurrent
         * objects transition to a specific storage class. If your bucket is versioning-enabled (or
         * versioning is suspended), you can set this action to request that Amazon S3 transition
         * noncurrent object versions to a specific storage class at a set period in the object's
         * lifetime.
         */
        var noncurrentVersionTransitions: List<NoncurrentVersionTransition>?
        /**
         * Prefix identifying one or more objects to which the rule applies. This is
         * no longer used; use Filter instead.
         * Replacement must be made for object keys containing special characters (such as carriage returns) when using
         * XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
         * XML related object key constraints.
         */
        @Deprecated("No longer recommended for use. See AWS API documentation for more details.")
        var prefix: String?
        /**
         * If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not
         * currently being applied.
         */
        var status: ExpirationStatus?
        /**
         * Specifies when an Amazon S3 object transitions to a specified storage class.
         */
        var transitions: List<Transition>?

        fun build(): LifecycleRule
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.AbortIncompleteMultipartUpload] inside the given [block]
         */
        fun abortIncompleteMultipartUpload(block: AbortIncompleteMultipartUpload.DslBuilder.() -> kotlin.Unit) {
            this.abortIncompleteMultipartUpload = AbortIncompleteMultipartUpload.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.LifecycleExpiration] inside the given [block]
         */
        fun expiration(block: LifecycleExpiration.DslBuilder.() -> kotlin.Unit) {
            this.expiration = LifecycleExpiration.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.NoncurrentVersionExpiration] inside the given [block]
         */
        fun noncurrentVersionExpiration(block: NoncurrentVersionExpiration.DslBuilder.() -> kotlin.Unit) {
            this.noncurrentVersionExpiration = NoncurrentVersionExpiration.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload? = null
        override var expiration: LifecycleExpiration? = null
        override var filter: LifecycleRuleFilter? = null
        override var id: String? = null
        override var noncurrentVersionExpiration: NoncurrentVersionExpiration? = null
        override var noncurrentVersionTransitions: List<NoncurrentVersionTransition>? = null
        override var prefix: String? = null
        override var status: ExpirationStatus? = null
        override var transitions: List<Transition>? = null

        constructor(x: LifecycleRule) : this() {
            this.abortIncompleteMultipartUpload = x.abortIncompleteMultipartUpload
            this.expiration = x.expiration
            this.filter = x.filter
            this.id = x.id
            this.noncurrentVersionExpiration = x.noncurrentVersionExpiration
            this.noncurrentVersionTransitions = x.noncurrentVersionTransitions
            this.prefix = x.prefix
            this.status = x.status
            this.transitions = x.transitions
        }

        override fun build(): LifecycleRule = LifecycleRule(this)
        override fun abortIncompleteMultipartUpload(abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload): FluentBuilder = apply { this.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload }
        override fun expiration(expiration: LifecycleExpiration): FluentBuilder = apply { this.expiration = expiration }
        override fun filter(filter: LifecycleRuleFilter): FluentBuilder = apply { this.filter = filter }
        override fun id(id: String): FluentBuilder = apply { this.id = id }
        override fun noncurrentVersionExpiration(noncurrentVersionExpiration: NoncurrentVersionExpiration): FluentBuilder = apply { this.noncurrentVersionExpiration = noncurrentVersionExpiration }
        override fun noncurrentVersionTransitions(noncurrentVersionTransitions: List<NoncurrentVersionTransition>): FluentBuilder = apply { this.noncurrentVersionTransitions = noncurrentVersionTransitions }
        override fun prefix(prefix: String): FluentBuilder = apply { this.prefix = prefix }
        override fun status(status: ExpirationStatus): FluentBuilder = apply { this.status = status }
        override fun transitions(transitions: List<Transition>): FluentBuilder = apply { this.transitions = transitions }
    }
}
