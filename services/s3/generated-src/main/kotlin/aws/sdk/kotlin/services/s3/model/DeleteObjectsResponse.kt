// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



class DeleteObjectsResponse private constructor(builder: BuilderImpl) {
    /**
     * Container element for a successful delete. It identifies the object that was
     * successfully deleted.
     */
    val deleted: List<DeletedObject>? = builder.deleted
    /**
     * Container for a failed delete action that describes the object that Amazon S3 attempted to
     * delete and the error it encountered.
     */
    val errors: List<Error>? = builder.errors
    /**
     * If present, indicates that the requester was successfully charged for the
     * request.
     */
    val requestCharged: RequestCharged? = builder.requestCharged

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DeleteObjectsResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DeleteObjectsResponse(")
        append("deleted=$deleted,")
        append("errors=$errors,")
        append("requestCharged=$requestCharged)")
    }

    override fun hashCode(): kotlin.Int {
        var result = deleted?.hashCode() ?: 0
        result = 31 * result + (errors?.hashCode() ?: 0)
        result = 31 * result + (requestCharged?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DeleteObjectsResponse

        if (deleted != other.deleted) return false
        if (errors != other.errors) return false
        if (requestCharged != other.requestCharged) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DeleteObjectsResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DeleteObjectsResponse
        /**
         * Container element for a successful delete. It identifies the object that was
         * successfully deleted.
         */
        fun deleted(deleted: List<DeletedObject>): FluentBuilder
        /**
         * Container for a failed delete action that describes the object that Amazon S3 attempted to
         * delete and the error it encountered.
         */
        fun errors(errors: List<Error>): FluentBuilder
        /**
         * If present, indicates that the requester was successfully charged for the
         * request.
         */
        fun requestCharged(requestCharged: RequestCharged): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Container element for a successful delete. It identifies the object that was
         * successfully deleted.
         */
        var deleted: List<DeletedObject>?
        /**
         * Container for a failed delete action that describes the object that Amazon S3 attempted to
         * delete and the error it encountered.
         */
        var errors: List<Error>?
        /**
         * If present, indicates that the requester was successfully charged for the
         * request.
         */
        var requestCharged: RequestCharged?

        fun build(): DeleteObjectsResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var deleted: List<DeletedObject>? = null
        override var errors: List<Error>? = null
        override var requestCharged: RequestCharged? = null

        constructor(x: DeleteObjectsResponse) : this() {
            this.deleted = x.deleted
            this.errors = x.errors
            this.requestCharged = x.requestCharged
        }

        override fun build(): DeleteObjectsResponse = DeleteObjectsResponse(this)
        override fun deleted(deleted: List<DeletedObject>): FluentBuilder = apply { this.deleted = deleted }
        override fun errors(errors: List<Error>): FluentBuilder = apply { this.errors = errors }
        override fun requestCharged(requestCharged: RequestCharged): FluentBuilder = apply { this.requestCharged = requestCharged }
    }
}
