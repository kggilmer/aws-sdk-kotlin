// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Specifies object key name filtering rules. For information about key name filtering, see
 * <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring
 * Event Notifications in the Amazon S3 User Guide.
 */
class NotificationConfigurationFilter private constructor(builder: BuilderImpl) {
    /**
     * A container for object key name prefix and suffix filtering rules.
     */
    val key: S3KeyFilter? = builder.key

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): NotificationConfigurationFilter = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("NotificationConfigurationFilter(")
        append("key=$key)")
    }

    override fun hashCode(): kotlin.Int {
        var result = key?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as NotificationConfigurationFilter

        if (key != other.key) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): NotificationConfigurationFilter = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): NotificationConfigurationFilter
        /**
         * A container for object key name prefix and suffix filtering rules.
         */
        fun key(key: S3KeyFilter): FluentBuilder
    }

    interface DslBuilder {
        /**
         * A container for object key name prefix and suffix filtering rules.
         */
        var key: S3KeyFilter?

        fun build(): NotificationConfigurationFilter
        /**
         * construct an [aws.sdk.kotlin.services.s3.model.S3KeyFilter] inside the given [block]
         */
        fun key(block: S3KeyFilter.DslBuilder.() -> kotlin.Unit) {
            this.key = S3KeyFilter.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var key: S3KeyFilter? = null

        constructor(x: NotificationConfigurationFilter) : this() {
            this.key = x.key
        }

        override fun build(): NotificationConfigurationFilter = NotificationConfigurationFilter(this)
        override fun key(key: S3KeyFilter): FluentBuilder = apply { this.key = key }
    }
}
