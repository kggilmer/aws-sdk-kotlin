// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * The container element for an ownership control rule.
 */
class OwnershipControlsRule private constructor(builder: BuilderImpl) {
    /**
     * The container element for object ownership for a bucket's ownership controls.
     * BucketOwnerPreferred - Objects uploaded to the bucket change ownership to the bucket
     * owner if the objects are uploaded with the bucket-owner-full-control canned
     * ACL.
     * ObjectWriter - The uploading account will own the object if the object is uploaded with
     * the bucket-owner-full-control canned ACL.
     */
    val objectOwnership: ObjectOwnership? = builder.objectOwnership

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): OwnershipControlsRule = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("OwnershipControlsRule(")
        append("objectOwnership=$objectOwnership)")
    }

    override fun hashCode(): kotlin.Int {
        var result = objectOwnership?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as OwnershipControlsRule

        if (objectOwnership != other.objectOwnership) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): OwnershipControlsRule = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): OwnershipControlsRule
        /**
         * The container element for object ownership for a bucket's ownership controls.
         * BucketOwnerPreferred - Objects uploaded to the bucket change ownership to the bucket
         * owner if the objects are uploaded with the bucket-owner-full-control canned
         * ACL.
         * ObjectWriter - The uploading account will own the object if the object is uploaded with
         * the bucket-owner-full-control canned ACL.
         */
        fun objectOwnership(objectOwnership: ObjectOwnership): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The container element for object ownership for a bucket's ownership controls.
         * BucketOwnerPreferred - Objects uploaded to the bucket change ownership to the bucket
         * owner if the objects are uploaded with the bucket-owner-full-control canned
         * ACL.
         * ObjectWriter - The uploading account will own the object if the object is uploaded with
         * the bucket-owner-full-control canned ACL.
         */
        var objectOwnership: ObjectOwnership?

        fun build(): OwnershipControlsRule
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var objectOwnership: ObjectOwnership? = null

        constructor(x: OwnershipControlsRule) : this() {
            this.objectOwnership = x.objectOwnership
        }

        override fun build(): OwnershipControlsRule = OwnershipControlsRule(this)
        override fun objectOwnership(objectOwnership: ObjectOwnership): FluentBuilder = apply { this.objectOwnership = objectOwnership }
    }
}
