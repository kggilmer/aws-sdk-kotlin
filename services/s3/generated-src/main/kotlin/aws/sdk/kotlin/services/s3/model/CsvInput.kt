// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



/**
 * Describes how an uncompressed comma-separated values (CSV)-formatted input object is
 * formatted.
 */
class CsvInput private constructor(builder: BuilderImpl) {
    /**
     * Specifies that CSV field values may contain quoted record delimiters and such records
     * should be allowed. Default value is FALSE. Setting this value to TRUE may lower
     * performance.
     */
    val allowQuotedRecordDelimiter: Boolean = builder.allowQuotedRecordDelimiter
    /**
     * A single character used to indicate that a row should be ignored when the character is
     * present at the start of that row. You can specify any character to indicate a comment
     * line.
     */
    val comments: String? = builder.comments
    /**
     * A single character used to separate individual fields in a record. You can specify an
     * arbitrary delimiter.
     */
    val fieldDelimiter: String? = builder.fieldDelimiter
    /**
     * Describes the first line of input. Valid values are:
     * NONE: First line is not a header.
     * IGNORE: First line is a header, but you can't use the header values
     * to indicate the column in an expression. You can use column position (such as _1, _2,
     * …) to indicate the column (SELECT s._1 FROM OBJECT s).
     * Use: First line is a header, and you can use the header value to
     * identify a column in an expression (SELECT "name" FROM OBJECT).
     */
    val fileHeaderInfo: FileHeaderInfo? = builder.fileHeaderInfo
    /**
     * A single character used for escaping when the field delimiter is part of the value. For
     * example, if the value is a, b, Amazon S3 wraps this field value in quotation marks,
     * as follows: " a , b ".
     * Type: String
     * Default: "
     * Ancestors: CSV
     */
    val quoteCharacter: String? = builder.quoteCharacter
    /**
     * A single character used for escaping the quotation mark character inside an already
     * escaped value. For example, the value """ a , b """ is parsed as " a , b ".
     */
    val quoteEscapeCharacter: String? = builder.quoteEscapeCharacter
    /**
     * A single character used to separate individual records in the input. Instead of the
     * default value, you can specify an arbitrary delimiter.
     */
    val recordDelimiter: String? = builder.recordDelimiter

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CsvInput = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CsvInput(")
        append("allowQuotedRecordDelimiter=$allowQuotedRecordDelimiter,")
        append("comments=$comments,")
        append("fieldDelimiter=$fieldDelimiter,")
        append("fileHeaderInfo=$fileHeaderInfo,")
        append("quoteCharacter=$quoteCharacter,")
        append("quoteEscapeCharacter=$quoteEscapeCharacter,")
        append("recordDelimiter=$recordDelimiter)")
    }

    override fun hashCode(): kotlin.Int {
        var result = allowQuotedRecordDelimiter.hashCode()
        result = 31 * result + (comments?.hashCode() ?: 0)
        result = 31 * result + (fieldDelimiter?.hashCode() ?: 0)
        result = 31 * result + (fileHeaderInfo?.hashCode() ?: 0)
        result = 31 * result + (quoteCharacter?.hashCode() ?: 0)
        result = 31 * result + (quoteEscapeCharacter?.hashCode() ?: 0)
        result = 31 * result + (recordDelimiter?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CsvInput

        if (allowQuotedRecordDelimiter != other.allowQuotedRecordDelimiter) return false
        if (comments != other.comments) return false
        if (fieldDelimiter != other.fieldDelimiter) return false
        if (fileHeaderInfo != other.fileHeaderInfo) return false
        if (quoteCharacter != other.quoteCharacter) return false
        if (quoteEscapeCharacter != other.quoteEscapeCharacter) return false
        if (recordDelimiter != other.recordDelimiter) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CsvInput = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CsvInput
        /**
         * Specifies that CSV field values may contain quoted record delimiters and such records
         * should be allowed. Default value is FALSE. Setting this value to TRUE may lower
         * performance.
         */
        fun allowQuotedRecordDelimiter(allowQuotedRecordDelimiter: Boolean): FluentBuilder
        /**
         * A single character used to indicate that a row should be ignored when the character is
         * present at the start of that row. You can specify any character to indicate a comment
         * line.
         */
        fun comments(comments: String): FluentBuilder
        /**
         * A single character used to separate individual fields in a record. You can specify an
         * arbitrary delimiter.
         */
        fun fieldDelimiter(fieldDelimiter: String): FluentBuilder
        /**
         * Describes the first line of input. Valid values are:
         * NONE: First line is not a header.
         * IGNORE: First line is a header, but you can't use the header values
         * to indicate the column in an expression. You can use column position (such as _1, _2,
         * …) to indicate the column (SELECT s._1 FROM OBJECT s).
         * Use: First line is a header, and you can use the header value to
         * identify a column in an expression (SELECT "name" FROM OBJECT).
         */
        fun fileHeaderInfo(fileHeaderInfo: FileHeaderInfo): FluentBuilder
        /**
         * A single character used for escaping when the field delimiter is part of the value. For
         * example, if the value is a, b, Amazon S3 wraps this field value in quotation marks,
         * as follows: " a , b ".
         * Type: String
         * Default: "
         * Ancestors: CSV
         */
        fun quoteCharacter(quoteCharacter: String): FluentBuilder
        /**
         * A single character used for escaping the quotation mark character inside an already
         * escaped value. For example, the value """ a , b """ is parsed as " a , b ".
         */
        fun quoteEscapeCharacter(quoteEscapeCharacter: String): FluentBuilder
        /**
         * A single character used to separate individual records in the input. Instead of the
         * default value, you can specify an arbitrary delimiter.
         */
        fun recordDelimiter(recordDelimiter: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Specifies that CSV field values may contain quoted record delimiters and such records
         * should be allowed. Default value is FALSE. Setting this value to TRUE may lower
         * performance.
         */
        var allowQuotedRecordDelimiter: Boolean
        /**
         * A single character used to indicate that a row should be ignored when the character is
         * present at the start of that row. You can specify any character to indicate a comment
         * line.
         */
        var comments: String?
        /**
         * A single character used to separate individual fields in a record. You can specify an
         * arbitrary delimiter.
         */
        var fieldDelimiter: String?
        /**
         * Describes the first line of input. Valid values are:
         * NONE: First line is not a header.
         * IGNORE: First line is a header, but you can't use the header values
         * to indicate the column in an expression. You can use column position (such as _1, _2,
         * …) to indicate the column (SELECT s._1 FROM OBJECT s).
         * Use: First line is a header, and you can use the header value to
         * identify a column in an expression (SELECT "name" FROM OBJECT).
         */
        var fileHeaderInfo: FileHeaderInfo?
        /**
         * A single character used for escaping when the field delimiter is part of the value. For
         * example, if the value is a, b, Amazon S3 wraps this field value in quotation marks,
         * as follows: " a , b ".
         * Type: String
         * Default: "
         * Ancestors: CSV
         */
        var quoteCharacter: String?
        /**
         * A single character used for escaping the quotation mark character inside an already
         * escaped value. For example, the value """ a , b """ is parsed as " a , b ".
         */
        var quoteEscapeCharacter: String?
        /**
         * A single character used to separate individual records in the input. Instead of the
         * default value, you can specify an arbitrary delimiter.
         */
        var recordDelimiter: String?

        fun build(): CsvInput
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var allowQuotedRecordDelimiter: Boolean = false
        override var comments: String? = null
        override var fieldDelimiter: String? = null
        override var fileHeaderInfo: FileHeaderInfo? = null
        override var quoteCharacter: String? = null
        override var quoteEscapeCharacter: String? = null
        override var recordDelimiter: String? = null

        constructor(x: CsvInput) : this() {
            this.allowQuotedRecordDelimiter = x.allowQuotedRecordDelimiter
            this.comments = x.comments
            this.fieldDelimiter = x.fieldDelimiter
            this.fileHeaderInfo = x.fileHeaderInfo
            this.quoteCharacter = x.quoteCharacter
            this.quoteEscapeCharacter = x.quoteEscapeCharacter
            this.recordDelimiter = x.recordDelimiter
        }

        override fun build(): CsvInput = CsvInput(this)
        override fun allowQuotedRecordDelimiter(allowQuotedRecordDelimiter: Boolean): FluentBuilder = apply { this.allowQuotedRecordDelimiter = allowQuotedRecordDelimiter }
        override fun comments(comments: String): FluentBuilder = apply { this.comments = comments }
        override fun fieldDelimiter(fieldDelimiter: String): FluentBuilder = apply { this.fieldDelimiter = fieldDelimiter }
        override fun fileHeaderInfo(fileHeaderInfo: FileHeaderInfo): FluentBuilder = apply { this.fileHeaderInfo = fileHeaderInfo }
        override fun quoteCharacter(quoteCharacter: String): FluentBuilder = apply { this.quoteCharacter = quoteCharacter }
        override fun quoteEscapeCharacter(quoteEscapeCharacter: String): FluentBuilder = apply { this.quoteEscapeCharacter = quoteEscapeCharacter }
        override fun recordDelimiter(recordDelimiter: String): FluentBuilder = apply { this.recordDelimiter = recordDelimiter }
    }
}
