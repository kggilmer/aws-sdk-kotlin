// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.sts.model



/**
 * Contains the response to a successful AssumeRole request, including
 * temporary Amazon Web Services credentials that can be used to make Amazon Web Services requests.
 */
class AssumeRoleResponse private constructor(builder: BuilderImpl) {
    /**
     * The Amazon Resource Name (ARN) and the assumed role ID, which are identifiers that you
     * can use to refer to the resulting temporary security credentials. For example, you can
     * reference these credentials as a principal in a resource-based policy by using the ARN or
     * assumed role ID. The ARN and ID include the RoleSessionName that you specified
     * when you called AssumeRole.
     */
    val assumedRoleUser: AssumedRoleUser? = builder.assumedRoleUser
    /**
     * The temporary security credentials, which include an access key ID, a secret access key,
     * and a security (or session) token.
     * The size of the security token that STS API operations return is not fixed. We
     * strongly recommend that you make no assumptions about the maximum size.
     */
    val credentials: Credentials? = builder.credentials
    /**
     * A percentage value that indicates the packed size of the session policies and session
     * tags combined passed in the request. The request fails if the packed size is greater than 100 percent,
     * which means the policies and tags exceeded the allowed space.
     */
    val packedPolicySize: Int? = builder.packedPolicySize
    /**
     * The source identity specified by the principal that is calling the
     * AssumeRole operation.
     * You can require users to specify a source identity when they assume a role. You do this
     * by using the sts:SourceIdentity condition key in a role trust policy. You can
     * use source identity information in CloudTrail logs to determine who took actions with a role.
     * You can use the aws:SourceIdentity condition key to further control access to
     * Amazon Web Services resources based on the value of source identity. For more information about using
     * source identity, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html">Monitor and control
     * actions taken with assumed roles in the
     * IAM User Guide.
     * The regex used to validate this parameter is a string of characters consisting of upper-
     * and lower-case alphanumeric characters with no spaces. You can also include underscores or
     * any of the following characters: =,.@-
     */
    val sourceIdentity: String? = builder.sourceIdentity

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): AssumeRoleResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("AssumeRoleResponse(")
        append("assumedRoleUser=$assumedRoleUser,")
        append("credentials=$credentials,")
        append("packedPolicySize=$packedPolicySize,")
        append("sourceIdentity=$sourceIdentity)")
    }

    override fun hashCode(): kotlin.Int {
        var result = assumedRoleUser?.hashCode() ?: 0
        result = 31 * result + (credentials?.hashCode() ?: 0)
        result = 31 * result + (packedPolicySize ?: 0)
        result = 31 * result + (sourceIdentity?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as AssumeRoleResponse

        if (assumedRoleUser != other.assumedRoleUser) return false
        if (credentials != other.credentials) return false
        if (packedPolicySize != other.packedPolicySize) return false
        if (sourceIdentity != other.sourceIdentity) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): AssumeRoleResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): AssumeRoleResponse
        /**
         * The Amazon Resource Name (ARN) and the assumed role ID, which are identifiers that you
         * can use to refer to the resulting temporary security credentials. For example, you can
         * reference these credentials as a principal in a resource-based policy by using the ARN or
         * assumed role ID. The ARN and ID include the RoleSessionName that you specified
         * when you called AssumeRole.
         */
        fun assumedRoleUser(assumedRoleUser: AssumedRoleUser): FluentBuilder
        /**
         * The temporary security credentials, which include an access key ID, a secret access key,
         * and a security (or session) token.
         * The size of the security token that STS API operations return is not fixed. We
         * strongly recommend that you make no assumptions about the maximum size.
         */
        fun credentials(credentials: Credentials): FluentBuilder
        /**
         * A percentage value that indicates the packed size of the session policies and session
         * tags combined passed in the request. The request fails if the packed size is greater than 100 percent,
         * which means the policies and tags exceeded the allowed space.
         */
        fun packedPolicySize(packedPolicySize: Int): FluentBuilder
        /**
         * The source identity specified by the principal that is calling the
         * AssumeRole operation.
         * You can require users to specify a source identity when they assume a role. You do this
         * by using the sts:SourceIdentity condition key in a role trust policy. You can
         * use source identity information in CloudTrail logs to determine who took actions with a role.
         * You can use the aws:SourceIdentity condition key to further control access to
         * Amazon Web Services resources based on the value of source identity. For more information about using
         * source identity, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html">Monitor and control
         * actions taken with assumed roles in the
         * IAM User Guide.
         * The regex used to validate this parameter is a string of characters consisting of upper-
         * and lower-case alphanumeric characters with no spaces. You can also include underscores or
         * any of the following characters: =,.@-
         */
        fun sourceIdentity(sourceIdentity: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The Amazon Resource Name (ARN) and the assumed role ID, which are identifiers that you
         * can use to refer to the resulting temporary security credentials. For example, you can
         * reference these credentials as a principal in a resource-based policy by using the ARN or
         * assumed role ID. The ARN and ID include the RoleSessionName that you specified
         * when you called AssumeRole.
         */
        var assumedRoleUser: AssumedRoleUser?
        /**
         * The temporary security credentials, which include an access key ID, a secret access key,
         * and a security (or session) token.
         * The size of the security token that STS API operations return is not fixed. We
         * strongly recommend that you make no assumptions about the maximum size.
         */
        var credentials: Credentials?
        /**
         * A percentage value that indicates the packed size of the session policies and session
         * tags combined passed in the request. The request fails if the packed size is greater than 100 percent,
         * which means the policies and tags exceeded the allowed space.
         */
        var packedPolicySize: Int?
        /**
         * The source identity specified by the principal that is calling the
         * AssumeRole operation.
         * You can require users to specify a source identity when they assume a role. You do this
         * by using the sts:SourceIdentity condition key in a role trust policy. You can
         * use source identity information in CloudTrail logs to determine who took actions with a role.
         * You can use the aws:SourceIdentity condition key to further control access to
         * Amazon Web Services resources based on the value of source identity. For more information about using
         * source identity, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html">Monitor and control
         * actions taken with assumed roles in the
         * IAM User Guide.
         * The regex used to validate this parameter is a string of characters consisting of upper-
         * and lower-case alphanumeric characters with no spaces. You can also include underscores or
         * any of the following characters: =,.@-
         */
        var sourceIdentity: String?

        fun build(): AssumeRoleResponse
        /**
         * construct an [aws.sdk.kotlin.services.sts.model.AssumedRoleUser] inside the given [block]
         */
        fun assumedRoleUser(block: AssumedRoleUser.DslBuilder.() -> kotlin.Unit) {
            this.assumedRoleUser = AssumedRoleUser.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.sts.model.Credentials] inside the given [block]
         */
        fun credentials(block: Credentials.DslBuilder.() -> kotlin.Unit) {
            this.credentials = Credentials.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var assumedRoleUser: AssumedRoleUser? = null
        override var credentials: Credentials? = null
        override var packedPolicySize: Int? = null
        override var sourceIdentity: String? = null

        constructor(x: AssumeRoleResponse) : this() {
            this.assumedRoleUser = x.assumedRoleUser
            this.credentials = x.credentials
            this.packedPolicySize = x.packedPolicySize
            this.sourceIdentity = x.sourceIdentity
        }

        override fun build(): AssumeRoleResponse = AssumeRoleResponse(this)
        override fun assumedRoleUser(assumedRoleUser: AssumedRoleUser): FluentBuilder = apply { this.assumedRoleUser = assumedRoleUser }
        override fun credentials(credentials: Credentials): FluentBuilder = apply { this.credentials = credentials }
        override fun packedPolicySize(packedPolicySize: Int): FluentBuilder = apply { this.packedPolicySize = packedPolicySize }
        override fun sourceIdentity(sourceIdentity: String): FluentBuilder = apply { this.sourceIdentity = sourceIdentity }
    }
}
