// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.sts

import aws.sdk.kotlin.runtime.auth.signing.AwsSigV4SigningMiddleware
import aws.sdk.kotlin.runtime.http.ApiMetadata
import aws.sdk.kotlin.runtime.http.AwsUserAgentMetadata
import aws.sdk.kotlin.runtime.http.middleware.ResolveAwsEndpoint
import aws.sdk.kotlin.runtime.http.middleware.UserAgent
import aws.sdk.kotlin.runtime.http.retries.AwsDefaultRetryPolicy
import aws.sdk.kotlin.services.sts.model.*
import aws.smithy.kotlin.runtime.http.middleware.MutateHeaders
import aws.smithy.kotlin.runtime.http.middleware.RetryFeature
import aws.smithy.kotlin.runtime.http.operation.SdkHttpOperation

private val awsUserAgentMetadata = AwsUserAgentMetadata.fromEnvironment(ApiMetadata(ServiceId, SdkVersion))

internal fun registerAssumeRoleMiddleware(config: StsClient.Config, op: SdkHttpOperation<AssumeRoleRequest,AssumeRoleResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "sts"
        }
    }
}

internal fun registerAssumeRoleWithSamlMiddleware(config: StsClient.Config, op: SdkHttpOperation<AssumeRoleWithSamlRequest,AssumeRoleWithSamlResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
    }
}

internal fun registerAssumeRoleWithWebIdentityMiddleware(config: StsClient.Config, op: SdkHttpOperation<AssumeRoleWithWebIdentityRequest,AssumeRoleWithWebIdentityResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
    }
}

internal fun registerDecodeAuthorizationMessageMiddleware(config: StsClient.Config, op: SdkHttpOperation<DecodeAuthorizationMessageRequest,DecodeAuthorizationMessageResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "sts"
        }
    }
}

internal fun registerGetAccessKeyInfoMiddleware(config: StsClient.Config, op: SdkHttpOperation<GetAccessKeyInfoRequest,GetAccessKeyInfoResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "sts"
        }
    }
}

internal fun registerGetCallerIdentityMiddleware(config: StsClient.Config, op: SdkHttpOperation<GetCallerIdentityRequest,GetCallerIdentityResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "sts"
        }
    }
}

internal fun registerGetFederationTokenMiddleware(config: StsClient.Config, op: SdkHttpOperation<GetFederationTokenRequest,GetFederationTokenResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "sts"
        }
    }
}

internal fun registerGetSessionTokenMiddleware(config: StsClient.Config, op: SdkHttpOperation<GetSessionTokenRequest,GetSessionTokenResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "sts"
        }
    }
}
