// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.sts.model

import aws.smithy.kotlin.runtime.time.Instant

/**
 * Amazon Web Services credentials for API authentication.
 */
class Credentials private constructor(builder: BuilderImpl) {
    /**
     * The access key ID that identifies the temporary security credentials.
     */
    val accessKeyId: String? = builder.accessKeyId
    /**
     * The date on which the current credentials expire.
     */
    val expiration: Instant? = builder.expiration
    /**
     * The secret access key that can be used to sign requests.
     */
    val secretAccessKey: String? = builder.secretAccessKey
    /**
     * The token that users must pass to the service API to use the temporary
     * credentials.
     */
    val sessionToken: String? = builder.sessionToken

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): Credentials = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("Credentials(")
        append("accessKeyId=$accessKeyId,")
        append("expiration=$expiration,")
        append("secretAccessKey=$secretAccessKey,")
        append("sessionToken=$sessionToken)")
    }

    override fun hashCode(): kotlin.Int {
        var result = accessKeyId?.hashCode() ?: 0
        result = 31 * result + (expiration?.hashCode() ?: 0)
        result = 31 * result + (secretAccessKey?.hashCode() ?: 0)
        result = 31 * result + (sessionToken?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Credentials

        if (accessKeyId != other.accessKeyId) return false
        if (expiration != other.expiration) return false
        if (secretAccessKey != other.secretAccessKey) return false
        if (sessionToken != other.sessionToken) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): Credentials = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): Credentials
        /**
         * The access key ID that identifies the temporary security credentials.
         */
        fun accessKeyId(accessKeyId: String): FluentBuilder
        /**
         * The date on which the current credentials expire.
         */
        fun expiration(expiration: Instant): FluentBuilder
        /**
         * The secret access key that can be used to sign requests.
         */
        fun secretAccessKey(secretAccessKey: String): FluentBuilder
        /**
         * The token that users must pass to the service API to use the temporary
         * credentials.
         */
        fun sessionToken(sessionToken: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The access key ID that identifies the temporary security credentials.
         */
        var accessKeyId: String?
        /**
         * The date on which the current credentials expire.
         */
        var expiration: Instant?
        /**
         * The secret access key that can be used to sign requests.
         */
        var secretAccessKey: String?
        /**
         * The token that users must pass to the service API to use the temporary
         * credentials.
         */
        var sessionToken: String?

        fun build(): Credentials
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var accessKeyId: String? = null
        override var expiration: Instant? = null
        override var secretAccessKey: String? = null
        override var sessionToken: String? = null

        constructor(x: Credentials) : this() {
            this.accessKeyId = x.accessKeyId
            this.expiration = x.expiration
            this.secretAccessKey = x.secretAccessKey
            this.sessionToken = x.sessionToken
        }

        override fun build(): Credentials = Credentials(this)
        override fun accessKeyId(accessKeyId: String): FluentBuilder = apply { this.accessKeyId = accessKeyId }
        override fun expiration(expiration: Instant): FluentBuilder = apply { this.expiration = expiration }
        override fun secretAccessKey(secretAccessKey: String): FluentBuilder = apply { this.secretAccessKey = secretAccessKey }
        override fun sessionToken(sessionToken: String): FluentBuilder = apply { this.sessionToken = sessionToken }
    }
}
