// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.sts.model



class AssumeRoleRequest private constructor(builder: BuilderImpl) {
    /**
     * The duration, in seconds, of the role session. The value specified can can range from
     * 900 seconds (15 minutes) up to the maximum session duration that is set for the role. The
     * maximum session duration setting can have a value from 1 hour to 12 hours. If you specify a
     * value higher than this setting or the administrator setting (whichever is lower), the
     * operation fails. For example, if you specify a session duration of 12 hours, but your
     * administrator set the maximum session duration to 6 hours, your operation fails. To learn
     * how to view the maximum value for your role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session">View the
     * Maximum Session Duration Setting for a Role in the
     * IAM User Guide.
     * By default, the value is set to 3600 seconds.
     * The DurationSeconds parameter is separate from the duration of a console
     * session that you might request using the returned credentials. The request to the
     * federation endpoint for a console sign-in token takes a SessionDuration
     * parameter that specifies the maximum length of the console session. For more
     * information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html">Creating a URL
     * that Enables Federated Users to Access the Management Console in the
     * IAM User Guide.
     */
    val durationSeconds: Int? = builder.durationSeconds
    /**
     * A unique identifier that might be required when you assume a role in another account. If
     * the administrator of the account to which the role belongs provided you with an external
     * ID, then provide that value in the ExternalId parameter. This value can be any
     * string, such as a passphrase or account number. A cross-account role is usually set up to
     * trust everyone in an account. Therefore, the administrator of the trusting account might
     * send an external ID to the administrator of the trusted account. That way, only someone
     * with the ID can assume the role, rather than everyone in the account. For more information
     * about the external ID, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html">How to Use an External ID
     * When Granting Access to Your Amazon Web Services Resources to a Third Party in the
     * IAM User Guide.
     * The regex used to validate this parameter is a string of
     * characters consisting of upper- and lower-case alphanumeric characters with no spaces.
     * You can also include underscores or any of the following characters: =,.@:/-
     */
    val externalId: String? = builder.externalId
    /**
     * An IAM policy in JSON format that you want to use as an inline session policy.
     * This parameter is optional. Passing policies to this operation returns new
     * temporary credentials. The resulting session's permissions are the intersection of the
     * role's identity-based policy and the session policies. You can use the role's temporary
     * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
     * the role. You cannot use session policies to grant more permissions than those allowed
     * by the identity-based policy of the role that is being assumed. For more information, see
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
     * Policies in the IAM User Guide.
     * The plaintext that you use for both inline and managed session policies can't exceed
     * 2,048 characters. The JSON policy characters can be any ASCII character from the space
     * character to the end of the valid character list (\u0020 through \u00FF). It can also
     * include the tab (\u0009), linefeed (\u000A), and carriage return (\u000D)
     * characters.
     * An Amazon Web Services conversion compresses the passed session policies and session tags into a
     * packed binary format that has a separate limit. Your request can fail for this limit
     * even if your plaintext meets the other requirements. The PackedPolicySize
     * response element indicates by percentage how close the policies and tags for your
     * request are to the upper size limit.
     */
    val policy: String? = builder.policy
    /**
     * The Amazon Resource Names (ARNs) of the IAM managed policies that you want to use as
     * managed session policies. The policies must exist in the same account as the role.
     * This parameter is optional. You can provide up to 10 managed policy ARNs. However, the
     * plaintext that you use for both inline and managed session policies can't exceed 2,048
     * characters. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services
     * Service Namespaces in the Amazon Web Services General Reference.
     * An Amazon Web Services conversion compresses the passed session policies and session tags into a
     * packed binary format that has a separate limit. Your request can fail for this limit
     * even if your plaintext meets the other requirements. The PackedPolicySize
     * response element indicates by percentage how close the policies and tags for your
     * request are to the upper size limit.
     * Passing policies to this operation returns new
     * temporary credentials. The resulting session's permissions are the intersection of the
     * role's identity-based policy and the session policies. You can use the role's temporary
     * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
     * the role. You cannot use session policies to grant more permissions than those allowed
     * by the identity-based policy of the role that is being assumed. For more information, see
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
     * Policies in the IAM User Guide.
     */
    val policyArns: List<PolicyDescriptorType>? = builder.policyArns
    /**
     * The Amazon Resource Name (ARN) of the role to assume.
     */
    val roleArn: String? = builder.roleArn
    /**
     * An identifier for the assumed role session.
     * Use the role session name to uniquely identify a session when the same role is assumed
     * by different principals or for different reasons. In cross-account scenarios, the role
     * session name is visible to, and can be logged by the account that owns the role. The role
     * session name is also used in the ARN of the assumed role principal. This means that
     * subsequent cross-account API requests that use the temporary security credentials will
     * expose the role session name to the external account in their CloudTrail logs.
     * The regex used to validate this parameter is a string of characters
     * consisting of upper- and lower-case alphanumeric characters with no spaces. You can
     * also include underscores or any of the following characters: =,.@-
     */
    val roleSessionName: String? = builder.roleSessionName
    /**
     * The identification number of the MFA device that is associated with the user who is
     * making the AssumeRole call. Specify this value if the trust policy of the role
     * being assumed includes a condition that requires MFA authentication. The value is either
     * the serial number for a hardware device (such as GAHT12345678) or an Amazon
     * Resource Name (ARN) for a virtual device (such as
     * arn:aws:iam::123456789012:mfa/user).
     * The regex used to validate this parameter is a string of characters
     * consisting of upper- and lower-case alphanumeric characters with no spaces. You can
     * also include underscores or any of the following characters: =,.@-
     */
    val serialNumber: String? = builder.serialNumber
    /**
     * The source identity specified by the principal that is calling the
     * AssumeRole operation.
     * You can require users to specify a source identity when they assume a role. You do this
     * by using the sts:SourceIdentity condition key in a role trust policy. You can
     * use source identity information in CloudTrail logs to determine who took actions with a role.
     * You can use the aws:SourceIdentity condition key to further control access to
     * Amazon Web Services resources based on the value of source identity. For more information about using
     * source identity, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html">Monitor and control
     * actions taken with assumed roles in the
     * IAM User Guide.
     * The regex used to validate this parameter is a string of characters consisting of upper-
     * and lower-case alphanumeric characters with no spaces. You can also include underscores or
     * any of the following characters: =,.@-. You cannot use a value that begins with the text
     * aws:. This prefix is reserved for Amazon Web Services internal
     * use.
     */
    val sourceIdentity: String? = builder.sourceIdentity
    /**
     * A list of session tags that you want to pass. Each session tag consists of a key name
     * and an associated value. For more information about session tags, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html">Tagging STS
     * Sessions in the IAM User Guide.
     * This parameter is optional. You can pass up to 50 session tags. The plaintext session
     * tag keys can’t exceed 128 characters, and the values can’t exceed 256 characters. For these
     * and additional limits, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html#reference_iam-limits-entity-length">IAM
     * and STS Character Limits in the IAM User Guide.
     * An Amazon Web Services conversion compresses the passed session policies and session tags into a
     * packed binary format that has a separate limit. Your request can fail for this limit
     * even if your plaintext meets the other requirements. The PackedPolicySize
     * response element indicates by percentage how close the policies and tags for your
     * request are to the upper size limit.
     * You can pass a session tag with the same key as a tag that is already
     * attached to the role. When you do, session tags override a role tag with the same key.
     * Tag key–value pairs are not case sensitive, but case is preserved. This means that you
     * cannot have separate Department and department tag keys. Assume
     * that the role has the Department=Marketing tag and you pass the
     * department=engineering session tag. Department
     * and department are not saved as separate tags, and the session tag passed in
     * the request takes precedence over the role tag.
     * Additionally, if you used temporary credentials to perform this operation, the new
     * session inherits any transitive session tags from the calling session. If you pass a
     * session tag with the same key as an inherited tag, the operation fails. To view the
     * inherited tags for a session, see the CloudTrail logs. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/session-tags.html#id_session-tags_ctlogs">Viewing Session Tags in CloudTrail in the
     * IAM User Guide.
     */
    val tags: List<Tag>? = builder.tags
    /**
     * The value provided by the MFA device, if the trust policy of the role being assumed
     * requires MFA. (In other words, if the policy includes a condition that tests for MFA). If
     * the role being assumed requires MFA and if the TokenCode value is missing or
     * expired, the AssumeRole call returns an "access denied" error.
     * The format for this parameter, as described by its regex pattern, is a sequence of six
     * numeric digits.
     */
    val tokenCode: String? = builder.tokenCode
    /**
     * A list of keys for session tags that you want to set as transitive. If you set a tag key
     * as transitive, the corresponding key and value passes to subsequent sessions in a role
     * chain. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html#id_session-tags_role-chaining">Chaining Roles
     * with Session Tags in the IAM User Guide.
     * This parameter is optional. When you set session tags as transitive, the session policy
     * and session tags packed binary limit is not affected.
     * If you choose not to specify a transitive tag key, then no tags are passed from this
     * session to any subsequent sessions.
     */
    val transitiveTagKeys: List<String>? = builder.transitiveTagKeys

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): AssumeRoleRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("AssumeRoleRequest(")
        append("durationSeconds=$durationSeconds,")
        append("externalId=$externalId,")
        append("policy=$policy,")
        append("policyArns=$policyArns,")
        append("roleArn=$roleArn,")
        append("roleSessionName=$roleSessionName,")
        append("serialNumber=$serialNumber,")
        append("sourceIdentity=$sourceIdentity,")
        append("tags=$tags,")
        append("tokenCode=$tokenCode,")
        append("transitiveTagKeys=$transitiveTagKeys)")
    }

    override fun hashCode(): kotlin.Int {
        var result = durationSeconds ?: 0
        result = 31 * result + (externalId?.hashCode() ?: 0)
        result = 31 * result + (policy?.hashCode() ?: 0)
        result = 31 * result + (policyArns?.hashCode() ?: 0)
        result = 31 * result + (roleArn?.hashCode() ?: 0)
        result = 31 * result + (roleSessionName?.hashCode() ?: 0)
        result = 31 * result + (serialNumber?.hashCode() ?: 0)
        result = 31 * result + (sourceIdentity?.hashCode() ?: 0)
        result = 31 * result + (tags?.hashCode() ?: 0)
        result = 31 * result + (tokenCode?.hashCode() ?: 0)
        result = 31 * result + (transitiveTagKeys?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as AssumeRoleRequest

        if (durationSeconds != other.durationSeconds) return false
        if (externalId != other.externalId) return false
        if (policy != other.policy) return false
        if (policyArns != other.policyArns) return false
        if (roleArn != other.roleArn) return false
        if (roleSessionName != other.roleSessionName) return false
        if (serialNumber != other.serialNumber) return false
        if (sourceIdentity != other.sourceIdentity) return false
        if (tags != other.tags) return false
        if (tokenCode != other.tokenCode) return false
        if (transitiveTagKeys != other.transitiveTagKeys) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): AssumeRoleRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): AssumeRoleRequest
        /**
         * The duration, in seconds, of the role session. The value specified can can range from
         * 900 seconds (15 minutes) up to the maximum session duration that is set for the role. The
         * maximum session duration setting can have a value from 1 hour to 12 hours. If you specify a
         * value higher than this setting or the administrator setting (whichever is lower), the
         * operation fails. For example, if you specify a session duration of 12 hours, but your
         * administrator set the maximum session duration to 6 hours, your operation fails. To learn
         * how to view the maximum value for your role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session">View the
         * Maximum Session Duration Setting for a Role in the
         * IAM User Guide.
         * By default, the value is set to 3600 seconds.
         * The DurationSeconds parameter is separate from the duration of a console
         * session that you might request using the returned credentials. The request to the
         * federation endpoint for a console sign-in token takes a SessionDuration
         * parameter that specifies the maximum length of the console session. For more
         * information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html">Creating a URL
         * that Enables Federated Users to Access the Management Console in the
         * IAM User Guide.
         */
        fun durationSeconds(durationSeconds: Int): FluentBuilder
        /**
         * A unique identifier that might be required when you assume a role in another account. If
         * the administrator of the account to which the role belongs provided you with an external
         * ID, then provide that value in the ExternalId parameter. This value can be any
         * string, such as a passphrase or account number. A cross-account role is usually set up to
         * trust everyone in an account. Therefore, the administrator of the trusting account might
         * send an external ID to the administrator of the trusted account. That way, only someone
         * with the ID can assume the role, rather than everyone in the account. For more information
         * about the external ID, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html">How to Use an External ID
         * When Granting Access to Your Amazon Web Services Resources to a Third Party in the
         * IAM User Guide.
         * The regex used to validate this parameter is a string of
         * characters consisting of upper- and lower-case alphanumeric characters with no spaces.
         * You can also include underscores or any of the following characters: =,.@:/-
         */
        fun externalId(externalId: String): FluentBuilder
        /**
         * An IAM policy in JSON format that you want to use as an inline session policy.
         * This parameter is optional. Passing policies to this operation returns new
         * temporary credentials. The resulting session's permissions are the intersection of the
         * role's identity-based policy and the session policies. You can use the role's temporary
         * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
         * the role. You cannot use session policies to grant more permissions than those allowed
         * by the identity-based policy of the role that is being assumed. For more information, see
         * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
         * Policies in the IAM User Guide.
         * The plaintext that you use for both inline and managed session policies can't exceed
         * 2,048 characters. The JSON policy characters can be any ASCII character from the space
         * character to the end of the valid character list (\u0020 through \u00FF). It can also
         * include the tab (\u0009), linefeed (\u000A), and carriage return (\u000D)
         * characters.
         * An Amazon Web Services conversion compresses the passed session policies and session tags into a
         * packed binary format that has a separate limit. Your request can fail for this limit
         * even if your plaintext meets the other requirements. The PackedPolicySize
         * response element indicates by percentage how close the policies and tags for your
         * request are to the upper size limit.
         */
        fun policy(policy: String): FluentBuilder
        /**
         * The Amazon Resource Names (ARNs) of the IAM managed policies that you want to use as
         * managed session policies. The policies must exist in the same account as the role.
         * This parameter is optional. You can provide up to 10 managed policy ARNs. However, the
         * plaintext that you use for both inline and managed session policies can't exceed 2,048
         * characters. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services
         * Service Namespaces in the Amazon Web Services General Reference.
         * An Amazon Web Services conversion compresses the passed session policies and session tags into a
         * packed binary format that has a separate limit. Your request can fail for this limit
         * even if your plaintext meets the other requirements. The PackedPolicySize
         * response element indicates by percentage how close the policies and tags for your
         * request are to the upper size limit.
         * Passing policies to this operation returns new
         * temporary credentials. The resulting session's permissions are the intersection of the
         * role's identity-based policy and the session policies. You can use the role's temporary
         * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
         * the role. You cannot use session policies to grant more permissions than those allowed
         * by the identity-based policy of the role that is being assumed. For more information, see
         * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
         * Policies in the IAM User Guide.
         */
        fun policyArns(policyArns: List<PolicyDescriptorType>): FluentBuilder
        /**
         * The Amazon Resource Name (ARN) of the role to assume.
         */
        fun roleArn(roleArn: String): FluentBuilder
        /**
         * An identifier for the assumed role session.
         * Use the role session name to uniquely identify a session when the same role is assumed
         * by different principals or for different reasons. In cross-account scenarios, the role
         * session name is visible to, and can be logged by the account that owns the role. The role
         * session name is also used in the ARN of the assumed role principal. This means that
         * subsequent cross-account API requests that use the temporary security credentials will
         * expose the role session name to the external account in their CloudTrail logs.
         * The regex used to validate this parameter is a string of characters
         * consisting of upper- and lower-case alphanumeric characters with no spaces. You can
         * also include underscores or any of the following characters: =,.@-
         */
        fun roleSessionName(roleSessionName: String): FluentBuilder
        /**
         * The identification number of the MFA device that is associated with the user who is
         * making the AssumeRole call. Specify this value if the trust policy of the role
         * being assumed includes a condition that requires MFA authentication. The value is either
         * the serial number for a hardware device (such as GAHT12345678) or an Amazon
         * Resource Name (ARN) for a virtual device (such as
         * arn:aws:iam::123456789012:mfa/user).
         * The regex used to validate this parameter is a string of characters
         * consisting of upper- and lower-case alphanumeric characters with no spaces. You can
         * also include underscores or any of the following characters: =,.@-
         */
        fun serialNumber(serialNumber: String): FluentBuilder
        /**
         * The source identity specified by the principal that is calling the
         * AssumeRole operation.
         * You can require users to specify a source identity when they assume a role. You do this
         * by using the sts:SourceIdentity condition key in a role trust policy. You can
         * use source identity information in CloudTrail logs to determine who took actions with a role.
         * You can use the aws:SourceIdentity condition key to further control access to
         * Amazon Web Services resources based on the value of source identity. For more information about using
         * source identity, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html">Monitor and control
         * actions taken with assumed roles in the
         * IAM User Guide.
         * The regex used to validate this parameter is a string of characters consisting of upper-
         * and lower-case alphanumeric characters with no spaces. You can also include underscores or
         * any of the following characters: =,.@-. You cannot use a value that begins with the text
         * aws:. This prefix is reserved for Amazon Web Services internal
         * use.
         */
        fun sourceIdentity(sourceIdentity: String): FluentBuilder
        /**
         * A list of session tags that you want to pass. Each session tag consists of a key name
         * and an associated value. For more information about session tags, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html">Tagging STS
         * Sessions in the IAM User Guide.
         * This parameter is optional. You can pass up to 50 session tags. The plaintext session
         * tag keys can’t exceed 128 characters, and the values can’t exceed 256 characters. For these
         * and additional limits, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html#reference_iam-limits-entity-length">IAM
         * and STS Character Limits in the IAM User Guide.
         * An Amazon Web Services conversion compresses the passed session policies and session tags into a
         * packed binary format that has a separate limit. Your request can fail for this limit
         * even if your plaintext meets the other requirements. The PackedPolicySize
         * response element indicates by percentage how close the policies and tags for your
         * request are to the upper size limit.
         * You can pass a session tag with the same key as a tag that is already
         * attached to the role. When you do, session tags override a role tag with the same key.
         * Tag key–value pairs are not case sensitive, but case is preserved. This means that you
         * cannot have separate Department and department tag keys. Assume
         * that the role has the Department=Marketing tag and you pass the
         * department=engineering session tag. Department
         * and department are not saved as separate tags, and the session tag passed in
         * the request takes precedence over the role tag.
         * Additionally, if you used temporary credentials to perform this operation, the new
         * session inherits any transitive session tags from the calling session. If you pass a
         * session tag with the same key as an inherited tag, the operation fails. To view the
         * inherited tags for a session, see the CloudTrail logs. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/session-tags.html#id_session-tags_ctlogs">Viewing Session Tags in CloudTrail in the
         * IAM User Guide.
         */
        fun tags(tags: List<Tag>): FluentBuilder
        /**
         * The value provided by the MFA device, if the trust policy of the role being assumed
         * requires MFA. (In other words, if the policy includes a condition that tests for MFA). If
         * the role being assumed requires MFA and if the TokenCode value is missing or
         * expired, the AssumeRole call returns an "access denied" error.
         * The format for this parameter, as described by its regex pattern, is a sequence of six
         * numeric digits.
         */
        fun tokenCode(tokenCode: String): FluentBuilder
        /**
         * A list of keys for session tags that you want to set as transitive. If you set a tag key
         * as transitive, the corresponding key and value passes to subsequent sessions in a role
         * chain. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html#id_session-tags_role-chaining">Chaining Roles
         * with Session Tags in the IAM User Guide.
         * This parameter is optional. When you set session tags as transitive, the session policy
         * and session tags packed binary limit is not affected.
         * If you choose not to specify a transitive tag key, then no tags are passed from this
         * session to any subsequent sessions.
         */
        fun transitiveTagKeys(transitiveTagKeys: List<String>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The duration, in seconds, of the role session. The value specified can can range from
         * 900 seconds (15 minutes) up to the maximum session duration that is set for the role. The
         * maximum session duration setting can have a value from 1 hour to 12 hours. If you specify a
         * value higher than this setting or the administrator setting (whichever is lower), the
         * operation fails. For example, if you specify a session duration of 12 hours, but your
         * administrator set the maximum session duration to 6 hours, your operation fails. To learn
         * how to view the maximum value for your role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session">View the
         * Maximum Session Duration Setting for a Role in the
         * IAM User Guide.
         * By default, the value is set to 3600 seconds.
         * The DurationSeconds parameter is separate from the duration of a console
         * session that you might request using the returned credentials. The request to the
         * federation endpoint for a console sign-in token takes a SessionDuration
         * parameter that specifies the maximum length of the console session. For more
         * information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html">Creating a URL
         * that Enables Federated Users to Access the Management Console in the
         * IAM User Guide.
         */
        var durationSeconds: Int?
        /**
         * A unique identifier that might be required when you assume a role in another account. If
         * the administrator of the account to which the role belongs provided you with an external
         * ID, then provide that value in the ExternalId parameter. This value can be any
         * string, such as a passphrase or account number. A cross-account role is usually set up to
         * trust everyone in an account. Therefore, the administrator of the trusting account might
         * send an external ID to the administrator of the trusted account. That way, only someone
         * with the ID can assume the role, rather than everyone in the account. For more information
         * about the external ID, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html">How to Use an External ID
         * When Granting Access to Your Amazon Web Services Resources to a Third Party in the
         * IAM User Guide.
         * The regex used to validate this parameter is a string of
         * characters consisting of upper- and lower-case alphanumeric characters with no spaces.
         * You can also include underscores or any of the following characters: =,.@:/-
         */
        var externalId: String?
        /**
         * An IAM policy in JSON format that you want to use as an inline session policy.
         * This parameter is optional. Passing policies to this operation returns new
         * temporary credentials. The resulting session's permissions are the intersection of the
         * role's identity-based policy and the session policies. You can use the role's temporary
         * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
         * the role. You cannot use session policies to grant more permissions than those allowed
         * by the identity-based policy of the role that is being assumed. For more information, see
         * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
         * Policies in the IAM User Guide.
         * The plaintext that you use for both inline and managed session policies can't exceed
         * 2,048 characters. The JSON policy characters can be any ASCII character from the space
         * character to the end of the valid character list (\u0020 through \u00FF). It can also
         * include the tab (\u0009), linefeed (\u000A), and carriage return (\u000D)
         * characters.
         * An Amazon Web Services conversion compresses the passed session policies and session tags into a
         * packed binary format that has a separate limit. Your request can fail for this limit
         * even if your plaintext meets the other requirements. The PackedPolicySize
         * response element indicates by percentage how close the policies and tags for your
         * request are to the upper size limit.
         */
        var policy: String?
        /**
         * The Amazon Resource Names (ARNs) of the IAM managed policies that you want to use as
         * managed session policies. The policies must exist in the same account as the role.
         * This parameter is optional. You can provide up to 10 managed policy ARNs. However, the
         * plaintext that you use for both inline and managed session policies can't exceed 2,048
         * characters. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services
         * Service Namespaces in the Amazon Web Services General Reference.
         * An Amazon Web Services conversion compresses the passed session policies and session tags into a
         * packed binary format that has a separate limit. Your request can fail for this limit
         * even if your plaintext meets the other requirements. The PackedPolicySize
         * response element indicates by percentage how close the policies and tags for your
         * request are to the upper size limit.
         * Passing policies to this operation returns new
         * temporary credentials. The resulting session's permissions are the intersection of the
         * role's identity-based policy and the session policies. You can use the role's temporary
         * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
         * the role. You cannot use session policies to grant more permissions than those allowed
         * by the identity-based policy of the role that is being assumed. For more information, see
         * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
         * Policies in the IAM User Guide.
         */
        var policyArns: List<PolicyDescriptorType>?
        /**
         * The Amazon Resource Name (ARN) of the role to assume.
         */
        var roleArn: String?
        /**
         * An identifier for the assumed role session.
         * Use the role session name to uniquely identify a session when the same role is assumed
         * by different principals or for different reasons. In cross-account scenarios, the role
         * session name is visible to, and can be logged by the account that owns the role. The role
         * session name is also used in the ARN of the assumed role principal. This means that
         * subsequent cross-account API requests that use the temporary security credentials will
         * expose the role session name to the external account in their CloudTrail logs.
         * The regex used to validate this parameter is a string of characters
         * consisting of upper- and lower-case alphanumeric characters with no spaces. You can
         * also include underscores or any of the following characters: =,.@-
         */
        var roleSessionName: String?
        /**
         * The identification number of the MFA device that is associated with the user who is
         * making the AssumeRole call. Specify this value if the trust policy of the role
         * being assumed includes a condition that requires MFA authentication. The value is either
         * the serial number for a hardware device (such as GAHT12345678) or an Amazon
         * Resource Name (ARN) for a virtual device (such as
         * arn:aws:iam::123456789012:mfa/user).
         * The regex used to validate this parameter is a string of characters
         * consisting of upper- and lower-case alphanumeric characters with no spaces. You can
         * also include underscores or any of the following characters: =,.@-
         */
        var serialNumber: String?
        /**
         * The source identity specified by the principal that is calling the
         * AssumeRole operation.
         * You can require users to specify a source identity when they assume a role. You do this
         * by using the sts:SourceIdentity condition key in a role trust policy. You can
         * use source identity information in CloudTrail logs to determine who took actions with a role.
         * You can use the aws:SourceIdentity condition key to further control access to
         * Amazon Web Services resources based on the value of source identity. For more information about using
         * source identity, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html">Monitor and control
         * actions taken with assumed roles in the
         * IAM User Guide.
         * The regex used to validate this parameter is a string of characters consisting of upper-
         * and lower-case alphanumeric characters with no spaces. You can also include underscores or
         * any of the following characters: =,.@-. You cannot use a value that begins with the text
         * aws:. This prefix is reserved for Amazon Web Services internal
         * use.
         */
        var sourceIdentity: String?
        /**
         * A list of session tags that you want to pass. Each session tag consists of a key name
         * and an associated value. For more information about session tags, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html">Tagging STS
         * Sessions in the IAM User Guide.
         * This parameter is optional. You can pass up to 50 session tags. The plaintext session
         * tag keys can’t exceed 128 characters, and the values can’t exceed 256 characters. For these
         * and additional limits, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html#reference_iam-limits-entity-length">IAM
         * and STS Character Limits in the IAM User Guide.
         * An Amazon Web Services conversion compresses the passed session policies and session tags into a
         * packed binary format that has a separate limit. Your request can fail for this limit
         * even if your plaintext meets the other requirements. The PackedPolicySize
         * response element indicates by percentage how close the policies and tags for your
         * request are to the upper size limit.
         * You can pass a session tag with the same key as a tag that is already
         * attached to the role. When you do, session tags override a role tag with the same key.
         * Tag key–value pairs are not case sensitive, but case is preserved. This means that you
         * cannot have separate Department and department tag keys. Assume
         * that the role has the Department=Marketing tag and you pass the
         * department=engineering session tag. Department
         * and department are not saved as separate tags, and the session tag passed in
         * the request takes precedence over the role tag.
         * Additionally, if you used temporary credentials to perform this operation, the new
         * session inherits any transitive session tags from the calling session. If you pass a
         * session tag with the same key as an inherited tag, the operation fails. To view the
         * inherited tags for a session, see the CloudTrail logs. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/session-tags.html#id_session-tags_ctlogs">Viewing Session Tags in CloudTrail in the
         * IAM User Guide.
         */
        var tags: List<Tag>?
        /**
         * The value provided by the MFA device, if the trust policy of the role being assumed
         * requires MFA. (In other words, if the policy includes a condition that tests for MFA). If
         * the role being assumed requires MFA and if the TokenCode value is missing or
         * expired, the AssumeRole call returns an "access denied" error.
         * The format for this parameter, as described by its regex pattern, is a sequence of six
         * numeric digits.
         */
        var tokenCode: String?
        /**
         * A list of keys for session tags that you want to set as transitive. If you set a tag key
         * as transitive, the corresponding key and value passes to subsequent sessions in a role
         * chain. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html#id_session-tags_role-chaining">Chaining Roles
         * with Session Tags in the IAM User Guide.
         * This parameter is optional. When you set session tags as transitive, the session policy
         * and session tags packed binary limit is not affected.
         * If you choose not to specify a transitive tag key, then no tags are passed from this
         * session to any subsequent sessions.
         */
        var transitiveTagKeys: List<String>?

        fun build(): AssumeRoleRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var durationSeconds: Int? = null
        override var externalId: String? = null
        override var policy: String? = null
        override var policyArns: List<PolicyDescriptorType>? = null
        override var roleArn: String? = null
        override var roleSessionName: String? = null
        override var serialNumber: String? = null
        override var sourceIdentity: String? = null
        override var tags: List<Tag>? = null
        override var tokenCode: String? = null
        override var transitiveTagKeys: List<String>? = null

        constructor(x: AssumeRoleRequest) : this() {
            this.durationSeconds = x.durationSeconds
            this.externalId = x.externalId
            this.policy = x.policy
            this.policyArns = x.policyArns
            this.roleArn = x.roleArn
            this.roleSessionName = x.roleSessionName
            this.serialNumber = x.serialNumber
            this.sourceIdentity = x.sourceIdentity
            this.tags = x.tags
            this.tokenCode = x.tokenCode
            this.transitiveTagKeys = x.transitiveTagKeys
        }

        override fun build(): AssumeRoleRequest = AssumeRoleRequest(this)
        override fun durationSeconds(durationSeconds: Int): FluentBuilder = apply { this.durationSeconds = durationSeconds }
        override fun externalId(externalId: String): FluentBuilder = apply { this.externalId = externalId }
        override fun policy(policy: String): FluentBuilder = apply { this.policy = policy }
        override fun policyArns(policyArns: List<PolicyDescriptorType>): FluentBuilder = apply { this.policyArns = policyArns }
        override fun roleArn(roleArn: String): FluentBuilder = apply { this.roleArn = roleArn }
        override fun roleSessionName(roleSessionName: String): FluentBuilder = apply { this.roleSessionName = roleSessionName }
        override fun serialNumber(serialNumber: String): FluentBuilder = apply { this.serialNumber = serialNumber }
        override fun sourceIdentity(sourceIdentity: String): FluentBuilder = apply { this.sourceIdentity = sourceIdentity }
        override fun tags(tags: List<Tag>): FluentBuilder = apply { this.tags = tags }
        override fun tokenCode(tokenCode: String): FluentBuilder = apply { this.tokenCode = tokenCode }
        override fun transitiveTagKeys(transitiveTagKeys: List<String>): FluentBuilder = apply { this.transitiveTagKeys = transitiveTagKeys }
    }
}
