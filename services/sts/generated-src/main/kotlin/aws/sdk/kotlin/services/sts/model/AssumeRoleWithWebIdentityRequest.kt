// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.sts.model



class AssumeRoleWithWebIdentityRequest private constructor(builder: BuilderImpl) {
    /**
     * The duration, in seconds, of the role session. The value can range from 900 seconds (15
     * minutes) up to the maximum session duration setting for the role. This setting can have a
     * value from 1 hour to 12 hours. If you specify a value higher than this setting, the
     * operation fails. For example, if you specify a session duration of 12 hours, but your
     * administrator set the maximum session duration to 6 hours, your operation fails. To learn
     * how to view the maximum value for your role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session">View the
     * Maximum Session Duration Setting for a Role in the
     * IAM User Guide.
     * By default, the value is set to 3600 seconds.
     * The DurationSeconds parameter is separate from the duration of a console
     * session that you might request using the returned credentials. The request to the
     * federation endpoint for a console sign-in token takes a SessionDuration
     * parameter that specifies the maximum length of the console session. For more
     * information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html">Creating a URL
     * that Enables Federated Users to Access the Management Console in the
     * IAM User Guide.
     */
    val durationSeconds: Int? = builder.durationSeconds
    /**
     * An IAM policy in JSON format that you want to use as an inline session policy.
     * This parameter is optional. Passing policies to this operation returns new
     * temporary credentials. The resulting session's permissions are the intersection of the
     * role's identity-based policy and the session policies. You can use the role's temporary
     * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
     * the role. You cannot use session policies to grant more permissions than those allowed
     * by the identity-based policy of the role that is being assumed. For more information, see
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
     * Policies in the IAM User Guide.
     * The plaintext that you use for both inline and managed session policies can't exceed
     * 2,048 characters. The JSON policy characters can be any ASCII character from the space
     * character to the end of the valid character list (\u0020 through \u00FF). It can also
     * include the tab (\u0009), linefeed (\u000A), and carriage return (\u000D)
     * characters.
     * An Amazon Web Services conversion compresses the passed session policies and session tags into a
     * packed binary format that has a separate limit. Your request can fail for this limit
     * even if your plaintext meets the other requirements. The PackedPolicySize
     * response element indicates by percentage how close the policies and tags for your
     * request are to the upper size limit.
     */
    val policy: String? = builder.policy
    /**
     * The Amazon Resource Names (ARNs) of the IAM managed policies that you want to use as
     * managed session policies. The policies must exist in the same account as the role.
     * This parameter is optional. You can provide up to 10 managed policy ARNs. However, the
     * plaintext that you use for both inline and managed session policies can't exceed 2,048
     * characters. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services
     * Service Namespaces in the Amazon Web Services General Reference.
     * An Amazon Web Services conversion compresses the passed session policies and session tags into a
     * packed binary format that has a separate limit. Your request can fail for this limit
     * even if your plaintext meets the other requirements. The PackedPolicySize
     * response element indicates by percentage how close the policies and tags for your
     * request are to the upper size limit.
     * Passing policies to this operation returns new
     * temporary credentials. The resulting session's permissions are the intersection of the
     * role's identity-based policy and the session policies. You can use the role's temporary
     * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
     * the role. You cannot use session policies to grant more permissions than those allowed
     * by the identity-based policy of the role that is being assumed. For more information, see
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
     * Policies in the IAM User Guide.
     */
    val policyArns: List<PolicyDescriptorType>? = builder.policyArns
    /**
     * The fully qualified host component of the domain name of the identity provider.
     * Specify this value only for OAuth 2.0 access tokens. Currently
     * www.amazon.com and graph.facebook.com are the only supported
     * identity providers for OAuth 2.0 access tokens. Do not include URL schemes and port
     * numbers.
     * Do not specify this value for OpenID Connect ID tokens.
     */
    val providerId: String? = builder.providerId
    /**
     * The Amazon Resource Name (ARN) of the role that the caller is assuming.
     */
    val roleArn: String? = builder.roleArn
    /**
     * An identifier for the assumed role session. Typically, you pass the name or identifier
     * that is associated with the user who is using your application. That way, the temporary
     * security credentials that your application will use are associated with that user. This
     * session name is included as part of the ARN and assumed role ID in the
     * AssumedRoleUser response element.
     * The regex used to validate this parameter is a string of characters
     * consisting of upper- and lower-case alphanumeric characters with no spaces. You can
     * also include underscores or any of the following characters: =,.@-
     */
    val roleSessionName: String? = builder.roleSessionName
    /**
     * The OAuth 2.0 access token or OpenID Connect ID token that is provided by the identity
     * provider. Your application must get this token by authenticating the user who is using your
     * application with a web identity provider before the application makes an
     * AssumeRoleWithWebIdentity call.
     */
    val webIdentityToken: String? = builder.webIdentityToken

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): AssumeRoleWithWebIdentityRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("AssumeRoleWithWebIdentityRequest(")
        append("durationSeconds=$durationSeconds,")
        append("policy=$policy,")
        append("policyArns=$policyArns,")
        append("providerId=$providerId,")
        append("roleArn=$roleArn,")
        append("roleSessionName=$roleSessionName,")
        append("webIdentityToken=$webIdentityToken)")
    }

    override fun hashCode(): kotlin.Int {
        var result = durationSeconds ?: 0
        result = 31 * result + (policy?.hashCode() ?: 0)
        result = 31 * result + (policyArns?.hashCode() ?: 0)
        result = 31 * result + (providerId?.hashCode() ?: 0)
        result = 31 * result + (roleArn?.hashCode() ?: 0)
        result = 31 * result + (roleSessionName?.hashCode() ?: 0)
        result = 31 * result + (webIdentityToken?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as AssumeRoleWithWebIdentityRequest

        if (durationSeconds != other.durationSeconds) return false
        if (policy != other.policy) return false
        if (policyArns != other.policyArns) return false
        if (providerId != other.providerId) return false
        if (roleArn != other.roleArn) return false
        if (roleSessionName != other.roleSessionName) return false
        if (webIdentityToken != other.webIdentityToken) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): AssumeRoleWithWebIdentityRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): AssumeRoleWithWebIdentityRequest
        /**
         * The duration, in seconds, of the role session. The value can range from 900 seconds (15
         * minutes) up to the maximum session duration setting for the role. This setting can have a
         * value from 1 hour to 12 hours. If you specify a value higher than this setting, the
         * operation fails. For example, if you specify a session duration of 12 hours, but your
         * administrator set the maximum session duration to 6 hours, your operation fails. To learn
         * how to view the maximum value for your role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session">View the
         * Maximum Session Duration Setting for a Role in the
         * IAM User Guide.
         * By default, the value is set to 3600 seconds.
         * The DurationSeconds parameter is separate from the duration of a console
         * session that you might request using the returned credentials. The request to the
         * federation endpoint for a console sign-in token takes a SessionDuration
         * parameter that specifies the maximum length of the console session. For more
         * information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html">Creating a URL
         * that Enables Federated Users to Access the Management Console in the
         * IAM User Guide.
         */
        fun durationSeconds(durationSeconds: Int): FluentBuilder
        /**
         * An IAM policy in JSON format that you want to use as an inline session policy.
         * This parameter is optional. Passing policies to this operation returns new
         * temporary credentials. The resulting session's permissions are the intersection of the
         * role's identity-based policy and the session policies. You can use the role's temporary
         * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
         * the role. You cannot use session policies to grant more permissions than those allowed
         * by the identity-based policy of the role that is being assumed. For more information, see
         * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
         * Policies in the IAM User Guide.
         * The plaintext that you use for both inline and managed session policies can't exceed
         * 2,048 characters. The JSON policy characters can be any ASCII character from the space
         * character to the end of the valid character list (\u0020 through \u00FF). It can also
         * include the tab (\u0009), linefeed (\u000A), and carriage return (\u000D)
         * characters.
         * An Amazon Web Services conversion compresses the passed session policies and session tags into a
         * packed binary format that has a separate limit. Your request can fail for this limit
         * even if your plaintext meets the other requirements. The PackedPolicySize
         * response element indicates by percentage how close the policies and tags for your
         * request are to the upper size limit.
         */
        fun policy(policy: String): FluentBuilder
        /**
         * The Amazon Resource Names (ARNs) of the IAM managed policies that you want to use as
         * managed session policies. The policies must exist in the same account as the role.
         * This parameter is optional. You can provide up to 10 managed policy ARNs. However, the
         * plaintext that you use for both inline and managed session policies can't exceed 2,048
         * characters. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services
         * Service Namespaces in the Amazon Web Services General Reference.
         * An Amazon Web Services conversion compresses the passed session policies and session tags into a
         * packed binary format that has a separate limit. Your request can fail for this limit
         * even if your plaintext meets the other requirements. The PackedPolicySize
         * response element indicates by percentage how close the policies and tags for your
         * request are to the upper size limit.
         * Passing policies to this operation returns new
         * temporary credentials. The resulting session's permissions are the intersection of the
         * role's identity-based policy and the session policies. You can use the role's temporary
         * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
         * the role. You cannot use session policies to grant more permissions than those allowed
         * by the identity-based policy of the role that is being assumed. For more information, see
         * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
         * Policies in the IAM User Guide.
         */
        fun policyArns(policyArns: List<PolicyDescriptorType>): FluentBuilder
        /**
         * The fully qualified host component of the domain name of the identity provider.
         * Specify this value only for OAuth 2.0 access tokens. Currently
         * www.amazon.com and graph.facebook.com are the only supported
         * identity providers for OAuth 2.0 access tokens. Do not include URL schemes and port
         * numbers.
         * Do not specify this value for OpenID Connect ID tokens.
         */
        fun providerId(providerId: String): FluentBuilder
        /**
         * The Amazon Resource Name (ARN) of the role that the caller is assuming.
         */
        fun roleArn(roleArn: String): FluentBuilder
        /**
         * An identifier for the assumed role session. Typically, you pass the name or identifier
         * that is associated with the user who is using your application. That way, the temporary
         * security credentials that your application will use are associated with that user. This
         * session name is included as part of the ARN and assumed role ID in the
         * AssumedRoleUser response element.
         * The regex used to validate this parameter is a string of characters
         * consisting of upper- and lower-case alphanumeric characters with no spaces. You can
         * also include underscores or any of the following characters: =,.@-
         */
        fun roleSessionName(roleSessionName: String): FluentBuilder
        /**
         * The OAuth 2.0 access token or OpenID Connect ID token that is provided by the identity
         * provider. Your application must get this token by authenticating the user who is using your
         * application with a web identity provider before the application makes an
         * AssumeRoleWithWebIdentity call.
         */
        fun webIdentityToken(webIdentityToken: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The duration, in seconds, of the role session. The value can range from 900 seconds (15
         * minutes) up to the maximum session duration setting for the role. This setting can have a
         * value from 1 hour to 12 hours. If you specify a value higher than this setting, the
         * operation fails. For example, if you specify a session duration of 12 hours, but your
         * administrator set the maximum session duration to 6 hours, your operation fails. To learn
         * how to view the maximum value for your role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session">View the
         * Maximum Session Duration Setting for a Role in the
         * IAM User Guide.
         * By default, the value is set to 3600 seconds.
         * The DurationSeconds parameter is separate from the duration of a console
         * session that you might request using the returned credentials. The request to the
         * federation endpoint for a console sign-in token takes a SessionDuration
         * parameter that specifies the maximum length of the console session. For more
         * information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html">Creating a URL
         * that Enables Federated Users to Access the Management Console in the
         * IAM User Guide.
         */
        var durationSeconds: Int?
        /**
         * An IAM policy in JSON format that you want to use as an inline session policy.
         * This parameter is optional. Passing policies to this operation returns new
         * temporary credentials. The resulting session's permissions are the intersection of the
         * role's identity-based policy and the session policies. You can use the role's temporary
         * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
         * the role. You cannot use session policies to grant more permissions than those allowed
         * by the identity-based policy of the role that is being assumed. For more information, see
         * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
         * Policies in the IAM User Guide.
         * The plaintext that you use for both inline and managed session policies can't exceed
         * 2,048 characters. The JSON policy characters can be any ASCII character from the space
         * character to the end of the valid character list (\u0020 through \u00FF). It can also
         * include the tab (\u0009), linefeed (\u000A), and carriage return (\u000D)
         * characters.
         * An Amazon Web Services conversion compresses the passed session policies and session tags into a
         * packed binary format that has a separate limit. Your request can fail for this limit
         * even if your plaintext meets the other requirements. The PackedPolicySize
         * response element indicates by percentage how close the policies and tags for your
         * request are to the upper size limit.
         */
        var policy: String?
        /**
         * The Amazon Resource Names (ARNs) of the IAM managed policies that you want to use as
         * managed session policies. The policies must exist in the same account as the role.
         * This parameter is optional. You can provide up to 10 managed policy ARNs. However, the
         * plaintext that you use for both inline and managed session policies can't exceed 2,048
         * characters. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services
         * Service Namespaces in the Amazon Web Services General Reference.
         * An Amazon Web Services conversion compresses the passed session policies and session tags into a
         * packed binary format that has a separate limit. Your request can fail for this limit
         * even if your plaintext meets the other requirements. The PackedPolicySize
         * response element indicates by percentage how close the policies and tags for your
         * request are to the upper size limit.
         * Passing policies to this operation returns new
         * temporary credentials. The resulting session's permissions are the intersection of the
         * role's identity-based policy and the session policies. You can use the role's temporary
         * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
         * the role. You cannot use session policies to grant more permissions than those allowed
         * by the identity-based policy of the role that is being assumed. For more information, see
         * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
         * Policies in the IAM User Guide.
         */
        var policyArns: List<PolicyDescriptorType>?
        /**
         * The fully qualified host component of the domain name of the identity provider.
         * Specify this value only for OAuth 2.0 access tokens. Currently
         * www.amazon.com and graph.facebook.com are the only supported
         * identity providers for OAuth 2.0 access tokens. Do not include URL schemes and port
         * numbers.
         * Do not specify this value for OpenID Connect ID tokens.
         */
        var providerId: String?
        /**
         * The Amazon Resource Name (ARN) of the role that the caller is assuming.
         */
        var roleArn: String?
        /**
         * An identifier for the assumed role session. Typically, you pass the name or identifier
         * that is associated with the user who is using your application. That way, the temporary
         * security credentials that your application will use are associated with that user. This
         * session name is included as part of the ARN and assumed role ID in the
         * AssumedRoleUser response element.
         * The regex used to validate this parameter is a string of characters
         * consisting of upper- and lower-case alphanumeric characters with no spaces. You can
         * also include underscores or any of the following characters: =,.@-
         */
        var roleSessionName: String?
        /**
         * The OAuth 2.0 access token or OpenID Connect ID token that is provided by the identity
         * provider. Your application must get this token by authenticating the user who is using your
         * application with a web identity provider before the application makes an
         * AssumeRoleWithWebIdentity call.
         */
        var webIdentityToken: String?

        fun build(): AssumeRoleWithWebIdentityRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var durationSeconds: Int? = null
        override var policy: String? = null
        override var policyArns: List<PolicyDescriptorType>? = null
        override var providerId: String? = null
        override var roleArn: String? = null
        override var roleSessionName: String? = null
        override var webIdentityToken: String? = null

        constructor(x: AssumeRoleWithWebIdentityRequest) : this() {
            this.durationSeconds = x.durationSeconds
            this.policy = x.policy
            this.policyArns = x.policyArns
            this.providerId = x.providerId
            this.roleArn = x.roleArn
            this.roleSessionName = x.roleSessionName
            this.webIdentityToken = x.webIdentityToken
        }

        override fun build(): AssumeRoleWithWebIdentityRequest = AssumeRoleWithWebIdentityRequest(this)
        override fun durationSeconds(durationSeconds: Int): FluentBuilder = apply { this.durationSeconds = durationSeconds }
        override fun policy(policy: String): FluentBuilder = apply { this.policy = policy }
        override fun policyArns(policyArns: List<PolicyDescriptorType>): FluentBuilder = apply { this.policyArns = policyArns }
        override fun providerId(providerId: String): FluentBuilder = apply { this.providerId = providerId }
        override fun roleArn(roleArn: String): FluentBuilder = apply { this.roleArn = roleArn }
        override fun roleSessionName(roleSessionName: String): FluentBuilder = apply { this.roleSessionName = roleSessionName }
        override fun webIdentityToken(webIdentityToken: String): FluentBuilder = apply { this.webIdentityToken = webIdentityToken }
    }
}
