// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.sts.model



/**
 * Contains the response to a successful GetFederationToken request,
 * including temporary Amazon Web Services credentials that can be used to make Amazon Web Services requests.
 */
class GetFederationTokenResponse private constructor(builder: BuilderImpl) {
    /**
     * The temporary security credentials, which include an access key ID, a secret access key,
     * and a security (or session) token.
     * The size of the security token that STS API operations return is not fixed. We
     * strongly recommend that you make no assumptions about the maximum size.
     */
    val credentials: Credentials? = builder.credentials
    /**
     * Identifiers for the federated user associated with the credentials (such as
     * arn:aws:sts::123456789012:federated-user/Bob or
     * 123456789012:Bob). You can use the federated user's ARN in your
     * resource-based policies, such as an Amazon S3 bucket policy.
     */
    val federatedUser: FederatedUser? = builder.federatedUser
    /**
     * A percentage value that indicates the packed size of the session policies and session
     * tags combined passed in the request. The request fails if the packed size is greater than 100 percent,
     * which means the policies and tags exceeded the allowed space.
     */
    val packedPolicySize: Int? = builder.packedPolicySize

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): GetFederationTokenResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("GetFederationTokenResponse(")
        append("credentials=$credentials,")
        append("federatedUser=$federatedUser,")
        append("packedPolicySize=$packedPolicySize)")
    }

    override fun hashCode(): kotlin.Int {
        var result = credentials?.hashCode() ?: 0
        result = 31 * result + (federatedUser?.hashCode() ?: 0)
        result = 31 * result + (packedPolicySize ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as GetFederationTokenResponse

        if (credentials != other.credentials) return false
        if (federatedUser != other.federatedUser) return false
        if (packedPolicySize != other.packedPolicySize) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): GetFederationTokenResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): GetFederationTokenResponse
        /**
         * The temporary security credentials, which include an access key ID, a secret access key,
         * and a security (or session) token.
         * The size of the security token that STS API operations return is not fixed. We
         * strongly recommend that you make no assumptions about the maximum size.
         */
        fun credentials(credentials: Credentials): FluentBuilder
        /**
         * Identifiers for the federated user associated with the credentials (such as
         * arn:aws:sts::123456789012:federated-user/Bob or
         * 123456789012:Bob). You can use the federated user's ARN in your
         * resource-based policies, such as an Amazon S3 bucket policy.
         */
        fun federatedUser(federatedUser: FederatedUser): FluentBuilder
        /**
         * A percentage value that indicates the packed size of the session policies and session
         * tags combined passed in the request. The request fails if the packed size is greater than 100 percent,
         * which means the policies and tags exceeded the allowed space.
         */
        fun packedPolicySize(packedPolicySize: Int): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The temporary security credentials, which include an access key ID, a secret access key,
         * and a security (or session) token.
         * The size of the security token that STS API operations return is not fixed. We
         * strongly recommend that you make no assumptions about the maximum size.
         */
        var credentials: Credentials?
        /**
         * Identifiers for the federated user associated with the credentials (such as
         * arn:aws:sts::123456789012:federated-user/Bob or
         * 123456789012:Bob). You can use the federated user's ARN in your
         * resource-based policies, such as an Amazon S3 bucket policy.
         */
        var federatedUser: FederatedUser?
        /**
         * A percentage value that indicates the packed size of the session policies and session
         * tags combined passed in the request. The request fails if the packed size is greater than 100 percent,
         * which means the policies and tags exceeded the allowed space.
         */
        var packedPolicySize: Int?

        fun build(): GetFederationTokenResponse
        /**
         * construct an [aws.sdk.kotlin.services.sts.model.Credentials] inside the given [block]
         */
        fun credentials(block: Credentials.DslBuilder.() -> kotlin.Unit) {
            this.credentials = Credentials.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.sts.model.FederatedUser] inside the given [block]
         */
        fun federatedUser(block: FederatedUser.DslBuilder.() -> kotlin.Unit) {
            this.federatedUser = FederatedUser.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var credentials: Credentials? = null
        override var federatedUser: FederatedUser? = null
        override var packedPolicySize: Int? = null

        constructor(x: GetFederationTokenResponse) : this() {
            this.credentials = x.credentials
            this.federatedUser = x.federatedUser
            this.packedPolicySize = x.packedPolicySize
        }

        override fun build(): GetFederationTokenResponse = GetFederationTokenResponse(this)
        override fun credentials(credentials: Credentials): FluentBuilder = apply { this.credentials = credentials }
        override fun federatedUser(federatedUser: FederatedUser): FluentBuilder = apply { this.federatedUser = federatedUser }
        override fun packedPolicySize(packedPolicySize: Int): FluentBuilder = apply { this.packedPolicySize = packedPolicySize }
    }
}
