// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.sts.model



class GetAccessKeyInfoRequest private constructor(builder: BuilderImpl) {
    /**
     * The identifier of an access key.
     * This parameter allows (through its regex pattern) a string of characters that can
     * consist of any upper- or lowercase letter or digit.
     */
    val accessKeyId: String? = builder.accessKeyId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): GetAccessKeyInfoRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("GetAccessKeyInfoRequest(")
        append("accessKeyId=$accessKeyId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = accessKeyId?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as GetAccessKeyInfoRequest

        if (accessKeyId != other.accessKeyId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): GetAccessKeyInfoRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): GetAccessKeyInfoRequest
        /**
         * The identifier of an access key.
         * This parameter allows (through its regex pattern) a string of characters that can
         * consist of any upper- or lowercase letter or digit.
         */
        fun accessKeyId(accessKeyId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The identifier of an access key.
         * This parameter allows (through its regex pattern) a string of characters that can
         * consist of any upper- or lowercase letter or digit.
         */
        var accessKeyId: String?

        fun build(): GetAccessKeyInfoRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var accessKeyId: String? = null

        constructor(x: GetAccessKeyInfoRequest) : this() {
            this.accessKeyId = x.accessKeyId
        }

        override fun build(): GetAccessKeyInfoRequest = GetAccessKeyInfoRequest(this)
        override fun accessKeyId(accessKeyId: String): FluentBuilder = apply { this.accessKeyId = accessKeyId }
    }
}
