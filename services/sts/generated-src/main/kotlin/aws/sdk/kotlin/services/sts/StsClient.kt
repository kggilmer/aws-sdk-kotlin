// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.sts

import aws.sdk.kotlin.runtime.auth.credentials.CredentialsProvider
import aws.sdk.kotlin.runtime.auth.credentials.DefaultChainCredentialsProvider
import aws.sdk.kotlin.runtime.client.AwsClientConfig
import aws.sdk.kotlin.runtime.config.AwsClientConfigLoadOptions
import aws.sdk.kotlin.runtime.config.fromEnvironment
import aws.sdk.kotlin.runtime.endpoint.AwsEndpointResolver
import aws.sdk.kotlin.services.sts.internal.DefaultEndpointResolver
import aws.sdk.kotlin.services.sts.model.*
import aws.smithy.kotlin.runtime.SdkClient
import aws.smithy.kotlin.runtime.client.SdkLogMode
import aws.smithy.kotlin.runtime.config.SdkClientConfig
import aws.smithy.kotlin.runtime.http.config.HttpClientConfig
import aws.smithy.kotlin.runtime.http.engine.HttpClientEngine
import aws.smithy.kotlin.runtime.http.operation.EndpointResolver
import aws.smithy.kotlin.runtime.retries.RetryStrategy
import aws.smithy.kotlin.runtime.retries.impl.ExponentialBackoffWithJitter
import aws.smithy.kotlin.runtime.retries.impl.ExponentialBackoffWithJitterOptions
import aws.smithy.kotlin.runtime.retries.impl.StandardRetryStrategy
import aws.smithy.kotlin.runtime.retries.impl.StandardRetryStrategyOptions
import aws.smithy.kotlin.runtime.retries.impl.StandardRetryTokenBucket
import aws.smithy.kotlin.runtime.retries.impl.StandardRetryTokenBucketOptions

/**
 * <fullname>Security Token Service</fullname>
 * Security Token Service (STS) enables you to request temporary, limited-privilege
 * credentials for Identity and Access Management (IAM) users or for users that you
 * authenticate (federated users). This guide provides descriptions of the STS API. For
 * more information about using this service, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html">Temporary Security Credentials.
 */
interface StsClient : SdkClient {

    override val serviceName: String
        get() = "STS"
    /**
     * StsClient's configuration
     */
    val config: Config

    companion object {
        operator fun invoke(sharedConfig: AwsClientConfig? = null, block: Config.DslBuilder.() -> Unit = {}): StsClient {
            val config = Config.BuilderImpl().apply {
                region = sharedConfig?.region
                credentialsProvider = sharedConfig?.credentialsProvider
            }.apply(block).build()
            return DefaultStsClient(config)
        }

        operator fun invoke(config: Config): StsClient = DefaultStsClient(config)

        /**
         * Construct a [StsClient] by resolving the configuration from the current environment.
         * NOTE: If you are using multiple AWS service clients you may wish to share the configuration among them
         * by constructing a [aws.sdk.kotlin.runtime.client.AwsClientConfig] and passing it to each client at construction.
         */
        suspend fun fromEnvironment(block: AwsClientConfigLoadOptions.() -> Unit = {}): StsClient {
            val sharedConfig = AwsClientConfig.fromEnvironment(block)
            return StsClient(sharedConfig)
        }
    }

    class Config private constructor(builder: BuilderImpl): AwsClientConfig, HttpClientConfig, SdkClientConfig {
        override val credentialsProvider: CredentialsProvider = builder.credentialsProvider ?: DefaultChainCredentialsProvider()
        val endpointResolver: AwsEndpointResolver = builder.endpointResolver ?: DefaultEndpointResolver()
        override val httpClientEngine: HttpClientEngine? = builder.httpClientEngine
        override val region: String = requireNotNull(builder.region) { "region is a required configuration property" }
        val retryStrategy: RetryStrategy = run {
            val strategyOptions = StandardRetryStrategyOptions.Default
            val tokenBucket = StandardRetryTokenBucket(StandardRetryTokenBucketOptions.Default)
            val delayer = ExponentialBackoffWithJitter(ExponentialBackoffWithJitterOptions.Default)
            StandardRetryStrategy(strategyOptions, tokenBucket, delayer)
        }
        override val sdkLogMode: SdkLogMode = builder.sdkLogMode
        companion object {
            @JvmStatic
            fun fluentBuilder(): FluentBuilder = BuilderImpl()

            operator fun invoke(block: DslBuilder.() -> kotlin.Unit): Config = BuilderImpl().apply(block).build()
        }

        interface FluentBuilder {
            fun credentialsProvider(credentialsProvider: CredentialsProvider): FluentBuilder
            fun endpointResolver(endpointResolver: AwsEndpointResolver): FluentBuilder
            fun httpClientEngine(httpClientEngine: HttpClientEngine): FluentBuilder
            fun region(region: String): FluentBuilder
            fun sdkLogMode(sdkLogMode: SdkLogMode): FluentBuilder
            fun build(): Config
        }

        interface DslBuilder {
            /**
             * The AWS credentials provider to use for authenticating requests. If not provided a
             * [aws.sdk.kotlin.runtime.auth.credentials.DefaultChainCredentialsProvider] instance will be used.
             */
            var credentialsProvider: CredentialsProvider?

            /**
             * Determines the endpoint (hostname) to make requests to. When not provided a default
             * resolver is configured automatically. This is an advanced client option.
             */
            var endpointResolver: AwsEndpointResolver?

            /**
             * Override the default HTTP client engine used to make SDK requests (e.g. configure proxy behavior, timeouts, concurrency, etc)
             */
            var httpClientEngine: HttpClientEngine?

            /**
             * AWS region to make requests to
             */
            var region: String?

            /**
             * Configure events that will be logged. By default clients will not output
             * raw requests or responses. Use this setting to opt-in to additional debug logging.
             * This can be used to configure logging of requests, responses, retries, etc of SDK clients.
             * **NOTE**: Logging of raw requests or responses may leak sensitive information! It may also have
             * performance considerations when dumping the request/response body. This is primarily a tool for
             * debug purposes.
             */
            var sdkLogMode: SdkLogMode

        }

        internal class BuilderImpl() : FluentBuilder, DslBuilder {
            override var credentialsProvider: CredentialsProvider? = null
            override var endpointResolver: AwsEndpointResolver? = null
            override var httpClientEngine: HttpClientEngine? = null
            override var region: String? = null
            override var sdkLogMode: SdkLogMode = SdkLogMode.Default

            override fun build(): Config = Config(this)
            override fun credentialsProvider(credentialsProvider: CredentialsProvider): FluentBuilder = apply { this.credentialsProvider = credentialsProvider }
            override fun endpointResolver(endpointResolver: AwsEndpointResolver): FluentBuilder = apply { this.endpointResolver = endpointResolver }
            override fun httpClientEngine(httpClientEngine: HttpClientEngine): FluentBuilder = apply { this.httpClientEngine = httpClientEngine }
            override fun region(region: String): FluentBuilder = apply { this.region = region }
            override fun sdkLogMode(sdkLogMode: SdkLogMode): FluentBuilder = apply { this.sdkLogMode = sdkLogMode }
        }
    }

    /**
     * Returns a set of temporary security credentials that you can use to access Amazon Web Services
     * resources that you might not normally have access to. These temporary credentials
     * consist of an access key ID, a secret access key, and a security token. Typically, you
     * use AssumeRole within your account or for cross-account access. For a
     * comparison of AssumeRole with other API operations that produce temporary
     * credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html">Requesting Temporary Security
     * Credentials and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison">Comparing
     * the STS API operations in the
     * IAM User Guide.
     * Permissions
     * The temporary security credentials created by AssumeRole can be used to
     * make API calls to any Amazon Web Services service with the following exception: You cannot call the
     * STS GetFederationToken or GetSessionToken API
     * operations.
     * (Optional) You can pass inline or managed <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">session policies to
     * this operation. You can pass a single JSON policy document to use as an inline session
     * policy. You can also specify up to 10 managed policies to use as managed session policies.
     * The plaintext that you use for both inline and managed session policies can't exceed 2,048
     * characters. Passing policies to this operation returns new
     * temporary credentials. The resulting session's permissions are the intersection of the
     * role's identity-based policy and the session policies. You can use the role's temporary
     * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
     * the role. You cannot use session policies to grant more permissions than those allowed
     * by the identity-based policy of the role that is being assumed. For more information, see
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
     * Policies in the IAM User Guide.
     * To assume a role from a different account, your account must be trusted by the
     * role. The trust relationship is defined in the role's trust policy when the role is
     * created. That trust policy states which accounts are allowed to delegate that access to
     * users in the account.
     * A user who wants to access a role in a different account must also have permissions that
     * are delegated from the user account administrator. The administrator must attach a policy
     * that allows the user to call AssumeRole for the ARN of the role in the other
     * account. If the user is in the same account as the role, then you can do either of the
     * following:
     * Attach a policy to the user (identical to the previous user in a different
     * account).
     * Add the user as a principal directly in the role's trust policy.
     * In this case, the trust policy acts as an IAM resource-based policy. Users in the same
     * account as the role do not need explicit permission to assume the role. For more
     * information about trust policies and resource-based policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html">IAM Policies in
     * the IAM User Guide.
     * Tags
     * (Optional) You can pass tag key-value pairs to your session. These tags are called
     * session tags. For more information about session tags, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html">Passing Session Tags in STS in the
     * IAM User Guide.
     * An administrator must grant you the permissions necessary to pass session tags. The
     * administrator can also create granular permissions to allow you to pass only specific
     * session tags. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_attribute-based-access-control.html">Tutorial: Using Tags
     * for Attribute-Based Access Control in the
     * IAM User Guide.
     * You can set the session tags as transitive. Transitive tags persist during role
     * chaining. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html#id_session-tags_role-chaining">Chaining Roles
     * with Session Tags in the IAM User Guide.
     * Using MFA with AssumeRole
     * (Optional) You can include multi-factor authentication (MFA) information when you call
     * AssumeRole. This is useful for cross-account scenarios to ensure that the
     * user that assumes the role has been authenticated with an Amazon Web Services MFA device. In that
     * scenario, the trust policy of the role being assumed includes a condition that tests for
     * MFA authentication. If the caller does not include valid MFA information, the request to
     * assume the role is denied. The condition in a trust policy that tests for MFA
     * authentication might look like the following example.
     * "Condition": {"Bool": {"aws:MultiFactorAuthPresent": true}}
     * For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/MFAProtectedAPI.html">Configuring MFA-Protected API Access
     * in the IAM User Guide guide.
     * To use MFA with AssumeRole, you pass values for the
     * SerialNumber and TokenCode parameters. The
     * SerialNumber value identifies the user's hardware or virtual MFA device.
     * The TokenCode is the time-based one-time password (TOTP) that the MFA device
     * produces.
     */
    suspend fun assumeRole(input: AssumeRoleRequest): AssumeRoleResponse

    /**
     * Returns a set of temporary security credentials that you can use to access Amazon Web Services
     * resources that you might not normally have access to. These temporary credentials
     * consist of an access key ID, a secret access key, and a security token. Typically, you
     * use AssumeRole within your account or for cross-account access. For a
     * comparison of AssumeRole with other API operations that produce temporary
     * credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html">Requesting Temporary Security
     * Credentials and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison">Comparing
     * the STS API operations in the
     * IAM User Guide.
     * Permissions
     * The temporary security credentials created by AssumeRole can be used to
     * make API calls to any Amazon Web Services service with the following exception: You cannot call the
     * STS GetFederationToken or GetSessionToken API
     * operations.
     * (Optional) You can pass inline or managed <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">session policies to
     * this operation. You can pass a single JSON policy document to use as an inline session
     * policy. You can also specify up to 10 managed policies to use as managed session policies.
     * The plaintext that you use for both inline and managed session policies can't exceed 2,048
     * characters. Passing policies to this operation returns new
     * temporary credentials. The resulting session's permissions are the intersection of the
     * role's identity-based policy and the session policies. You can use the role's temporary
     * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
     * the role. You cannot use session policies to grant more permissions than those allowed
     * by the identity-based policy of the role that is being assumed. For more information, see
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
     * Policies in the IAM User Guide.
     * To assume a role from a different account, your account must be trusted by the
     * role. The trust relationship is defined in the role's trust policy when the role is
     * created. That trust policy states which accounts are allowed to delegate that access to
     * users in the account.
     * A user who wants to access a role in a different account must also have permissions that
     * are delegated from the user account administrator. The administrator must attach a policy
     * that allows the user to call AssumeRole for the ARN of the role in the other
     * account. If the user is in the same account as the role, then you can do either of the
     * following:
     * Attach a policy to the user (identical to the previous user in a different
     * account).
     * Add the user as a principal directly in the role's trust policy.
     * In this case, the trust policy acts as an IAM resource-based policy. Users in the same
     * account as the role do not need explicit permission to assume the role. For more
     * information about trust policies and resource-based policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html">IAM Policies in
     * the IAM User Guide.
     * Tags
     * (Optional) You can pass tag key-value pairs to your session. These tags are called
     * session tags. For more information about session tags, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html">Passing Session Tags in STS in the
     * IAM User Guide.
     * An administrator must grant you the permissions necessary to pass session tags. The
     * administrator can also create granular permissions to allow you to pass only specific
     * session tags. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_attribute-based-access-control.html">Tutorial: Using Tags
     * for Attribute-Based Access Control in the
     * IAM User Guide.
     * You can set the session tags as transitive. Transitive tags persist during role
     * chaining. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html#id_session-tags_role-chaining">Chaining Roles
     * with Session Tags in the IAM User Guide.
     * Using MFA with AssumeRole
     * (Optional) You can include multi-factor authentication (MFA) information when you call
     * AssumeRole. This is useful for cross-account scenarios to ensure that the
     * user that assumes the role has been authenticated with an Amazon Web Services MFA device. In that
     * scenario, the trust policy of the role being assumed includes a condition that tests for
     * MFA authentication. If the caller does not include valid MFA information, the request to
     * assume the role is denied. The condition in a trust policy that tests for MFA
     * authentication might look like the following example.
     * "Condition": {"Bool": {"aws:MultiFactorAuthPresent": true}}
     * For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/MFAProtectedAPI.html">Configuring MFA-Protected API Access
     * in the IAM User Guide guide.
     * To use MFA with AssumeRole, you pass values for the
     * SerialNumber and TokenCode parameters. The
     * SerialNumber value identifies the user's hardware or virtual MFA device.
     * The TokenCode is the time-based one-time password (TOTP) that the MFA device
     * produces.
     */
    suspend fun assumeRole(block: AssumeRoleRequest.DslBuilder.() -> Unit) = assumeRole(AssumeRoleRequest.builder().apply(block).build())

    /**
     * Returns a set of temporary security credentials for users who have been authenticated
     * via a SAML authentication response. This operation provides a mechanism for tying an
     * enterprise identity store or directory to role-based Amazon Web Services access without user-specific
     * credentials or configuration. For a comparison of AssumeRoleWithSAML with the
     * other API operations that produce temporary credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html">Requesting Temporary Security
     * Credentials and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison">Comparing the
     * STS API operations in the IAM User Guide.
     * The temporary security credentials returned by this operation consist of an access key
     * ID, a secret access key, and a security token. Applications can use these temporary
     * security credentials to sign calls to Amazon Web Services services.
     * Session Duration
     * By default, the temporary security credentials created by
     * AssumeRoleWithSAML last for one hour. However, you can use the optional
     * DurationSeconds parameter to specify the duration of your session. Your
     * role session lasts for the duration that you specify, or until the time specified in the
     * SAML authentication response's SessionNotOnOrAfter value, whichever is
     * shorter. You can provide a DurationSeconds value from 900 seconds (15 minutes)
     * up to the maximum session duration setting for the role. This setting can have a value from
     * 1 hour to 12 hours. To learn how to view the maximum value for your role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session">View the
     * Maximum Session Duration Setting for a Role in the
     * IAM User Guide. The maximum session duration limit applies when
     * you use the AssumeRole* API operations or the assume-role* CLI
     * commands. However the limit does not apply when you use those operations to create a
     * console URL. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles in the
     * IAM User Guide.
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-role-chaining">Role chaining limits your CLI or Amazon Web Services API
     * role session to a maximum of one hour. When you use the AssumeRole API
     * operation to assume a role, you can specify the duration of your role session with
     * the DurationSeconds parameter. You can specify a parameter value of up
     * to 43200 seconds (12 hours), depending on the maximum session duration setting for
     * your role. However, if you assume a role using role chaining and provide a
     * DurationSeconds parameter value greater than one hour, the
     * operation fails.
     * Permissions
     * The temporary security credentials created by AssumeRoleWithSAML can be
     * used to make API calls to any Amazon Web Services service with the following exception: you cannot call
     * the STS GetFederationToken or GetSessionToken API
     * operations.
     * (Optional) You can pass inline or managed <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">session policies to
     * this operation. You can pass a single JSON policy document to use as an inline session
     * policy. You can also specify up to 10 managed policies to use as managed session policies.
     * The plaintext that you use for both inline and managed session policies can't exceed 2,048
     * characters. Passing policies to this operation returns new
     * temporary credentials. The resulting session's permissions are the intersection of the
     * role's identity-based policy and the session policies. You can use the role's temporary
     * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
     * the role. You cannot use session policies to grant more permissions than those allowed
     * by the identity-based policy of the role that is being assumed. For more information, see
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
     * Policies in the IAM User Guide.
     * Calling AssumeRoleWithSAML does not require the use of Amazon Web Services security
     * credentials. The identity of the caller is validated by using keys in the metadata document
     * that is uploaded for the SAML provider entity for your identity provider.
     * Calling AssumeRoleWithSAML can result in an entry in your CloudTrail logs.
     * The entry includes the value in the NameID element of the SAML assertion.
     * We recommend that you use a NameIDType that is not associated with any
     * personally identifiable information (PII). For example, you could instead use the
     * persistent identifier
     * (urn:oasis:names:tc:SAML:2.0:nameid-format:persistent).
     * Tags
     * (Optional) You can configure your IdP to pass attributes into your SAML assertion as
     * session tags. Each session tag consists of a key name and an associated value. For more
     * information about session tags, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html">Passing Session Tags in STS in the
     * IAM User Guide.
     * You can pass up to 50 session tags. The plaintext session tag keys can’t exceed 128
     * characters and the values can’t exceed 256 characters. For these and additional limits, see
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html#reference_iam-limits-entity-length">IAM
     * and STS Character Limits in the IAM User Guide.
     * An Amazon Web Services conversion compresses the passed session policies and session tags into a
     * packed binary format that has a separate limit. Your request can fail for this limit
     * even if your plaintext meets the other requirements. The PackedPolicySize
     * response element indicates by percentage how close the policies and tags for your
     * request are to the upper size limit.
     * You can pass a session tag with the same key as a tag that is
     * attached to the role. When you do, session tags override the role's tags with the same
     * key.
     * An administrator must grant you the permissions necessary to pass session tags. The
     * administrator can also create granular permissions to allow you to pass only specific
     * session tags. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_attribute-based-access-control.html">Tutorial: Using Tags
     * for Attribute-Based Access Control in the
     * IAM User Guide.
     * You can set the session tags as transitive. Transitive tags persist during role
     * chaining. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html#id_session-tags_role-chaining">Chaining Roles
     * with Session Tags in the IAM User Guide.
     * SAML Configuration
     * Before your application can call AssumeRoleWithSAML, you must configure
     * your SAML identity provider (IdP) to issue the claims required by Amazon Web Services. Additionally, you
     * must use Identity and Access Management (IAM) to create a SAML provider entity in your Amazon Web Services account that
     * represents your identity provider. You must also create an IAM role that specifies this
     * SAML provider in its trust policy.
     * For more information, see the following resources:
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About
     * SAML 2.0-based Federation in the IAM User Guide.
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_saml.html">Creating SAML Identity Providers in the
     * IAM User Guide.
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_saml_relying-party.html">Configuring
     * a Relying Party and Claims in the IAM User Guide.
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-idp_saml.html">Creating a Role for SAML 2.0 Federation in the
     * IAM User Guide.
     */
    suspend fun assumeRoleWithSaml(input: AssumeRoleWithSamlRequest): AssumeRoleWithSamlResponse

    /**
     * Returns a set of temporary security credentials for users who have been authenticated
     * via a SAML authentication response. This operation provides a mechanism for tying an
     * enterprise identity store or directory to role-based Amazon Web Services access without user-specific
     * credentials or configuration. For a comparison of AssumeRoleWithSAML with the
     * other API operations that produce temporary credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html">Requesting Temporary Security
     * Credentials and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison">Comparing the
     * STS API operations in the IAM User Guide.
     * The temporary security credentials returned by this operation consist of an access key
     * ID, a secret access key, and a security token. Applications can use these temporary
     * security credentials to sign calls to Amazon Web Services services.
     * Session Duration
     * By default, the temporary security credentials created by
     * AssumeRoleWithSAML last for one hour. However, you can use the optional
     * DurationSeconds parameter to specify the duration of your session. Your
     * role session lasts for the duration that you specify, or until the time specified in the
     * SAML authentication response's SessionNotOnOrAfter value, whichever is
     * shorter. You can provide a DurationSeconds value from 900 seconds (15 minutes)
     * up to the maximum session duration setting for the role. This setting can have a value from
     * 1 hour to 12 hours. To learn how to view the maximum value for your role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session">View the
     * Maximum Session Duration Setting for a Role in the
     * IAM User Guide. The maximum session duration limit applies when
     * you use the AssumeRole* API operations or the assume-role* CLI
     * commands. However the limit does not apply when you use those operations to create a
     * console URL. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles in the
     * IAM User Guide.
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-role-chaining">Role chaining limits your CLI or Amazon Web Services API
     * role session to a maximum of one hour. When you use the AssumeRole API
     * operation to assume a role, you can specify the duration of your role session with
     * the DurationSeconds parameter. You can specify a parameter value of up
     * to 43200 seconds (12 hours), depending on the maximum session duration setting for
     * your role. However, if you assume a role using role chaining and provide a
     * DurationSeconds parameter value greater than one hour, the
     * operation fails.
     * Permissions
     * The temporary security credentials created by AssumeRoleWithSAML can be
     * used to make API calls to any Amazon Web Services service with the following exception: you cannot call
     * the STS GetFederationToken or GetSessionToken API
     * operations.
     * (Optional) You can pass inline or managed <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">session policies to
     * this operation. You can pass a single JSON policy document to use as an inline session
     * policy. You can also specify up to 10 managed policies to use as managed session policies.
     * The plaintext that you use for both inline and managed session policies can't exceed 2,048
     * characters. Passing policies to this operation returns new
     * temporary credentials. The resulting session's permissions are the intersection of the
     * role's identity-based policy and the session policies. You can use the role's temporary
     * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
     * the role. You cannot use session policies to grant more permissions than those allowed
     * by the identity-based policy of the role that is being assumed. For more information, see
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
     * Policies in the IAM User Guide.
     * Calling AssumeRoleWithSAML does not require the use of Amazon Web Services security
     * credentials. The identity of the caller is validated by using keys in the metadata document
     * that is uploaded for the SAML provider entity for your identity provider.
     * Calling AssumeRoleWithSAML can result in an entry in your CloudTrail logs.
     * The entry includes the value in the NameID element of the SAML assertion.
     * We recommend that you use a NameIDType that is not associated with any
     * personally identifiable information (PII). For example, you could instead use the
     * persistent identifier
     * (urn:oasis:names:tc:SAML:2.0:nameid-format:persistent).
     * Tags
     * (Optional) You can configure your IdP to pass attributes into your SAML assertion as
     * session tags. Each session tag consists of a key name and an associated value. For more
     * information about session tags, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html">Passing Session Tags in STS in the
     * IAM User Guide.
     * You can pass up to 50 session tags. The plaintext session tag keys can’t exceed 128
     * characters and the values can’t exceed 256 characters. For these and additional limits, see
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html#reference_iam-limits-entity-length">IAM
     * and STS Character Limits in the IAM User Guide.
     * An Amazon Web Services conversion compresses the passed session policies and session tags into a
     * packed binary format that has a separate limit. Your request can fail for this limit
     * even if your plaintext meets the other requirements. The PackedPolicySize
     * response element indicates by percentage how close the policies and tags for your
     * request are to the upper size limit.
     * You can pass a session tag with the same key as a tag that is
     * attached to the role. When you do, session tags override the role's tags with the same
     * key.
     * An administrator must grant you the permissions necessary to pass session tags. The
     * administrator can also create granular permissions to allow you to pass only specific
     * session tags. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_attribute-based-access-control.html">Tutorial: Using Tags
     * for Attribute-Based Access Control in the
     * IAM User Guide.
     * You can set the session tags as transitive. Transitive tags persist during role
     * chaining. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html#id_session-tags_role-chaining">Chaining Roles
     * with Session Tags in the IAM User Guide.
     * SAML Configuration
     * Before your application can call AssumeRoleWithSAML, you must configure
     * your SAML identity provider (IdP) to issue the claims required by Amazon Web Services. Additionally, you
     * must use Identity and Access Management (IAM) to create a SAML provider entity in your Amazon Web Services account that
     * represents your identity provider. You must also create an IAM role that specifies this
     * SAML provider in its trust policy.
     * For more information, see the following resources:
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About
     * SAML 2.0-based Federation in the IAM User Guide.
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_saml.html">Creating SAML Identity Providers in the
     * IAM User Guide.
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_saml_relying-party.html">Configuring
     * a Relying Party and Claims in the IAM User Guide.
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-idp_saml.html">Creating a Role for SAML 2.0 Federation in the
     * IAM User Guide.
     */
    suspend fun assumeRoleWithSaml(block: AssumeRoleWithSamlRequest.DslBuilder.() -> Unit) = assumeRoleWithSaml(AssumeRoleWithSamlRequest.builder().apply(block).build())

    /**
     * Returns a set of temporary security credentials for users who have been authenticated in
     * a mobile or web application with a web identity provider. Example providers include Amazon Cognito,
     * Login with Amazon, Facebook, Google, or any OpenID Connect-compatible identity
     * provider.
     * For mobile applications, we recommend that you use Amazon Cognito. You can use Amazon Cognito with the
     * <a href="http://aws.amazon.com/sdkforios/">Amazon Web Services SDK for iOS Developer Guide and the <a href="http://aws.amazon.com/sdkforandroid/">Amazon Web Services SDK for Android Developer Guide to uniquely
     * identify a user. You can also supply the user with a consistent identity throughout the
     * lifetime of an application.
     * To learn more about Amazon Cognito, see <a href="https://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/cognito-auth.html#d0e840">Amazon Cognito Overview in
     * Amazon Web Services SDK for Android Developer Guide and <a href="https://docs.aws.amazon.com/mobile/sdkforios/developerguide/cognito-auth.html#d0e664">Amazon Cognito Overview in the
     * Amazon Web Services SDK for iOS Developer Guide.
     * Calling AssumeRoleWithWebIdentity does not require the use of Amazon Web Services
     * security credentials. Therefore, you can distribute an application (for example, on mobile
     * devices) that requests temporary security credentials without including long-term Amazon Web Services
     * credentials in the application. You also don't need to deploy server-based proxy services
     * that use long-term Amazon Web Services credentials. Instead, the identity of the caller is validated by
     * using a token from the web identity provider. For a comparison of
     * AssumeRoleWithWebIdentity with the other API operations that produce
     * temporary credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html">Requesting Temporary Security
     * Credentials and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison">Comparing the
     * STS API operations in the IAM User Guide.
     * The temporary security credentials returned by this API consist of an access key ID, a
     * secret access key, and a security token. Applications can use these temporary security
     * credentials to sign calls to Amazon Web Services service API operations.
     * Session Duration
     * By default, the temporary security credentials created by
     * AssumeRoleWithWebIdentity last for one hour. However, you can use the
     * optional DurationSeconds parameter to specify the duration of your session.
     * You can provide a value from 900 seconds (15 minutes) up to the maximum session duration
     * setting for the role. This setting can have a value from 1 hour to 12 hours. To learn how
     * to view the maximum value for your role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session">View the
     * Maximum Session Duration Setting for a Role in the
     * IAM User Guide. The maximum session duration limit applies when
     * you use the AssumeRole* API operations or the assume-role* CLI
     * commands. However the limit does not apply when you use those operations to create a
     * console URL. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles in the
     * IAM User Guide.
     * Permissions
     * The temporary security credentials created by AssumeRoleWithWebIdentity can
     * be used to make API calls to any Amazon Web Services service with the following exception: you cannot
     * call the STS GetFederationToken or GetSessionToken API
     * operations.
     * (Optional) You can pass inline or managed <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">session policies to
     * this operation. You can pass a single JSON policy document to use as an inline session
     * policy. You can also specify up to 10 managed policies to use as managed session policies.
     * The plaintext that you use for both inline and managed session policies can't exceed 2,048
     * characters. Passing policies to this operation returns new
     * temporary credentials. The resulting session's permissions are the intersection of the
     * role's identity-based policy and the session policies. You can use the role's temporary
     * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
     * the role. You cannot use session policies to grant more permissions than those allowed
     * by the identity-based policy of the role that is being assumed. For more information, see
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
     * Policies in the IAM User Guide.
     * Tags
     * (Optional) You can configure your IdP to pass attributes into your web identity token as
     * session tags. Each session tag consists of a key name and an associated value. For more
     * information about session tags, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html">Passing Session Tags in STS in the
     * IAM User Guide.
     * You can pass up to 50 session tags. The plaintext session tag keys can’t exceed 128
     * characters and the values can’t exceed 256 characters. For these and additional limits, see
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html#reference_iam-limits-entity-length">IAM
     * and STS Character Limits in the IAM User Guide.
     * An Amazon Web Services conversion compresses the passed session policies and session tags into a
     * packed binary format that has a separate limit. Your request can fail for this limit
     * even if your plaintext meets the other requirements. The PackedPolicySize
     * response element indicates by percentage how close the policies and tags for your
     * request are to the upper size limit.
     * You can pass a session tag with the same key as a tag that is
     * attached to the role. When you do, the session tag overrides the role tag with the same
     * key.
     * An administrator must grant you the permissions necessary to pass session tags. The
     * administrator can also create granular permissions to allow you to pass only specific
     * session tags. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_attribute-based-access-control.html">Tutorial: Using Tags
     * for Attribute-Based Access Control in the
     * IAM User Guide.
     * You can set the session tags as transitive. Transitive tags persist during role
     * chaining. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html#id_session-tags_role-chaining">Chaining Roles
     * with Session Tags in the IAM User Guide.
     * Identities
     * Before your application can call AssumeRoleWithWebIdentity, you must have
     * an identity token from a supported identity provider and create a role that the application
     * can assume. The role that your application assumes must trust the identity provider that is
     * associated with the identity token. In other words, the identity provider must be specified
     * in the role's trust policy.
     * Calling AssumeRoleWithWebIdentity can result in an entry in your
     * CloudTrail logs. The entry includes the <a href="http://openid.net/specs/openid-connect-core-1_0.html#Claims">Subject of
     * the provided web identity token. We recommend that you avoid using any personally
     * identifiable information (PII) in this field. For example, you could instead use a GUID
     * or a pairwise identifier, as <a href="http://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes">suggested
     * in the OIDC specification.
     * For more information about how to use web identity federation and the
     * AssumeRoleWithWebIdentity API, see the following resources:
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc_manual.html">Using Web Identity Federation API Operations for Mobile Apps and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_assumerolewithwebidentity">Federation Through a Web-based Identity Provider.
     * <a href="https://aws.amazon.com/blogs/aws/the-aws-web-identity-federation-playground/"> Web Identity Federation Playground. Walk through the process of
     * authenticating through Login with Amazon, Facebook, or Google, getting temporary
     * security credentials, and then using those credentials to make a request to Amazon Web Services.
     * <a href="http://aws.amazon.com/sdkforios/">Amazon Web Services SDK for iOS Developer Guide and <a href="http://aws.amazon.com/sdkforandroid/">Amazon Web Services SDK for Android Developer Guide. These toolkits
     * contain sample apps that show how to invoke the identity providers. The toolkits then
     * show how to use the information from these providers to get and use temporary
     * security credentials.
     * <a href="http://aws.amazon.com/articles/web-identity-federation-with-mobile-applications">Web Identity
     * Federation with Mobile Applications. This article discusses web identity
     * federation and shows an example of how to use web identity federation to get access
     * to content in Amazon S3.
     */
    suspend fun assumeRoleWithWebIdentity(input: AssumeRoleWithWebIdentityRequest): AssumeRoleWithWebIdentityResponse

    /**
     * Returns a set of temporary security credentials for users who have been authenticated in
     * a mobile or web application with a web identity provider. Example providers include Amazon Cognito,
     * Login with Amazon, Facebook, Google, or any OpenID Connect-compatible identity
     * provider.
     * For mobile applications, we recommend that you use Amazon Cognito. You can use Amazon Cognito with the
     * <a href="http://aws.amazon.com/sdkforios/">Amazon Web Services SDK for iOS Developer Guide and the <a href="http://aws.amazon.com/sdkforandroid/">Amazon Web Services SDK for Android Developer Guide to uniquely
     * identify a user. You can also supply the user with a consistent identity throughout the
     * lifetime of an application.
     * To learn more about Amazon Cognito, see <a href="https://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/cognito-auth.html#d0e840">Amazon Cognito Overview in
     * Amazon Web Services SDK for Android Developer Guide and <a href="https://docs.aws.amazon.com/mobile/sdkforios/developerguide/cognito-auth.html#d0e664">Amazon Cognito Overview in the
     * Amazon Web Services SDK for iOS Developer Guide.
     * Calling AssumeRoleWithWebIdentity does not require the use of Amazon Web Services
     * security credentials. Therefore, you can distribute an application (for example, on mobile
     * devices) that requests temporary security credentials without including long-term Amazon Web Services
     * credentials in the application. You also don't need to deploy server-based proxy services
     * that use long-term Amazon Web Services credentials. Instead, the identity of the caller is validated by
     * using a token from the web identity provider. For a comparison of
     * AssumeRoleWithWebIdentity with the other API operations that produce
     * temporary credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html">Requesting Temporary Security
     * Credentials and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison">Comparing the
     * STS API operations in the IAM User Guide.
     * The temporary security credentials returned by this API consist of an access key ID, a
     * secret access key, and a security token. Applications can use these temporary security
     * credentials to sign calls to Amazon Web Services service API operations.
     * Session Duration
     * By default, the temporary security credentials created by
     * AssumeRoleWithWebIdentity last for one hour. However, you can use the
     * optional DurationSeconds parameter to specify the duration of your session.
     * You can provide a value from 900 seconds (15 minutes) up to the maximum session duration
     * setting for the role. This setting can have a value from 1 hour to 12 hours. To learn how
     * to view the maximum value for your role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session">View the
     * Maximum Session Duration Setting for a Role in the
     * IAM User Guide. The maximum session duration limit applies when
     * you use the AssumeRole* API operations or the assume-role* CLI
     * commands. However the limit does not apply when you use those operations to create a
     * console URL. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles in the
     * IAM User Guide.
     * Permissions
     * The temporary security credentials created by AssumeRoleWithWebIdentity can
     * be used to make API calls to any Amazon Web Services service with the following exception: you cannot
     * call the STS GetFederationToken or GetSessionToken API
     * operations.
     * (Optional) You can pass inline or managed <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">session policies to
     * this operation. You can pass a single JSON policy document to use as an inline session
     * policy. You can also specify up to 10 managed policies to use as managed session policies.
     * The plaintext that you use for both inline and managed session policies can't exceed 2,048
     * characters. Passing policies to this operation returns new
     * temporary credentials. The resulting session's permissions are the intersection of the
     * role's identity-based policy and the session policies. You can use the role's temporary
     * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
     * the role. You cannot use session policies to grant more permissions than those allowed
     * by the identity-based policy of the role that is being assumed. For more information, see
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
     * Policies in the IAM User Guide.
     * Tags
     * (Optional) You can configure your IdP to pass attributes into your web identity token as
     * session tags. Each session tag consists of a key name and an associated value. For more
     * information about session tags, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html">Passing Session Tags in STS in the
     * IAM User Guide.
     * You can pass up to 50 session tags. The plaintext session tag keys can’t exceed 128
     * characters and the values can’t exceed 256 characters. For these and additional limits, see
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html#reference_iam-limits-entity-length">IAM
     * and STS Character Limits in the IAM User Guide.
     * An Amazon Web Services conversion compresses the passed session policies and session tags into a
     * packed binary format that has a separate limit. Your request can fail for this limit
     * even if your plaintext meets the other requirements. The PackedPolicySize
     * response element indicates by percentage how close the policies and tags for your
     * request are to the upper size limit.
     * You can pass a session tag with the same key as a tag that is
     * attached to the role. When you do, the session tag overrides the role tag with the same
     * key.
     * An administrator must grant you the permissions necessary to pass session tags. The
     * administrator can also create granular permissions to allow you to pass only specific
     * session tags. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_attribute-based-access-control.html">Tutorial: Using Tags
     * for Attribute-Based Access Control in the
     * IAM User Guide.
     * You can set the session tags as transitive. Transitive tags persist during role
     * chaining. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html#id_session-tags_role-chaining">Chaining Roles
     * with Session Tags in the IAM User Guide.
     * Identities
     * Before your application can call AssumeRoleWithWebIdentity, you must have
     * an identity token from a supported identity provider and create a role that the application
     * can assume. The role that your application assumes must trust the identity provider that is
     * associated with the identity token. In other words, the identity provider must be specified
     * in the role's trust policy.
     * Calling AssumeRoleWithWebIdentity can result in an entry in your
     * CloudTrail logs. The entry includes the <a href="http://openid.net/specs/openid-connect-core-1_0.html#Claims">Subject of
     * the provided web identity token. We recommend that you avoid using any personally
     * identifiable information (PII) in this field. For example, you could instead use a GUID
     * or a pairwise identifier, as <a href="http://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes">suggested
     * in the OIDC specification.
     * For more information about how to use web identity federation and the
     * AssumeRoleWithWebIdentity API, see the following resources:
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc_manual.html">Using Web Identity Federation API Operations for Mobile Apps and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_assumerolewithwebidentity">Federation Through a Web-based Identity Provider.
     * <a href="https://aws.amazon.com/blogs/aws/the-aws-web-identity-federation-playground/"> Web Identity Federation Playground. Walk through the process of
     * authenticating through Login with Amazon, Facebook, or Google, getting temporary
     * security credentials, and then using those credentials to make a request to Amazon Web Services.
     * <a href="http://aws.amazon.com/sdkforios/">Amazon Web Services SDK for iOS Developer Guide and <a href="http://aws.amazon.com/sdkforandroid/">Amazon Web Services SDK for Android Developer Guide. These toolkits
     * contain sample apps that show how to invoke the identity providers. The toolkits then
     * show how to use the information from these providers to get and use temporary
     * security credentials.
     * <a href="http://aws.amazon.com/articles/web-identity-federation-with-mobile-applications">Web Identity
     * Federation with Mobile Applications. This article discusses web identity
     * federation and shows an example of how to use web identity federation to get access
     * to content in Amazon S3.
     */
    suspend fun assumeRoleWithWebIdentity(block: AssumeRoleWithWebIdentityRequest.DslBuilder.() -> Unit) = assumeRoleWithWebIdentity(AssumeRoleWithWebIdentityRequest.builder().apply(block).build())

    /**
     * Decodes additional information about the authorization status of a request from an
     * encoded message returned in response to an Amazon Web Services request.
     * For example, if a user is not authorized to perform an operation that he or she has
     * requested, the request returns a Client.UnauthorizedOperation response (an
     * HTTP 403 response). Some Amazon Web Services operations additionally return an encoded message that can
     * provide details about this authorization failure.
     * Only certain Amazon Web Services operations return an encoded authorization message. The
     * documentation for an individual operation indicates whether that operation returns an
     * encoded message in addition to returning an HTTP code.
     * The message is encoded because the details of the authorization status can constitute
     * privileged information that the user who requested the operation should not see. To decode
     * an authorization status message, a user must be granted permissions via an IAM policy to
     * request the DecodeAuthorizationMessage
     * (sts:DecodeAuthorizationMessage) action.
     * The decoded message includes the following type of information:
     * Whether the request was denied due to an explicit deny or due to the absence of an
     * explicit allow. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-denyallow">Determining Whether a Request is Allowed or Denied in the
     * IAM User Guide.
     * The principal who made the request.
     * The requested action.
     * The requested resource.
     * The values of condition keys in the context of the user's request.
     */
    suspend fun decodeAuthorizationMessage(input: DecodeAuthorizationMessageRequest): DecodeAuthorizationMessageResponse

    /**
     * Decodes additional information about the authorization status of a request from an
     * encoded message returned in response to an Amazon Web Services request.
     * For example, if a user is not authorized to perform an operation that he or she has
     * requested, the request returns a Client.UnauthorizedOperation response (an
     * HTTP 403 response). Some Amazon Web Services operations additionally return an encoded message that can
     * provide details about this authorization failure.
     * Only certain Amazon Web Services operations return an encoded authorization message. The
     * documentation for an individual operation indicates whether that operation returns an
     * encoded message in addition to returning an HTTP code.
     * The message is encoded because the details of the authorization status can constitute
     * privileged information that the user who requested the operation should not see. To decode
     * an authorization status message, a user must be granted permissions via an IAM policy to
     * request the DecodeAuthorizationMessage
     * (sts:DecodeAuthorizationMessage) action.
     * The decoded message includes the following type of information:
     * Whether the request was denied due to an explicit deny or due to the absence of an
     * explicit allow. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-denyallow">Determining Whether a Request is Allowed or Denied in the
     * IAM User Guide.
     * The principal who made the request.
     * The requested action.
     * The requested resource.
     * The values of condition keys in the context of the user's request.
     */
    suspend fun decodeAuthorizationMessage(block: DecodeAuthorizationMessageRequest.DslBuilder.() -> Unit) = decodeAuthorizationMessage(DecodeAuthorizationMessageRequest.builder().apply(block).build())

    /**
     * Returns the account identifier for the specified access key ID.
     * Access keys consist of two parts: an access key ID (for example,
     * AKIAIOSFODNN7EXAMPLE) and a secret access key (for example,
     * wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY). For more information about
     * access keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html">Managing Access Keys for IAM
     * Users in the IAM User Guide.
     * When you pass an access key ID to this operation, it returns the ID of the Amazon Web Services
     * account to which the keys belong. Access key IDs beginning with AKIA are
     * long-term credentials for an IAM user or the Amazon Web Services account root user. Access key IDs
     * beginning with ASIA are temporary credentials that are created using STS
     * operations. If the account in the response belongs to you, you can sign in as the root
     * user and review your root user access keys. Then, you can pull a <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_getting-report.html">credentials report to learn which IAM user owns the keys. To learn who
     * requested the temporary credentials for an ASIA access key, view the STS
     * events in your <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">CloudTrail logs in the
     * IAM User Guide.
     * This operation does not indicate the state of the access key. The key might be active,
     * inactive, or deleted. Active keys might not have permissions to perform an operation.
     * Providing a deleted access key might return an error that the key doesn't exist.
     */
    suspend fun getAccessKeyInfo(input: GetAccessKeyInfoRequest): GetAccessKeyInfoResponse

    /**
     * Returns the account identifier for the specified access key ID.
     * Access keys consist of two parts: an access key ID (for example,
     * AKIAIOSFODNN7EXAMPLE) and a secret access key (for example,
     * wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY). For more information about
     * access keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html">Managing Access Keys for IAM
     * Users in the IAM User Guide.
     * When you pass an access key ID to this operation, it returns the ID of the Amazon Web Services
     * account to which the keys belong. Access key IDs beginning with AKIA are
     * long-term credentials for an IAM user or the Amazon Web Services account root user. Access key IDs
     * beginning with ASIA are temporary credentials that are created using STS
     * operations. If the account in the response belongs to you, you can sign in as the root
     * user and review your root user access keys. Then, you can pull a <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_getting-report.html">credentials report to learn which IAM user owns the keys. To learn who
     * requested the temporary credentials for an ASIA access key, view the STS
     * events in your <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">CloudTrail logs in the
     * IAM User Guide.
     * This operation does not indicate the state of the access key. The key might be active,
     * inactive, or deleted. Active keys might not have permissions to perform an operation.
     * Providing a deleted access key might return an error that the key doesn't exist.
     */
    suspend fun getAccessKeyInfo(block: GetAccessKeyInfoRequest.DslBuilder.() -> Unit) = getAccessKeyInfo(GetAccessKeyInfoRequest.builder().apply(block).build())

    /**
     * Returns details about the IAM user or role whose credentials are used to call the
     * operation.
     * No permissions are required to perform this operation. If an administrator adds a
     * policy to your IAM user or role that explicitly denies access to the
     * sts:GetCallerIdentity action, you can still perform this operation.
     * Permissions are not required because the same information is returned when an IAM
     * user or role is denied access. To view an example response, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_access-denied-delete-mfa">I Am Not Authorized to Perform: iam:DeleteVirtualMFADevice in the
     * IAM User Guide.
     */
    suspend fun getCallerIdentity(input: GetCallerIdentityRequest): GetCallerIdentityResponse

    /**
     * Returns details about the IAM user or role whose credentials are used to call the
     * operation.
     * No permissions are required to perform this operation. If an administrator adds a
     * policy to your IAM user or role that explicitly denies access to the
     * sts:GetCallerIdentity action, you can still perform this operation.
     * Permissions are not required because the same information is returned when an IAM
     * user or role is denied access. To view an example response, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_access-denied-delete-mfa">I Am Not Authorized to Perform: iam:DeleteVirtualMFADevice in the
     * IAM User Guide.
     */
    suspend fun getCallerIdentity(block: GetCallerIdentityRequest.DslBuilder.() -> Unit) = getCallerIdentity(GetCallerIdentityRequest.builder().apply(block).build())

    /**
     * Returns a set of temporary security credentials (consisting of an access key ID, a
     * secret access key, and a security token) for a federated user. A typical use is in a proxy
     * application that gets temporary security credentials on behalf of distributed applications
     * inside a corporate network. You must call the GetFederationToken operation
     * using the long-term security credentials of an IAM user. As a result, this call is
     * appropriate in contexts where those credentials can be safely stored, usually in a
     * server-based application. For a comparison of GetFederationToken with the
     * other API operations that produce temporary credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html">Requesting Temporary Security
     * Credentials and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison">Comparing the
     * STS API operations in the IAM User Guide.
     * You can create a mobile-based or browser-based app that can authenticate users using
     * a web identity provider like Login with Amazon, Facebook, Google, or an OpenID
     * Connect-compatible identity provider. In this case, we recommend that you use <a href="http://aws.amazon.com/cognito/">Amazon Cognito or
     * AssumeRoleWithWebIdentity. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_assumerolewithwebidentity">Federation Through a Web-based Identity Provider in the
     * IAM User Guide.
     * You can also call GetFederationToken using the security credentials of an
     * Amazon Web Services account root user, but we do not recommend it. Instead, we recommend that you create
     * an IAM user for the purpose of the proxy application. Then attach a policy to the IAM
     * user that limits federated users to only the actions and resources that they need to
     * access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html">IAM Best Practices in the
     * IAM User Guide.
     * Session duration
     * The temporary credentials are valid for the specified duration, from 900 seconds (15
     * minutes) up to a maximum of 129,600 seconds (36 hours). The default session duration is
     * 43,200 seconds (12 hours). Temporary credentials that are obtained by using Amazon Web Services account
     * root user credentials have a maximum duration of 3,600 seconds (1 hour).
     * Permissions
     * You can use the temporary credentials created by GetFederationToken in any
     * Amazon Web Services service except the following:
     * You cannot call any IAM operations using the CLI or the Amazon Web Services API.
     * You cannot call any STS operations except GetCallerIdentity.
     * You must pass an inline or managed <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">session policy to
     * this operation. You can pass a single JSON policy document to use as an inline session
     * policy. You can also specify up to 10 managed policies to use as managed session policies.
     * The plaintext that you use for both inline and managed session policies can't exceed 2,048
     * characters.
     * Though the session policy parameters are optional, if you do not pass a policy, then the
     * resulting federated user session has no permissions. When you pass session policies, the
     * session permissions are the intersection of the IAM user policies and the session
     * policies that you pass. This gives you a way to further restrict the permissions for a
     * federated user. You cannot use session policies to grant more permissions than those that
     * are defined in the permissions policy of the IAM user. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
     * Policies in the IAM User Guide. For information about
     * using GetFederationToken to create temporary security credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_getfederationtoken">GetFederationToken—Federation Through a Custom Identity Broker.
     * You can use the credentials to access a resource that has a resource-based policy. If
     * that policy specifically references the federated user session in the
     * Principal element of the policy, the session has the permissions allowed by
     * the policy. These permissions are granted in addition to the permissions granted by the
     * session policies.
     * Tags
     * (Optional) You can pass tag key-value pairs to your session. These are called session
     * tags. For more information about session tags, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html">Passing Session Tags in STS in the
     * IAM User Guide.
     * You can create a mobile-based or browser-based app that can authenticate users
     * using a web identity provider like Login with Amazon, Facebook, Google, or an OpenID
     * Connect-compatible identity provider. In this case, we recommend that you use <a href="http://aws.amazon.com/cognito/">Amazon Cognito or
     * AssumeRoleWithWebIdentity. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_assumerolewithwebidentity">Federation Through a Web-based Identity Provider in the
     * IAM User Guide.
     * You can also call GetFederationToken using the security credentials of an
     * Amazon Web Services account root user, but we do not recommend it. Instead, we recommend that you
     * create an IAM user for the purpose of the proxy application. Then attach a policy to
     * the IAM user that limits federated users to only the actions and resources that they
     * need to access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html">IAM Best Practices in the
     * IAM User Guide.
     * Session duration
     * The temporary credentials are valid for the specified duration, from 900 seconds (15
     * minutes) up to a maximum of 129,600 seconds (36 hours). The default session duration is
     * 43,200 seconds (12 hours). Temporary credentials that are obtained by using Amazon Web Services
     * account root user credentials have a maximum duration of 3,600 seconds (1 hour).
     * Permissions
     * You can use the temporary credentials created by GetFederationToken in
     * any Amazon Web Services service except the following:
     * You cannot call any IAM operations using the CLI or the Amazon Web Services API.
     * You cannot call any STS operations except
     * GetCallerIdentity.
     * You must pass an inline or managed <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">session policy to
     * this operation. You can pass a single JSON policy document to use as an inline session
     * policy. You can also specify up to 10 managed policies to use as managed session
     * policies. The plain text that you use for both inline and managed session policies can't
     * exceed 2,048 characters.
     * Though the session policy parameters are optional, if you do not pass a policy, then
     * the resulting federated user session has no permissions. When you pass session policies,
     * the session permissions are the intersection of the IAM user policies and the session
     * policies that you pass. This gives you a way to further restrict the permissions for a
     * federated user. You cannot use session policies to grant more permissions than those
     * that are defined in the permissions policy of the IAM user. For more information, see
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session Policies
     * in the IAM User Guide. For information about using
     * GetFederationToken to create temporary security credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_getfederationtoken">GetFederationToken—Federation Through a Custom Identity Broker.
     * You can use the credentials to access a resource that has a resource-based policy. If
     * that policy specifically references the federated user session in the
     * Principal element of the policy, the session has the permissions
     * allowed by the policy. These permissions are granted in addition to the permissions
     * granted by the session policies.
     * Tags
     * (Optional) You can pass tag key-value pairs to your session. These are called session
     * tags. For more information about session tags, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html">Passing Session Tags in STS in
     * the IAM User Guide.
     * An administrator must grant you the permissions necessary to pass session tags. The
     * administrator can also create granular permissions to allow you to pass only specific
     * session tags. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_attribute-based-access-control.html">Tutorial: Using
     * Tags for Attribute-Based Access Control in the
     * IAM User Guide.
     * Tag key–value pairs are not case sensitive, but case is preserved. This means that you
     * cannot have separate Department and department tag keys.
     * Assume that the user that you are federating has the
     * Department=Marketing tag and you pass the
     * department=engineering session tag.
     * Department and department are not saved as separate tags,
     * and the session tag passed in the request takes precedence over the user tag.
     */
    suspend fun getFederationToken(input: GetFederationTokenRequest): GetFederationTokenResponse

    /**
     * Returns a set of temporary security credentials (consisting of an access key ID, a
     * secret access key, and a security token) for a federated user. A typical use is in a proxy
     * application that gets temporary security credentials on behalf of distributed applications
     * inside a corporate network. You must call the GetFederationToken operation
     * using the long-term security credentials of an IAM user. As a result, this call is
     * appropriate in contexts where those credentials can be safely stored, usually in a
     * server-based application. For a comparison of GetFederationToken with the
     * other API operations that produce temporary credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html">Requesting Temporary Security
     * Credentials and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison">Comparing the
     * STS API operations in the IAM User Guide.
     * You can create a mobile-based or browser-based app that can authenticate users using
     * a web identity provider like Login with Amazon, Facebook, Google, or an OpenID
     * Connect-compatible identity provider. In this case, we recommend that you use <a href="http://aws.amazon.com/cognito/">Amazon Cognito or
     * AssumeRoleWithWebIdentity. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_assumerolewithwebidentity">Federation Through a Web-based Identity Provider in the
     * IAM User Guide.
     * You can also call GetFederationToken using the security credentials of an
     * Amazon Web Services account root user, but we do not recommend it. Instead, we recommend that you create
     * an IAM user for the purpose of the proxy application. Then attach a policy to the IAM
     * user that limits federated users to only the actions and resources that they need to
     * access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html">IAM Best Practices in the
     * IAM User Guide.
     * Session duration
     * The temporary credentials are valid for the specified duration, from 900 seconds (15
     * minutes) up to a maximum of 129,600 seconds (36 hours). The default session duration is
     * 43,200 seconds (12 hours). Temporary credentials that are obtained by using Amazon Web Services account
     * root user credentials have a maximum duration of 3,600 seconds (1 hour).
     * Permissions
     * You can use the temporary credentials created by GetFederationToken in any
     * Amazon Web Services service except the following:
     * You cannot call any IAM operations using the CLI or the Amazon Web Services API.
     * You cannot call any STS operations except GetCallerIdentity.
     * You must pass an inline or managed <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">session policy to
     * this operation. You can pass a single JSON policy document to use as an inline session
     * policy. You can also specify up to 10 managed policies to use as managed session policies.
     * The plaintext that you use for both inline and managed session policies can't exceed 2,048
     * characters.
     * Though the session policy parameters are optional, if you do not pass a policy, then the
     * resulting federated user session has no permissions. When you pass session policies, the
     * session permissions are the intersection of the IAM user policies and the session
     * policies that you pass. This gives you a way to further restrict the permissions for a
     * federated user. You cannot use session policies to grant more permissions than those that
     * are defined in the permissions policy of the IAM user. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
     * Policies in the IAM User Guide. For information about
     * using GetFederationToken to create temporary security credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_getfederationtoken">GetFederationToken—Federation Through a Custom Identity Broker.
     * You can use the credentials to access a resource that has a resource-based policy. If
     * that policy specifically references the federated user session in the
     * Principal element of the policy, the session has the permissions allowed by
     * the policy. These permissions are granted in addition to the permissions granted by the
     * session policies.
     * Tags
     * (Optional) You can pass tag key-value pairs to your session. These are called session
     * tags. For more information about session tags, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html">Passing Session Tags in STS in the
     * IAM User Guide.
     * You can create a mobile-based or browser-based app that can authenticate users
     * using a web identity provider like Login with Amazon, Facebook, Google, or an OpenID
     * Connect-compatible identity provider. In this case, we recommend that you use <a href="http://aws.amazon.com/cognito/">Amazon Cognito or
     * AssumeRoleWithWebIdentity. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_assumerolewithwebidentity">Federation Through a Web-based Identity Provider in the
     * IAM User Guide.
     * You can also call GetFederationToken using the security credentials of an
     * Amazon Web Services account root user, but we do not recommend it. Instead, we recommend that you
     * create an IAM user for the purpose of the proxy application. Then attach a policy to
     * the IAM user that limits federated users to only the actions and resources that they
     * need to access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html">IAM Best Practices in the
     * IAM User Guide.
     * Session duration
     * The temporary credentials are valid for the specified duration, from 900 seconds (15
     * minutes) up to a maximum of 129,600 seconds (36 hours). The default session duration is
     * 43,200 seconds (12 hours). Temporary credentials that are obtained by using Amazon Web Services
     * account root user credentials have a maximum duration of 3,600 seconds (1 hour).
     * Permissions
     * You can use the temporary credentials created by GetFederationToken in
     * any Amazon Web Services service except the following:
     * You cannot call any IAM operations using the CLI or the Amazon Web Services API.
     * You cannot call any STS operations except
     * GetCallerIdentity.
     * You must pass an inline or managed <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">session policy to
     * this operation. You can pass a single JSON policy document to use as an inline session
     * policy. You can also specify up to 10 managed policies to use as managed session
     * policies. The plain text that you use for both inline and managed session policies can't
     * exceed 2,048 characters.
     * Though the session policy parameters are optional, if you do not pass a policy, then
     * the resulting federated user session has no permissions. When you pass session policies,
     * the session permissions are the intersection of the IAM user policies and the session
     * policies that you pass. This gives you a way to further restrict the permissions for a
     * federated user. You cannot use session policies to grant more permissions than those
     * that are defined in the permissions policy of the IAM user. For more information, see
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session Policies
     * in the IAM User Guide. For information about using
     * GetFederationToken to create temporary security credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_getfederationtoken">GetFederationToken—Federation Through a Custom Identity Broker.
     * You can use the credentials to access a resource that has a resource-based policy. If
     * that policy specifically references the federated user session in the
     * Principal element of the policy, the session has the permissions
     * allowed by the policy. These permissions are granted in addition to the permissions
     * granted by the session policies.
     * Tags
     * (Optional) You can pass tag key-value pairs to your session. These are called session
     * tags. For more information about session tags, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html">Passing Session Tags in STS in
     * the IAM User Guide.
     * An administrator must grant you the permissions necessary to pass session tags. The
     * administrator can also create granular permissions to allow you to pass only specific
     * session tags. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_attribute-based-access-control.html">Tutorial: Using
     * Tags for Attribute-Based Access Control in the
     * IAM User Guide.
     * Tag key–value pairs are not case sensitive, but case is preserved. This means that you
     * cannot have separate Department and department tag keys.
     * Assume that the user that you are federating has the
     * Department=Marketing tag and you pass the
     * department=engineering session tag.
     * Department and department are not saved as separate tags,
     * and the session tag passed in the request takes precedence over the user tag.
     */
    suspend fun getFederationToken(block: GetFederationTokenRequest.DslBuilder.() -> Unit) = getFederationToken(GetFederationTokenRequest.builder().apply(block).build())

    /**
     * Returns a set of temporary credentials for an Amazon Web Services account or IAM user. The
     * credentials consist of an access key ID, a secret access key, and a security token.
     * Typically, you use GetSessionToken if you want to use MFA to protect
     * programmatic calls to specific Amazon Web Services API operations like Amazon EC2 StopInstances.
     * MFA-enabled IAM users would need to call GetSessionToken and submit an MFA
     * code that is associated with their MFA device. Using the temporary security credentials
     * that are returned from the call, IAM users can then make programmatic calls to API
     * operations that require MFA authentication. If you do not supply a correct MFA code, then
     * the API returns an access denied error. For a comparison of GetSessionToken
     * with the other API operations that produce temporary credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html">Requesting
     * Temporary Security Credentials and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison">Comparing the
     * STS API operations in the IAM User Guide.
     * Session Duration
     * The GetSessionToken operation must be called by using the long-term Amazon Web Services
     * security credentials of the Amazon Web Services account root user or an IAM user. Credentials that are
     * created by IAM users are valid for the duration that you specify. This duration can range
     * from 900 seconds (15 minutes) up to a maximum of 129,600 seconds (36 hours), with a default
     * of 43,200 seconds (12 hours). Credentials based on account credentials can range from 900
     * seconds (15 minutes) up to 3,600 seconds (1 hour), with a default of 1 hour.
     * Permissions
     * The temporary security credentials created by GetSessionToken can be used
     * to make API calls to any Amazon Web Services service with the following exceptions:
     * You cannot call any IAM API operations unless MFA authentication information is
     * included in the request.
     * You cannot call any STS API except
     * AssumeRole or GetCallerIdentity.
     * We recommend that you do not call GetSessionToken with Amazon Web Services account
     * root user credentials. Instead, follow our <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#create-iam-users">best practices by
     * creating one or more IAM users, giving them the necessary permissions, and using IAM
     * users for everyday interaction with Amazon Web Services.
     * The credentials that are returned by GetSessionToken are based on
     * permissions associated with the user whose credentials were used to call the operation. If
     * GetSessionToken is called using Amazon Web Services account root user credentials, the
     * temporary credentials have root user permissions. Similarly, if
     * GetSessionToken is called using the credentials of an IAM user, the
     * temporary credentials have the same permissions as the IAM user.
     * For more information about using GetSessionToken to create temporary
     * credentials, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_getsessiontoken">Temporary
     * Credentials for Users in Untrusted Environments in the
     * IAM User Guide.
     */
    suspend fun getSessionToken(input: GetSessionTokenRequest): GetSessionTokenResponse

    /**
     * Returns a set of temporary credentials for an Amazon Web Services account or IAM user. The
     * credentials consist of an access key ID, a secret access key, and a security token.
     * Typically, you use GetSessionToken if you want to use MFA to protect
     * programmatic calls to specific Amazon Web Services API operations like Amazon EC2 StopInstances.
     * MFA-enabled IAM users would need to call GetSessionToken and submit an MFA
     * code that is associated with their MFA device. Using the temporary security credentials
     * that are returned from the call, IAM users can then make programmatic calls to API
     * operations that require MFA authentication. If you do not supply a correct MFA code, then
     * the API returns an access denied error. For a comparison of GetSessionToken
     * with the other API operations that produce temporary credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html">Requesting
     * Temporary Security Credentials and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison">Comparing the
     * STS API operations in the IAM User Guide.
     * Session Duration
     * The GetSessionToken operation must be called by using the long-term Amazon Web Services
     * security credentials of the Amazon Web Services account root user or an IAM user. Credentials that are
     * created by IAM users are valid for the duration that you specify. This duration can range
     * from 900 seconds (15 minutes) up to a maximum of 129,600 seconds (36 hours), with a default
     * of 43,200 seconds (12 hours). Credentials based on account credentials can range from 900
     * seconds (15 minutes) up to 3,600 seconds (1 hour), with a default of 1 hour.
     * Permissions
     * The temporary security credentials created by GetSessionToken can be used
     * to make API calls to any Amazon Web Services service with the following exceptions:
     * You cannot call any IAM API operations unless MFA authentication information is
     * included in the request.
     * You cannot call any STS API except
     * AssumeRole or GetCallerIdentity.
     * We recommend that you do not call GetSessionToken with Amazon Web Services account
     * root user credentials. Instead, follow our <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#create-iam-users">best practices by
     * creating one or more IAM users, giving them the necessary permissions, and using IAM
     * users for everyday interaction with Amazon Web Services.
     * The credentials that are returned by GetSessionToken are based on
     * permissions associated with the user whose credentials were used to call the operation. If
     * GetSessionToken is called using Amazon Web Services account root user credentials, the
     * temporary credentials have root user permissions. Similarly, if
     * GetSessionToken is called using the credentials of an IAM user, the
     * temporary credentials have the same permissions as the IAM user.
     * For more information about using GetSessionToken to create temporary
     * credentials, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_getsessiontoken">Temporary
     * Credentials for Users in Untrusted Environments in the
     * IAM User Guide.
     */
    suspend fun getSessionToken(block: GetSessionTokenRequest.DslBuilder.() -> Unit) = getSessionToken(GetSessionTokenRequest.builder().apply(block).build())
}
