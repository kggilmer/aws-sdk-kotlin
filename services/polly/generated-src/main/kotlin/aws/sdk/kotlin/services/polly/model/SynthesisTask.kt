// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.polly.model

import aws.smithy.kotlin.runtime.time.Instant

/**
 * SynthesisTask object that provides information about a speech
 * synthesis task.
 */
class SynthesisTask private constructor(builder: BuilderImpl) {
    /**
     * Timestamp for the time the synthesis task was started.
     */
    val creationTime: Instant? = builder.creationTime
    /**
     * Specifies the engine (standard or neural)
     * for Amazon Polly to use when processing input text for speech synthesis. Using a
     * voice that is not supported for the engine selected will result in an
     * error.
     */
    val engine: Engine? = builder.engine
    /**
     * Optional language code for a synthesis task. This is only necessary if
     * using a bilingual voice, such as Aditi, which can be used for either
     * Indian English (en-IN) or Hindi (hi-IN).
     * If a bilingual voice is used and no language code is specified, Amazon Polly
     * uses the default language of the bilingual voice. The default language for
     * any voice is the one returned by the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices operation for the LanguageCode
     * parameter. For example, if no language code is specified, Aditi will use
     * Indian English rather than Hindi.
     */
    val languageCode: LanguageCode? = builder.languageCode
    /**
     * List of one or more pronunciation lexicon names you want the service
     * to apply during synthesis. Lexicons are applied only if the language of
     * the lexicon is the same as the language of the voice.
     */
    val lexiconNames: List<String>? = builder.lexiconNames
    /**
     * The format in which the returned output will be encoded. For audio
     * stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will
     * be json.
     */
    val outputFormat: OutputFormat? = builder.outputFormat
    /**
     * Pathway for the output speech file.
     */
    val outputUri: String? = builder.outputUri
    /**
     * Number of billable characters synthesized.
     */
    val requestCharacters: Int = builder.requestCharacters
    /**
     * The audio frequency specified in Hz.
     * The valid values for mp3 and ogg_vorbis are "8000", "16000", "22050",
     * and "24000". The default value for standard voices is "22050". The default
     * value for neural voices is "24000".
     * Valid values for pcm are "8000" and "16000" The default value is
     * "16000".
     */
    val sampleRate: String? = builder.sampleRate
    /**
     * ARN for the SNS topic optionally used for providing status
     * notification for a speech synthesis task.
     */
    val snsTopicArn: String? = builder.snsTopicArn
    /**
     * The type of speech marks returned for the input text.
     */
    val speechMarkTypes: List<SpeechMarkType>? = builder.speechMarkTypes
    /**
     * The Amazon Polly generated identifier for a speech synthesis task.
     */
    val taskId: String? = builder.taskId
    /**
     * Current status of the individual speech synthesis task.
     */
    val taskStatus: TaskStatus? = builder.taskStatus
    /**
     * Reason for the current status of a specific speech synthesis task,
     * including errors if the task has failed.
     */
    val taskStatusReason: String? = builder.taskStatusReason
    /**
     * Specifies whether the input text is plain text or SSML. The default
     * value is plain text.
     */
    val textType: TextType? = builder.textType
    /**
     * Voice ID to use for the synthesis.
     */
    val voiceId: VoiceId? = builder.voiceId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): SynthesisTask = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("SynthesisTask(")
        append("creationTime=$creationTime,")
        append("engine=$engine,")
        append("languageCode=$languageCode,")
        append("lexiconNames=$lexiconNames,")
        append("outputFormat=$outputFormat,")
        append("outputUri=$outputUri,")
        append("requestCharacters=$requestCharacters,")
        append("sampleRate=$sampleRate,")
        append("snsTopicArn=$snsTopicArn,")
        append("speechMarkTypes=$speechMarkTypes,")
        append("taskId=$taskId,")
        append("taskStatus=$taskStatus,")
        append("taskStatusReason=$taskStatusReason,")
        append("textType=$textType,")
        append("voiceId=$voiceId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = creationTime?.hashCode() ?: 0
        result = 31 * result + (engine?.hashCode() ?: 0)
        result = 31 * result + (languageCode?.hashCode() ?: 0)
        result = 31 * result + (lexiconNames?.hashCode() ?: 0)
        result = 31 * result + (outputFormat?.hashCode() ?: 0)
        result = 31 * result + (outputUri?.hashCode() ?: 0)
        result = 31 * result + (requestCharacters)
        result = 31 * result + (sampleRate?.hashCode() ?: 0)
        result = 31 * result + (snsTopicArn?.hashCode() ?: 0)
        result = 31 * result + (speechMarkTypes?.hashCode() ?: 0)
        result = 31 * result + (taskId?.hashCode() ?: 0)
        result = 31 * result + (taskStatus?.hashCode() ?: 0)
        result = 31 * result + (taskStatusReason?.hashCode() ?: 0)
        result = 31 * result + (textType?.hashCode() ?: 0)
        result = 31 * result + (voiceId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as SynthesisTask

        if (creationTime != other.creationTime) return false
        if (engine != other.engine) return false
        if (languageCode != other.languageCode) return false
        if (lexiconNames != other.lexiconNames) return false
        if (outputFormat != other.outputFormat) return false
        if (outputUri != other.outputUri) return false
        if (requestCharacters != other.requestCharacters) return false
        if (sampleRate != other.sampleRate) return false
        if (snsTopicArn != other.snsTopicArn) return false
        if (speechMarkTypes != other.speechMarkTypes) return false
        if (taskId != other.taskId) return false
        if (taskStatus != other.taskStatus) return false
        if (taskStatusReason != other.taskStatusReason) return false
        if (textType != other.textType) return false
        if (voiceId != other.voiceId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): SynthesisTask = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): SynthesisTask
        /**
         * Timestamp for the time the synthesis task was started.
         */
        fun creationTime(creationTime: Instant): FluentBuilder
        /**
         * Specifies the engine (standard or neural)
         * for Amazon Polly to use when processing input text for speech synthesis. Using a
         * voice that is not supported for the engine selected will result in an
         * error.
         */
        fun engine(engine: Engine): FluentBuilder
        /**
         * Optional language code for a synthesis task. This is only necessary if
         * using a bilingual voice, such as Aditi, which can be used for either
         * Indian English (en-IN) or Hindi (hi-IN).
         * If a bilingual voice is used and no language code is specified, Amazon Polly
         * uses the default language of the bilingual voice. The default language for
         * any voice is the one returned by the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices operation for the LanguageCode
         * parameter. For example, if no language code is specified, Aditi will use
         * Indian English rather than Hindi.
         */
        fun languageCode(languageCode: LanguageCode): FluentBuilder
        /**
         * List of one or more pronunciation lexicon names you want the service
         * to apply during synthesis. Lexicons are applied only if the language of
         * the lexicon is the same as the language of the voice.
         */
        fun lexiconNames(lexiconNames: List<String>): FluentBuilder
        /**
         * The format in which the returned output will be encoded. For audio
         * stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will
         * be json.
         */
        fun outputFormat(outputFormat: OutputFormat): FluentBuilder
        /**
         * Pathway for the output speech file.
         */
        fun outputUri(outputUri: String): FluentBuilder
        /**
         * Number of billable characters synthesized.
         */
        fun requestCharacters(requestCharacters: Int): FluentBuilder
        /**
         * The audio frequency specified in Hz.
         * The valid values for mp3 and ogg_vorbis are "8000", "16000", "22050",
         * and "24000". The default value for standard voices is "22050". The default
         * value for neural voices is "24000".
         * Valid values for pcm are "8000" and "16000" The default value is
         * "16000".
         */
        fun sampleRate(sampleRate: String): FluentBuilder
        /**
         * ARN for the SNS topic optionally used for providing status
         * notification for a speech synthesis task.
         */
        fun snsTopicArn(snsTopicArn: String): FluentBuilder
        /**
         * The type of speech marks returned for the input text.
         */
        fun speechMarkTypes(speechMarkTypes: List<SpeechMarkType>): FluentBuilder
        /**
         * The Amazon Polly generated identifier for a speech synthesis task.
         */
        fun taskId(taskId: String): FluentBuilder
        /**
         * Current status of the individual speech synthesis task.
         */
        fun taskStatus(taskStatus: TaskStatus): FluentBuilder
        /**
         * Reason for the current status of a specific speech synthesis task,
         * including errors if the task has failed.
         */
        fun taskStatusReason(taskStatusReason: String): FluentBuilder
        /**
         * Specifies whether the input text is plain text or SSML. The default
         * value is plain text.
         */
        fun textType(textType: TextType): FluentBuilder
        /**
         * Voice ID to use for the synthesis.
         */
        fun voiceId(voiceId: VoiceId): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Timestamp for the time the synthesis task was started.
         */
        var creationTime: Instant?
        /**
         * Specifies the engine (standard or neural)
         * for Amazon Polly to use when processing input text for speech synthesis. Using a
         * voice that is not supported for the engine selected will result in an
         * error.
         */
        var engine: Engine?
        /**
         * Optional language code for a synthesis task. This is only necessary if
         * using a bilingual voice, such as Aditi, which can be used for either
         * Indian English (en-IN) or Hindi (hi-IN).
         * If a bilingual voice is used and no language code is specified, Amazon Polly
         * uses the default language of the bilingual voice. The default language for
         * any voice is the one returned by the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices operation for the LanguageCode
         * parameter. For example, if no language code is specified, Aditi will use
         * Indian English rather than Hindi.
         */
        var languageCode: LanguageCode?
        /**
         * List of one or more pronunciation lexicon names you want the service
         * to apply during synthesis. Lexicons are applied only if the language of
         * the lexicon is the same as the language of the voice.
         */
        var lexiconNames: List<String>?
        /**
         * The format in which the returned output will be encoded. For audio
         * stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will
         * be json.
         */
        var outputFormat: OutputFormat?
        /**
         * Pathway for the output speech file.
         */
        var outputUri: String?
        /**
         * Number of billable characters synthesized.
         */
        var requestCharacters: Int
        /**
         * The audio frequency specified in Hz.
         * The valid values for mp3 and ogg_vorbis are "8000", "16000", "22050",
         * and "24000". The default value for standard voices is "22050". The default
         * value for neural voices is "24000".
         * Valid values for pcm are "8000" and "16000" The default value is
         * "16000".
         */
        var sampleRate: String?
        /**
         * ARN for the SNS topic optionally used for providing status
         * notification for a speech synthesis task.
         */
        var snsTopicArn: String?
        /**
         * The type of speech marks returned for the input text.
         */
        var speechMarkTypes: List<SpeechMarkType>?
        /**
         * The Amazon Polly generated identifier for a speech synthesis task.
         */
        var taskId: String?
        /**
         * Current status of the individual speech synthesis task.
         */
        var taskStatus: TaskStatus?
        /**
         * Reason for the current status of a specific speech synthesis task,
         * including errors if the task has failed.
         */
        var taskStatusReason: String?
        /**
         * Specifies whether the input text is plain text or SSML. The default
         * value is plain text.
         */
        var textType: TextType?
        /**
         * Voice ID to use for the synthesis.
         */
        var voiceId: VoiceId?

        fun build(): SynthesisTask
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var creationTime: Instant? = null
        override var engine: Engine? = null
        override var languageCode: LanguageCode? = null
        override var lexiconNames: List<String>? = null
        override var outputFormat: OutputFormat? = null
        override var outputUri: String? = null
        override var requestCharacters: Int = 0
        override var sampleRate: String? = null
        override var snsTopicArn: String? = null
        override var speechMarkTypes: List<SpeechMarkType>? = null
        override var taskId: String? = null
        override var taskStatus: TaskStatus? = null
        override var taskStatusReason: String? = null
        override var textType: TextType? = null
        override var voiceId: VoiceId? = null

        constructor(x: SynthesisTask) : this() {
            this.creationTime = x.creationTime
            this.engine = x.engine
            this.languageCode = x.languageCode
            this.lexiconNames = x.lexiconNames
            this.outputFormat = x.outputFormat
            this.outputUri = x.outputUri
            this.requestCharacters = x.requestCharacters
            this.sampleRate = x.sampleRate
            this.snsTopicArn = x.snsTopicArn
            this.speechMarkTypes = x.speechMarkTypes
            this.taskId = x.taskId
            this.taskStatus = x.taskStatus
            this.taskStatusReason = x.taskStatusReason
            this.textType = x.textType
            this.voiceId = x.voiceId
        }

        override fun build(): SynthesisTask = SynthesisTask(this)
        override fun creationTime(creationTime: Instant): FluentBuilder = apply { this.creationTime = creationTime }
        override fun engine(engine: Engine): FluentBuilder = apply { this.engine = engine }
        override fun languageCode(languageCode: LanguageCode): FluentBuilder = apply { this.languageCode = languageCode }
        override fun lexiconNames(lexiconNames: List<String>): FluentBuilder = apply { this.lexiconNames = lexiconNames }
        override fun outputFormat(outputFormat: OutputFormat): FluentBuilder = apply { this.outputFormat = outputFormat }
        override fun outputUri(outputUri: String): FluentBuilder = apply { this.outputUri = outputUri }
        override fun requestCharacters(requestCharacters: Int): FluentBuilder = apply { this.requestCharacters = requestCharacters }
        override fun sampleRate(sampleRate: String): FluentBuilder = apply { this.sampleRate = sampleRate }
        override fun snsTopicArn(snsTopicArn: String): FluentBuilder = apply { this.snsTopicArn = snsTopicArn }
        override fun speechMarkTypes(speechMarkTypes: List<SpeechMarkType>): FluentBuilder = apply { this.speechMarkTypes = speechMarkTypes }
        override fun taskId(taskId: String): FluentBuilder = apply { this.taskId = taskId }
        override fun taskStatus(taskStatus: TaskStatus): FluentBuilder = apply { this.taskStatus = taskStatus }
        override fun taskStatusReason(taskStatusReason: String): FluentBuilder = apply { this.taskStatusReason = taskStatusReason }
        override fun textType(textType: TextType): FluentBuilder = apply { this.textType = textType }
        override fun voiceId(voiceId: VoiceId): FluentBuilder = apply { this.voiceId = voiceId }
    }
}
