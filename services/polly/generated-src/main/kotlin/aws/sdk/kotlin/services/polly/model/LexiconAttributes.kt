// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.polly.model

import aws.smithy.kotlin.runtime.time.Instant

/**
 * Contains metadata describing the lexicon such as the number of
 * lexemes, language code, and so on. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons.
 */
class LexiconAttributes private constructor(builder: BuilderImpl) {
    /**
     * Phonetic alphabet used in the lexicon. Valid values are
     * ipa and x-sampa.
     */
    val alphabet: String? = builder.alphabet
    /**
     * Language code that the lexicon applies to. A lexicon with a
     * language code such as "en" would be applied to all English languages
     * (en-GB, en-US, en-AUS, en-WLS, and so on.
     */
    val languageCode: LanguageCode? = builder.languageCode
    /**
     * Date lexicon was last modified (a timestamp value).
     */
    val lastModified: Instant? = builder.lastModified
    /**
     * Number of lexemes in the lexicon.
     */
    val lexemesCount: Int = builder.lexemesCount
    /**
     * Amazon Resource Name (ARN) of the lexicon.
     */
    val lexiconArn: String? = builder.lexiconArn
    /**
     * Total size of the lexicon, in characters.
     */
    val size: Int = builder.size

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): LexiconAttributes = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("LexiconAttributes(")
        append("alphabet=$alphabet,")
        append("languageCode=$languageCode,")
        append("lastModified=$lastModified,")
        append("lexemesCount=$lexemesCount,")
        append("lexiconArn=$lexiconArn,")
        append("size=$size)")
    }

    override fun hashCode(): kotlin.Int {
        var result = alphabet?.hashCode() ?: 0
        result = 31 * result + (languageCode?.hashCode() ?: 0)
        result = 31 * result + (lastModified?.hashCode() ?: 0)
        result = 31 * result + (lexemesCount)
        result = 31 * result + (lexiconArn?.hashCode() ?: 0)
        result = 31 * result + (size)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as LexiconAttributes

        if (alphabet != other.alphabet) return false
        if (languageCode != other.languageCode) return false
        if (lastModified != other.lastModified) return false
        if (lexemesCount != other.lexemesCount) return false
        if (lexiconArn != other.lexiconArn) return false
        if (size != other.size) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): LexiconAttributes = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): LexiconAttributes
        /**
         * Phonetic alphabet used in the lexicon. Valid values are
         * ipa and x-sampa.
         */
        fun alphabet(alphabet: String): FluentBuilder
        /**
         * Language code that the lexicon applies to. A lexicon with a
         * language code such as "en" would be applied to all English languages
         * (en-GB, en-US, en-AUS, en-WLS, and so on.
         */
        fun languageCode(languageCode: LanguageCode): FluentBuilder
        /**
         * Date lexicon was last modified (a timestamp value).
         */
        fun lastModified(lastModified: Instant): FluentBuilder
        /**
         * Number of lexemes in the lexicon.
         */
        fun lexemesCount(lexemesCount: Int): FluentBuilder
        /**
         * Amazon Resource Name (ARN) of the lexicon.
         */
        fun lexiconArn(lexiconArn: String): FluentBuilder
        /**
         * Total size of the lexicon, in characters.
         */
        fun size(size: Int): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Phonetic alphabet used in the lexicon. Valid values are
         * ipa and x-sampa.
         */
        var alphabet: String?
        /**
         * Language code that the lexicon applies to. A lexicon with a
         * language code such as "en" would be applied to all English languages
         * (en-GB, en-US, en-AUS, en-WLS, and so on.
         */
        var languageCode: LanguageCode?
        /**
         * Date lexicon was last modified (a timestamp value).
         */
        var lastModified: Instant?
        /**
         * Number of lexemes in the lexicon.
         */
        var lexemesCount: Int
        /**
         * Amazon Resource Name (ARN) of the lexicon.
         */
        var lexiconArn: String?
        /**
         * Total size of the lexicon, in characters.
         */
        var size: Int

        fun build(): LexiconAttributes
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var alphabet: String? = null
        override var languageCode: LanguageCode? = null
        override var lastModified: Instant? = null
        override var lexemesCount: Int = 0
        override var lexiconArn: String? = null
        override var size: Int = 0

        constructor(x: LexiconAttributes) : this() {
            this.alphabet = x.alphabet
            this.languageCode = x.languageCode
            this.lastModified = x.lastModified
            this.lexemesCount = x.lexemesCount
            this.lexiconArn = x.lexiconArn
            this.size = x.size
        }

        override fun build(): LexiconAttributes = LexiconAttributes(this)
        override fun alphabet(alphabet: String): FluentBuilder = apply { this.alphabet = alphabet }
        override fun languageCode(languageCode: LanguageCode): FluentBuilder = apply { this.languageCode = languageCode }
        override fun lastModified(lastModified: Instant): FluentBuilder = apply { this.lastModified = lastModified }
        override fun lexemesCount(lexemesCount: Int): FluentBuilder = apply { this.lexemesCount = lexemesCount }
        override fun lexiconArn(lexiconArn: String): FluentBuilder = apply { this.lexiconArn = lexiconArn }
        override fun size(size: Int): FluentBuilder = apply { this.size = size }
    }
}
