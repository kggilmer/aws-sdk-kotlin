// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.polly.model



class DeleteLexiconRequest private constructor(builder: BuilderImpl) {
    /**
     * The name of the lexicon to delete. Must be an existing lexicon in
     * the region.
     */
    val name: String? = builder.name

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DeleteLexiconRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DeleteLexiconRequest(")
        append("name=$name)")
    }

    override fun hashCode(): kotlin.Int {
        var result = name?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DeleteLexiconRequest

        if (name != other.name) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DeleteLexiconRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DeleteLexiconRequest
        /**
         * The name of the lexicon to delete. Must be an existing lexicon in
         * the region.
         */
        fun name(name: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The name of the lexicon to delete. Must be an existing lexicon in
         * the region.
         */
        var name: String?

        fun build(): DeleteLexiconRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var name: String? = null

        constructor(x: DeleteLexiconRequest) : this() {
            this.name = x.name
        }

        override fun build(): DeleteLexiconRequest = DeleteLexiconRequest(this)
        override fun name(name: String): FluentBuilder = apply { this.name = name }
    }
}
