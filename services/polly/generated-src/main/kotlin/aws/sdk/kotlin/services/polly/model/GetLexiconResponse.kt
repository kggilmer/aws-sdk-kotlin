// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.polly.model



class GetLexiconResponse private constructor(builder: BuilderImpl) {
    /**
     * Lexicon object that provides name and the string content of the
     * lexicon.
     */
    val lexicon: Lexicon? = builder.lexicon
    /**
     * Metadata of the lexicon, including phonetic alphabetic used,
     * language code, lexicon ARN, number of lexemes defined in the lexicon, and
     * size of lexicon in bytes.
     */
    val lexiconAttributes: LexiconAttributes? = builder.lexiconAttributes

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): GetLexiconResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("GetLexiconResponse(")
        append("lexicon=$lexicon,")
        append("lexiconAttributes=$lexiconAttributes)")
    }

    override fun hashCode(): kotlin.Int {
        var result = lexicon?.hashCode() ?: 0
        result = 31 * result + (lexiconAttributes?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as GetLexiconResponse

        if (lexicon != other.lexicon) return false
        if (lexiconAttributes != other.lexiconAttributes) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): GetLexiconResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): GetLexiconResponse
        /**
         * Lexicon object that provides name and the string content of the
         * lexicon.
         */
        fun lexicon(lexicon: Lexicon): FluentBuilder
        /**
         * Metadata of the lexicon, including phonetic alphabetic used,
         * language code, lexicon ARN, number of lexemes defined in the lexicon, and
         * size of lexicon in bytes.
         */
        fun lexiconAttributes(lexiconAttributes: LexiconAttributes): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Lexicon object that provides name and the string content of the
         * lexicon.
         */
        var lexicon: Lexicon?
        /**
         * Metadata of the lexicon, including phonetic alphabetic used,
         * language code, lexicon ARN, number of lexemes defined in the lexicon, and
         * size of lexicon in bytes.
         */
        var lexiconAttributes: LexiconAttributes?

        fun build(): GetLexiconResponse
        /**
         * construct an [aws.sdk.kotlin.services.polly.model.Lexicon] inside the given [block]
         */
        fun lexicon(block: Lexicon.DslBuilder.() -> kotlin.Unit) {
            this.lexicon = Lexicon.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.polly.model.LexiconAttributes] inside the given [block]
         */
        fun lexiconAttributes(block: LexiconAttributes.DslBuilder.() -> kotlin.Unit) {
            this.lexiconAttributes = LexiconAttributes.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var lexicon: Lexicon? = null
        override var lexiconAttributes: LexiconAttributes? = null

        constructor(x: GetLexiconResponse) : this() {
            this.lexicon = x.lexicon
            this.lexiconAttributes = x.lexiconAttributes
        }

        override fun build(): GetLexiconResponse = GetLexiconResponse(this)
        override fun lexicon(lexicon: Lexicon): FluentBuilder = apply { this.lexicon = lexicon }
        override fun lexiconAttributes(lexiconAttributes: LexiconAttributes): FluentBuilder = apply { this.lexiconAttributes = lexiconAttributes }
    }
}
