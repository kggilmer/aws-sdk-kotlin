// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.polly.transform

import aws.sdk.kotlin.runtime.UnknownServiceErrorException
import aws.sdk.kotlin.runtime.http.setAseErrorMetadata
import aws.sdk.kotlin.runtime.http.withPayload
import aws.sdk.kotlin.runtime.protocol.json.RestJsonErrorDeserializer
import aws.sdk.kotlin.services.polly.model.PollyException
import aws.sdk.kotlin.services.polly.model.PutLexiconResponse
import aws.smithy.kotlin.runtime.client.ExecutionContext
import aws.smithy.kotlin.runtime.http.isSuccess
import aws.smithy.kotlin.runtime.http.operation.HttpDeserialize
import aws.smithy.kotlin.runtime.http.readAll
import aws.smithy.kotlin.runtime.http.response.HttpResponse


internal class PutLexiconOperationDeserializer: HttpDeserialize<PutLexiconResponse> {

    override suspend fun deserialize(context: ExecutionContext, response: HttpResponse): PutLexiconResponse {
        if (!response.status.isSuccess()) {
            throwPutLexiconError(context, response)
        }
        val builder = PutLexiconResponse.builder()

        return builder.build()
    }
}

private suspend fun throwPutLexiconError(context: ExecutionContext, response: HttpResponse): kotlin.Nothing {
    val payload = response.body.readAll()
    val wrappedResponse = response.withPayload(payload)

    val errorDetails = try {
        RestJsonErrorDeserializer.deserialize(response.headers, payload)
    } catch (ex: Exception) {
        throw UnknownServiceErrorException("failed to parse response as restJson1 error", ex).also {
            setAseErrorMetadata(it, wrappedResponse, null)
        }
    }

    val modeledExceptionDeserializer = when(errorDetails.code) {
        "InvalidLexiconException" -> InvalidLexiconExceptionDeserializer()
        "LexiconSizeExceededException" -> LexiconSizeExceededExceptionDeserializer()
        "MaxLexemeLengthExceededException" -> MaxLexemeLengthExceededExceptionDeserializer()
        "MaxLexiconsNumberExceededException" -> MaxLexiconsNumberExceededExceptionDeserializer()
        "ServiceFailureException" -> ServiceFailureExceptionDeserializer()
        "UnsupportedPlsAlphabetException" -> UnsupportedPlsAlphabetExceptionDeserializer()
        "UnsupportedPlsLanguageException" -> UnsupportedPlsLanguageExceptionDeserializer()
        else -> throw PollyException(errorDetails.message)
    }

    val modeledException = modeledExceptionDeserializer.deserialize(context, wrappedResponse)
    setAseErrorMetadata(modeledException, wrappedResponse, errorDetails)
    throw modeledException
}
