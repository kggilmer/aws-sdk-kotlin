// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.polly.model



class StartSpeechSynthesisTaskRequest private constructor(builder: BuilderImpl) {
    /**
     * Specifies the engine (standard or neural)
     * for Amazon Polly to use when processing input text for speech synthesis. Using a
     * voice that is not supported for the engine selected will result in an
     * error.
     */
    val engine: Engine? = builder.engine
    /**
     * Optional language code for the Speech Synthesis request. This is only
     * necessary if using a bilingual voice, such as Aditi, which can be used for
     * either Indian English (en-IN) or Hindi (hi-IN).
     * If a bilingual voice is used and no language code is specified, Amazon Polly
     * uses the default language of the bilingual voice. The default language for
     * any voice is the one returned by the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices operation for the LanguageCode
     * parameter. For example, if no language code is specified, Aditi will use
     * Indian English rather than Hindi.
     */
    val languageCode: LanguageCode? = builder.languageCode
    /**
     * List of one or more pronunciation lexicon names you want the service
     * to apply during synthesis. Lexicons are applied only if the language of
     * the lexicon is the same as the language of the voice.
     */
    val lexiconNames: List<String>? = builder.lexiconNames
    /**
     * The format in which the returned output will be encoded. For audio
     * stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will
     * be json.
     */
    val outputFormat: OutputFormat? = builder.outputFormat
    /**
     * Amazon S3 bucket name to which the output file will be saved.
     */
    val outputS3BucketName: String? = builder.outputS3BucketName
    /**
     * The Amazon S3 key prefix for the output speech file.
     */
    val outputS3KeyPrefix: String? = builder.outputS3KeyPrefix
    /**
     * The audio frequency specified in Hz.
     * The valid values for mp3 and ogg_vorbis are "8000", "16000", "22050",
     * and "24000". The default value for standard voices is "22050". The default
     * value for neural voices is "24000".
     * Valid values for pcm are "8000" and "16000" The default value is
     * "16000".
     */
    val sampleRate: String? = builder.sampleRate
    /**
     * ARN for the SNS topic optionally used for providing status
     * notification for a speech synthesis task.
     */
    val snsTopicArn: String? = builder.snsTopicArn
    /**
     * The type of speech marks returned for the input text.
     */
    val speechMarkTypes: List<SpeechMarkType>? = builder.speechMarkTypes
    /**
     * The input text to synthesize. If you specify ssml as the TextType,
     * follow the SSML format for the input text.
     */
    val text: String? = builder.text
    /**
     * Specifies whether the input text is plain text or SSML. The default
     * value is plain text.
     */
    val textType: TextType? = builder.textType
    /**
     * Voice ID to use for the synthesis.
     */
    val voiceId: VoiceId? = builder.voiceId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): StartSpeechSynthesisTaskRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("StartSpeechSynthesisTaskRequest(")
        append("engine=$engine,")
        append("languageCode=$languageCode,")
        append("lexiconNames=$lexiconNames,")
        append("outputFormat=$outputFormat,")
        append("outputS3BucketName=$outputS3BucketName,")
        append("outputS3KeyPrefix=$outputS3KeyPrefix,")
        append("sampleRate=$sampleRate,")
        append("snsTopicArn=$snsTopicArn,")
        append("speechMarkTypes=$speechMarkTypes,")
        append("text=$text,")
        append("textType=$textType,")
        append("voiceId=$voiceId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = engine?.hashCode() ?: 0
        result = 31 * result + (languageCode?.hashCode() ?: 0)
        result = 31 * result + (lexiconNames?.hashCode() ?: 0)
        result = 31 * result + (outputFormat?.hashCode() ?: 0)
        result = 31 * result + (outputS3BucketName?.hashCode() ?: 0)
        result = 31 * result + (outputS3KeyPrefix?.hashCode() ?: 0)
        result = 31 * result + (sampleRate?.hashCode() ?: 0)
        result = 31 * result + (snsTopicArn?.hashCode() ?: 0)
        result = 31 * result + (speechMarkTypes?.hashCode() ?: 0)
        result = 31 * result + (text?.hashCode() ?: 0)
        result = 31 * result + (textType?.hashCode() ?: 0)
        result = 31 * result + (voiceId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as StartSpeechSynthesisTaskRequest

        if (engine != other.engine) return false
        if (languageCode != other.languageCode) return false
        if (lexiconNames != other.lexiconNames) return false
        if (outputFormat != other.outputFormat) return false
        if (outputS3BucketName != other.outputS3BucketName) return false
        if (outputS3KeyPrefix != other.outputS3KeyPrefix) return false
        if (sampleRate != other.sampleRate) return false
        if (snsTopicArn != other.snsTopicArn) return false
        if (speechMarkTypes != other.speechMarkTypes) return false
        if (text != other.text) return false
        if (textType != other.textType) return false
        if (voiceId != other.voiceId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): StartSpeechSynthesisTaskRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): StartSpeechSynthesisTaskRequest
        /**
         * Specifies the engine (standard or neural)
         * for Amazon Polly to use when processing input text for speech synthesis. Using a
         * voice that is not supported for the engine selected will result in an
         * error.
         */
        fun engine(engine: Engine): FluentBuilder
        /**
         * Optional language code for the Speech Synthesis request. This is only
         * necessary if using a bilingual voice, such as Aditi, which can be used for
         * either Indian English (en-IN) or Hindi (hi-IN).
         * If a bilingual voice is used and no language code is specified, Amazon Polly
         * uses the default language of the bilingual voice. The default language for
         * any voice is the one returned by the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices operation for the LanguageCode
         * parameter. For example, if no language code is specified, Aditi will use
         * Indian English rather than Hindi.
         */
        fun languageCode(languageCode: LanguageCode): FluentBuilder
        /**
         * List of one or more pronunciation lexicon names you want the service
         * to apply during synthesis. Lexicons are applied only if the language of
         * the lexicon is the same as the language of the voice.
         */
        fun lexiconNames(lexiconNames: List<String>): FluentBuilder
        /**
         * The format in which the returned output will be encoded. For audio
         * stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will
         * be json.
         */
        fun outputFormat(outputFormat: OutputFormat): FluentBuilder
        /**
         * Amazon S3 bucket name to which the output file will be saved.
         */
        fun outputS3BucketName(outputS3BucketName: String): FluentBuilder
        /**
         * The Amazon S3 key prefix for the output speech file.
         */
        fun outputS3KeyPrefix(outputS3KeyPrefix: String): FluentBuilder
        /**
         * The audio frequency specified in Hz.
         * The valid values for mp3 and ogg_vorbis are "8000", "16000", "22050",
         * and "24000". The default value for standard voices is "22050". The default
         * value for neural voices is "24000".
         * Valid values for pcm are "8000" and "16000" The default value is
         * "16000".
         */
        fun sampleRate(sampleRate: String): FluentBuilder
        /**
         * ARN for the SNS topic optionally used for providing status
         * notification for a speech synthesis task.
         */
        fun snsTopicArn(snsTopicArn: String): FluentBuilder
        /**
         * The type of speech marks returned for the input text.
         */
        fun speechMarkTypes(speechMarkTypes: List<SpeechMarkType>): FluentBuilder
        /**
         * The input text to synthesize. If you specify ssml as the TextType,
         * follow the SSML format for the input text.
         */
        fun text(text: String): FluentBuilder
        /**
         * Specifies whether the input text is plain text or SSML. The default
         * value is plain text.
         */
        fun textType(textType: TextType): FluentBuilder
        /**
         * Voice ID to use for the synthesis.
         */
        fun voiceId(voiceId: VoiceId): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Specifies the engine (standard or neural)
         * for Amazon Polly to use when processing input text for speech synthesis. Using a
         * voice that is not supported for the engine selected will result in an
         * error.
         */
        var engine: Engine?
        /**
         * Optional language code for the Speech Synthesis request. This is only
         * necessary if using a bilingual voice, such as Aditi, which can be used for
         * either Indian English (en-IN) or Hindi (hi-IN).
         * If a bilingual voice is used and no language code is specified, Amazon Polly
         * uses the default language of the bilingual voice. The default language for
         * any voice is the one returned by the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices operation for the LanguageCode
         * parameter. For example, if no language code is specified, Aditi will use
         * Indian English rather than Hindi.
         */
        var languageCode: LanguageCode?
        /**
         * List of one or more pronunciation lexicon names you want the service
         * to apply during synthesis. Lexicons are applied only if the language of
         * the lexicon is the same as the language of the voice.
         */
        var lexiconNames: List<String>?
        /**
         * The format in which the returned output will be encoded. For audio
         * stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will
         * be json.
         */
        var outputFormat: OutputFormat?
        /**
         * Amazon S3 bucket name to which the output file will be saved.
         */
        var outputS3BucketName: String?
        /**
         * The Amazon S3 key prefix for the output speech file.
         */
        var outputS3KeyPrefix: String?
        /**
         * The audio frequency specified in Hz.
         * The valid values for mp3 and ogg_vorbis are "8000", "16000", "22050",
         * and "24000". The default value for standard voices is "22050". The default
         * value for neural voices is "24000".
         * Valid values for pcm are "8000" and "16000" The default value is
         * "16000".
         */
        var sampleRate: String?
        /**
         * ARN for the SNS topic optionally used for providing status
         * notification for a speech synthesis task.
         */
        var snsTopicArn: String?
        /**
         * The type of speech marks returned for the input text.
         */
        var speechMarkTypes: List<SpeechMarkType>?
        /**
         * The input text to synthesize. If you specify ssml as the TextType,
         * follow the SSML format for the input text.
         */
        var text: String?
        /**
         * Specifies whether the input text is plain text or SSML. The default
         * value is plain text.
         */
        var textType: TextType?
        /**
         * Voice ID to use for the synthesis.
         */
        var voiceId: VoiceId?

        fun build(): StartSpeechSynthesisTaskRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var engine: Engine? = null
        override var languageCode: LanguageCode? = null
        override var lexiconNames: List<String>? = null
        override var outputFormat: OutputFormat? = null
        override var outputS3BucketName: String? = null
        override var outputS3KeyPrefix: String? = null
        override var sampleRate: String? = null
        override var snsTopicArn: String? = null
        override var speechMarkTypes: List<SpeechMarkType>? = null
        override var text: String? = null
        override var textType: TextType? = null
        override var voiceId: VoiceId? = null

        constructor(x: StartSpeechSynthesisTaskRequest) : this() {
            this.engine = x.engine
            this.languageCode = x.languageCode
            this.lexiconNames = x.lexiconNames
            this.outputFormat = x.outputFormat
            this.outputS3BucketName = x.outputS3BucketName
            this.outputS3KeyPrefix = x.outputS3KeyPrefix
            this.sampleRate = x.sampleRate
            this.snsTopicArn = x.snsTopicArn
            this.speechMarkTypes = x.speechMarkTypes
            this.text = x.text
            this.textType = x.textType
            this.voiceId = x.voiceId
        }

        override fun build(): StartSpeechSynthesisTaskRequest = StartSpeechSynthesisTaskRequest(this)
        override fun engine(engine: Engine): FluentBuilder = apply { this.engine = engine }
        override fun languageCode(languageCode: LanguageCode): FluentBuilder = apply { this.languageCode = languageCode }
        override fun lexiconNames(lexiconNames: List<String>): FluentBuilder = apply { this.lexiconNames = lexiconNames }
        override fun outputFormat(outputFormat: OutputFormat): FluentBuilder = apply { this.outputFormat = outputFormat }
        override fun outputS3BucketName(outputS3BucketName: String): FluentBuilder = apply { this.outputS3BucketName = outputS3BucketName }
        override fun outputS3KeyPrefix(outputS3KeyPrefix: String): FluentBuilder = apply { this.outputS3KeyPrefix = outputS3KeyPrefix }
        override fun sampleRate(sampleRate: String): FluentBuilder = apply { this.sampleRate = sampleRate }
        override fun snsTopicArn(snsTopicArn: String): FluentBuilder = apply { this.snsTopicArn = snsTopicArn }
        override fun speechMarkTypes(speechMarkTypes: List<SpeechMarkType>): FluentBuilder = apply { this.speechMarkTypes = speechMarkTypes }
        override fun text(text: String): FluentBuilder = apply { this.text = text }
        override fun textType(textType: TextType): FluentBuilder = apply { this.textType = textType }
        override fun voiceId(voiceId: VoiceId): FluentBuilder = apply { this.voiceId = voiceId }
    }
}
