// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.polly

import aws.sdk.kotlin.runtime.ClientException
import aws.sdk.kotlin.runtime.auth.credentials.CredentialsProvider
import aws.sdk.kotlin.runtime.auth.credentials.DefaultChainCredentialsProvider
import aws.sdk.kotlin.runtime.auth.signing.PresignedRequestConfig
import aws.sdk.kotlin.runtime.auth.signing.ServicePresignConfig
import aws.sdk.kotlin.runtime.auth.signing.SigningLocation
import aws.sdk.kotlin.runtime.auth.signing.createPresignedRequest
import aws.sdk.kotlin.runtime.endpoint.AwsEndpointResolver
import aws.sdk.kotlin.services.polly.internal.DefaultEndpointResolver
import aws.sdk.kotlin.services.polly.model.SynthesizeSpeechRequest
import aws.sdk.kotlin.services.polly.transform.SynthesizeSpeechOperationSerializer
import aws.smithy.kotlin.runtime.client.ExecutionContext
import aws.smithy.kotlin.runtime.http.HttpMethod
import aws.smithy.kotlin.runtime.http.QueryParameters
import aws.smithy.kotlin.runtime.http.QueryParametersBuilder
import aws.smithy.kotlin.runtime.http.request.HttpRequest

/**
 * Presign a [SynthesizeSpeechRequest] using a [ServicePresignConfig].
 * @param presignConfig the configuration used to generate the presigned request
 * @param durationSeconds the amount of time from signing for which the request is valid, with seconds granularity.
 * @return The [HttpRequest] that can be invoked within the specified time window.
 */
suspend fun SynthesizeSpeechRequest.presign(presignConfig: ServicePresignConfig, durationSeconds: Long): HttpRequest {
    return createPresignedRequest(presignConfig, synthesizeSpeechPresignConfig(this, durationSeconds))
}

/**
 * Presign a [SynthesizeSpeechRequest] using a [PollyClient].
 * @param config the client configuration used to generate the presigned request.
 * @param durationSeconds the amount of time from signing for which the request is valid, with seconds granularity.
 * @return The [HttpRequest] that can be invoked within the specified time window.
 */
suspend fun SynthesizeSpeechRequest.presign(config: PollyClient.Config, durationSeconds: Long): HttpRequest {
    val presignConfig = PollyPresignConfig {
        credentialsProvider = config.credentialsProvider
        endpointResolver = config.endpointResolver
        region = config.region
    }
    return createPresignedRequest(presignConfig, synthesizeSpeechPresignConfig(this, durationSeconds))
}

private suspend fun synthesizeSpeechPresignConfig(input: SynthesizeSpeechRequest, durationSeconds: Long) : PresignedRequestConfig {
    require(durationSeconds > 0) { "duration must be greater than zero" }
    val httpRequestBuilder = SynthesizeSpeechOperationSerializer().serialize(ExecutionContext.build { }, input)
    val queryStringBuilder = QueryParametersBuilder()
    with(queryStringBuilder) {
        if (input.engine != null) append("Engine", input.engine.value)
        if (input.languageCode != null) append("LanguageCode", input.languageCode.value)
        if (input.lexiconNames?.isNotEmpty() == true) appendAll("LexiconNames", input.lexiconNames)
        if (input.outputFormat != null) append("OutputFormat", input.outputFormat.value)
        if (input.sampleRate?.isNotEmpty() == true) append("SampleRate", input.sampleRate)
        if (input.speechMarkTypes?.isNotEmpty() == true) appendAll("SpeechMarkTypes", input.speechMarkTypes.map { it.value })
        if (input.text?.isNotEmpty() == true) append("Text", input.text)
        if (input.textType != null) append("TextType", input.textType.value)
        if (input.voiceId != null) append("VoiceId", input.voiceId.value)
    }
    return PresignedRequestConfig(
        HttpMethod.GET,
        httpRequestBuilder.url.path,
        queryStringBuilder.build(),
        durationSeconds.toLong(),
        true,
        SigningLocation.QUERY_STRING
    )
}

/**
 * Provides a subset of the service client configuration necessary to presign a request.
 * This type can be used to presign requests in cases where an existing service client
 * instance is not available.
 */
class PollyPresignConfig private constructor(builder: BuilderImpl): ServicePresignConfig {
    override val credentialsProvider: CredentialsProvider = builder.credentialsProvider ?: DefaultChainCredentialsProvider()
    override val endpointResolver: AwsEndpointResolver = builder.endpointResolver ?: DefaultEndpointResolver()
    override val region: String = requireNotNull(builder.region) { "region is a required configuration property" }
    override val serviceId: String = "Polly"
    override val signingName: String = "polly"
    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ServicePresignConfig = BuilderImpl().apply(block).build()
    }

    interface FluentBuilder {
        fun credentialsProvider(credentialsProvider: CredentialsProvider): FluentBuilder
        fun endpointResolver(endpointResolver: AwsEndpointResolver): FluentBuilder
        fun region(region: String): FluentBuilder
        fun build(): PollyPresignConfig
    }

    interface DslBuilder {
        /**
         * The AWS credentials provider to use for authenticating requests. If not provided a [aws.sdk.kotlin.runtime.auth.credentials.DefaultChainCredentialsProvider] instance will be used.
         */
        var credentialsProvider: CredentialsProvider?

        /**
         * Determines the endpoint (hostname) to make requests to. When not provided a default resolver is configured automatically. This is an advanced client option.
         */
        var endpointResolver: AwsEndpointResolver?

        /**
         * AWS region to make requests for
         */
        var region: String?

    }

    internal class BuilderImpl() : FluentBuilder, DslBuilder {
        override var credentialsProvider: CredentialsProvider? = null
        override var endpointResolver: AwsEndpointResolver? = null
        override var region: String? = null

        override fun build(): PollyPresignConfig = PollyPresignConfig(this)
        override fun credentialsProvider(credentialsProvider: CredentialsProvider): FluentBuilder = apply { this.credentialsProvider = credentialsProvider }
        override fun endpointResolver(endpointResolver: AwsEndpointResolver): FluentBuilder = apply { this.endpointResolver = endpointResolver }
        override fun region(region: String): FluentBuilder = apply { this.region = region }
    }
}
