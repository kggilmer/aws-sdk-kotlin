// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.polly.model



class ListLexiconsRequest private constructor(builder: BuilderImpl) {
    /**
     * An opaque pagination token returned from previous
     * ListLexicons operation. If present, indicates where to
     * continue the list of lexicons.
     */
    val nextToken: String? = builder.nextToken

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ListLexiconsRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ListLexiconsRequest(")
        append("nextToken=$nextToken)")
    }

    override fun hashCode(): kotlin.Int {
        var result = nextToken?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ListLexiconsRequest

        if (nextToken != other.nextToken) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ListLexiconsRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ListLexiconsRequest
        /**
         * An opaque pagination token returned from previous
         * ListLexicons operation. If present, indicates where to
         * continue the list of lexicons.
         */
        fun nextToken(nextToken: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * An opaque pagination token returned from previous
         * ListLexicons operation. If present, indicates where to
         * continue the list of lexicons.
         */
        var nextToken: String?

        fun build(): ListLexiconsRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var nextToken: String? = null

        constructor(x: ListLexiconsRequest) : this() {
            this.nextToken = x.nextToken
        }

        override fun build(): ListLexiconsRequest = ListLexiconsRequest(this)
        override fun nextToken(nextToken: String): FluentBuilder = apply { this.nextToken = nextToken }
    }
}
