// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.polly.model



/**
 * Description of the voice.
 */
class Voice private constructor(builder: BuilderImpl) {
    /**
     * Additional codes for languages available for the specified voice in
     * addition to its default language.
     * For example, the default language for Aditi is Indian English (en-IN)
     * because it was first used for that language. Since Aditi is bilingual and
     * fluent in both Indian English and Hindi, this parameter would show the
     * code hi-IN.
     */
    val additionalLanguageCodes: List<LanguageCode>? = builder.additionalLanguageCodes
    /**
     * Gender of the voice.
     */
    val gender: Gender? = builder.gender
    /**
     * Amazon Polly assigned voice ID. This is the ID that you specify when
     * calling the SynthesizeSpeech operation.
     */
    val id: VoiceId? = builder.id
    /**
     * Language code of the voice.
     */
    val languageCode: LanguageCode? = builder.languageCode
    /**
     * Human readable name of the language in English.
     */
    val languageName: String? = builder.languageName
    /**
     * Name of the voice (for example, Salli, Kendra, etc.). This provides
     * a human readable voice name that you might display in your
     * application.
     */
    val name: String? = builder.name
    /**
     * Specifies which engines (standard or neural)
     * that are supported by a given voice.
     */
    val supportedEngines: List<Engine>? = builder.supportedEngines

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): Voice = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("Voice(")
        append("additionalLanguageCodes=$additionalLanguageCodes,")
        append("gender=$gender,")
        append("id=$id,")
        append("languageCode=$languageCode,")
        append("languageName=$languageName,")
        append("name=$name,")
        append("supportedEngines=$supportedEngines)")
    }

    override fun hashCode(): kotlin.Int {
        var result = additionalLanguageCodes?.hashCode() ?: 0
        result = 31 * result + (gender?.hashCode() ?: 0)
        result = 31 * result + (id?.hashCode() ?: 0)
        result = 31 * result + (languageCode?.hashCode() ?: 0)
        result = 31 * result + (languageName?.hashCode() ?: 0)
        result = 31 * result + (name?.hashCode() ?: 0)
        result = 31 * result + (supportedEngines?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Voice

        if (additionalLanguageCodes != other.additionalLanguageCodes) return false
        if (gender != other.gender) return false
        if (id != other.id) return false
        if (languageCode != other.languageCode) return false
        if (languageName != other.languageName) return false
        if (name != other.name) return false
        if (supportedEngines != other.supportedEngines) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): Voice = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): Voice
        /**
         * Additional codes for languages available for the specified voice in
         * addition to its default language.
         * For example, the default language for Aditi is Indian English (en-IN)
         * because it was first used for that language. Since Aditi is bilingual and
         * fluent in both Indian English and Hindi, this parameter would show the
         * code hi-IN.
         */
        fun additionalLanguageCodes(additionalLanguageCodes: List<LanguageCode>): FluentBuilder
        /**
         * Gender of the voice.
         */
        fun gender(gender: Gender): FluentBuilder
        /**
         * Amazon Polly assigned voice ID. This is the ID that you specify when
         * calling the SynthesizeSpeech operation.
         */
        fun id(id: VoiceId): FluentBuilder
        /**
         * Language code of the voice.
         */
        fun languageCode(languageCode: LanguageCode): FluentBuilder
        /**
         * Human readable name of the language in English.
         */
        fun languageName(languageName: String): FluentBuilder
        /**
         * Name of the voice (for example, Salli, Kendra, etc.). This provides
         * a human readable voice name that you might display in your
         * application.
         */
        fun name(name: String): FluentBuilder
        /**
         * Specifies which engines (standard or neural)
         * that are supported by a given voice.
         */
        fun supportedEngines(supportedEngines: List<Engine>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Additional codes for languages available for the specified voice in
         * addition to its default language.
         * For example, the default language for Aditi is Indian English (en-IN)
         * because it was first used for that language. Since Aditi is bilingual and
         * fluent in both Indian English and Hindi, this parameter would show the
         * code hi-IN.
         */
        var additionalLanguageCodes: List<LanguageCode>?
        /**
         * Gender of the voice.
         */
        var gender: Gender?
        /**
         * Amazon Polly assigned voice ID. This is the ID that you specify when
         * calling the SynthesizeSpeech operation.
         */
        var id: VoiceId?
        /**
         * Language code of the voice.
         */
        var languageCode: LanguageCode?
        /**
         * Human readable name of the language in English.
         */
        var languageName: String?
        /**
         * Name of the voice (for example, Salli, Kendra, etc.). This provides
         * a human readable voice name that you might display in your
         * application.
         */
        var name: String?
        /**
         * Specifies which engines (standard or neural)
         * that are supported by a given voice.
         */
        var supportedEngines: List<Engine>?

        fun build(): Voice
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var additionalLanguageCodes: List<LanguageCode>? = null
        override var gender: Gender? = null
        override var id: VoiceId? = null
        override var languageCode: LanguageCode? = null
        override var languageName: String? = null
        override var name: String? = null
        override var supportedEngines: List<Engine>? = null

        constructor(x: Voice) : this() {
            this.additionalLanguageCodes = x.additionalLanguageCodes
            this.gender = x.gender
            this.id = x.id
            this.languageCode = x.languageCode
            this.languageName = x.languageName
            this.name = x.name
            this.supportedEngines = x.supportedEngines
        }

        override fun build(): Voice = Voice(this)
        override fun additionalLanguageCodes(additionalLanguageCodes: List<LanguageCode>): FluentBuilder = apply { this.additionalLanguageCodes = additionalLanguageCodes }
        override fun gender(gender: Gender): FluentBuilder = apply { this.gender = gender }
        override fun id(id: VoiceId): FluentBuilder = apply { this.id = id }
        override fun languageCode(languageCode: LanguageCode): FluentBuilder = apply { this.languageCode = languageCode }
        override fun languageName(languageName: String): FluentBuilder = apply { this.languageName = languageName }
        override fun name(name: String): FluentBuilder = apply { this.name = name }
        override fun supportedEngines(supportedEngines: List<Engine>): FluentBuilder = apply { this.supportedEngines = supportedEngines }
    }
}
