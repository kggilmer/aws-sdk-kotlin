// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class GetLaunchTemplateDataResponse private constructor(builder: BuilderImpl) {
    /**
     * The instance data.
     */
    val launchTemplateData: ResponseLaunchTemplateData? = builder.launchTemplateData

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): GetLaunchTemplateDataResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("GetLaunchTemplateDataResponse(")
        append("launchTemplateData=$launchTemplateData)")
    }

    override fun hashCode(): kotlin.Int {
        var result = launchTemplateData?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as GetLaunchTemplateDataResponse

        if (launchTemplateData != other.launchTemplateData) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): GetLaunchTemplateDataResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): GetLaunchTemplateDataResponse
        /**
         * The instance data.
         */
        fun launchTemplateData(launchTemplateData: ResponseLaunchTemplateData): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The instance data.
         */
        var launchTemplateData: ResponseLaunchTemplateData?

        fun build(): GetLaunchTemplateDataResponse
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.ResponseLaunchTemplateData] inside the given [block]
         */
        fun launchTemplateData(block: ResponseLaunchTemplateData.DslBuilder.() -> kotlin.Unit) {
            this.launchTemplateData = ResponseLaunchTemplateData.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var launchTemplateData: ResponseLaunchTemplateData? = null

        constructor(x: GetLaunchTemplateDataResponse) : this() {
            this.launchTemplateData = x.launchTemplateData
        }

        override fun build(): GetLaunchTemplateDataResponse = GetLaunchTemplateDataResponse(this)
        override fun launchTemplateData(launchTemplateData: ResponseLaunchTemplateData): FluentBuilder = apply { this.launchTemplateData = launchTemplateData }
    }
}
