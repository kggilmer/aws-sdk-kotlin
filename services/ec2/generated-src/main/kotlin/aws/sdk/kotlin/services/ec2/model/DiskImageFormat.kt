// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



sealed class DiskImageFormat {

    abstract val value: kotlin.String

    object Raw : aws.sdk.kotlin.services.ec2.model.DiskImageFormat() {
        override val value: kotlin.String = "RAW"
        override fun toString(): kotlin.String = value
    }

    object Vhd : aws.sdk.kotlin.services.ec2.model.DiskImageFormat() {
        override val value: kotlin.String = "VHD"
        override fun toString(): kotlin.String = value
    }

    object Vmdk : aws.sdk.kotlin.services.ec2.model.DiskImageFormat() {
        override val value: kotlin.String = "VMDK"
        override fun toString(): kotlin.String = value
    }

    data class SdkUnknown(override val value: kotlin.String) : aws.sdk.kotlin.services.ec2.model.DiskImageFormat() {
        override fun toString(): kotlin.String = value
    }

    companion object {
        /**
         * Convert a raw value to one of the sealed variants or [SdkUnknown]
         */
        fun fromValue(str: kotlin.String): aws.sdk.kotlin.services.ec2.model.DiskImageFormat = when(str) {
            "RAW" -> Raw
            "VHD" -> Vhd
            "VMDK" -> Vmdk
            else -> SdkUnknown(str)
        }

        /**
         * Get a list of all possible variants
         */
        fun values(): kotlin.collections.List<aws.sdk.kotlin.services.ec2.model.DiskImageFormat> = listOf(
            Raw,
            Vhd,
            Vmdk
        )
    }
}
