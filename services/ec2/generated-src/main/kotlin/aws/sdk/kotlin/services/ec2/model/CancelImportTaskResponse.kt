// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class CancelImportTaskResponse private constructor(builder: BuilderImpl) {
    /**
     * The ID of the task being canceled.
     */
    val importTaskId: String? = builder.importTaskId
    /**
     * The current state of the task being canceled.
     */
    val previousState: String? = builder.previousState
    /**
     * The current state of the task being canceled.
     */
    val state: String? = builder.state

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CancelImportTaskResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CancelImportTaskResponse(")
        append("importTaskId=$importTaskId,")
        append("previousState=$previousState,")
        append("state=$state)")
    }

    override fun hashCode(): kotlin.Int {
        var result = importTaskId?.hashCode() ?: 0
        result = 31 * result + (previousState?.hashCode() ?: 0)
        result = 31 * result + (state?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CancelImportTaskResponse

        if (importTaskId != other.importTaskId) return false
        if (previousState != other.previousState) return false
        if (state != other.state) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CancelImportTaskResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CancelImportTaskResponse
        /**
         * The ID of the task being canceled.
         */
        fun importTaskId(importTaskId: String): FluentBuilder
        /**
         * The current state of the task being canceled.
         */
        fun previousState(previousState: String): FluentBuilder
        /**
         * The current state of the task being canceled.
         */
        fun state(state: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The ID of the task being canceled.
         */
        var importTaskId: String?
        /**
         * The current state of the task being canceled.
         */
        var previousState: String?
        /**
         * The current state of the task being canceled.
         */
        var state: String?

        fun build(): CancelImportTaskResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var importTaskId: String? = null
        override var previousState: String? = null
        override var state: String? = null

        constructor(x: CancelImportTaskResponse) : this() {
            this.importTaskId = x.importTaskId
            this.previousState = x.previousState
            this.state = x.state
        }

        override fun build(): CancelImportTaskResponse = CancelImportTaskResponse(this)
        override fun importTaskId(importTaskId: String): FluentBuilder = apply { this.importTaskId = importTaskId }
        override fun previousState(previousState: String): FluentBuilder = apply { this.previousState = previousState }
        override fun state(state: String): FluentBuilder = apply { this.state = state }
    }
}
