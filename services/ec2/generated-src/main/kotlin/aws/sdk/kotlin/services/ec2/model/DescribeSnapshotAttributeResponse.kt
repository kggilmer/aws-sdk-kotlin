// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class DescribeSnapshotAttributeResponse private constructor(builder: BuilderImpl) {
    /**
     * The users and groups that have the permissions for creating volumes from the
     * snapshot.
     */
    val createVolumePermissions: List<CreateVolumePermission>? = builder.createVolumePermissions
    /**
     * The product codes.
     */
    val productCodes: List<ProductCode>? = builder.productCodes
    /**
     * The ID of the EBS snapshot.
     */
    val snapshotId: String? = builder.snapshotId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DescribeSnapshotAttributeResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DescribeSnapshotAttributeResponse(")
        append("createVolumePermissions=$createVolumePermissions,")
        append("productCodes=$productCodes,")
        append("snapshotId=$snapshotId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = createVolumePermissions?.hashCode() ?: 0
        result = 31 * result + (productCodes?.hashCode() ?: 0)
        result = 31 * result + (snapshotId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DescribeSnapshotAttributeResponse

        if (createVolumePermissions != other.createVolumePermissions) return false
        if (productCodes != other.productCodes) return false
        if (snapshotId != other.snapshotId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DescribeSnapshotAttributeResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DescribeSnapshotAttributeResponse
        /**
         * The users and groups that have the permissions for creating volumes from the
         * snapshot.
         */
        fun createVolumePermissions(createVolumePermissions: List<CreateVolumePermission>): FluentBuilder
        /**
         * The product codes.
         */
        fun productCodes(productCodes: List<ProductCode>): FluentBuilder
        /**
         * The ID of the EBS snapshot.
         */
        fun snapshotId(snapshotId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The users and groups that have the permissions for creating volumes from the
         * snapshot.
         */
        var createVolumePermissions: List<CreateVolumePermission>?
        /**
         * The product codes.
         */
        var productCodes: List<ProductCode>?
        /**
         * The ID of the EBS snapshot.
         */
        var snapshotId: String?

        fun build(): DescribeSnapshotAttributeResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var createVolumePermissions: List<CreateVolumePermission>? = null
        override var productCodes: List<ProductCode>? = null
        override var snapshotId: String? = null

        constructor(x: DescribeSnapshotAttributeResponse) : this() {
            this.createVolumePermissions = x.createVolumePermissions
            this.productCodes = x.productCodes
            this.snapshotId = x.snapshotId
        }

        override fun build(): DescribeSnapshotAttributeResponse = DescribeSnapshotAttributeResponse(this)
        override fun createVolumePermissions(createVolumePermissions: List<CreateVolumePermission>): FluentBuilder = apply { this.createVolumePermissions = createVolumePermissions }
        override fun productCodes(productCodes: List<ProductCode>): FluentBuilder = apply { this.productCodes = productCodes }
        override fun snapshotId(snapshotId: String): FluentBuilder = apply { this.snapshotId = snapshotId }
    }
}
