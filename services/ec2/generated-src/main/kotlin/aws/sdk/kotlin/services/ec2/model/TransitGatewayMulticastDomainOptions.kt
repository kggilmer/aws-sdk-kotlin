// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the options for a transit gateway multicast domain.
 */
class TransitGatewayMulticastDomainOptions private constructor(builder: BuilderImpl) {
    /**
     * Indicates whether to automatically cross-account subnet associations that are associated with the transit gateway multicast domain.
     */
    val autoAcceptSharedAssociations: AutoAcceptSharedAssociationsValue? = builder.autoAcceptSharedAssociations
    /**
     * Indicates whether Internet Group Management Protocol (IGMP) version 2 is turned on for the transit gateway multicast domain.
     */
    val igmpv2Support: Igmpv2SupportValue? = builder.igmpv2Support
    /**
     * Indicates whether support for statically configuring transit gateway multicast group sources is turned on.
     */
    val staticSourcesSupport: StaticSourcesSupportValue? = builder.staticSourcesSupport

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): TransitGatewayMulticastDomainOptions = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("TransitGatewayMulticastDomainOptions(")
        append("autoAcceptSharedAssociations=$autoAcceptSharedAssociations,")
        append("igmpv2Support=$igmpv2Support,")
        append("staticSourcesSupport=$staticSourcesSupport)")
    }

    override fun hashCode(): kotlin.Int {
        var result = autoAcceptSharedAssociations?.hashCode() ?: 0
        result = 31 * result + (igmpv2Support?.hashCode() ?: 0)
        result = 31 * result + (staticSourcesSupport?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as TransitGatewayMulticastDomainOptions

        if (autoAcceptSharedAssociations != other.autoAcceptSharedAssociations) return false
        if (igmpv2Support != other.igmpv2Support) return false
        if (staticSourcesSupport != other.staticSourcesSupport) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): TransitGatewayMulticastDomainOptions = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): TransitGatewayMulticastDomainOptions
        /**
         * Indicates whether to automatically cross-account subnet associations that are associated with the transit gateway multicast domain.
         */
        fun autoAcceptSharedAssociations(autoAcceptSharedAssociations: AutoAcceptSharedAssociationsValue): FluentBuilder
        /**
         * Indicates whether Internet Group Management Protocol (IGMP) version 2 is turned on for the transit gateway multicast domain.
         */
        fun igmpv2Support(igmpv2Support: Igmpv2SupportValue): FluentBuilder
        /**
         * Indicates whether support for statically configuring transit gateway multicast group sources is turned on.
         */
        fun staticSourcesSupport(staticSourcesSupport: StaticSourcesSupportValue): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Indicates whether to automatically cross-account subnet associations that are associated with the transit gateway multicast domain.
         */
        var autoAcceptSharedAssociations: AutoAcceptSharedAssociationsValue?
        /**
         * Indicates whether Internet Group Management Protocol (IGMP) version 2 is turned on for the transit gateway multicast domain.
         */
        var igmpv2Support: Igmpv2SupportValue?
        /**
         * Indicates whether support for statically configuring transit gateway multicast group sources is turned on.
         */
        var staticSourcesSupport: StaticSourcesSupportValue?

        fun build(): TransitGatewayMulticastDomainOptions
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var autoAcceptSharedAssociations: AutoAcceptSharedAssociationsValue? = null
        override var igmpv2Support: Igmpv2SupportValue? = null
        override var staticSourcesSupport: StaticSourcesSupportValue? = null

        constructor(x: TransitGatewayMulticastDomainOptions) : this() {
            this.autoAcceptSharedAssociations = x.autoAcceptSharedAssociations
            this.igmpv2Support = x.igmpv2Support
            this.staticSourcesSupport = x.staticSourcesSupport
        }

        override fun build(): TransitGatewayMulticastDomainOptions = TransitGatewayMulticastDomainOptions(this)
        override fun autoAcceptSharedAssociations(autoAcceptSharedAssociations: AutoAcceptSharedAssociationsValue): FluentBuilder = apply { this.autoAcceptSharedAssociations = autoAcceptSharedAssociations }
        override fun igmpv2Support(igmpv2Support: Igmpv2SupportValue): FluentBuilder = apply { this.igmpv2Support = igmpv2Support }
        override fun staticSourcesSupport(staticSourcesSupport: StaticSourcesSupportValue): FluentBuilder = apply { this.staticSourcesSupport = staticSourcesSupport }
    }
}
