// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class DisableVpcClassicLinkDnsSupportRequest private constructor(builder: BuilderImpl) {
    /**
     * The ID of the VPC.
     */
    val vpcId: String? = builder.vpcId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DisableVpcClassicLinkDnsSupportRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DisableVpcClassicLinkDnsSupportRequest(")
        append("vpcId=$vpcId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = vpcId?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DisableVpcClassicLinkDnsSupportRequest

        if (vpcId != other.vpcId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DisableVpcClassicLinkDnsSupportRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DisableVpcClassicLinkDnsSupportRequest
        /**
         * The ID of the VPC.
         */
        fun vpcId(vpcId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The ID of the VPC.
         */
        var vpcId: String?

        fun build(): DisableVpcClassicLinkDnsSupportRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var vpcId: String? = null

        constructor(x: DisableVpcClassicLinkDnsSupportRequest) : this() {
            this.vpcId = x.vpcId
        }

        override fun build(): DisableVpcClassicLinkDnsSupportRequest = DisableVpcClassicLinkDnsSupportRequest(this)
        override fun vpcId(vpcId: String): FluentBuilder = apply { this.vpcId = vpcId }
    }
}
