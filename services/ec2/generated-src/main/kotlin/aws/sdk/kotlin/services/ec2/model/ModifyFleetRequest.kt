// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ModifyFleetRequest private constructor(builder: BuilderImpl) {
    /**
     * Reserved.
     */
    val context: String? = builder.context
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * Indicates whether running instances should be terminated if the total target capacity of
     * the EC2 Fleet is decreased below the current size of the EC2 Fleet.
     */
    val excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy? = builder.excessCapacityTerminationPolicy
    /**
     * The ID of the EC2 Fleet.
     */
    val fleetId: String? = builder.fleetId
    /**
     * The launch template and overrides.
     */
    val launchTemplateConfigs: List<FleetLaunchTemplateConfigRequest>? = builder.launchTemplateConfigs
    /**
     * The size of the EC2 Fleet.
     */
    val targetCapacitySpecification: TargetCapacitySpecificationRequest? = builder.targetCapacitySpecification

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ModifyFleetRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyFleetRequest(")
        append("context=$context,")
        append("dryRun=$dryRun,")
        append("excessCapacityTerminationPolicy=$excessCapacityTerminationPolicy,")
        append("fleetId=$fleetId,")
        append("launchTemplateConfigs=$launchTemplateConfigs,")
        append("targetCapacitySpecification=$targetCapacitySpecification)")
    }

    override fun hashCode(): kotlin.Int {
        var result = context?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (excessCapacityTerminationPolicy?.hashCode() ?: 0)
        result = 31 * result + (fleetId?.hashCode() ?: 0)
        result = 31 * result + (launchTemplateConfigs?.hashCode() ?: 0)
        result = 31 * result + (targetCapacitySpecification?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ModifyFleetRequest

        if (context != other.context) return false
        if (dryRun != other.dryRun) return false
        if (excessCapacityTerminationPolicy != other.excessCapacityTerminationPolicy) return false
        if (fleetId != other.fleetId) return false
        if (launchTemplateConfigs != other.launchTemplateConfigs) return false
        if (targetCapacitySpecification != other.targetCapacitySpecification) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ModifyFleetRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ModifyFleetRequest
        /**
         * Reserved.
         */
        fun context(context: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * Indicates whether running instances should be terminated if the total target capacity of
         * the EC2 Fleet is decreased below the current size of the EC2 Fleet.
         */
        fun excessCapacityTerminationPolicy(excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy): FluentBuilder
        /**
         * The ID of the EC2 Fleet.
         */
        fun fleetId(fleetId: String): FluentBuilder
        /**
         * The launch template and overrides.
         */
        fun launchTemplateConfigs(launchTemplateConfigs: List<FleetLaunchTemplateConfigRequest>): FluentBuilder
        /**
         * The size of the EC2 Fleet.
         */
        fun targetCapacitySpecification(targetCapacitySpecification: TargetCapacitySpecificationRequest): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Reserved.
         */
        var context: String?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * Indicates whether running instances should be terminated if the total target capacity of
         * the EC2 Fleet is decreased below the current size of the EC2 Fleet.
         */
        var excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy?
        /**
         * The ID of the EC2 Fleet.
         */
        var fleetId: String?
        /**
         * The launch template and overrides.
         */
        var launchTemplateConfigs: List<FleetLaunchTemplateConfigRequest>?
        /**
         * The size of the EC2 Fleet.
         */
        var targetCapacitySpecification: TargetCapacitySpecificationRequest?

        fun build(): ModifyFleetRequest
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.TargetCapacitySpecificationRequest] inside the given [block]
         */
        fun targetCapacitySpecification(block: TargetCapacitySpecificationRequest.DslBuilder.() -> kotlin.Unit) {
            this.targetCapacitySpecification = TargetCapacitySpecificationRequest.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var context: String? = null
        override var dryRun: Boolean? = null
        override var excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy? = null
        override var fleetId: String? = null
        override var launchTemplateConfigs: List<FleetLaunchTemplateConfigRequest>? = null
        override var targetCapacitySpecification: TargetCapacitySpecificationRequest? = null

        constructor(x: ModifyFleetRequest) : this() {
            this.context = x.context
            this.dryRun = x.dryRun
            this.excessCapacityTerminationPolicy = x.excessCapacityTerminationPolicy
            this.fleetId = x.fleetId
            this.launchTemplateConfigs = x.launchTemplateConfigs
            this.targetCapacitySpecification = x.targetCapacitySpecification
        }

        override fun build(): ModifyFleetRequest = ModifyFleetRequest(this)
        override fun context(context: String): FluentBuilder = apply { this.context = context }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun excessCapacityTerminationPolicy(excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy): FluentBuilder = apply { this.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy }
        override fun fleetId(fleetId: String): FluentBuilder = apply { this.fleetId = fleetId }
        override fun launchTemplateConfigs(launchTemplateConfigs: List<FleetLaunchTemplateConfigRequest>): FluentBuilder = apply { this.launchTemplateConfigs = launchTemplateConfigs }
        override fun targetCapacitySpecification(targetCapacitySpecification: TargetCapacitySpecificationRequest): FluentBuilder = apply { this.targetCapacitySpecification = targetCapacitySpecification }
    }
}
