// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a state change.
 */
class StateReason private constructor(builder: BuilderImpl) {
    /**
     * The reason code for the state change.
     */
    val code: String? = builder.code
    /**
     * The message for the state change.
     * Server.InsufficientInstanceCapacity: There was insufficient
     * capacity available to satisfy the launch request.
     * Server.InternalError: An internal error caused the instance to
     * terminate during launch.
     * Server.ScheduledStop: The instance was stopped due to a scheduled
     * retirement.
     * Server.SpotInstanceShutdown: The instance was stopped because the
     * number of Spot requests with a maximum price equal to or higher than the Spot
     * price exceeded available capacity or because of an increase in the Spot
     * price.
     * Server.SpotInstanceTermination: The instance was terminated
     * because the number of Spot requests with a maximum price equal to or higher than
     * the Spot price exceeded available capacity or because of an increase in the Spot
     * price.
     * Client.InstanceInitiatedShutdown: The instance was shut down
     * using the shutdown -h command from the instance.
     * Client.InstanceTerminated: The instance was terminated or
     * rebooted during AMI creation.
     * Client.InternalError: A client error caused the instance to
     * terminate during launch.
     * Client.InvalidSnapshot.NotFound: The specified snapshot was not
     * found.
     * Client.UserInitiatedHibernate: Hibernation was initiated on the
     * instance.
     * Client.UserInitiatedShutdown: The instance was shut down using
     * the Amazon EC2 API.
     * Client.VolumeLimitExceeded: The limit on the number of EBS
     * volumes or total storage was exceeded. Decrease usage or request an increase in
     * your account limits.
     */
    val message: String? = builder.message

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): StateReason = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("StateReason(")
        append("code=$code,")
        append("message=$message)")
    }

    override fun hashCode(): kotlin.Int {
        var result = code?.hashCode() ?: 0
        result = 31 * result + (message?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as StateReason

        if (code != other.code) return false
        if (message != other.message) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): StateReason = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): StateReason
        /**
         * The reason code for the state change.
         */
        fun code(code: String): FluentBuilder
        /**
         * The message for the state change.
         * Server.InsufficientInstanceCapacity: There was insufficient
         * capacity available to satisfy the launch request.
         * Server.InternalError: An internal error caused the instance to
         * terminate during launch.
         * Server.ScheduledStop: The instance was stopped due to a scheduled
         * retirement.
         * Server.SpotInstanceShutdown: The instance was stopped because the
         * number of Spot requests with a maximum price equal to or higher than the Spot
         * price exceeded available capacity or because of an increase in the Spot
         * price.
         * Server.SpotInstanceTermination: The instance was terminated
         * because the number of Spot requests with a maximum price equal to or higher than
         * the Spot price exceeded available capacity or because of an increase in the Spot
         * price.
         * Client.InstanceInitiatedShutdown: The instance was shut down
         * using the shutdown -h command from the instance.
         * Client.InstanceTerminated: The instance was terminated or
         * rebooted during AMI creation.
         * Client.InternalError: A client error caused the instance to
         * terminate during launch.
         * Client.InvalidSnapshot.NotFound: The specified snapshot was not
         * found.
         * Client.UserInitiatedHibernate: Hibernation was initiated on the
         * instance.
         * Client.UserInitiatedShutdown: The instance was shut down using
         * the Amazon EC2 API.
         * Client.VolumeLimitExceeded: The limit on the number of EBS
         * volumes or total storage was exceeded. Decrease usage or request an increase in
         * your account limits.
         */
        fun message(message: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The reason code for the state change.
         */
        var code: String?
        /**
         * The message for the state change.
         * Server.InsufficientInstanceCapacity: There was insufficient
         * capacity available to satisfy the launch request.
         * Server.InternalError: An internal error caused the instance to
         * terminate during launch.
         * Server.ScheduledStop: The instance was stopped due to a scheduled
         * retirement.
         * Server.SpotInstanceShutdown: The instance was stopped because the
         * number of Spot requests with a maximum price equal to or higher than the Spot
         * price exceeded available capacity or because of an increase in the Spot
         * price.
         * Server.SpotInstanceTermination: The instance was terminated
         * because the number of Spot requests with a maximum price equal to or higher than
         * the Spot price exceeded available capacity or because of an increase in the Spot
         * price.
         * Client.InstanceInitiatedShutdown: The instance was shut down
         * using the shutdown -h command from the instance.
         * Client.InstanceTerminated: The instance was terminated or
         * rebooted during AMI creation.
         * Client.InternalError: A client error caused the instance to
         * terminate during launch.
         * Client.InvalidSnapshot.NotFound: The specified snapshot was not
         * found.
         * Client.UserInitiatedHibernate: Hibernation was initiated on the
         * instance.
         * Client.UserInitiatedShutdown: The instance was shut down using
         * the Amazon EC2 API.
         * Client.VolumeLimitExceeded: The limit on the number of EBS
         * volumes or total storage was exceeded. Decrease usage or request an increase in
         * your account limits.
         */
        var message: String?

        fun build(): StateReason
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var code: String? = null
        override var message: String? = null

        constructor(x: StateReason) : this() {
            this.code = x.code
            this.message = x.message
        }

        override fun build(): StateReason = StateReason(this)
        override fun code(code: String): FluentBuilder = apply { this.code = code }
        override fun message(message: String): FluentBuilder = apply { this.message = message }
    }
}
