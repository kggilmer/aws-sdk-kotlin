// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes an EC2 Fleet that was successfully deleted.
 */
class DeleteFleetSuccessItem private constructor(builder: BuilderImpl) {
    /**
     * The current state of the EC2 Fleet.
     */
    val currentFleetState: FleetStateCode? = builder.currentFleetState
    /**
     * The ID of the EC2 Fleet.
     */
    val fleetId: String? = builder.fleetId
    /**
     * The previous state of the EC2 Fleet.
     */
    val previousFleetState: FleetStateCode? = builder.previousFleetState

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DeleteFleetSuccessItem = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DeleteFleetSuccessItem(")
        append("currentFleetState=$currentFleetState,")
        append("fleetId=$fleetId,")
        append("previousFleetState=$previousFleetState)")
    }

    override fun hashCode(): kotlin.Int {
        var result = currentFleetState?.hashCode() ?: 0
        result = 31 * result + (fleetId?.hashCode() ?: 0)
        result = 31 * result + (previousFleetState?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DeleteFleetSuccessItem

        if (currentFleetState != other.currentFleetState) return false
        if (fleetId != other.fleetId) return false
        if (previousFleetState != other.previousFleetState) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DeleteFleetSuccessItem = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DeleteFleetSuccessItem
        /**
         * The current state of the EC2 Fleet.
         */
        fun currentFleetState(currentFleetState: FleetStateCode): FluentBuilder
        /**
         * The ID of the EC2 Fleet.
         */
        fun fleetId(fleetId: String): FluentBuilder
        /**
         * The previous state of the EC2 Fleet.
         */
        fun previousFleetState(previousFleetState: FleetStateCode): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The current state of the EC2 Fleet.
         */
        var currentFleetState: FleetStateCode?
        /**
         * The ID of the EC2 Fleet.
         */
        var fleetId: String?
        /**
         * The previous state of the EC2 Fleet.
         */
        var previousFleetState: FleetStateCode?

        fun build(): DeleteFleetSuccessItem
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var currentFleetState: FleetStateCode? = null
        override var fleetId: String? = null
        override var previousFleetState: FleetStateCode? = null

        constructor(x: DeleteFleetSuccessItem) : this() {
            this.currentFleetState = x.currentFleetState
            this.fleetId = x.fleetId
            this.previousFleetState = x.previousFleetState
        }

        override fun build(): DeleteFleetSuccessItem = DeleteFleetSuccessItem(this)
        override fun currentFleetState(currentFleetState: FleetStateCode): FluentBuilder = apply { this.currentFleetState = currentFleetState }
        override fun fleetId(fleetId: String): FluentBuilder = apply { this.fleetId = fleetId }
        override fun previousFleetState(previousFleetState: FleetStateCode): FluentBuilder = apply { this.previousFleetState = previousFleetState }
    }
}
