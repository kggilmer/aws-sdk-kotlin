// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class DescribeFpgaImagesRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The filters.
     * create-time - The creation time of the AFI.
     * fpga-image-id - The FPGA image identifier (AFI ID).
     * fpga-image-global-id - The global FPGA image identifier (AGFI ID).
     * name - The name of the AFI.
     * owner-id - The Amazon Web Services account ID of the AFI owner.
     * product-code - The product code.
     * shell-version - The version of the Amazon Web Services Shell that was used to create the bitstream.
     * state - The state of the AFI (pending | failed | available | unavailable).
     * tag:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
     * For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
     * tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
     * update-time - The time of the most recent update.
     */
    val filters: List<Filter>? = builder.filters
    /**
     * The AFI IDs.
     */
    val fpgaImageIds: List<String>? = builder.fpgaImageIds
    /**
     * The maximum number of results to return in a single call.
     */
    val maxResults: Int? = builder.maxResults
    /**
     * The token to retrieve the next page of results.
     */
    val nextToken: String? = builder.nextToken
    /**
     * Filters the AFI by owner. Specify an Amazon Web Services account ID, self
     * (owner is the sender of the request), or an Amazon Web Services owner alias (valid values are
     * amazon | aws-marketplace).
     */
    val owners: List<String>? = builder.owners

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DescribeFpgaImagesRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DescribeFpgaImagesRequest(")
        append("dryRun=$dryRun,")
        append("filters=$filters,")
        append("fpgaImageIds=$fpgaImageIds,")
        append("maxResults=$maxResults,")
        append("nextToken=$nextToken,")
        append("owners=$owners)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (filters?.hashCode() ?: 0)
        result = 31 * result + (fpgaImageIds?.hashCode() ?: 0)
        result = 31 * result + (maxResults ?: 0)
        result = 31 * result + (nextToken?.hashCode() ?: 0)
        result = 31 * result + (owners?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DescribeFpgaImagesRequest

        if (dryRun != other.dryRun) return false
        if (filters != other.filters) return false
        if (fpgaImageIds != other.fpgaImageIds) return false
        if (maxResults != other.maxResults) return false
        if (nextToken != other.nextToken) return false
        if (owners != other.owners) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DescribeFpgaImagesRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DescribeFpgaImagesRequest
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The filters.
         * create-time - The creation time of the AFI.
         * fpga-image-id - The FPGA image identifier (AFI ID).
         * fpga-image-global-id - The global FPGA image identifier (AGFI ID).
         * name - The name of the AFI.
         * owner-id - The Amazon Web Services account ID of the AFI owner.
         * product-code - The product code.
         * shell-version - The version of the Amazon Web Services Shell that was used to create the bitstream.
         * state - The state of the AFI (pending | failed | available | unavailable).
         * tag:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
         * For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
         * tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
         * update-time - The time of the most recent update.
         */
        fun filters(filters: List<Filter>): FluentBuilder
        /**
         * The AFI IDs.
         */
        fun fpgaImageIds(fpgaImageIds: List<String>): FluentBuilder
        /**
         * The maximum number of results to return in a single call.
         */
        fun maxResults(maxResults: Int): FluentBuilder
        /**
         * The token to retrieve the next page of results.
         */
        fun nextToken(nextToken: String): FluentBuilder
        /**
         * Filters the AFI by owner. Specify an Amazon Web Services account ID, self
         * (owner is the sender of the request), or an Amazon Web Services owner alias (valid values are
         * amazon | aws-marketplace).
         */
        fun owners(owners: List<String>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The filters.
         * create-time - The creation time of the AFI.
         * fpga-image-id - The FPGA image identifier (AFI ID).
         * fpga-image-global-id - The global FPGA image identifier (AGFI ID).
         * name - The name of the AFI.
         * owner-id - The Amazon Web Services account ID of the AFI owner.
         * product-code - The product code.
         * shell-version - The version of the Amazon Web Services Shell that was used to create the bitstream.
         * state - The state of the AFI (pending | failed | available | unavailable).
         * tag:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
         * For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
         * tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
         * update-time - The time of the most recent update.
         */
        var filters: List<Filter>?
        /**
         * The AFI IDs.
         */
        var fpgaImageIds: List<String>?
        /**
         * The maximum number of results to return in a single call.
         */
        var maxResults: Int?
        /**
         * The token to retrieve the next page of results.
         */
        var nextToken: String?
        /**
         * Filters the AFI by owner. Specify an Amazon Web Services account ID, self
         * (owner is the sender of the request), or an Amazon Web Services owner alias (valid values are
         * amazon | aws-marketplace).
         */
        var owners: List<String>?

        fun build(): DescribeFpgaImagesRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var filters: List<Filter>? = null
        override var fpgaImageIds: List<String>? = null
        override var maxResults: Int? = null
        override var nextToken: String? = null
        override var owners: List<String>? = null

        constructor(x: DescribeFpgaImagesRequest) : this() {
            this.dryRun = x.dryRun
            this.filters = x.filters
            this.fpgaImageIds = x.fpgaImageIds
            this.maxResults = x.maxResults
            this.nextToken = x.nextToken
            this.owners = x.owners
        }

        override fun build(): DescribeFpgaImagesRequest = DescribeFpgaImagesRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun filters(filters: List<Filter>): FluentBuilder = apply { this.filters = filters }
        override fun fpgaImageIds(fpgaImageIds: List<String>): FluentBuilder = apply { this.fpgaImageIds = fpgaImageIds }
        override fun maxResults(maxResults: Int): FluentBuilder = apply { this.maxResults = maxResults }
        override fun nextToken(nextToken: String): FluentBuilder = apply { this.nextToken = nextToken }
        override fun owners(owners: List<String>): FluentBuilder = apply { this.owners = owners }
    }
}
