// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class DescribeImportImageTasksRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * Filter tasks using the task-state filter and one of the following values: active,
     * completed, deleting, or deleted.
     */
    val filters: List<Filter>? = builder.filters
    /**
     * The IDs of the import image tasks.
     */
    val importTaskIds: List<String>? = builder.importTaskIds
    /**
     * The maximum number of results to return in a single call.
     */
    val maxResults: Int? = builder.maxResults
    /**
     * A token that indicates the next page of results.
     */
    val nextToken: String? = builder.nextToken

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DescribeImportImageTasksRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DescribeImportImageTasksRequest(")
        append("dryRun=$dryRun,")
        append("filters=$filters,")
        append("importTaskIds=$importTaskIds,")
        append("maxResults=$maxResults,")
        append("nextToken=$nextToken)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (filters?.hashCode() ?: 0)
        result = 31 * result + (importTaskIds?.hashCode() ?: 0)
        result = 31 * result + (maxResults ?: 0)
        result = 31 * result + (nextToken?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DescribeImportImageTasksRequest

        if (dryRun != other.dryRun) return false
        if (filters != other.filters) return false
        if (importTaskIds != other.importTaskIds) return false
        if (maxResults != other.maxResults) return false
        if (nextToken != other.nextToken) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DescribeImportImageTasksRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DescribeImportImageTasksRequest
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * Filter tasks using the task-state filter and one of the following values: active,
         * completed, deleting, or deleted.
         */
        fun filters(filters: List<Filter>): FluentBuilder
        /**
         * The IDs of the import image tasks.
         */
        fun importTaskIds(importTaskIds: List<String>): FluentBuilder
        /**
         * The maximum number of results to return in a single call.
         */
        fun maxResults(maxResults: Int): FluentBuilder
        /**
         * A token that indicates the next page of results.
         */
        fun nextToken(nextToken: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * Filter tasks using the task-state filter and one of the following values: active,
         * completed, deleting, or deleted.
         */
        var filters: List<Filter>?
        /**
         * The IDs of the import image tasks.
         */
        var importTaskIds: List<String>?
        /**
         * The maximum number of results to return in a single call.
         */
        var maxResults: Int?
        /**
         * A token that indicates the next page of results.
         */
        var nextToken: String?

        fun build(): DescribeImportImageTasksRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var filters: List<Filter>? = null
        override var importTaskIds: List<String>? = null
        override var maxResults: Int? = null
        override var nextToken: String? = null

        constructor(x: DescribeImportImageTasksRequest) : this() {
            this.dryRun = x.dryRun
            this.filters = x.filters
            this.importTaskIds = x.importTaskIds
            this.maxResults = x.maxResults
            this.nextToken = x.nextToken
        }

        override fun build(): DescribeImportImageTasksRequest = DescribeImportImageTasksRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun filters(filters: List<Filter>): FluentBuilder = apply { this.filters = filters }
        override fun importTaskIds(importTaskIds: List<String>): FluentBuilder = apply { this.importTaskIds = importTaskIds }
        override fun maxResults(maxResults: Int): FluentBuilder = apply { this.maxResults = maxResults }
        override fun nextToken(nextToken: String): FluentBuilder = apply { this.nextToken = nextToken }
    }
}
