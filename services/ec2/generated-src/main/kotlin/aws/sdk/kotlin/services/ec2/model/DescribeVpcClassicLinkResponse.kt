// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class DescribeVpcClassicLinkResponse private constructor(builder: BuilderImpl) {
    /**
     * The ClassicLink status of one or more VPCs.
     */
    val vpcs: List<VpcClassicLink>? = builder.vpcs

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DescribeVpcClassicLinkResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DescribeVpcClassicLinkResponse(")
        append("vpcs=$vpcs)")
    }

    override fun hashCode(): kotlin.Int {
        var result = vpcs?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DescribeVpcClassicLinkResponse

        if (vpcs != other.vpcs) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DescribeVpcClassicLinkResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DescribeVpcClassicLinkResponse
        /**
         * The ClassicLink status of one or more VPCs.
         */
        fun vpcs(vpcs: List<VpcClassicLink>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The ClassicLink status of one or more VPCs.
         */
        var vpcs: List<VpcClassicLink>?

        fun build(): DescribeVpcClassicLinkResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var vpcs: List<VpcClassicLink>? = null

        constructor(x: DescribeVpcClassicLinkResponse) : this() {
            this.vpcs = x.vpcs
        }

        override fun build(): DescribeVpcClassicLinkResponse = DescribeVpcClassicLinkResponse(this)
        override fun vpcs(vpcs: List<VpcClassicLink>): FluentBuilder = apply { this.vpcs = vpcs }
    }
}
