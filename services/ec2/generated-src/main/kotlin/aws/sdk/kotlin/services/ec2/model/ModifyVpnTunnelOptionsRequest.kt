// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ModifyVpnTunnelOptionsRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually
     * making the request, and provides an error response. If you have the required
     * permissions, the error response is DryRunOperation. Otherwise, it is
     * UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The tunnel options to modify.
     */
    val tunnelOptions: ModifyVpnTunnelOptionsSpecification? = builder.tunnelOptions
    /**
     * The ID of the Amazon Web Services Site-to-Site VPN connection.
     */
    val vpnConnectionId: String? = builder.vpnConnectionId
    /**
     * The external IP address of the VPN tunnel.
     */
    val vpnTunnelOutsideIpAddress: String? = builder.vpnTunnelOutsideIpAddress

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ModifyVpnTunnelOptionsRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyVpnTunnelOptionsRequest(")
        append("dryRun=$dryRun,")
        append("tunnelOptions=$tunnelOptions,")
        append("vpnConnectionId=$vpnConnectionId,")
        append("vpnTunnelOutsideIpAddress=$vpnTunnelOutsideIpAddress)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (tunnelOptions?.hashCode() ?: 0)
        result = 31 * result + (vpnConnectionId?.hashCode() ?: 0)
        result = 31 * result + (vpnTunnelOutsideIpAddress?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ModifyVpnTunnelOptionsRequest

        if (dryRun != other.dryRun) return false
        if (tunnelOptions != other.tunnelOptions) return false
        if (vpnConnectionId != other.vpnConnectionId) return false
        if (vpnTunnelOutsideIpAddress != other.vpnTunnelOutsideIpAddress) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ModifyVpnTunnelOptionsRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ModifyVpnTunnelOptionsRequest
        /**
         * Checks whether you have the required permissions for the action, without actually
         * making the request, and provides an error response. If you have the required
         * permissions, the error response is DryRunOperation. Otherwise, it is
         * UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The tunnel options to modify.
         */
        fun tunnelOptions(tunnelOptions: ModifyVpnTunnelOptionsSpecification): FluentBuilder
        /**
         * The ID of the Amazon Web Services Site-to-Site VPN connection.
         */
        fun vpnConnectionId(vpnConnectionId: String): FluentBuilder
        /**
         * The external IP address of the VPN tunnel.
         */
        fun vpnTunnelOutsideIpAddress(vpnTunnelOutsideIpAddress: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually
         * making the request, and provides an error response. If you have the required
         * permissions, the error response is DryRunOperation. Otherwise, it is
         * UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The tunnel options to modify.
         */
        var tunnelOptions: ModifyVpnTunnelOptionsSpecification?
        /**
         * The ID of the Amazon Web Services Site-to-Site VPN connection.
         */
        var vpnConnectionId: String?
        /**
         * The external IP address of the VPN tunnel.
         */
        var vpnTunnelOutsideIpAddress: String?

        fun build(): ModifyVpnTunnelOptionsRequest
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.ModifyVpnTunnelOptionsSpecification] inside the given [block]
         */
        fun tunnelOptions(block: ModifyVpnTunnelOptionsSpecification.DslBuilder.() -> kotlin.Unit) {
            this.tunnelOptions = ModifyVpnTunnelOptionsSpecification.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var tunnelOptions: ModifyVpnTunnelOptionsSpecification? = null
        override var vpnConnectionId: String? = null
        override var vpnTunnelOutsideIpAddress: String? = null

        constructor(x: ModifyVpnTunnelOptionsRequest) : this() {
            this.dryRun = x.dryRun
            this.tunnelOptions = x.tunnelOptions
            this.vpnConnectionId = x.vpnConnectionId
            this.vpnTunnelOutsideIpAddress = x.vpnTunnelOutsideIpAddress
        }

        override fun build(): ModifyVpnTunnelOptionsRequest = ModifyVpnTunnelOptionsRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun tunnelOptions(tunnelOptions: ModifyVpnTunnelOptionsSpecification): FluentBuilder = apply { this.tunnelOptions = tunnelOptions }
        override fun vpnConnectionId(vpnConnectionId: String): FluentBuilder = apply { this.vpnConnectionId = vpnConnectionId }
        override fun vpnTunnelOutsideIpAddress(vpnTunnelOutsideIpAddress: String): FluentBuilder = apply { this.vpnTunnelOutsideIpAddress = vpnTunnelOutsideIpAddress }
    }
}
