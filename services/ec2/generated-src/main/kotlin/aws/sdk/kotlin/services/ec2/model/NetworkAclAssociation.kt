// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes an association between a network ACL and a subnet.
 */
class NetworkAclAssociation private constructor(builder: BuilderImpl) {
    /**
     * The ID of the association between a network ACL and a subnet.
     */
    val networkAclAssociationId: String? = builder.networkAclAssociationId
    /**
     * The ID of the network ACL.
     */
    val networkAclId: String? = builder.networkAclId
    /**
     * The ID of the subnet.
     */
    val subnetId: String? = builder.subnetId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): NetworkAclAssociation = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("NetworkAclAssociation(")
        append("networkAclAssociationId=$networkAclAssociationId,")
        append("networkAclId=$networkAclId,")
        append("subnetId=$subnetId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = networkAclAssociationId?.hashCode() ?: 0
        result = 31 * result + (networkAclId?.hashCode() ?: 0)
        result = 31 * result + (subnetId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as NetworkAclAssociation

        if (networkAclAssociationId != other.networkAclAssociationId) return false
        if (networkAclId != other.networkAclId) return false
        if (subnetId != other.subnetId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): NetworkAclAssociation = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): NetworkAclAssociation
        /**
         * The ID of the association between a network ACL and a subnet.
         */
        fun networkAclAssociationId(networkAclAssociationId: String): FluentBuilder
        /**
         * The ID of the network ACL.
         */
        fun networkAclId(networkAclId: String): FluentBuilder
        /**
         * The ID of the subnet.
         */
        fun subnetId(subnetId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The ID of the association between a network ACL and a subnet.
         */
        var networkAclAssociationId: String?
        /**
         * The ID of the network ACL.
         */
        var networkAclId: String?
        /**
         * The ID of the subnet.
         */
        var subnetId: String?

        fun build(): NetworkAclAssociation
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var networkAclAssociationId: String? = null
        override var networkAclId: String? = null
        override var subnetId: String? = null

        constructor(x: NetworkAclAssociation) : this() {
            this.networkAclAssociationId = x.networkAclAssociationId
            this.networkAclId = x.networkAclId
            this.subnetId = x.subnetId
        }

        override fun build(): NetworkAclAssociation = NetworkAclAssociation(this)
        override fun networkAclAssociationId(networkAclAssociationId: String): FluentBuilder = apply { this.networkAclAssociationId = networkAclAssociationId }
        override fun networkAclId(networkAclId: String): FluentBuilder = apply { this.networkAclId = networkAclId }
        override fun subnetId(subnetId: String): FluentBuilder = apply { this.subnetId = subnetId }
    }
}
