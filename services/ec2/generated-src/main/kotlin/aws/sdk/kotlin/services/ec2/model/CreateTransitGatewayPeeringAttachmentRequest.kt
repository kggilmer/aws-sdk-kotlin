// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class CreateTransitGatewayPeeringAttachmentRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The ID of the Amazon Web Services account that owns the peer transit gateway.
     */
    val peerAccountId: String? = builder.peerAccountId
    /**
     * The Region where the peer transit gateway is located.
     */
    val peerRegion: String? = builder.peerRegion
    /**
     * The ID of the peer transit gateway with which to create the peering attachment.
     */
    val peerTransitGatewayId: String? = builder.peerTransitGatewayId
    /**
     * The tags to apply to the transit gateway peering attachment.
     */
    val tagSpecifications: List<TagSpecification>? = builder.tagSpecifications
    /**
     * The ID of the transit gateway.
     */
    val transitGatewayId: String? = builder.transitGatewayId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CreateTransitGatewayPeeringAttachmentRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CreateTransitGatewayPeeringAttachmentRequest(")
        append("dryRun=$dryRun,")
        append("peerAccountId=$peerAccountId,")
        append("peerRegion=$peerRegion,")
        append("peerTransitGatewayId=$peerTransitGatewayId,")
        append("tagSpecifications=$tagSpecifications,")
        append("transitGatewayId=$transitGatewayId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (peerAccountId?.hashCode() ?: 0)
        result = 31 * result + (peerRegion?.hashCode() ?: 0)
        result = 31 * result + (peerTransitGatewayId?.hashCode() ?: 0)
        result = 31 * result + (tagSpecifications?.hashCode() ?: 0)
        result = 31 * result + (transitGatewayId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CreateTransitGatewayPeeringAttachmentRequest

        if (dryRun != other.dryRun) return false
        if (peerAccountId != other.peerAccountId) return false
        if (peerRegion != other.peerRegion) return false
        if (peerTransitGatewayId != other.peerTransitGatewayId) return false
        if (tagSpecifications != other.tagSpecifications) return false
        if (transitGatewayId != other.transitGatewayId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CreateTransitGatewayPeeringAttachmentRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CreateTransitGatewayPeeringAttachmentRequest
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The ID of the Amazon Web Services account that owns the peer transit gateway.
         */
        fun peerAccountId(peerAccountId: String): FluentBuilder
        /**
         * The Region where the peer transit gateway is located.
         */
        fun peerRegion(peerRegion: String): FluentBuilder
        /**
         * The ID of the peer transit gateway with which to create the peering attachment.
         */
        fun peerTransitGatewayId(peerTransitGatewayId: String): FluentBuilder
        /**
         * The tags to apply to the transit gateway peering attachment.
         */
        fun tagSpecifications(tagSpecifications: List<TagSpecification>): FluentBuilder
        /**
         * The ID of the transit gateway.
         */
        fun transitGatewayId(transitGatewayId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The ID of the Amazon Web Services account that owns the peer transit gateway.
         */
        var peerAccountId: String?
        /**
         * The Region where the peer transit gateway is located.
         */
        var peerRegion: String?
        /**
         * The ID of the peer transit gateway with which to create the peering attachment.
         */
        var peerTransitGatewayId: String?
        /**
         * The tags to apply to the transit gateway peering attachment.
         */
        var tagSpecifications: List<TagSpecification>?
        /**
         * The ID of the transit gateway.
         */
        var transitGatewayId: String?

        fun build(): CreateTransitGatewayPeeringAttachmentRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var peerAccountId: String? = null
        override var peerRegion: String? = null
        override var peerTransitGatewayId: String? = null
        override var tagSpecifications: List<TagSpecification>? = null
        override var transitGatewayId: String? = null

        constructor(x: CreateTransitGatewayPeeringAttachmentRequest) : this() {
            this.dryRun = x.dryRun
            this.peerAccountId = x.peerAccountId
            this.peerRegion = x.peerRegion
            this.peerTransitGatewayId = x.peerTransitGatewayId
            this.tagSpecifications = x.tagSpecifications
            this.transitGatewayId = x.transitGatewayId
        }

        override fun build(): CreateTransitGatewayPeeringAttachmentRequest = CreateTransitGatewayPeeringAttachmentRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun peerAccountId(peerAccountId: String): FluentBuilder = apply { this.peerAccountId = peerAccountId }
        override fun peerRegion(peerRegion: String): FluentBuilder = apply { this.peerRegion = peerRegion }
        override fun peerTransitGatewayId(peerTransitGatewayId: String): FluentBuilder = apply { this.peerTransitGatewayId = peerTransitGatewayId }
        override fun tagSpecifications(tagSpecifications: List<TagSpecification>): FluentBuilder = apply { this.tagSpecifications = tagSpecifications }
        override fun transitGatewayId(transitGatewayId: String): FluentBuilder = apply { this.transitGatewayId = transitGatewayId }
    }
}
