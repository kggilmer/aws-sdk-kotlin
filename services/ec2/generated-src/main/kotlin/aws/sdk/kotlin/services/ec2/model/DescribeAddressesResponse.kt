// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class DescribeAddressesResponse private constructor(builder: BuilderImpl) {
    /**
     * Information about the Elastic IP addresses.
     */
    val addresses: List<Address>? = builder.addresses

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DescribeAddressesResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DescribeAddressesResponse(")
        append("addresses=$addresses)")
    }

    override fun hashCode(): kotlin.Int {
        var result = addresses?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DescribeAddressesResponse

        if (addresses != other.addresses) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DescribeAddressesResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DescribeAddressesResponse
        /**
         * Information about the Elastic IP addresses.
         */
        fun addresses(addresses: List<Address>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Information about the Elastic IP addresses.
         */
        var addresses: List<Address>?

        fun build(): DescribeAddressesResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var addresses: List<Address>? = null

        constructor(x: DescribeAddressesResponse) : this() {
            this.addresses = x.addresses
        }

        override fun build(): DescribeAddressesResponse = DescribeAddressesResponse(this)
        override fun addresses(addresses: List<Address>): FluentBuilder = apply { this.addresses = addresses }
    }
}
