// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * The response information for license configurations.
 */
class ImportImageLicenseConfigurationResponse private constructor(builder: BuilderImpl) {
    /**
     * The ARN of a license configuration.
     */
    val licenseConfigurationArn: String? = builder.licenseConfigurationArn

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ImportImageLicenseConfigurationResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ImportImageLicenseConfigurationResponse(")
        append("licenseConfigurationArn=$licenseConfigurationArn)")
    }

    override fun hashCode(): kotlin.Int {
        var result = licenseConfigurationArn?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ImportImageLicenseConfigurationResponse

        if (licenseConfigurationArn != other.licenseConfigurationArn) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ImportImageLicenseConfigurationResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ImportImageLicenseConfigurationResponse
        /**
         * The ARN of a license configuration.
         */
        fun licenseConfigurationArn(licenseConfigurationArn: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The ARN of a license configuration.
         */
        var licenseConfigurationArn: String?

        fun build(): ImportImageLicenseConfigurationResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var licenseConfigurationArn: String? = null

        constructor(x: ImportImageLicenseConfigurationResponse) : this() {
            this.licenseConfigurationArn = x.licenseConfigurationArn
        }

        override fun build(): ImportImageLicenseConfigurationResponse = ImportImageLicenseConfigurationResponse(this)
        override fun licenseConfigurationArn(licenseConfigurationArn: String): FluentBuilder = apply { this.licenseConfigurationArn = licenseConfigurationArn }
    }
}
