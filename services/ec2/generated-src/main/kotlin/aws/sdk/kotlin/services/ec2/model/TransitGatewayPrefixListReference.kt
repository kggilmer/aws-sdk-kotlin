// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a prefix list reference.
 */
class TransitGatewayPrefixListReference private constructor(builder: BuilderImpl) {
    /**
     * Indicates whether traffic that matches this route is dropped.
     */
    val blackhole: Boolean? = builder.blackhole
    /**
     * The ID of the prefix list.
     */
    val prefixListId: String? = builder.prefixListId
    /**
     * The ID of the prefix list owner.
     */
    val prefixListOwnerId: String? = builder.prefixListOwnerId
    /**
     * The state of the prefix list reference.
     */
    val state: TransitGatewayPrefixListReferenceState? = builder.state
    /**
     * Information about the transit gateway attachment.
     */
    val transitGatewayAttachment: TransitGatewayPrefixListAttachment? = builder.transitGatewayAttachment
    /**
     * The ID of the transit gateway route table.
     */
    val transitGatewayRouteTableId: String? = builder.transitGatewayRouteTableId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): TransitGatewayPrefixListReference = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("TransitGatewayPrefixListReference(")
        append("blackhole=$blackhole,")
        append("prefixListId=$prefixListId,")
        append("prefixListOwnerId=$prefixListOwnerId,")
        append("state=$state,")
        append("transitGatewayAttachment=$transitGatewayAttachment,")
        append("transitGatewayRouteTableId=$transitGatewayRouteTableId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = blackhole?.hashCode() ?: 0
        result = 31 * result + (prefixListId?.hashCode() ?: 0)
        result = 31 * result + (prefixListOwnerId?.hashCode() ?: 0)
        result = 31 * result + (state?.hashCode() ?: 0)
        result = 31 * result + (transitGatewayAttachment?.hashCode() ?: 0)
        result = 31 * result + (transitGatewayRouteTableId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as TransitGatewayPrefixListReference

        if (blackhole != other.blackhole) return false
        if (prefixListId != other.prefixListId) return false
        if (prefixListOwnerId != other.prefixListOwnerId) return false
        if (state != other.state) return false
        if (transitGatewayAttachment != other.transitGatewayAttachment) return false
        if (transitGatewayRouteTableId != other.transitGatewayRouteTableId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): TransitGatewayPrefixListReference = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): TransitGatewayPrefixListReference
        /**
         * Indicates whether traffic that matches this route is dropped.
         */
        fun blackhole(blackhole: Boolean): FluentBuilder
        /**
         * The ID of the prefix list.
         */
        fun prefixListId(prefixListId: String): FluentBuilder
        /**
         * The ID of the prefix list owner.
         */
        fun prefixListOwnerId(prefixListOwnerId: String): FluentBuilder
        /**
         * The state of the prefix list reference.
         */
        fun state(state: TransitGatewayPrefixListReferenceState): FluentBuilder
        /**
         * Information about the transit gateway attachment.
         */
        fun transitGatewayAttachment(transitGatewayAttachment: TransitGatewayPrefixListAttachment): FluentBuilder
        /**
         * The ID of the transit gateway route table.
         */
        fun transitGatewayRouteTableId(transitGatewayRouteTableId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Indicates whether traffic that matches this route is dropped.
         */
        var blackhole: Boolean?
        /**
         * The ID of the prefix list.
         */
        var prefixListId: String?
        /**
         * The ID of the prefix list owner.
         */
        var prefixListOwnerId: String?
        /**
         * The state of the prefix list reference.
         */
        var state: TransitGatewayPrefixListReferenceState?
        /**
         * Information about the transit gateway attachment.
         */
        var transitGatewayAttachment: TransitGatewayPrefixListAttachment?
        /**
         * The ID of the transit gateway route table.
         */
        var transitGatewayRouteTableId: String?

        fun build(): TransitGatewayPrefixListReference
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.TransitGatewayPrefixListAttachment] inside the given [block]
         */
        fun transitGatewayAttachment(block: TransitGatewayPrefixListAttachment.DslBuilder.() -> kotlin.Unit) {
            this.transitGatewayAttachment = TransitGatewayPrefixListAttachment.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var blackhole: Boolean? = null
        override var prefixListId: String? = null
        override var prefixListOwnerId: String? = null
        override var state: TransitGatewayPrefixListReferenceState? = null
        override var transitGatewayAttachment: TransitGatewayPrefixListAttachment? = null
        override var transitGatewayRouteTableId: String? = null

        constructor(x: TransitGatewayPrefixListReference) : this() {
            this.blackhole = x.blackhole
            this.prefixListId = x.prefixListId
            this.prefixListOwnerId = x.prefixListOwnerId
            this.state = x.state
            this.transitGatewayAttachment = x.transitGatewayAttachment
            this.transitGatewayRouteTableId = x.transitGatewayRouteTableId
        }

        override fun build(): TransitGatewayPrefixListReference = TransitGatewayPrefixListReference(this)
        override fun blackhole(blackhole: Boolean): FluentBuilder = apply { this.blackhole = blackhole }
        override fun prefixListId(prefixListId: String): FluentBuilder = apply { this.prefixListId = prefixListId }
        override fun prefixListOwnerId(prefixListOwnerId: String): FluentBuilder = apply { this.prefixListOwnerId = prefixListOwnerId }
        override fun state(state: TransitGatewayPrefixListReferenceState): FluentBuilder = apply { this.state = state }
        override fun transitGatewayAttachment(transitGatewayAttachment: TransitGatewayPrefixListAttachment): FluentBuilder = apply { this.transitGatewayAttachment = transitGatewayAttachment }
        override fun transitGatewayRouteTableId(transitGatewayRouteTableId: String): FluentBuilder = apply { this.transitGatewayRouteTableId = transitGatewayRouteTableId }
    }
}
