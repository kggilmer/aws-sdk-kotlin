// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes an elastic GPU.
 */
class ElasticGpuSpecificationResponse private constructor(builder: BuilderImpl) {
    /**
     * The elastic GPU type.
     */
    val type: String? = builder.type

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ElasticGpuSpecificationResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ElasticGpuSpecificationResponse(")
        append("type=$type)")
    }

    override fun hashCode(): kotlin.Int {
        var result = type?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ElasticGpuSpecificationResponse

        if (type != other.type) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ElasticGpuSpecificationResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ElasticGpuSpecificationResponse
        /**
         * The elastic GPU type.
         */
        fun type(type: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The elastic GPU type.
         */
        var type: String?

        fun build(): ElasticGpuSpecificationResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var type: String? = null

        constructor(x: ElasticGpuSpecificationResponse) : this() {
            this.type = x.type
        }

        override fun build(): ElasticGpuSpecificationResponse = ElasticGpuSpecificationResponse(this)
        override fun type(type: String): FluentBuilder = apply { this.type = type }
    }
}
