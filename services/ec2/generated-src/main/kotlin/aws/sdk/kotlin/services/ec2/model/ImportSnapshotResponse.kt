// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ImportSnapshotResponse private constructor(builder: BuilderImpl) {
    /**
     * A description of the import snapshot task.
     */
    val description: String? = builder.description
    /**
     * The ID of the import snapshot task.
     */
    val importTaskId: String? = builder.importTaskId
    /**
     * Information about the import snapshot task.
     */
    val snapshotTaskDetail: SnapshotTaskDetail? = builder.snapshotTaskDetail
    /**
     * Any tags assigned to the import snapshot task.
     */
    val tags: List<Tag>? = builder.tags

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ImportSnapshotResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ImportSnapshotResponse(")
        append("description=$description,")
        append("importTaskId=$importTaskId,")
        append("snapshotTaskDetail=$snapshotTaskDetail,")
        append("tags=$tags)")
    }

    override fun hashCode(): kotlin.Int {
        var result = description?.hashCode() ?: 0
        result = 31 * result + (importTaskId?.hashCode() ?: 0)
        result = 31 * result + (snapshotTaskDetail?.hashCode() ?: 0)
        result = 31 * result + (tags?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ImportSnapshotResponse

        if (description != other.description) return false
        if (importTaskId != other.importTaskId) return false
        if (snapshotTaskDetail != other.snapshotTaskDetail) return false
        if (tags != other.tags) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ImportSnapshotResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ImportSnapshotResponse
        /**
         * A description of the import snapshot task.
         */
        fun description(description: String): FluentBuilder
        /**
         * The ID of the import snapshot task.
         */
        fun importTaskId(importTaskId: String): FluentBuilder
        /**
         * Information about the import snapshot task.
         */
        fun snapshotTaskDetail(snapshotTaskDetail: SnapshotTaskDetail): FluentBuilder
        /**
         * Any tags assigned to the import snapshot task.
         */
        fun tags(tags: List<Tag>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * A description of the import snapshot task.
         */
        var description: String?
        /**
         * The ID of the import snapshot task.
         */
        var importTaskId: String?
        /**
         * Information about the import snapshot task.
         */
        var snapshotTaskDetail: SnapshotTaskDetail?
        /**
         * Any tags assigned to the import snapshot task.
         */
        var tags: List<Tag>?

        fun build(): ImportSnapshotResponse
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.SnapshotTaskDetail] inside the given [block]
         */
        fun snapshotTaskDetail(block: SnapshotTaskDetail.DslBuilder.() -> kotlin.Unit) {
            this.snapshotTaskDetail = SnapshotTaskDetail.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var description: String? = null
        override var importTaskId: String? = null
        override var snapshotTaskDetail: SnapshotTaskDetail? = null
        override var tags: List<Tag>? = null

        constructor(x: ImportSnapshotResponse) : this() {
            this.description = x.description
            this.importTaskId = x.importTaskId
            this.snapshotTaskDetail = x.snapshotTaskDetail
            this.tags = x.tags
        }

        override fun build(): ImportSnapshotResponse = ImportSnapshotResponse(this)
        override fun description(description: String): FluentBuilder = apply { this.description = description }
        override fun importTaskId(importTaskId: String): FluentBuilder = apply { this.importTaskId = importTaskId }
        override fun snapshotTaskDetail(snapshotTaskDetail: SnapshotTaskDetail): FluentBuilder = apply { this.snapshotTaskDetail = snapshotTaskDetail }
        override fun tags(tags: List<Tag>): FluentBuilder = apply { this.tags = tags }
    }
}
