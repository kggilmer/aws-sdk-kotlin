// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the deregistered  transit gateway multicast group sources.
 */
class TransitGatewayMulticastDeregisteredGroupSources private constructor(builder: BuilderImpl) {
    /**
     * The network interface IDs of the non-registered members.
     */
    val deregisteredNetworkInterfaceIds: List<String>? = builder.deregisteredNetworkInterfaceIds
    /**
     * The IP address assigned to the  transit gateway multicast group.
     */
    val groupIpAddress: String? = builder.groupIpAddress
    /**
     * The ID of the transit gateway multicast domain.
     */
    val transitGatewayMulticastDomainId: String? = builder.transitGatewayMulticastDomainId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): TransitGatewayMulticastDeregisteredGroupSources = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("TransitGatewayMulticastDeregisteredGroupSources(")
        append("deregisteredNetworkInterfaceIds=$deregisteredNetworkInterfaceIds,")
        append("groupIpAddress=$groupIpAddress,")
        append("transitGatewayMulticastDomainId=$transitGatewayMulticastDomainId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = deregisteredNetworkInterfaceIds?.hashCode() ?: 0
        result = 31 * result + (groupIpAddress?.hashCode() ?: 0)
        result = 31 * result + (transitGatewayMulticastDomainId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as TransitGatewayMulticastDeregisteredGroupSources

        if (deregisteredNetworkInterfaceIds != other.deregisteredNetworkInterfaceIds) return false
        if (groupIpAddress != other.groupIpAddress) return false
        if (transitGatewayMulticastDomainId != other.transitGatewayMulticastDomainId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): TransitGatewayMulticastDeregisteredGroupSources = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): TransitGatewayMulticastDeregisteredGroupSources
        /**
         * The network interface IDs of the non-registered members.
         */
        fun deregisteredNetworkInterfaceIds(deregisteredNetworkInterfaceIds: List<String>): FluentBuilder
        /**
         * The IP address assigned to the  transit gateway multicast group.
         */
        fun groupIpAddress(groupIpAddress: String): FluentBuilder
        /**
         * The ID of the transit gateway multicast domain.
         */
        fun transitGatewayMulticastDomainId(transitGatewayMulticastDomainId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The network interface IDs of the non-registered members.
         */
        var deregisteredNetworkInterfaceIds: List<String>?
        /**
         * The IP address assigned to the  transit gateway multicast group.
         */
        var groupIpAddress: String?
        /**
         * The ID of the transit gateway multicast domain.
         */
        var transitGatewayMulticastDomainId: String?

        fun build(): TransitGatewayMulticastDeregisteredGroupSources
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var deregisteredNetworkInterfaceIds: List<String>? = null
        override var groupIpAddress: String? = null
        override var transitGatewayMulticastDomainId: String? = null

        constructor(x: TransitGatewayMulticastDeregisteredGroupSources) : this() {
            this.deregisteredNetworkInterfaceIds = x.deregisteredNetworkInterfaceIds
            this.groupIpAddress = x.groupIpAddress
            this.transitGatewayMulticastDomainId = x.transitGatewayMulticastDomainId
        }

        override fun build(): TransitGatewayMulticastDeregisteredGroupSources = TransitGatewayMulticastDeregisteredGroupSources(this)
        override fun deregisteredNetworkInterfaceIds(deregisteredNetworkInterfaceIds: List<String>): FluentBuilder = apply { this.deregisteredNetworkInterfaceIds = deregisteredNetworkInterfaceIds }
        override fun groupIpAddress(groupIpAddress: String): FluentBuilder = apply { this.groupIpAddress = groupIpAddress }
        override fun transitGatewayMulticastDomainId(transitGatewayMulticastDomainId: String): FluentBuilder = apply { this.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId }
    }
}
