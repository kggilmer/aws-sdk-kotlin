// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Information about the tag keys to deregister for the current Region. You can either specify
 * individual tag keys or deregister all tag keys in the current Region. You must specify either
 * IncludeAllTagsOfInstance or InstanceTagKeys in the request
 */
class DeregisterInstanceTagAttributeRequest private constructor(builder: BuilderImpl) {
    /**
     * Indicates whether to deregister all tag keys in the current Region. Specify false
     * to deregister all tag keys.
     */
    val includeAllTagsOfInstance: Boolean? = builder.includeAllTagsOfInstance
    /**
     * Information about the tag keys to deregister.
     */
    val instanceTagKeys: List<String>? = builder.instanceTagKeys

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DeregisterInstanceTagAttributeRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DeregisterInstanceTagAttributeRequest(")
        append("includeAllTagsOfInstance=$includeAllTagsOfInstance,")
        append("instanceTagKeys=$instanceTagKeys)")
    }

    override fun hashCode(): kotlin.Int {
        var result = includeAllTagsOfInstance?.hashCode() ?: 0
        result = 31 * result + (instanceTagKeys?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DeregisterInstanceTagAttributeRequest

        if (includeAllTagsOfInstance != other.includeAllTagsOfInstance) return false
        if (instanceTagKeys != other.instanceTagKeys) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DeregisterInstanceTagAttributeRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DeregisterInstanceTagAttributeRequest
        /**
         * Indicates whether to deregister all tag keys in the current Region. Specify false
         * to deregister all tag keys.
         */
        fun includeAllTagsOfInstance(includeAllTagsOfInstance: Boolean): FluentBuilder
        /**
         * Information about the tag keys to deregister.
         */
        fun instanceTagKeys(instanceTagKeys: List<String>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Indicates whether to deregister all tag keys in the current Region. Specify false
         * to deregister all tag keys.
         */
        var includeAllTagsOfInstance: Boolean?
        /**
         * Information about the tag keys to deregister.
         */
        var instanceTagKeys: List<String>?

        fun build(): DeregisterInstanceTagAttributeRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var includeAllTagsOfInstance: Boolean? = null
        override var instanceTagKeys: List<String>? = null

        constructor(x: DeregisterInstanceTagAttributeRequest) : this() {
            this.includeAllTagsOfInstance = x.includeAllTagsOfInstance
            this.instanceTagKeys = x.instanceTagKeys
        }

        override fun build(): DeregisterInstanceTagAttributeRequest = DeregisterInstanceTagAttributeRequest(this)
        override fun includeAllTagsOfInstance(includeAllTagsOfInstance: Boolean): FluentBuilder = apply { this.includeAllTagsOfInstance = includeAllTagsOfInstance }
        override fun instanceTagKeys(instanceTagKeys: List<String>): FluentBuilder = apply { this.instanceTagKeys = instanceTagKeys }
    }
}
