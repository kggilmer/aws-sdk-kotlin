// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class DetachVolumeRequest private constructor(builder: BuilderImpl) {
    /**
     * The device name.
     */
    val device: String? = builder.device
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * Forces detachment if the previous detachment attempt did not occur cleanly (for example,
     * logging into an instance, unmounting the volume, and detaching normally). This option can lead
     * to data loss or a corrupted file system. Use this option only as a last resort to detach a
     * volume from a failed instance. The instance won't have an opportunity to flush file system
     * caches or file system metadata. If you use this option, you must perform file system check and
     * repair procedures.
     */
    val force: Boolean? = builder.force
    /**
     * The ID of the instance. If you are detaching a Multi-Attach enabled volume, you must specify an instance ID.
     */
    val instanceId: String? = builder.instanceId
    /**
     * The ID of the volume.
     */
    val volumeId: String? = builder.volumeId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DetachVolumeRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DetachVolumeRequest(")
        append("device=$device,")
        append("dryRun=$dryRun,")
        append("force=$force,")
        append("instanceId=$instanceId,")
        append("volumeId=$volumeId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = device?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (force?.hashCode() ?: 0)
        result = 31 * result + (instanceId?.hashCode() ?: 0)
        result = 31 * result + (volumeId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DetachVolumeRequest

        if (device != other.device) return false
        if (dryRun != other.dryRun) return false
        if (force != other.force) return false
        if (instanceId != other.instanceId) return false
        if (volumeId != other.volumeId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DetachVolumeRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DetachVolumeRequest
        /**
         * The device name.
         */
        fun device(device: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * Forces detachment if the previous detachment attempt did not occur cleanly (for example,
         * logging into an instance, unmounting the volume, and detaching normally). This option can lead
         * to data loss or a corrupted file system. Use this option only as a last resort to detach a
         * volume from a failed instance. The instance won't have an opportunity to flush file system
         * caches or file system metadata. If you use this option, you must perform file system check and
         * repair procedures.
         */
        fun force(force: Boolean): FluentBuilder
        /**
         * The ID of the instance. If you are detaching a Multi-Attach enabled volume, you must specify an instance ID.
         */
        fun instanceId(instanceId: String): FluentBuilder
        /**
         * The ID of the volume.
         */
        fun volumeId(volumeId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The device name.
         */
        var device: String?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * Forces detachment if the previous detachment attempt did not occur cleanly (for example,
         * logging into an instance, unmounting the volume, and detaching normally). This option can lead
         * to data loss or a corrupted file system. Use this option only as a last resort to detach a
         * volume from a failed instance. The instance won't have an opportunity to flush file system
         * caches or file system metadata. If you use this option, you must perform file system check and
         * repair procedures.
         */
        var force: Boolean?
        /**
         * The ID of the instance. If you are detaching a Multi-Attach enabled volume, you must specify an instance ID.
         */
        var instanceId: String?
        /**
         * The ID of the volume.
         */
        var volumeId: String?

        fun build(): DetachVolumeRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var device: String? = null
        override var dryRun: Boolean? = null
        override var force: Boolean? = null
        override var instanceId: String? = null
        override var volumeId: String? = null

        constructor(x: DetachVolumeRequest) : this() {
            this.device = x.device
            this.dryRun = x.dryRun
            this.force = x.force
            this.instanceId = x.instanceId
            this.volumeId = x.volumeId
        }

        override fun build(): DetachVolumeRequest = DetachVolumeRequest(this)
        override fun device(device: String): FluentBuilder = apply { this.device = device }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun force(force: Boolean): FluentBuilder = apply { this.force = force }
        override fun instanceId(instanceId: String): FluentBuilder = apply { this.instanceId = instanceId }
        override fun volumeId(volumeId: String): FluentBuilder = apply { this.volumeId = volumeId }
    }
}
