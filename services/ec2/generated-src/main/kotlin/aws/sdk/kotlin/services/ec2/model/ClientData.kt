// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model

import aws.smithy.kotlin.runtime.time.Instant

/**
 * Describes the client-specific data.
 */
class ClientData private constructor(builder: BuilderImpl) {
    /**
     * A user-defined comment about the disk upload.
     */
    val comment: String? = builder.comment
    /**
     * The time that the disk upload ends.
     */
    val uploadEnd: Instant? = builder.uploadEnd
    /**
     * The size of the uploaded disk image, in GiB.
     */
    val uploadSize: Double? = builder.uploadSize
    /**
     * The time that the disk upload starts.
     */
    val uploadStart: Instant? = builder.uploadStart

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ClientData = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ClientData(")
        append("comment=$comment,")
        append("uploadEnd=$uploadEnd,")
        append("uploadSize=$uploadSize,")
        append("uploadStart=$uploadStart)")
    }

    override fun hashCode(): kotlin.Int {
        var result = comment?.hashCode() ?: 0
        result = 31 * result + (uploadEnd?.hashCode() ?: 0)
        result = 31 * result + (uploadSize?.hashCode() ?: 0)
        result = 31 * result + (uploadStart?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ClientData

        if (comment != other.comment) return false
        if (uploadEnd != other.uploadEnd) return false
        if (uploadSize != other.uploadSize) return false
        if (uploadStart != other.uploadStart) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ClientData = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ClientData
        /**
         * A user-defined comment about the disk upload.
         */
        fun comment(comment: String): FluentBuilder
        /**
         * The time that the disk upload ends.
         */
        fun uploadEnd(uploadEnd: Instant): FluentBuilder
        /**
         * The size of the uploaded disk image, in GiB.
         */
        fun uploadSize(uploadSize: Double): FluentBuilder
        /**
         * The time that the disk upload starts.
         */
        fun uploadStart(uploadStart: Instant): FluentBuilder
    }

    interface DslBuilder {
        /**
         * A user-defined comment about the disk upload.
         */
        var comment: String?
        /**
         * The time that the disk upload ends.
         */
        var uploadEnd: Instant?
        /**
         * The size of the uploaded disk image, in GiB.
         */
        var uploadSize: Double?
        /**
         * The time that the disk upload starts.
         */
        var uploadStart: Instant?

        fun build(): ClientData
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var comment: String? = null
        override var uploadEnd: Instant? = null
        override var uploadSize: Double? = null
        override var uploadStart: Instant? = null

        constructor(x: ClientData) : this() {
            this.comment = x.comment
            this.uploadEnd = x.uploadEnd
            this.uploadSize = x.uploadSize
            this.uploadStart = x.uploadStart
        }

        override fun build(): ClientData = ClientData(this)
        override fun comment(comment: String): FluentBuilder = apply { this.comment = comment }
        override fun uploadEnd(uploadEnd: Instant): FluentBuilder = apply { this.uploadEnd = uploadEnd }
        override fun uploadSize(uploadSize: Double): FluentBuilder = apply { this.uploadSize = uploadSize }
        override fun uploadStart(uploadStart: Instant): FluentBuilder = apply { this.uploadStart = uploadStart }
    }
}
