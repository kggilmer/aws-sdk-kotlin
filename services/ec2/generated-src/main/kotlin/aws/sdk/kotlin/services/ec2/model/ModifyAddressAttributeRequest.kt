// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ModifyAddressAttributeRequest private constructor(builder: BuilderImpl) {
    /**
     * &#91;EC2-VPC&#93; The allocation ID.
     */
    val allocationId: String? = builder.allocationId
    /**
     * The domain name to modify for the IP address.
     */
    val domainName: String? = builder.domainName
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ModifyAddressAttributeRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyAddressAttributeRequest(")
        append("allocationId=$allocationId,")
        append("domainName=$domainName,")
        append("dryRun=$dryRun)")
    }

    override fun hashCode(): kotlin.Int {
        var result = allocationId?.hashCode() ?: 0
        result = 31 * result + (domainName?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ModifyAddressAttributeRequest

        if (allocationId != other.allocationId) return false
        if (domainName != other.domainName) return false
        if (dryRun != other.dryRun) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ModifyAddressAttributeRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ModifyAddressAttributeRequest
        /**
         * &#91;EC2-VPC&#93; The allocation ID.
         */
        fun allocationId(allocationId: String): FluentBuilder
        /**
         * The domain name to modify for the IP address.
         */
        fun domainName(domainName: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
    }

    interface DslBuilder {
        /**
         * &#91;EC2-VPC&#93; The allocation ID.
         */
        var allocationId: String?
        /**
         * The domain name to modify for the IP address.
         */
        var domainName: String?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?

        fun build(): ModifyAddressAttributeRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var allocationId: String? = null
        override var domainName: String? = null
        override var dryRun: Boolean? = null

        constructor(x: ModifyAddressAttributeRequest) : this() {
            this.allocationId = x.allocationId
            this.domainName = x.domainName
            this.dryRun = x.dryRun
        }

        override fun build(): ModifyAddressAttributeRequest = ModifyAddressAttributeRequest(this)
        override fun allocationId(allocationId: String): FluentBuilder = apply { this.allocationId = allocationId }
        override fun domainName(domainName: String): FluentBuilder = apply { this.domainName = domainName }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
    }
}
