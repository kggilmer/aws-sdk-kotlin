// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ModifyTrafficMirrorFilterRuleRequest private constructor(builder: BuilderImpl) {
    /**
     * The description to assign to the Traffic Mirror rule.
     */
    val description: String? = builder.description
    /**
     * The destination CIDR block to assign to the Traffic Mirror rule.
     */
    val destinationCidrBlock: String? = builder.destinationCidrBlock
    /**
     * The destination ports that are associated with the Traffic Mirror rule.
     */
    val destinationPortRange: TrafficMirrorPortRangeRequest? = builder.destinationPortRange
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The protocol, for example TCP, to assign to the Traffic Mirror rule.
     */
    val protocol: Int? = builder.protocol
    /**
     * The properties that you want to remove from the Traffic Mirror filter rule.
     * When you remove a property from a Traffic Mirror filter rule, the property is set to the default.
     */
    val removeFields: List<TrafficMirrorFilterRuleField>? = builder.removeFields
    /**
     * The action to assign to the rule.
     */
    val ruleAction: TrafficMirrorRuleAction? = builder.ruleAction
    /**
     * The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given
     * direction. The rules are processed in ascending order by rule number.
     */
    val ruleNumber: Int? = builder.ruleNumber
    /**
     * The source CIDR block to assign to the Traffic Mirror rule.
     */
    val sourceCidrBlock: String? = builder.sourceCidrBlock
    /**
     * The port range to assign to the Traffic Mirror rule.
     */
    val sourcePortRange: TrafficMirrorPortRangeRequest? = builder.sourcePortRange
    /**
     * The type of traffic to assign to the rule.
     */
    val trafficDirection: TrafficDirection? = builder.trafficDirection
    /**
     * The ID of the Traffic Mirror rule.
     */
    val trafficMirrorFilterRuleId: String? = builder.trafficMirrorFilterRuleId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ModifyTrafficMirrorFilterRuleRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyTrafficMirrorFilterRuleRequest(")
        append("description=$description,")
        append("destinationCidrBlock=$destinationCidrBlock,")
        append("destinationPortRange=$destinationPortRange,")
        append("dryRun=$dryRun,")
        append("protocol=$protocol,")
        append("removeFields=$removeFields,")
        append("ruleAction=$ruleAction,")
        append("ruleNumber=$ruleNumber,")
        append("sourceCidrBlock=$sourceCidrBlock,")
        append("sourcePortRange=$sourcePortRange,")
        append("trafficDirection=$trafficDirection,")
        append("trafficMirrorFilterRuleId=$trafficMirrorFilterRuleId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = description?.hashCode() ?: 0
        result = 31 * result + (destinationCidrBlock?.hashCode() ?: 0)
        result = 31 * result + (destinationPortRange?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (protocol ?: 0)
        result = 31 * result + (removeFields?.hashCode() ?: 0)
        result = 31 * result + (ruleAction?.hashCode() ?: 0)
        result = 31 * result + (ruleNumber ?: 0)
        result = 31 * result + (sourceCidrBlock?.hashCode() ?: 0)
        result = 31 * result + (sourcePortRange?.hashCode() ?: 0)
        result = 31 * result + (trafficDirection?.hashCode() ?: 0)
        result = 31 * result + (trafficMirrorFilterRuleId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ModifyTrafficMirrorFilterRuleRequest

        if (description != other.description) return false
        if (destinationCidrBlock != other.destinationCidrBlock) return false
        if (destinationPortRange != other.destinationPortRange) return false
        if (dryRun != other.dryRun) return false
        if (protocol != other.protocol) return false
        if (removeFields != other.removeFields) return false
        if (ruleAction != other.ruleAction) return false
        if (ruleNumber != other.ruleNumber) return false
        if (sourceCidrBlock != other.sourceCidrBlock) return false
        if (sourcePortRange != other.sourcePortRange) return false
        if (trafficDirection != other.trafficDirection) return false
        if (trafficMirrorFilterRuleId != other.trafficMirrorFilterRuleId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ModifyTrafficMirrorFilterRuleRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ModifyTrafficMirrorFilterRuleRequest
        /**
         * The description to assign to the Traffic Mirror rule.
         */
        fun description(description: String): FluentBuilder
        /**
         * The destination CIDR block to assign to the Traffic Mirror rule.
         */
        fun destinationCidrBlock(destinationCidrBlock: String): FluentBuilder
        /**
         * The destination ports that are associated with the Traffic Mirror rule.
         */
        fun destinationPortRange(destinationPortRange: TrafficMirrorPortRangeRequest): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The protocol, for example TCP, to assign to the Traffic Mirror rule.
         */
        fun protocol(protocol: Int): FluentBuilder
        /**
         * The properties that you want to remove from the Traffic Mirror filter rule.
         * When you remove a property from a Traffic Mirror filter rule, the property is set to the default.
         */
        fun removeFields(removeFields: List<TrafficMirrorFilterRuleField>): FluentBuilder
        /**
         * The action to assign to the rule.
         */
        fun ruleAction(ruleAction: TrafficMirrorRuleAction): FluentBuilder
        /**
         * The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given
         * direction. The rules are processed in ascending order by rule number.
         */
        fun ruleNumber(ruleNumber: Int): FluentBuilder
        /**
         * The source CIDR block to assign to the Traffic Mirror rule.
         */
        fun sourceCidrBlock(sourceCidrBlock: String): FluentBuilder
        /**
         * The port range to assign to the Traffic Mirror rule.
         */
        fun sourcePortRange(sourcePortRange: TrafficMirrorPortRangeRequest): FluentBuilder
        /**
         * The type of traffic to assign to the rule.
         */
        fun trafficDirection(trafficDirection: TrafficDirection): FluentBuilder
        /**
         * The ID of the Traffic Mirror rule.
         */
        fun trafficMirrorFilterRuleId(trafficMirrorFilterRuleId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The description to assign to the Traffic Mirror rule.
         */
        var description: String?
        /**
         * The destination CIDR block to assign to the Traffic Mirror rule.
         */
        var destinationCidrBlock: String?
        /**
         * The destination ports that are associated with the Traffic Mirror rule.
         */
        var destinationPortRange: TrafficMirrorPortRangeRequest?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The protocol, for example TCP, to assign to the Traffic Mirror rule.
         */
        var protocol: Int?
        /**
         * The properties that you want to remove from the Traffic Mirror filter rule.
         * When you remove a property from a Traffic Mirror filter rule, the property is set to the default.
         */
        var removeFields: List<TrafficMirrorFilterRuleField>?
        /**
         * The action to assign to the rule.
         */
        var ruleAction: TrafficMirrorRuleAction?
        /**
         * The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given
         * direction. The rules are processed in ascending order by rule number.
         */
        var ruleNumber: Int?
        /**
         * The source CIDR block to assign to the Traffic Mirror rule.
         */
        var sourceCidrBlock: String?
        /**
         * The port range to assign to the Traffic Mirror rule.
         */
        var sourcePortRange: TrafficMirrorPortRangeRequest?
        /**
         * The type of traffic to assign to the rule.
         */
        var trafficDirection: TrafficDirection?
        /**
         * The ID of the Traffic Mirror rule.
         */
        var trafficMirrorFilterRuleId: String?

        fun build(): ModifyTrafficMirrorFilterRuleRequest
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.TrafficMirrorPortRangeRequest] inside the given [block]
         */
        fun destinationPortRange(block: TrafficMirrorPortRangeRequest.DslBuilder.() -> kotlin.Unit) {
            this.destinationPortRange = TrafficMirrorPortRangeRequest.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.TrafficMirrorPortRangeRequest] inside the given [block]
         */
        fun sourcePortRange(block: TrafficMirrorPortRangeRequest.DslBuilder.() -> kotlin.Unit) {
            this.sourcePortRange = TrafficMirrorPortRangeRequest.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var description: String? = null
        override var destinationCidrBlock: String? = null
        override var destinationPortRange: TrafficMirrorPortRangeRequest? = null
        override var dryRun: Boolean? = null
        override var protocol: Int? = null
        override var removeFields: List<TrafficMirrorFilterRuleField>? = null
        override var ruleAction: TrafficMirrorRuleAction? = null
        override var ruleNumber: Int? = null
        override var sourceCidrBlock: String? = null
        override var sourcePortRange: TrafficMirrorPortRangeRequest? = null
        override var trafficDirection: TrafficDirection? = null
        override var trafficMirrorFilterRuleId: String? = null

        constructor(x: ModifyTrafficMirrorFilterRuleRequest) : this() {
            this.description = x.description
            this.destinationCidrBlock = x.destinationCidrBlock
            this.destinationPortRange = x.destinationPortRange
            this.dryRun = x.dryRun
            this.protocol = x.protocol
            this.removeFields = x.removeFields
            this.ruleAction = x.ruleAction
            this.ruleNumber = x.ruleNumber
            this.sourceCidrBlock = x.sourceCidrBlock
            this.sourcePortRange = x.sourcePortRange
            this.trafficDirection = x.trafficDirection
            this.trafficMirrorFilterRuleId = x.trafficMirrorFilterRuleId
        }

        override fun build(): ModifyTrafficMirrorFilterRuleRequest = ModifyTrafficMirrorFilterRuleRequest(this)
        override fun description(description: String): FluentBuilder = apply { this.description = description }
        override fun destinationCidrBlock(destinationCidrBlock: String): FluentBuilder = apply { this.destinationCidrBlock = destinationCidrBlock }
        override fun destinationPortRange(destinationPortRange: TrafficMirrorPortRangeRequest): FluentBuilder = apply { this.destinationPortRange = destinationPortRange }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun protocol(protocol: Int): FluentBuilder = apply { this.protocol = protocol }
        override fun removeFields(removeFields: List<TrafficMirrorFilterRuleField>): FluentBuilder = apply { this.removeFields = removeFields }
        override fun ruleAction(ruleAction: TrafficMirrorRuleAction): FluentBuilder = apply { this.ruleAction = ruleAction }
        override fun ruleNumber(ruleNumber: Int): FluentBuilder = apply { this.ruleNumber = ruleNumber }
        override fun sourceCidrBlock(sourceCidrBlock: String): FluentBuilder = apply { this.sourceCidrBlock = sourceCidrBlock }
        override fun sourcePortRange(sourcePortRange: TrafficMirrorPortRangeRequest): FluentBuilder = apply { this.sourcePortRange = sourcePortRange }
        override fun trafficDirection(trafficDirection: TrafficDirection): FluentBuilder = apply { this.trafficDirection = trafficDirection }
        override fun trafficMirrorFilterRuleId(trafficMirrorFilterRuleId: String): FluentBuilder = apply { this.trafficMirrorFilterRuleId = trafficMirrorFilterRuleId }
    }
}
