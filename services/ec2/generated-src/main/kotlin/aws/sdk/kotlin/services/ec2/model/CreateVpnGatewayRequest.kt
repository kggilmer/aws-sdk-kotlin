// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Contains the parameters for CreateVpnGateway.
 */
class CreateVpnGatewayRequest private constructor(builder: BuilderImpl) {
    /**
     * A private Autonomous System Number (ASN) for the Amazon side of a BGP session. If
     * you're using a 16-bit ASN, it must be in the 64512 to 65534 range. If you're using a
     * 32-bit ASN, it must be in the 4200000000 to 4294967294 range.
     * Default: 64512
     */
    val amazonSideAsn: Long? = builder.amazonSideAsn
    /**
     * The Availability Zone for the virtual private gateway.
     */
    val availabilityZone: String? = builder.availabilityZone
    /**
     * Checks whether you have the required permissions for the action, without actually
     * making the request, and provides an error response. If you have the required
     * permissions, the error response is DryRunOperation. Otherwise, it is
     * UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The tags to apply to the virtual private gateway.
     */
    val tagSpecifications: List<TagSpecification>? = builder.tagSpecifications
    /**
     * The type of VPN connection this virtual private gateway supports.
     */
    val type: GatewayType? = builder.type

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CreateVpnGatewayRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CreateVpnGatewayRequest(")
        append("amazonSideAsn=$amazonSideAsn,")
        append("availabilityZone=$availabilityZone,")
        append("dryRun=$dryRun,")
        append("tagSpecifications=$tagSpecifications,")
        append("type=$type)")
    }

    override fun hashCode(): kotlin.Int {
        var result = amazonSideAsn?.hashCode() ?: 0
        result = 31 * result + (availabilityZone?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (tagSpecifications?.hashCode() ?: 0)
        result = 31 * result + (type?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CreateVpnGatewayRequest

        if (amazonSideAsn != other.amazonSideAsn) return false
        if (availabilityZone != other.availabilityZone) return false
        if (dryRun != other.dryRun) return false
        if (tagSpecifications != other.tagSpecifications) return false
        if (type != other.type) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CreateVpnGatewayRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CreateVpnGatewayRequest
        /**
         * A private Autonomous System Number (ASN) for the Amazon side of a BGP session. If
         * you're using a 16-bit ASN, it must be in the 64512 to 65534 range. If you're using a
         * 32-bit ASN, it must be in the 4200000000 to 4294967294 range.
         * Default: 64512
         */
        fun amazonSideAsn(amazonSideAsn: Long): FluentBuilder
        /**
         * The Availability Zone for the virtual private gateway.
         */
        fun availabilityZone(availabilityZone: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually
         * making the request, and provides an error response. If you have the required
         * permissions, the error response is DryRunOperation. Otherwise, it is
         * UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The tags to apply to the virtual private gateway.
         */
        fun tagSpecifications(tagSpecifications: List<TagSpecification>): FluentBuilder
        /**
         * The type of VPN connection this virtual private gateway supports.
         */
        fun type(type: GatewayType): FluentBuilder
    }

    interface DslBuilder {
        /**
         * A private Autonomous System Number (ASN) for the Amazon side of a BGP session. If
         * you're using a 16-bit ASN, it must be in the 64512 to 65534 range. If you're using a
         * 32-bit ASN, it must be in the 4200000000 to 4294967294 range.
         * Default: 64512
         */
        var amazonSideAsn: Long?
        /**
         * The Availability Zone for the virtual private gateway.
         */
        var availabilityZone: String?
        /**
         * Checks whether you have the required permissions for the action, without actually
         * making the request, and provides an error response. If you have the required
         * permissions, the error response is DryRunOperation. Otherwise, it is
         * UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The tags to apply to the virtual private gateway.
         */
        var tagSpecifications: List<TagSpecification>?
        /**
         * The type of VPN connection this virtual private gateway supports.
         */
        var type: GatewayType?

        fun build(): CreateVpnGatewayRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var amazonSideAsn: Long? = null
        override var availabilityZone: String? = null
        override var dryRun: Boolean? = null
        override var tagSpecifications: List<TagSpecification>? = null
        override var type: GatewayType? = null

        constructor(x: CreateVpnGatewayRequest) : this() {
            this.amazonSideAsn = x.amazonSideAsn
            this.availabilityZone = x.availabilityZone
            this.dryRun = x.dryRun
            this.tagSpecifications = x.tagSpecifications
            this.type = x.type
        }

        override fun build(): CreateVpnGatewayRequest = CreateVpnGatewayRequest(this)
        override fun amazonSideAsn(amazonSideAsn: Long): FluentBuilder = apply { this.amazonSideAsn = amazonSideAsn }
        override fun availabilityZone(availabilityZone: String): FluentBuilder = apply { this.availabilityZone = availabilityZone }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun tagSpecifications(tagSpecifications: List<TagSpecification>): FluentBuilder = apply { this.tagSpecifications = tagSpecifications }
        override fun type(type: GatewayType): FluentBuilder = apply { this.type = type }
    }
}
