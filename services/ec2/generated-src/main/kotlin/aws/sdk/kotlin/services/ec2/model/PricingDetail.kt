// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a Reserved Instance offering.
 */
class PricingDetail private constructor(builder: BuilderImpl) {
    /**
     * The number of reservations available for the price.
     */
    val count: Int? = builder.count
    /**
     * The price per instance.
     */
    val price: Double? = builder.price

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): PricingDetail = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("PricingDetail(")
        append("count=$count,")
        append("price=$price)")
    }

    override fun hashCode(): kotlin.Int {
        var result = count ?: 0
        result = 31 * result + (price?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as PricingDetail

        if (count != other.count) return false
        if (price != other.price) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): PricingDetail = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): PricingDetail
        /**
         * The number of reservations available for the price.
         */
        fun count(count: Int): FluentBuilder
        /**
         * The price per instance.
         */
        fun price(price: Double): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The number of reservations available for the price.
         */
        var count: Int?
        /**
         * The price per instance.
         */
        var price: Double?

        fun build(): PricingDetail
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var count: Int? = null
        override var price: Double? = null

        constructor(x: PricingDetail) : this() {
            this.count = x.count
            this.price = x.price
        }

        override fun build(): PricingDetail = PricingDetail(this)
        override fun count(count: Int): FluentBuilder = apply { this.count = count }
        override fun price(price: Double): FluentBuilder = apply { this.price = price }
    }
}
