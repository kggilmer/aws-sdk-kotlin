// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the credit option for CPU usage of a T2, T3, or T3a instance.
 */
class CreditSpecification private constructor(builder: BuilderImpl) {
    /**
     * The credit option for CPU usage of a T2, T3, or T3a instance. Valid values are
     * standard and unlimited.
     */
    val cpuCredits: String? = builder.cpuCredits

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CreditSpecification = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CreditSpecification(")
        append("cpuCredits=$cpuCredits)")
    }

    override fun hashCode(): kotlin.Int {
        var result = cpuCredits?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CreditSpecification

        if (cpuCredits != other.cpuCredits) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CreditSpecification = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CreditSpecification
        /**
         * The credit option for CPU usage of a T2, T3, or T3a instance. Valid values are
         * standard and unlimited.
         */
        fun cpuCredits(cpuCredits: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The credit option for CPU usage of a T2, T3, or T3a instance. Valid values are
         * standard and unlimited.
         */
        var cpuCredits: String?

        fun build(): CreditSpecification
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var cpuCredits: String? = null

        constructor(x: CreditSpecification) : this() {
            this.cpuCredits = x.cpuCredits
        }

        override fun build(): CreditSpecification = CreditSpecification(this)
        override fun cpuCredits(cpuCredits: String): FluentBuilder = apply { this.cpuCredits = cpuCredits }
    }
}
