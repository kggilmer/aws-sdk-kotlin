// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class CreateInstanceExportTaskResponse private constructor(builder: BuilderImpl) {
    /**
     * Information about the export instance task.
     */
    val exportTask: ExportTask? = builder.exportTask

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CreateInstanceExportTaskResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CreateInstanceExportTaskResponse(")
        append("exportTask=$exportTask)")
    }

    override fun hashCode(): kotlin.Int {
        var result = exportTask?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CreateInstanceExportTaskResponse

        if (exportTask != other.exportTask) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CreateInstanceExportTaskResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CreateInstanceExportTaskResponse
        /**
         * Information about the export instance task.
         */
        fun exportTask(exportTask: ExportTask): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Information about the export instance task.
         */
        var exportTask: ExportTask?

        fun build(): CreateInstanceExportTaskResponse
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.ExportTask] inside the given [block]
         */
        fun exportTask(block: ExportTask.DslBuilder.() -> kotlin.Unit) {
            this.exportTask = ExportTask.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var exportTask: ExportTask? = null

        constructor(x: CreateInstanceExportTaskResponse) : this() {
            this.exportTask = x.exportTask
        }

        override fun build(): CreateInstanceExportTaskResponse = CreateInstanceExportTaskResponse(this)
        override fun exportTask(exportTask: ExportTask): FluentBuilder = apply { this.exportTask = exportTask }
    }
}
