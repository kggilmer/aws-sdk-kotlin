// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Information about a terminated Client VPN endpoint client connection.
 */
class TerminateConnectionStatus private constructor(builder: BuilderImpl) {
    /**
     * The ID of the client connection.
     */
    val connectionId: String? = builder.connectionId
    /**
     * A message about the status of the client connection, if applicable.
     */
    val currentStatus: ClientVpnConnectionStatus? = builder.currentStatus
    /**
     * The state of the client connection.
     */
    val previousStatus: ClientVpnConnectionStatus? = builder.previousStatus

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): TerminateConnectionStatus = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("TerminateConnectionStatus(")
        append("connectionId=$connectionId,")
        append("currentStatus=$currentStatus,")
        append("previousStatus=$previousStatus)")
    }

    override fun hashCode(): kotlin.Int {
        var result = connectionId?.hashCode() ?: 0
        result = 31 * result + (currentStatus?.hashCode() ?: 0)
        result = 31 * result + (previousStatus?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as TerminateConnectionStatus

        if (connectionId != other.connectionId) return false
        if (currentStatus != other.currentStatus) return false
        if (previousStatus != other.previousStatus) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): TerminateConnectionStatus = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): TerminateConnectionStatus
        /**
         * The ID of the client connection.
         */
        fun connectionId(connectionId: String): FluentBuilder
        /**
         * A message about the status of the client connection, if applicable.
         */
        fun currentStatus(currentStatus: ClientVpnConnectionStatus): FluentBuilder
        /**
         * The state of the client connection.
         */
        fun previousStatus(previousStatus: ClientVpnConnectionStatus): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The ID of the client connection.
         */
        var connectionId: String?
        /**
         * A message about the status of the client connection, if applicable.
         */
        var currentStatus: ClientVpnConnectionStatus?
        /**
         * The state of the client connection.
         */
        var previousStatus: ClientVpnConnectionStatus?

        fun build(): TerminateConnectionStatus
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.ClientVpnConnectionStatus] inside the given [block]
         */
        fun currentStatus(block: ClientVpnConnectionStatus.DslBuilder.() -> kotlin.Unit) {
            this.currentStatus = ClientVpnConnectionStatus.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.ClientVpnConnectionStatus] inside the given [block]
         */
        fun previousStatus(block: ClientVpnConnectionStatus.DslBuilder.() -> kotlin.Unit) {
            this.previousStatus = ClientVpnConnectionStatus.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var connectionId: String? = null
        override var currentStatus: ClientVpnConnectionStatus? = null
        override var previousStatus: ClientVpnConnectionStatus? = null

        constructor(x: TerminateConnectionStatus) : this() {
            this.connectionId = x.connectionId
            this.currentStatus = x.currentStatus
            this.previousStatus = x.previousStatus
        }

        override fun build(): TerminateConnectionStatus = TerminateConnectionStatus(this)
        override fun connectionId(connectionId: String): FluentBuilder = apply { this.connectionId = connectionId }
        override fun currentStatus(currentStatus: ClientVpnConnectionStatus): FluentBuilder = apply { this.currentStatus = currentStatus }
        override fun previousStatus(previousStatus: ClientVpnConnectionStatus): FluentBuilder = apply { this.previousStatus = previousStatus }
    }
}
