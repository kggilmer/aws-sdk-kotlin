// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class DescribePlacementGroupsRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The filters.
     * group-name - The name of the placement group.
     * state - The state of the placement group (pending |
     * available | deleting |
     * deleted).
     * strategy - The strategy of the placement group
     * (cluster | spread |
     * partition).
     * tag:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
     * For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
     * tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.
     */
    val filters: List<Filter>? = builder.filters
    /**
     * The IDs of the placement groups.
     */
    val groupIds: List<String>? = builder.groupIds
    /**
     * The names of the placement groups.
     * Default: Describes all your placement groups, or only those otherwise
     * specified.
     */
    val groupNames: List<String>? = builder.groupNames

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DescribePlacementGroupsRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DescribePlacementGroupsRequest(")
        append("dryRun=$dryRun,")
        append("filters=$filters,")
        append("groupIds=$groupIds,")
        append("groupNames=$groupNames)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (filters?.hashCode() ?: 0)
        result = 31 * result + (groupIds?.hashCode() ?: 0)
        result = 31 * result + (groupNames?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DescribePlacementGroupsRequest

        if (dryRun != other.dryRun) return false
        if (filters != other.filters) return false
        if (groupIds != other.groupIds) return false
        if (groupNames != other.groupNames) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DescribePlacementGroupsRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DescribePlacementGroupsRequest
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The filters.
         * group-name - The name of the placement group.
         * state - The state of the placement group (pending |
         * available | deleting |
         * deleted).
         * strategy - The strategy of the placement group
         * (cluster | spread |
         * partition).
         * tag:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
         * For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
         * tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.
         */
        fun filters(filters: List<Filter>): FluentBuilder
        /**
         * The IDs of the placement groups.
         */
        fun groupIds(groupIds: List<String>): FluentBuilder
        /**
         * The names of the placement groups.
         * Default: Describes all your placement groups, or only those otherwise
         * specified.
         */
        fun groupNames(groupNames: List<String>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The filters.
         * group-name - The name of the placement group.
         * state - The state of the placement group (pending |
         * available | deleting |
         * deleted).
         * strategy - The strategy of the placement group
         * (cluster | spread |
         * partition).
         * tag:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
         * For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
         * tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.
         */
        var filters: List<Filter>?
        /**
         * The IDs of the placement groups.
         */
        var groupIds: List<String>?
        /**
         * The names of the placement groups.
         * Default: Describes all your placement groups, or only those otherwise
         * specified.
         */
        var groupNames: List<String>?

        fun build(): DescribePlacementGroupsRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var filters: List<Filter>? = null
        override var groupIds: List<String>? = null
        override var groupNames: List<String>? = null

        constructor(x: DescribePlacementGroupsRequest) : this() {
            this.dryRun = x.dryRun
            this.filters = x.filters
            this.groupIds = x.groupIds
            this.groupNames = x.groupNames
        }

        override fun build(): DescribePlacementGroupsRequest = DescribePlacementGroupsRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun filters(filters: List<Filter>): FluentBuilder = apply { this.filters = filters }
        override fun groupIds(groupIds: List<String>): FluentBuilder = apply { this.groupIds = groupIds }
        override fun groupNames(groupNames: List<String>): FluentBuilder = apply { this.groupNames = groupNames }
    }
}
