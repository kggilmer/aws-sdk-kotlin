// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class DeleteInstanceEventWindowRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * Specify true to force delete the event window. Use the force delete parameter
     * if the event window is currently associated with targets.
     */
    val forceDelete: Boolean? = builder.forceDelete
    /**
     * The ID of the event window.
     */
    val instanceEventWindowId: String? = builder.instanceEventWindowId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DeleteInstanceEventWindowRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DeleteInstanceEventWindowRequest(")
        append("dryRun=$dryRun,")
        append("forceDelete=$forceDelete,")
        append("instanceEventWindowId=$instanceEventWindowId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (forceDelete?.hashCode() ?: 0)
        result = 31 * result + (instanceEventWindowId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DeleteInstanceEventWindowRequest

        if (dryRun != other.dryRun) return false
        if (forceDelete != other.forceDelete) return false
        if (instanceEventWindowId != other.instanceEventWindowId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DeleteInstanceEventWindowRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DeleteInstanceEventWindowRequest
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * Specify true to force delete the event window. Use the force delete parameter
         * if the event window is currently associated with targets.
         */
        fun forceDelete(forceDelete: Boolean): FluentBuilder
        /**
         * The ID of the event window.
         */
        fun instanceEventWindowId(instanceEventWindowId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * Specify true to force delete the event window. Use the force delete parameter
         * if the event window is currently associated with targets.
         */
        var forceDelete: Boolean?
        /**
         * The ID of the event window.
         */
        var instanceEventWindowId: String?

        fun build(): DeleteInstanceEventWindowRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var forceDelete: Boolean? = null
        override var instanceEventWindowId: String? = null

        constructor(x: DeleteInstanceEventWindowRequest) : this() {
            this.dryRun = x.dryRun
            this.forceDelete = x.forceDelete
            this.instanceEventWindowId = x.instanceEventWindowId
        }

        override fun build(): DeleteInstanceEventWindowRequest = DeleteInstanceEventWindowRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun forceDelete(forceDelete: Boolean): FluentBuilder = apply { this.forceDelete = forceDelete }
        override fun instanceEventWindowId(instanceEventWindowId: String): FluentBuilder = apply { this.instanceEventWindowId = instanceEventWindowId }
    }
}
