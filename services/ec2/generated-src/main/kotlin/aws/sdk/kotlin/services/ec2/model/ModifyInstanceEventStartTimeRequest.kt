// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model

import aws.smithy.kotlin.runtime.time.Instant

class ModifyInstanceEventStartTimeRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The ID of the event whose date and time you are modifying.
     */
    val instanceEventId: String? = builder.instanceEventId
    /**
     * The ID of the instance with the scheduled event.
     */
    val instanceId: String? = builder.instanceId
    /**
     * The new date and time when the event will take place.
     */
    val notBefore: Instant? = builder.notBefore

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ModifyInstanceEventStartTimeRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyInstanceEventStartTimeRequest(")
        append("dryRun=$dryRun,")
        append("instanceEventId=$instanceEventId,")
        append("instanceId=$instanceId,")
        append("notBefore=$notBefore)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (instanceEventId?.hashCode() ?: 0)
        result = 31 * result + (instanceId?.hashCode() ?: 0)
        result = 31 * result + (notBefore?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ModifyInstanceEventStartTimeRequest

        if (dryRun != other.dryRun) return false
        if (instanceEventId != other.instanceEventId) return false
        if (instanceId != other.instanceId) return false
        if (notBefore != other.notBefore) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ModifyInstanceEventStartTimeRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ModifyInstanceEventStartTimeRequest
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The ID of the event whose date and time you are modifying.
         */
        fun instanceEventId(instanceEventId: String): FluentBuilder
        /**
         * The ID of the instance with the scheduled event.
         */
        fun instanceId(instanceId: String): FluentBuilder
        /**
         * The new date and time when the event will take place.
         */
        fun notBefore(notBefore: Instant): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The ID of the event whose date and time you are modifying.
         */
        var instanceEventId: String?
        /**
         * The ID of the instance with the scheduled event.
         */
        var instanceId: String?
        /**
         * The new date and time when the event will take place.
         */
        var notBefore: Instant?

        fun build(): ModifyInstanceEventStartTimeRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var instanceEventId: String? = null
        override var instanceId: String? = null
        override var notBefore: Instant? = null

        constructor(x: ModifyInstanceEventStartTimeRequest) : this() {
            this.dryRun = x.dryRun
            this.instanceEventId = x.instanceEventId
            this.instanceId = x.instanceId
            this.notBefore = x.notBefore
        }

        override fun build(): ModifyInstanceEventStartTimeRequest = ModifyInstanceEventStartTimeRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun instanceEventId(instanceEventId: String): FluentBuilder = apply { this.instanceEventId = instanceEventId }
        override fun instanceId(instanceId: String): FluentBuilder = apply { this.instanceId = instanceId }
        override fun notBefore(notBefore: Instant): FluentBuilder = apply { this.notBefore = notBefore }
    }
}
