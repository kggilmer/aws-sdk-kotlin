// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class CreateSubnetCidrReservationResponse private constructor(builder: BuilderImpl) {
    /**
     * Information about the created subnet CIDR reservation.
     */
    val subnetCidrReservation: SubnetCidrReservation? = builder.subnetCidrReservation

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CreateSubnetCidrReservationResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CreateSubnetCidrReservationResponse(")
        append("subnetCidrReservation=$subnetCidrReservation)")
    }

    override fun hashCode(): kotlin.Int {
        var result = subnetCidrReservation?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CreateSubnetCidrReservationResponse

        if (subnetCidrReservation != other.subnetCidrReservation) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CreateSubnetCidrReservationResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CreateSubnetCidrReservationResponse
        /**
         * Information about the created subnet CIDR reservation.
         */
        fun subnetCidrReservation(subnetCidrReservation: SubnetCidrReservation): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Information about the created subnet CIDR reservation.
         */
        var subnetCidrReservation: SubnetCidrReservation?

        fun build(): CreateSubnetCidrReservationResponse
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.SubnetCidrReservation] inside the given [block]
         */
        fun subnetCidrReservation(block: SubnetCidrReservation.DslBuilder.() -> kotlin.Unit) {
            this.subnetCidrReservation = SubnetCidrReservation.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var subnetCidrReservation: SubnetCidrReservation? = null

        constructor(x: CreateSubnetCidrReservationResponse) : this() {
            this.subnetCidrReservation = x.subnetCidrReservation
        }

        override fun build(): CreateSubnetCidrReservationResponse = CreateSubnetCidrReservationResponse(this)
        override fun subnetCidrReservation(subnetCidrReservation: SubnetCidrReservation): FluentBuilder = apply { this.subnetCidrReservation = subnetCidrReservation }
    }
}
