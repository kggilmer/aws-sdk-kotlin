// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the network card support of the instance type.
 */
class NetworkCardInfo private constructor(builder: BuilderImpl) {
    /**
     * The maximum number of network interfaces for the network card.
     */
    val maximumNetworkInterfaces: Int? = builder.maximumNetworkInterfaces
    /**
     * The index of the network card.
     */
    val networkCardIndex: Int? = builder.networkCardIndex
    /**
     * The network performance of the network card.
     */
    val networkPerformance: String? = builder.networkPerformance

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): NetworkCardInfo = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("NetworkCardInfo(")
        append("maximumNetworkInterfaces=$maximumNetworkInterfaces,")
        append("networkCardIndex=$networkCardIndex,")
        append("networkPerformance=$networkPerformance)")
    }

    override fun hashCode(): kotlin.Int {
        var result = maximumNetworkInterfaces ?: 0
        result = 31 * result + (networkCardIndex ?: 0)
        result = 31 * result + (networkPerformance?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as NetworkCardInfo

        if (maximumNetworkInterfaces != other.maximumNetworkInterfaces) return false
        if (networkCardIndex != other.networkCardIndex) return false
        if (networkPerformance != other.networkPerformance) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): NetworkCardInfo = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): NetworkCardInfo
        /**
         * The maximum number of network interfaces for the network card.
         */
        fun maximumNetworkInterfaces(maximumNetworkInterfaces: Int): FluentBuilder
        /**
         * The index of the network card.
         */
        fun networkCardIndex(networkCardIndex: Int): FluentBuilder
        /**
         * The network performance of the network card.
         */
        fun networkPerformance(networkPerformance: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The maximum number of network interfaces for the network card.
         */
        var maximumNetworkInterfaces: Int?
        /**
         * The index of the network card.
         */
        var networkCardIndex: Int?
        /**
         * The network performance of the network card.
         */
        var networkPerformance: String?

        fun build(): NetworkCardInfo
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var maximumNetworkInterfaces: Int? = null
        override var networkCardIndex: Int? = null
        override var networkPerformance: String? = null

        constructor(x: NetworkCardInfo) : this() {
            this.maximumNetworkInterfaces = x.maximumNetworkInterfaces
            this.networkCardIndex = x.networkCardIndex
            this.networkPerformance = x.networkPerformance
        }

        override fun build(): NetworkCardInfo = NetworkCardInfo(this)
        override fun maximumNetworkInterfaces(maximumNetworkInterfaces: Int): FluentBuilder = apply { this.maximumNetworkInterfaces = maximumNetworkInterfaces }
        override fun networkCardIndex(networkCardIndex: Int): FluentBuilder = apply { this.networkCardIndex = networkCardIndex }
        override fun networkPerformance(networkPerformance: String): FluentBuilder = apply { this.networkPerformance = networkPerformance }
    }
}
