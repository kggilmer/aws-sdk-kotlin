// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * The attributes associated with an Elastic IP address.
 */
class AddressAttribute private constructor(builder: BuilderImpl) {
    /**
     * &#91;EC2-VPC&#93; The allocation ID.
     */
    val allocationId: String? = builder.allocationId
    /**
     * The pointer (PTR) record for the IP address.
     */
    val ptrRecord: String? = builder.ptrRecord
    /**
     * The updated PTR record for the IP address.
     */
    val ptrRecordUpdate: PtrUpdateStatus? = builder.ptrRecordUpdate
    /**
     * The public IP address.
     */
    val publicIp: String? = builder.publicIp

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): AddressAttribute = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("AddressAttribute(")
        append("allocationId=$allocationId,")
        append("ptrRecord=$ptrRecord,")
        append("ptrRecordUpdate=$ptrRecordUpdate,")
        append("publicIp=$publicIp)")
    }

    override fun hashCode(): kotlin.Int {
        var result = allocationId?.hashCode() ?: 0
        result = 31 * result + (ptrRecord?.hashCode() ?: 0)
        result = 31 * result + (ptrRecordUpdate?.hashCode() ?: 0)
        result = 31 * result + (publicIp?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as AddressAttribute

        if (allocationId != other.allocationId) return false
        if (ptrRecord != other.ptrRecord) return false
        if (ptrRecordUpdate != other.ptrRecordUpdate) return false
        if (publicIp != other.publicIp) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): AddressAttribute = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): AddressAttribute
        /**
         * &#91;EC2-VPC&#93; The allocation ID.
         */
        fun allocationId(allocationId: String): FluentBuilder
        /**
         * The pointer (PTR) record for the IP address.
         */
        fun ptrRecord(ptrRecord: String): FluentBuilder
        /**
         * The updated PTR record for the IP address.
         */
        fun ptrRecordUpdate(ptrRecordUpdate: PtrUpdateStatus): FluentBuilder
        /**
         * The public IP address.
         */
        fun publicIp(publicIp: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * &#91;EC2-VPC&#93; The allocation ID.
         */
        var allocationId: String?
        /**
         * The pointer (PTR) record for the IP address.
         */
        var ptrRecord: String?
        /**
         * The updated PTR record for the IP address.
         */
        var ptrRecordUpdate: PtrUpdateStatus?
        /**
         * The public IP address.
         */
        var publicIp: String?

        fun build(): AddressAttribute
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.PtrUpdateStatus] inside the given [block]
         */
        fun ptrRecordUpdate(block: PtrUpdateStatus.DslBuilder.() -> kotlin.Unit) {
            this.ptrRecordUpdate = PtrUpdateStatus.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var allocationId: String? = null
        override var ptrRecord: String? = null
        override var ptrRecordUpdate: PtrUpdateStatus? = null
        override var publicIp: String? = null

        constructor(x: AddressAttribute) : this() {
            this.allocationId = x.allocationId
            this.ptrRecord = x.ptrRecord
            this.ptrRecordUpdate = x.ptrRecordUpdate
            this.publicIp = x.publicIp
        }

        override fun build(): AddressAttribute = AddressAttribute(this)
        override fun allocationId(allocationId: String): FluentBuilder = apply { this.allocationId = allocationId }
        override fun ptrRecord(ptrRecord: String): FluentBuilder = apply { this.ptrRecord = ptrRecord }
        override fun ptrRecordUpdate(ptrRecordUpdate: PtrUpdateStatus): FluentBuilder = apply { this.ptrRecordUpdate = ptrRecordUpdate }
        override fun publicIp(publicIp: String): FluentBuilder = apply { this.publicIp = publicIp }
    }
}
