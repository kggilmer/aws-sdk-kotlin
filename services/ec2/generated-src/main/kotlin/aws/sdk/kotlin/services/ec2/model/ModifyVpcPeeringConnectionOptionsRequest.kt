// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ModifyVpcPeeringConnectionOptionsRequest private constructor(builder: BuilderImpl) {
    /**
     * The VPC peering connection options for the accepter VPC.
     */
    val accepterPeeringConnectionOptions: PeeringConnectionOptionsRequest? = builder.accepterPeeringConnectionOptions
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The VPC peering connection options for the requester VPC.
     */
    val requesterPeeringConnectionOptions: PeeringConnectionOptionsRequest? = builder.requesterPeeringConnectionOptions
    /**
     * The ID of the VPC peering connection.
     */
    val vpcPeeringConnectionId: String? = builder.vpcPeeringConnectionId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ModifyVpcPeeringConnectionOptionsRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyVpcPeeringConnectionOptionsRequest(")
        append("accepterPeeringConnectionOptions=$accepterPeeringConnectionOptions,")
        append("dryRun=$dryRun,")
        append("requesterPeeringConnectionOptions=$requesterPeeringConnectionOptions,")
        append("vpcPeeringConnectionId=$vpcPeeringConnectionId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = accepterPeeringConnectionOptions?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (requesterPeeringConnectionOptions?.hashCode() ?: 0)
        result = 31 * result + (vpcPeeringConnectionId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ModifyVpcPeeringConnectionOptionsRequest

        if (accepterPeeringConnectionOptions != other.accepterPeeringConnectionOptions) return false
        if (dryRun != other.dryRun) return false
        if (requesterPeeringConnectionOptions != other.requesterPeeringConnectionOptions) return false
        if (vpcPeeringConnectionId != other.vpcPeeringConnectionId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ModifyVpcPeeringConnectionOptionsRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ModifyVpcPeeringConnectionOptionsRequest
        /**
         * The VPC peering connection options for the accepter VPC.
         */
        fun accepterPeeringConnectionOptions(accepterPeeringConnectionOptions: PeeringConnectionOptionsRequest): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The VPC peering connection options for the requester VPC.
         */
        fun requesterPeeringConnectionOptions(requesterPeeringConnectionOptions: PeeringConnectionOptionsRequest): FluentBuilder
        /**
         * The ID of the VPC peering connection.
         */
        fun vpcPeeringConnectionId(vpcPeeringConnectionId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The VPC peering connection options for the accepter VPC.
         */
        var accepterPeeringConnectionOptions: PeeringConnectionOptionsRequest?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The VPC peering connection options for the requester VPC.
         */
        var requesterPeeringConnectionOptions: PeeringConnectionOptionsRequest?
        /**
         * The ID of the VPC peering connection.
         */
        var vpcPeeringConnectionId: String?

        fun build(): ModifyVpcPeeringConnectionOptionsRequest
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.PeeringConnectionOptionsRequest] inside the given [block]
         */
        fun accepterPeeringConnectionOptions(block: PeeringConnectionOptionsRequest.DslBuilder.() -> kotlin.Unit) {
            this.accepterPeeringConnectionOptions = PeeringConnectionOptionsRequest.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.PeeringConnectionOptionsRequest] inside the given [block]
         */
        fun requesterPeeringConnectionOptions(block: PeeringConnectionOptionsRequest.DslBuilder.() -> kotlin.Unit) {
            this.requesterPeeringConnectionOptions = PeeringConnectionOptionsRequest.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var accepterPeeringConnectionOptions: PeeringConnectionOptionsRequest? = null
        override var dryRun: Boolean? = null
        override var requesterPeeringConnectionOptions: PeeringConnectionOptionsRequest? = null
        override var vpcPeeringConnectionId: String? = null

        constructor(x: ModifyVpcPeeringConnectionOptionsRequest) : this() {
            this.accepterPeeringConnectionOptions = x.accepterPeeringConnectionOptions
            this.dryRun = x.dryRun
            this.requesterPeeringConnectionOptions = x.requesterPeeringConnectionOptions
            this.vpcPeeringConnectionId = x.vpcPeeringConnectionId
        }

        override fun build(): ModifyVpcPeeringConnectionOptionsRequest = ModifyVpcPeeringConnectionOptionsRequest(this)
        override fun accepterPeeringConnectionOptions(accepterPeeringConnectionOptions: PeeringConnectionOptionsRequest): FluentBuilder = apply { this.accepterPeeringConnectionOptions = accepterPeeringConnectionOptions }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun requesterPeeringConnectionOptions(requesterPeeringConnectionOptions: PeeringConnectionOptionsRequest): FluentBuilder = apply { this.requesterPeeringConnectionOptions = requesterPeeringConnectionOptions }
        override fun vpcPeeringConnectionId(vpcPeeringConnectionId: String): FluentBuilder = apply { this.vpcPeeringConnectionId = vpcPeeringConnectionId }
    }
}
