// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * The strategies for managing your Spot Instances that are at an elevated risk of being
 * interrupted.
 */
class SpotMaintenanceStrategies private constructor(builder: BuilderImpl) {
    /**
     * The strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an
     * elevated risk of being interrupted.
     */
    val capacityRebalance: SpotCapacityRebalance? = builder.capacityRebalance

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): SpotMaintenanceStrategies = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("SpotMaintenanceStrategies(")
        append("capacityRebalance=$capacityRebalance)")
    }

    override fun hashCode(): kotlin.Int {
        var result = capacityRebalance?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as SpotMaintenanceStrategies

        if (capacityRebalance != other.capacityRebalance) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): SpotMaintenanceStrategies = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): SpotMaintenanceStrategies
        /**
         * The strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an
         * elevated risk of being interrupted.
         */
        fun capacityRebalance(capacityRebalance: SpotCapacityRebalance): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an
         * elevated risk of being interrupted.
         */
        var capacityRebalance: SpotCapacityRebalance?

        fun build(): SpotMaintenanceStrategies
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.SpotCapacityRebalance] inside the given [block]
         */
        fun capacityRebalance(block: SpotCapacityRebalance.DslBuilder.() -> kotlin.Unit) {
            this.capacityRebalance = SpotCapacityRebalance.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var capacityRebalance: SpotCapacityRebalance? = null

        constructor(x: SpotMaintenanceStrategies) : this() {
            this.capacityRebalance = x.capacityRebalance
        }

        override fun build(): SpotMaintenanceStrategies = SpotMaintenanceStrategies(this)
        override fun capacityRebalance(capacityRebalance: SpotCapacityRebalance): FluentBuilder = apply { this.capacityRebalance = capacityRebalance }
    }
}
