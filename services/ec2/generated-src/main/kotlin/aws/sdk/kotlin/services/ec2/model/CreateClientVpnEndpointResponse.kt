// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class CreateClientVpnEndpointResponse private constructor(builder: BuilderImpl) {
    /**
     * The ID of the Client VPN endpoint.
     */
    val clientVpnEndpointId: String? = builder.clientVpnEndpointId
    /**
     * The DNS name to be used by clients when establishing their VPN session.
     */
    val dnsName: String? = builder.dnsName
    /**
     * The current state of the Client VPN endpoint.
     */
    val status: ClientVpnEndpointStatus? = builder.status

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CreateClientVpnEndpointResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CreateClientVpnEndpointResponse(")
        append("clientVpnEndpointId=$clientVpnEndpointId,")
        append("dnsName=$dnsName,")
        append("status=$status)")
    }

    override fun hashCode(): kotlin.Int {
        var result = clientVpnEndpointId?.hashCode() ?: 0
        result = 31 * result + (dnsName?.hashCode() ?: 0)
        result = 31 * result + (status?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CreateClientVpnEndpointResponse

        if (clientVpnEndpointId != other.clientVpnEndpointId) return false
        if (dnsName != other.dnsName) return false
        if (status != other.status) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CreateClientVpnEndpointResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CreateClientVpnEndpointResponse
        /**
         * The ID of the Client VPN endpoint.
         */
        fun clientVpnEndpointId(clientVpnEndpointId: String): FluentBuilder
        /**
         * The DNS name to be used by clients when establishing their VPN session.
         */
        fun dnsName(dnsName: String): FluentBuilder
        /**
         * The current state of the Client VPN endpoint.
         */
        fun status(status: ClientVpnEndpointStatus): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The ID of the Client VPN endpoint.
         */
        var clientVpnEndpointId: String?
        /**
         * The DNS name to be used by clients when establishing their VPN session.
         */
        var dnsName: String?
        /**
         * The current state of the Client VPN endpoint.
         */
        var status: ClientVpnEndpointStatus?

        fun build(): CreateClientVpnEndpointResponse
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.ClientVpnEndpointStatus] inside the given [block]
         */
        fun status(block: ClientVpnEndpointStatus.DslBuilder.() -> kotlin.Unit) {
            this.status = ClientVpnEndpointStatus.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var clientVpnEndpointId: String? = null
        override var dnsName: String? = null
        override var status: ClientVpnEndpointStatus? = null

        constructor(x: CreateClientVpnEndpointResponse) : this() {
            this.clientVpnEndpointId = x.clientVpnEndpointId
            this.dnsName = x.dnsName
            this.status = x.status
        }

        override fun build(): CreateClientVpnEndpointResponse = CreateClientVpnEndpointResponse(this)
        override fun clientVpnEndpointId(clientVpnEndpointId: String): FluentBuilder = apply { this.clientVpnEndpointId = clientVpnEndpointId }
        override fun dnsName(dnsName: String): FluentBuilder = apply { this.dnsName = dnsName }
        override fun status(status: ClientVpnEndpointStatus): FluentBuilder = apply { this.status = status }
    }
}
