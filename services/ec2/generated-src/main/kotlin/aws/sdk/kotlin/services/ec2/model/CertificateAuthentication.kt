// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Information about the client certificate used for authentication.
 */
class CertificateAuthentication private constructor(builder: BuilderImpl) {
    /**
     * The ARN of the client certificate.
     */
    val clientRootCertificateChain: String? = builder.clientRootCertificateChain

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CertificateAuthentication = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CertificateAuthentication(")
        append("clientRootCertificateChain=$clientRootCertificateChain)")
    }

    override fun hashCode(): kotlin.Int {
        var result = clientRootCertificateChain?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CertificateAuthentication

        if (clientRootCertificateChain != other.clientRootCertificateChain) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CertificateAuthentication = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CertificateAuthentication
        /**
         * The ARN of the client certificate.
         */
        fun clientRootCertificateChain(clientRootCertificateChain: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The ARN of the client certificate.
         */
        var clientRootCertificateChain: String?

        fun build(): CertificateAuthentication
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var clientRootCertificateChain: String? = null

        constructor(x: CertificateAuthentication) : this() {
            this.clientRootCertificateChain = x.clientRootCertificateChain
        }

        override fun build(): CertificateAuthentication = CertificateAuthentication(this)
        override fun clientRootCertificateChain(clientRootCertificateChain: String): FluentBuilder = apply { this.clientRootCertificateChain = clientRootCertificateChain }
    }
}
