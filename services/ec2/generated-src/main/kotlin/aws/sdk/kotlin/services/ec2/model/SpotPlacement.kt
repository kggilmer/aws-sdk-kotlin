// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes Spot Instance placement.
 */
class SpotPlacement private constructor(builder: BuilderImpl) {
    /**
     * The Availability Zone.
     * &#91;Spot Fleet only&#93; To specify multiple Availability Zones, separate them using commas;
     * for example, "us-west-2a, us-west-2b".
     */
    val availabilityZone: String? = builder.availabilityZone
    /**
     * The name of the placement group.
     */
    val groupName: String? = builder.groupName
    /**
     * The tenancy of the instance (if the instance is running in a VPC). An instance with a
     * tenancy of dedicated runs on single-tenant hardware. The host
     * tenancy is not supported for Spot Instances.
     */
    val tenancy: Tenancy? = builder.tenancy

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): SpotPlacement = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("SpotPlacement(")
        append("availabilityZone=$availabilityZone,")
        append("groupName=$groupName,")
        append("tenancy=$tenancy)")
    }

    override fun hashCode(): kotlin.Int {
        var result = availabilityZone?.hashCode() ?: 0
        result = 31 * result + (groupName?.hashCode() ?: 0)
        result = 31 * result + (tenancy?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as SpotPlacement

        if (availabilityZone != other.availabilityZone) return false
        if (groupName != other.groupName) return false
        if (tenancy != other.tenancy) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): SpotPlacement = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): SpotPlacement
        /**
         * The Availability Zone.
         * &#91;Spot Fleet only&#93; To specify multiple Availability Zones, separate them using commas;
         * for example, "us-west-2a, us-west-2b".
         */
        fun availabilityZone(availabilityZone: String): FluentBuilder
        /**
         * The name of the placement group.
         */
        fun groupName(groupName: String): FluentBuilder
        /**
         * The tenancy of the instance (if the instance is running in a VPC). An instance with a
         * tenancy of dedicated runs on single-tenant hardware. The host
         * tenancy is not supported for Spot Instances.
         */
        fun tenancy(tenancy: Tenancy): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The Availability Zone.
         * &#91;Spot Fleet only&#93; To specify multiple Availability Zones, separate them using commas;
         * for example, "us-west-2a, us-west-2b".
         */
        var availabilityZone: String?
        /**
         * The name of the placement group.
         */
        var groupName: String?
        /**
         * The tenancy of the instance (if the instance is running in a VPC). An instance with a
         * tenancy of dedicated runs on single-tenant hardware. The host
         * tenancy is not supported for Spot Instances.
         */
        var tenancy: Tenancy?

        fun build(): SpotPlacement
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var availabilityZone: String? = null
        override var groupName: String? = null
        override var tenancy: Tenancy? = null

        constructor(x: SpotPlacement) : this() {
            this.availabilityZone = x.availabilityZone
            this.groupName = x.groupName
            this.tenancy = x.tenancy
        }

        override fun build(): SpotPlacement = SpotPlacement(this)
        override fun availabilityZone(availabilityZone: String): FluentBuilder = apply { this.availabilityZone = availabilityZone }
        override fun groupName(groupName: String): FluentBuilder = apply { this.groupName = groupName }
        override fun tenancy(tenancy: Tenancy): FluentBuilder = apply { this.tenancy = tenancy }
    }
}
