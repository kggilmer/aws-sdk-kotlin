// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * The targets to disassociate from the specified event window.
 */
class InstanceEventWindowDisassociationRequest private constructor(builder: BuilderImpl) {
    /**
     * The IDs of the Dedicated Hosts to disassociate from the event window.
     */
    val dedicatedHostIds: List<String>? = builder.dedicatedHostIds
    /**
     * The IDs of the instances to disassociate from the event window.
     */
    val instanceIds: List<String>? = builder.instanceIds
    /**
     * The instance tags to disassociate from the event window. Any instances associated with
     * the tags will be disassociated from the event window.
     */
    val instanceTags: List<Tag>? = builder.instanceTags

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): InstanceEventWindowDisassociationRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("InstanceEventWindowDisassociationRequest(")
        append("dedicatedHostIds=$dedicatedHostIds,")
        append("instanceIds=$instanceIds,")
        append("instanceTags=$instanceTags)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dedicatedHostIds?.hashCode() ?: 0
        result = 31 * result + (instanceIds?.hashCode() ?: 0)
        result = 31 * result + (instanceTags?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as InstanceEventWindowDisassociationRequest

        if (dedicatedHostIds != other.dedicatedHostIds) return false
        if (instanceIds != other.instanceIds) return false
        if (instanceTags != other.instanceTags) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): InstanceEventWindowDisassociationRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): InstanceEventWindowDisassociationRequest
        /**
         * The IDs of the Dedicated Hosts to disassociate from the event window.
         */
        fun dedicatedHostIds(dedicatedHostIds: List<String>): FluentBuilder
        /**
         * The IDs of the instances to disassociate from the event window.
         */
        fun instanceIds(instanceIds: List<String>): FluentBuilder
        /**
         * The instance tags to disassociate from the event window. Any instances associated with
         * the tags will be disassociated from the event window.
         */
        fun instanceTags(instanceTags: List<Tag>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The IDs of the Dedicated Hosts to disassociate from the event window.
         */
        var dedicatedHostIds: List<String>?
        /**
         * The IDs of the instances to disassociate from the event window.
         */
        var instanceIds: List<String>?
        /**
         * The instance tags to disassociate from the event window. Any instances associated with
         * the tags will be disassociated from the event window.
         */
        var instanceTags: List<Tag>?

        fun build(): InstanceEventWindowDisassociationRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dedicatedHostIds: List<String>? = null
        override var instanceIds: List<String>? = null
        override var instanceTags: List<Tag>? = null

        constructor(x: InstanceEventWindowDisassociationRequest) : this() {
            this.dedicatedHostIds = x.dedicatedHostIds
            this.instanceIds = x.instanceIds
            this.instanceTags = x.instanceTags
        }

        override fun build(): InstanceEventWindowDisassociationRequest = InstanceEventWindowDisassociationRequest(this)
        override fun dedicatedHostIds(dedicatedHostIds: List<String>): FluentBuilder = apply { this.dedicatedHostIds = dedicatedHostIds }
        override fun instanceIds(instanceIds: List<String>): FluentBuilder = apply { this.instanceIds = instanceIds }
        override fun instanceTags(instanceTags: List<Tag>): FluentBuilder = apply { this.instanceTags = instanceTags }
    }
}
