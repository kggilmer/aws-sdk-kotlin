// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a DHCP configuration option.
 */
class DhcpConfiguration private constructor(builder: BuilderImpl) {
    /**
     * The name of a DHCP option.
     */
    val key: String? = builder.key
    /**
     * One or more values for the DHCP option.
     */
    val values: List<AttributeValue>? = builder.values

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DhcpConfiguration = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DhcpConfiguration(")
        append("key=$key,")
        append("values=$values)")
    }

    override fun hashCode(): kotlin.Int {
        var result = key?.hashCode() ?: 0
        result = 31 * result + (values?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DhcpConfiguration

        if (key != other.key) return false
        if (values != other.values) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DhcpConfiguration = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DhcpConfiguration
        /**
         * The name of a DHCP option.
         */
        fun key(key: String): FluentBuilder
        /**
         * One or more values for the DHCP option.
         */
        fun values(values: List<AttributeValue>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The name of a DHCP option.
         */
        var key: String?
        /**
         * One or more values for the DHCP option.
         */
        var values: List<AttributeValue>?

        fun build(): DhcpConfiguration
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var key: String? = null
        override var values: List<AttributeValue>? = null

        constructor(x: DhcpConfiguration) : this() {
            this.key = x.key
            this.values = x.values
        }

        override fun build(): DhcpConfiguration = DhcpConfiguration(this)
        override fun key(key: String): FluentBuilder = apply { this.key = key }
        override fun values(values: List<AttributeValue>): FluentBuilder = apply { this.values = values }
    }
}
