// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class CreatePlacementGroupRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * A name for the placement group. Must be unique within the scope of your account for
     * the Region.
     * Constraints: Up to 255 ASCII characters
     */
    val groupName: String? = builder.groupName
    /**
     * The number of partitions. Valid only when Strategy is
     * set to partition.
     */
    val partitionCount: Int? = builder.partitionCount
    /**
     * The placement strategy.
     */
    val strategy: PlacementStrategy? = builder.strategy
    /**
     * The tags to apply to the new placement group.
     */
    val tagSpecifications: List<TagSpecification>? = builder.tagSpecifications

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CreatePlacementGroupRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CreatePlacementGroupRequest(")
        append("dryRun=$dryRun,")
        append("groupName=$groupName,")
        append("partitionCount=$partitionCount,")
        append("strategy=$strategy,")
        append("tagSpecifications=$tagSpecifications)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (groupName?.hashCode() ?: 0)
        result = 31 * result + (partitionCount ?: 0)
        result = 31 * result + (strategy?.hashCode() ?: 0)
        result = 31 * result + (tagSpecifications?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CreatePlacementGroupRequest

        if (dryRun != other.dryRun) return false
        if (groupName != other.groupName) return false
        if (partitionCount != other.partitionCount) return false
        if (strategy != other.strategy) return false
        if (tagSpecifications != other.tagSpecifications) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CreatePlacementGroupRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CreatePlacementGroupRequest
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * A name for the placement group. Must be unique within the scope of your account for
         * the Region.
         * Constraints: Up to 255 ASCII characters
         */
        fun groupName(groupName: String): FluentBuilder
        /**
         * The number of partitions. Valid only when Strategy is
         * set to partition.
         */
        fun partitionCount(partitionCount: Int): FluentBuilder
        /**
         * The placement strategy.
         */
        fun strategy(strategy: PlacementStrategy): FluentBuilder
        /**
         * The tags to apply to the new placement group.
         */
        fun tagSpecifications(tagSpecifications: List<TagSpecification>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * A name for the placement group. Must be unique within the scope of your account for
         * the Region.
         * Constraints: Up to 255 ASCII characters
         */
        var groupName: String?
        /**
         * The number of partitions. Valid only when Strategy is
         * set to partition.
         */
        var partitionCount: Int?
        /**
         * The placement strategy.
         */
        var strategy: PlacementStrategy?
        /**
         * The tags to apply to the new placement group.
         */
        var tagSpecifications: List<TagSpecification>?

        fun build(): CreatePlacementGroupRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var groupName: String? = null
        override var partitionCount: Int? = null
        override var strategy: PlacementStrategy? = null
        override var tagSpecifications: List<TagSpecification>? = null

        constructor(x: CreatePlacementGroupRequest) : this() {
            this.dryRun = x.dryRun
            this.groupName = x.groupName
            this.partitionCount = x.partitionCount
            this.strategy = x.strategy
            this.tagSpecifications = x.tagSpecifications
        }

        override fun build(): CreatePlacementGroupRequest = CreatePlacementGroupRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun groupName(groupName: String): FluentBuilder = apply { this.groupName = groupName }
        override fun partitionCount(partitionCount: Int): FluentBuilder = apply { this.partitionCount = partitionCount }
        override fun strategy(strategy: PlacementStrategy): FluentBuilder = apply { this.strategy = strategy }
        override fun tagSpecifications(tagSpecifications: List<TagSpecification>): FluentBuilder = apply { this.tagSpecifications = tagSpecifications }
    }
}
