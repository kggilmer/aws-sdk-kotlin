// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a recurring charge.
 */
class RecurringCharge private constructor(builder: BuilderImpl) {
    /**
     * The amount of the recurring charge.
     */
    val amount: Double? = builder.amount
    /**
     * The frequency of the recurring charge.
     */
    val frequency: RecurringChargeFrequency? = builder.frequency

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): RecurringCharge = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("RecurringCharge(")
        append("amount=$amount,")
        append("frequency=$frequency)")
    }

    override fun hashCode(): kotlin.Int {
        var result = amount?.hashCode() ?: 0
        result = 31 * result + (frequency?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as RecurringCharge

        if (amount != other.amount) return false
        if (frequency != other.frequency) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): RecurringCharge = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): RecurringCharge
        /**
         * The amount of the recurring charge.
         */
        fun amount(amount: Double): FluentBuilder
        /**
         * The frequency of the recurring charge.
         */
        fun frequency(frequency: RecurringChargeFrequency): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The amount of the recurring charge.
         */
        var amount: Double?
        /**
         * The frequency of the recurring charge.
         */
        var frequency: RecurringChargeFrequency?

        fun build(): RecurringCharge
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var amount: Double? = null
        override var frequency: RecurringChargeFrequency? = null

        constructor(x: RecurringCharge) : this() {
            this.amount = x.amount
            this.frequency = x.frequency
        }

        override fun build(): RecurringCharge = RecurringCharge(this)
        override fun amount(amount: Double): FluentBuilder = apply { this.amount = amount }
        override fun frequency(frequency: RecurringChargeFrequency): FluentBuilder = apply { this.frequency = frequency }
    }
}
