// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class CreateDhcpOptionsResponse private constructor(builder: BuilderImpl) {
    /**
     * A set of DHCP options.
     */
    val dhcpOptions: DhcpOptions? = builder.dhcpOptions

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CreateDhcpOptionsResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CreateDhcpOptionsResponse(")
        append("dhcpOptions=$dhcpOptions)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dhcpOptions?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CreateDhcpOptionsResponse

        if (dhcpOptions != other.dhcpOptions) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CreateDhcpOptionsResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CreateDhcpOptionsResponse
        /**
         * A set of DHCP options.
         */
        fun dhcpOptions(dhcpOptions: DhcpOptions): FluentBuilder
    }

    interface DslBuilder {
        /**
         * A set of DHCP options.
         */
        var dhcpOptions: DhcpOptions?

        fun build(): CreateDhcpOptionsResponse
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.DhcpOptions] inside the given [block]
         */
        fun dhcpOptions(block: DhcpOptions.DslBuilder.() -> kotlin.Unit) {
            this.dhcpOptions = DhcpOptions.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dhcpOptions: DhcpOptions? = null

        constructor(x: CreateDhcpOptionsResponse) : this() {
            this.dhcpOptions = x.dhcpOptions
        }

        override fun build(): CreateDhcpOptionsResponse = CreateDhcpOptionsResponse(this)
        override fun dhcpOptions(dhcpOptions: DhcpOptions): FluentBuilder = apply { this.dhcpOptions = dhcpOptions }
    }
}
