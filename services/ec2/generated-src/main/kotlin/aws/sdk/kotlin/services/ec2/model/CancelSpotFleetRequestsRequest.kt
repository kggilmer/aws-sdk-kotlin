// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Contains the parameters for CancelSpotFleetRequests.
 */
class CancelSpotFleetRequestsRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually
     * making the request, and provides an error response. If you have the required
     * permissions, the error response is DryRunOperation. Otherwise, it is
     * UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The IDs of the Spot Fleet requests.
     */
    val spotFleetRequestIds: List<String>? = builder.spotFleetRequestIds
    /**
     * Indicates whether to terminate instances for a Spot Fleet request if it is canceled
     * successfully.
     */
    val terminateInstances: Boolean? = builder.terminateInstances

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CancelSpotFleetRequestsRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CancelSpotFleetRequestsRequest(")
        append("dryRun=$dryRun,")
        append("spotFleetRequestIds=$spotFleetRequestIds,")
        append("terminateInstances=$terminateInstances)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (spotFleetRequestIds?.hashCode() ?: 0)
        result = 31 * result + (terminateInstances?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CancelSpotFleetRequestsRequest

        if (dryRun != other.dryRun) return false
        if (spotFleetRequestIds != other.spotFleetRequestIds) return false
        if (terminateInstances != other.terminateInstances) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CancelSpotFleetRequestsRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CancelSpotFleetRequestsRequest
        /**
         * Checks whether you have the required permissions for the action, without actually
         * making the request, and provides an error response. If you have the required
         * permissions, the error response is DryRunOperation. Otherwise, it is
         * UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The IDs of the Spot Fleet requests.
         */
        fun spotFleetRequestIds(spotFleetRequestIds: List<String>): FluentBuilder
        /**
         * Indicates whether to terminate instances for a Spot Fleet request if it is canceled
         * successfully.
         */
        fun terminateInstances(terminateInstances: Boolean): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually
         * making the request, and provides an error response. If you have the required
         * permissions, the error response is DryRunOperation. Otherwise, it is
         * UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The IDs of the Spot Fleet requests.
         */
        var spotFleetRequestIds: List<String>?
        /**
         * Indicates whether to terminate instances for a Spot Fleet request if it is canceled
         * successfully.
         */
        var terminateInstances: Boolean?

        fun build(): CancelSpotFleetRequestsRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var spotFleetRequestIds: List<String>? = null
        override var terminateInstances: Boolean? = null

        constructor(x: CancelSpotFleetRequestsRequest) : this() {
            this.dryRun = x.dryRun
            this.spotFleetRequestIds = x.spotFleetRequestIds
            this.terminateInstances = x.terminateInstances
        }

        override fun build(): CancelSpotFleetRequestsRequest = CancelSpotFleetRequestsRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun spotFleetRequestIds(spotFleetRequestIds: List<String>): FluentBuilder = apply { this.spotFleetRequestIds = spotFleetRequestIds }
        override fun terminateInstances(terminateInstances: Boolean): FluentBuilder = apply { this.terminateInstances = terminateInstances }
    }
}
