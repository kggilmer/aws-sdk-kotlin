// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class DescribeVolumesModificationsRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The filters.
     * modification-state - The current modification state (modifying |
     * optimizing | completed | failed).
     * original-iops - The original IOPS rate of the volume.
     * original-size - The original size of the volume, in GiB.
     * original-volume-type - The original volume type of the volume (standard |
     * io1 | io2 | gp2 | sc1 | st1).
     * originalMultiAttachEnabled - Indicates whether Multi-Attach support was enabled (true | false).
     * start-time - The modification start time.
     * target-iops - The target IOPS rate of the volume.
     * target-size - The target size of the volume, in GiB.
     * target-volume-type - The target volume type of the volume (standard |
     * io1 | io2 | gp2 | sc1 | st1).
     * targetMultiAttachEnabled - Indicates whether Multi-Attach support is to be enabled (true | false).
     * volume-id - The ID of the volume.
     */
    val filters: List<Filter>? = builder.filters
    /**
     * The maximum number of results (up to a limit of 500) to be returned in a paginated
     * request.
     */
    val maxResults: Int? = builder.maxResults
    /**
     * The nextToken value returned by a previous paginated request.
     */
    val nextToken: String? = builder.nextToken
    /**
     * The IDs of the volumes.
     */
    val volumeIds: List<String>? = builder.volumeIds

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DescribeVolumesModificationsRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DescribeVolumesModificationsRequest(")
        append("dryRun=$dryRun,")
        append("filters=$filters,")
        append("maxResults=$maxResults,")
        append("nextToken=$nextToken,")
        append("volumeIds=$volumeIds)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (filters?.hashCode() ?: 0)
        result = 31 * result + (maxResults ?: 0)
        result = 31 * result + (nextToken?.hashCode() ?: 0)
        result = 31 * result + (volumeIds?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DescribeVolumesModificationsRequest

        if (dryRun != other.dryRun) return false
        if (filters != other.filters) return false
        if (maxResults != other.maxResults) return false
        if (nextToken != other.nextToken) return false
        if (volumeIds != other.volumeIds) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DescribeVolumesModificationsRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DescribeVolumesModificationsRequest
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The filters.
         * modification-state - The current modification state (modifying |
         * optimizing | completed | failed).
         * original-iops - The original IOPS rate of the volume.
         * original-size - The original size of the volume, in GiB.
         * original-volume-type - The original volume type of the volume (standard |
         * io1 | io2 | gp2 | sc1 | st1).
         * originalMultiAttachEnabled - Indicates whether Multi-Attach support was enabled (true | false).
         * start-time - The modification start time.
         * target-iops - The target IOPS rate of the volume.
         * target-size - The target size of the volume, in GiB.
         * target-volume-type - The target volume type of the volume (standard |
         * io1 | io2 | gp2 | sc1 | st1).
         * targetMultiAttachEnabled - Indicates whether Multi-Attach support is to be enabled (true | false).
         * volume-id - The ID of the volume.
         */
        fun filters(filters: List<Filter>): FluentBuilder
        /**
         * The maximum number of results (up to a limit of 500) to be returned in a paginated
         * request.
         */
        fun maxResults(maxResults: Int): FluentBuilder
        /**
         * The nextToken value returned by a previous paginated request.
         */
        fun nextToken(nextToken: String): FluentBuilder
        /**
         * The IDs of the volumes.
         */
        fun volumeIds(volumeIds: List<String>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The filters.
         * modification-state - The current modification state (modifying |
         * optimizing | completed | failed).
         * original-iops - The original IOPS rate of the volume.
         * original-size - The original size of the volume, in GiB.
         * original-volume-type - The original volume type of the volume (standard |
         * io1 | io2 | gp2 | sc1 | st1).
         * originalMultiAttachEnabled - Indicates whether Multi-Attach support was enabled (true | false).
         * start-time - The modification start time.
         * target-iops - The target IOPS rate of the volume.
         * target-size - The target size of the volume, in GiB.
         * target-volume-type - The target volume type of the volume (standard |
         * io1 | io2 | gp2 | sc1 | st1).
         * targetMultiAttachEnabled - Indicates whether Multi-Attach support is to be enabled (true | false).
         * volume-id - The ID of the volume.
         */
        var filters: List<Filter>?
        /**
         * The maximum number of results (up to a limit of 500) to be returned in a paginated
         * request.
         */
        var maxResults: Int?
        /**
         * The nextToken value returned by a previous paginated request.
         */
        var nextToken: String?
        /**
         * The IDs of the volumes.
         */
        var volumeIds: List<String>?

        fun build(): DescribeVolumesModificationsRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var filters: List<Filter>? = null
        override var maxResults: Int? = null
        override var nextToken: String? = null
        override var volumeIds: List<String>? = null

        constructor(x: DescribeVolumesModificationsRequest) : this() {
            this.dryRun = x.dryRun
            this.filters = x.filters
            this.maxResults = x.maxResults
            this.nextToken = x.nextToken
            this.volumeIds = x.volumeIds
        }

        override fun build(): DescribeVolumesModificationsRequest = DescribeVolumesModificationsRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun filters(filters: List<Filter>): FluentBuilder = apply { this.filters = filters }
        override fun maxResults(maxResults: Int): FluentBuilder = apply { this.maxResults = maxResults }
        override fun nextToken(nextToken: String): FluentBuilder = apply { this.nextToken = nextToken }
        override fun volumeIds(volumeIds: List<String>): FluentBuilder = apply { this.volumeIds = volumeIds }
    }
}
