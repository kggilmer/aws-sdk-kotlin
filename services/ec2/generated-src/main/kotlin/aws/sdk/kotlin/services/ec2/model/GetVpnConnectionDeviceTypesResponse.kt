// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class GetVpnConnectionDeviceTypesResponse private constructor(builder: BuilderImpl) {
    /**
     * The NextToken value to include in a future
     * GetVpnConnectionDeviceTypes request. When the results of a
     * GetVpnConnectionDeviceTypes request exceed MaxResults,
     * this value can be used to retrieve the next page of results. This value is null when
     * there are no more results to return.
     */
    val nextToken: String? = builder.nextToken
    /**
     * List of customer gateway devices that have a sample configuration file available for
     * use.
     */
    val vpnConnectionDeviceTypes: List<VpnConnectionDeviceType>? = builder.vpnConnectionDeviceTypes

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): GetVpnConnectionDeviceTypesResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("GetVpnConnectionDeviceTypesResponse(")
        append("nextToken=$nextToken,")
        append("vpnConnectionDeviceTypes=$vpnConnectionDeviceTypes)")
    }

    override fun hashCode(): kotlin.Int {
        var result = nextToken?.hashCode() ?: 0
        result = 31 * result + (vpnConnectionDeviceTypes?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as GetVpnConnectionDeviceTypesResponse

        if (nextToken != other.nextToken) return false
        if (vpnConnectionDeviceTypes != other.vpnConnectionDeviceTypes) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): GetVpnConnectionDeviceTypesResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): GetVpnConnectionDeviceTypesResponse
        /**
         * The NextToken value to include in a future
         * GetVpnConnectionDeviceTypes request. When the results of a
         * GetVpnConnectionDeviceTypes request exceed MaxResults,
         * this value can be used to retrieve the next page of results. This value is null when
         * there are no more results to return.
         */
        fun nextToken(nextToken: String): FluentBuilder
        /**
         * List of customer gateway devices that have a sample configuration file available for
         * use.
         */
        fun vpnConnectionDeviceTypes(vpnConnectionDeviceTypes: List<VpnConnectionDeviceType>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The NextToken value to include in a future
         * GetVpnConnectionDeviceTypes request. When the results of a
         * GetVpnConnectionDeviceTypes request exceed MaxResults,
         * this value can be used to retrieve the next page of results. This value is null when
         * there are no more results to return.
         */
        var nextToken: String?
        /**
         * List of customer gateway devices that have a sample configuration file available for
         * use.
         */
        var vpnConnectionDeviceTypes: List<VpnConnectionDeviceType>?

        fun build(): GetVpnConnectionDeviceTypesResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var nextToken: String? = null
        override var vpnConnectionDeviceTypes: List<VpnConnectionDeviceType>? = null

        constructor(x: GetVpnConnectionDeviceTypesResponse) : this() {
            this.nextToken = x.nextToken
            this.vpnConnectionDeviceTypes = x.vpnConnectionDeviceTypes
        }

        override fun build(): GetVpnConnectionDeviceTypesResponse = GetVpnConnectionDeviceTypesResponse(this)
        override fun nextToken(nextToken: String): FluentBuilder = apply { this.nextToken = nextToken }
        override fun vpnConnectionDeviceTypes(vpnConnectionDeviceTypes: List<VpnConnectionDeviceType>): FluentBuilder = apply { this.vpnConnectionDeviceTypes = vpnConnectionDeviceTypes }
    }
}
