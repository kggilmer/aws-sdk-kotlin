// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a target network that is associated with a Client VPN endpoint. A target network is a subnet in a VPC.
 */
class AssociatedTargetNetwork private constructor(builder: BuilderImpl) {
    /**
     * The ID of the subnet.
     */
    val networkId: String? = builder.networkId
    /**
     * The target network type.
     */
    val networkType: AssociatedNetworkType? = builder.networkType

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): AssociatedTargetNetwork = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("AssociatedTargetNetwork(")
        append("networkId=$networkId,")
        append("networkType=$networkType)")
    }

    override fun hashCode(): kotlin.Int {
        var result = networkId?.hashCode() ?: 0
        result = 31 * result + (networkType?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as AssociatedTargetNetwork

        if (networkId != other.networkId) return false
        if (networkType != other.networkType) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): AssociatedTargetNetwork = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): AssociatedTargetNetwork
        /**
         * The ID of the subnet.
         */
        fun networkId(networkId: String): FluentBuilder
        /**
         * The target network type.
         */
        fun networkType(networkType: AssociatedNetworkType): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The ID of the subnet.
         */
        var networkId: String?
        /**
         * The target network type.
         */
        var networkType: AssociatedNetworkType?

        fun build(): AssociatedTargetNetwork
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var networkId: String? = null
        override var networkType: AssociatedNetworkType? = null

        constructor(x: AssociatedTargetNetwork) : this() {
            this.networkId = x.networkId
            this.networkType = x.networkType
        }

        override fun build(): AssociatedTargetNetwork = AssociatedTargetNetwork(this)
        override fun networkId(networkId: String): FluentBuilder = apply { this.networkId = networkId }
        override fun networkType(networkType: AssociatedNetworkType): FluentBuilder = apply { this.networkType = networkType }
    }
}
