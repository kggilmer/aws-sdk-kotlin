// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Contains the output of BundleInstance.
 */
class BundleInstanceResponse private constructor(builder: BuilderImpl) {
    /**
     * Information about the bundle task.
     */
    val bundleTask: BundleTask? = builder.bundleTask

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): BundleInstanceResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("BundleInstanceResponse(")
        append("bundleTask=$bundleTask)")
    }

    override fun hashCode(): kotlin.Int {
        var result = bundleTask?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as BundleInstanceResponse

        if (bundleTask != other.bundleTask) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): BundleInstanceResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): BundleInstanceResponse
        /**
         * Information about the bundle task.
         */
        fun bundleTask(bundleTask: BundleTask): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Information about the bundle task.
         */
        var bundleTask: BundleTask?

        fun build(): BundleInstanceResponse
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.BundleTask] inside the given [block]
         */
        fun bundleTask(block: BundleTask.DslBuilder.() -> kotlin.Unit) {
            this.bundleTask = BundleTask.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var bundleTask: BundleTask? = null

        constructor(x: BundleInstanceResponse) : this() {
            this.bundleTask = x.bundleTask
        }

        override fun build(): BundleInstanceResponse = BundleInstanceResponse(this)
        override fun bundleTask(bundleTask: BundleTask): FluentBuilder = apply { this.bundleTask = bundleTask }
    }
}
