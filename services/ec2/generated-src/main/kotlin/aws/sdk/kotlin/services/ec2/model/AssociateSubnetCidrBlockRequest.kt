// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class AssociateSubnetCidrBlockRequest private constructor(builder: BuilderImpl) {
    /**
     * The IPv6 CIDR block for your subnet. The subnet must have a /64 prefix
     * length.
     */
    val ipv6CidrBlock: String? = builder.ipv6CidrBlock
    /**
     * The ID of your subnet.
     */
    val subnetId: String? = builder.subnetId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): AssociateSubnetCidrBlockRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("AssociateSubnetCidrBlockRequest(")
        append("ipv6CidrBlock=$ipv6CidrBlock,")
        append("subnetId=$subnetId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = ipv6CidrBlock?.hashCode() ?: 0
        result = 31 * result + (subnetId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as AssociateSubnetCidrBlockRequest

        if (ipv6CidrBlock != other.ipv6CidrBlock) return false
        if (subnetId != other.subnetId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): AssociateSubnetCidrBlockRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): AssociateSubnetCidrBlockRequest
        /**
         * The IPv6 CIDR block for your subnet. The subnet must have a /64 prefix
         * length.
         */
        fun ipv6CidrBlock(ipv6CidrBlock: String): FluentBuilder
        /**
         * The ID of your subnet.
         */
        fun subnetId(subnetId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The IPv6 CIDR block for your subnet. The subnet must have a /64 prefix
         * length.
         */
        var ipv6CidrBlock: String?
        /**
         * The ID of your subnet.
         */
        var subnetId: String?

        fun build(): AssociateSubnetCidrBlockRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var ipv6CidrBlock: String? = null
        override var subnetId: String? = null

        constructor(x: AssociateSubnetCidrBlockRequest) : this() {
            this.ipv6CidrBlock = x.ipv6CidrBlock
            this.subnetId = x.subnetId
        }

        override fun build(): AssociateSubnetCidrBlockRequest = AssociateSubnetCidrBlockRequest(this)
        override fun ipv6CidrBlock(ipv6CidrBlock: String): FluentBuilder = apply { this.ipv6CidrBlock = ipv6CidrBlock }
        override fun subnetId(subnetId: String): FluentBuilder = apply { this.subnetId = subnetId }
    }
}
