// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ExportTransitGatewayRoutesRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * One or more filters. The possible values are:
     * attachment.transit-gateway-attachment-id - The id of the transit gateway attachment.
     * attachment.resource-id - The resource id of the transit gateway attachment.
     * route-search.exact-match - The exact match of the specified filter.
     * route-search.longest-prefix-match - The longest prefix that matches the route.
     * route-search.subnet-of-match - The routes with a subnet that match the specified CIDR filter.
     * route-search.supernet-of-match - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.
     * state - The state of the route (active | blackhole).
     * transit-gateway-route-destination-cidr-block - The CIDR range.
     * type - The type of route (propagated |
     * static).
     */
    val filters: List<Filter>? = builder.filters
    /**
     * The name of the S3 bucket.
     */
    val s3Bucket: String? = builder.s3Bucket
    /**
     * The ID of the route table.
     */
    val transitGatewayRouteTableId: String? = builder.transitGatewayRouteTableId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ExportTransitGatewayRoutesRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ExportTransitGatewayRoutesRequest(")
        append("dryRun=$dryRun,")
        append("filters=$filters,")
        append("s3Bucket=$s3Bucket,")
        append("transitGatewayRouteTableId=$transitGatewayRouteTableId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (filters?.hashCode() ?: 0)
        result = 31 * result + (s3Bucket?.hashCode() ?: 0)
        result = 31 * result + (transitGatewayRouteTableId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ExportTransitGatewayRoutesRequest

        if (dryRun != other.dryRun) return false
        if (filters != other.filters) return false
        if (s3Bucket != other.s3Bucket) return false
        if (transitGatewayRouteTableId != other.transitGatewayRouteTableId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ExportTransitGatewayRoutesRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ExportTransitGatewayRoutesRequest
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * One or more filters. The possible values are:
         * attachment.transit-gateway-attachment-id - The id of the transit gateway attachment.
         * attachment.resource-id - The resource id of the transit gateway attachment.
         * route-search.exact-match - The exact match of the specified filter.
         * route-search.longest-prefix-match - The longest prefix that matches the route.
         * route-search.subnet-of-match - The routes with a subnet that match the specified CIDR filter.
         * route-search.supernet-of-match - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.
         * state - The state of the route (active | blackhole).
         * transit-gateway-route-destination-cidr-block - The CIDR range.
         * type - The type of route (propagated |
         * static).
         */
        fun filters(filters: List<Filter>): FluentBuilder
        /**
         * The name of the S3 bucket.
         */
        fun s3Bucket(s3Bucket: String): FluentBuilder
        /**
         * The ID of the route table.
         */
        fun transitGatewayRouteTableId(transitGatewayRouteTableId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * One or more filters. The possible values are:
         * attachment.transit-gateway-attachment-id - The id of the transit gateway attachment.
         * attachment.resource-id - The resource id of the transit gateway attachment.
         * route-search.exact-match - The exact match of the specified filter.
         * route-search.longest-prefix-match - The longest prefix that matches the route.
         * route-search.subnet-of-match - The routes with a subnet that match the specified CIDR filter.
         * route-search.supernet-of-match - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.
         * state - The state of the route (active | blackhole).
         * transit-gateway-route-destination-cidr-block - The CIDR range.
         * type - The type of route (propagated |
         * static).
         */
        var filters: List<Filter>?
        /**
         * The name of the S3 bucket.
         */
        var s3Bucket: String?
        /**
         * The ID of the route table.
         */
        var transitGatewayRouteTableId: String?

        fun build(): ExportTransitGatewayRoutesRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var filters: List<Filter>? = null
        override var s3Bucket: String? = null
        override var transitGatewayRouteTableId: String? = null

        constructor(x: ExportTransitGatewayRoutesRequest) : this() {
            this.dryRun = x.dryRun
            this.filters = x.filters
            this.s3Bucket = x.s3Bucket
            this.transitGatewayRouteTableId = x.transitGatewayRouteTableId
        }

        override fun build(): ExportTransitGatewayRoutesRequest = ExportTransitGatewayRoutesRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun filters(filters: List<Filter>): FluentBuilder = apply { this.filters = filters }
        override fun s3Bucket(s3Bucket: String): FluentBuilder = apply { this.s3Bucket = s3Bucket }
        override fun transitGatewayRouteTableId(transitGatewayRouteTableId: String): FluentBuilder = apply { this.transitGatewayRouteTableId = transitGatewayRouteTableId }
    }
}
