// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes an Amazon FPGA image (AFI) attribute.
 */
class FpgaImageAttribute private constructor(builder: BuilderImpl) {
    /**
     * The description of the AFI.
     */
    val description: String? = builder.description
    /**
     * The ID of the AFI.
     */
    val fpgaImageId: String? = builder.fpgaImageId
    /**
     * The load permissions.
     */
    val loadPermissions: List<LoadPermission>? = builder.loadPermissions
    /**
     * The name of the AFI.
     */
    val name: String? = builder.name
    /**
     * The product codes.
     */
    val productCodes: List<ProductCode>? = builder.productCodes

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): FpgaImageAttribute = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("FpgaImageAttribute(")
        append("description=$description,")
        append("fpgaImageId=$fpgaImageId,")
        append("loadPermissions=$loadPermissions,")
        append("name=$name,")
        append("productCodes=$productCodes)")
    }

    override fun hashCode(): kotlin.Int {
        var result = description?.hashCode() ?: 0
        result = 31 * result + (fpgaImageId?.hashCode() ?: 0)
        result = 31 * result + (loadPermissions?.hashCode() ?: 0)
        result = 31 * result + (name?.hashCode() ?: 0)
        result = 31 * result + (productCodes?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as FpgaImageAttribute

        if (description != other.description) return false
        if (fpgaImageId != other.fpgaImageId) return false
        if (loadPermissions != other.loadPermissions) return false
        if (name != other.name) return false
        if (productCodes != other.productCodes) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): FpgaImageAttribute = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): FpgaImageAttribute
        /**
         * The description of the AFI.
         */
        fun description(description: String): FluentBuilder
        /**
         * The ID of the AFI.
         */
        fun fpgaImageId(fpgaImageId: String): FluentBuilder
        /**
         * The load permissions.
         */
        fun loadPermissions(loadPermissions: List<LoadPermission>): FluentBuilder
        /**
         * The name of the AFI.
         */
        fun name(name: String): FluentBuilder
        /**
         * The product codes.
         */
        fun productCodes(productCodes: List<ProductCode>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The description of the AFI.
         */
        var description: String?
        /**
         * The ID of the AFI.
         */
        var fpgaImageId: String?
        /**
         * The load permissions.
         */
        var loadPermissions: List<LoadPermission>?
        /**
         * The name of the AFI.
         */
        var name: String?
        /**
         * The product codes.
         */
        var productCodes: List<ProductCode>?

        fun build(): FpgaImageAttribute
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var description: String? = null
        override var fpgaImageId: String? = null
        override var loadPermissions: List<LoadPermission>? = null
        override var name: String? = null
        override var productCodes: List<ProductCode>? = null

        constructor(x: FpgaImageAttribute) : this() {
            this.description = x.description
            this.fpgaImageId = x.fpgaImageId
            this.loadPermissions = x.loadPermissions
            this.name = x.name
            this.productCodes = x.productCodes
        }

        override fun build(): FpgaImageAttribute = FpgaImageAttribute(this)
        override fun description(description: String): FluentBuilder = apply { this.description = description }
        override fun fpgaImageId(fpgaImageId: String): FluentBuilder = apply { this.fpgaImageId = fpgaImageId }
        override fun loadPermissions(loadPermissions: List<LoadPermission>): FluentBuilder = apply { this.loadPermissions = loadPermissions }
        override fun name(name: String): FluentBuilder = apply { this.name = name }
        override fun productCodes(productCodes: List<ProductCode>): FluentBuilder = apply { this.productCodes = productCodes }
    }
}
