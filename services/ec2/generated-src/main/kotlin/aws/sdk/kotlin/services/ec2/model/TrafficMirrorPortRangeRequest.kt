// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Information about the Traffic Mirror filter rule port range.
 */
class TrafficMirrorPortRangeRequest private constructor(builder: BuilderImpl) {
    /**
     * The first port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
     */
    val fromPort: Int? = builder.fromPort
    /**
     * The last port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
     */
    val toPort: Int? = builder.toPort

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): TrafficMirrorPortRangeRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("TrafficMirrorPortRangeRequest(")
        append("fromPort=$fromPort,")
        append("toPort=$toPort)")
    }

    override fun hashCode(): kotlin.Int {
        var result = fromPort ?: 0
        result = 31 * result + (toPort ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as TrafficMirrorPortRangeRequest

        if (fromPort != other.fromPort) return false
        if (toPort != other.toPort) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): TrafficMirrorPortRangeRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): TrafficMirrorPortRangeRequest
        /**
         * The first port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
         */
        fun fromPort(fromPort: Int): FluentBuilder
        /**
         * The last port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
         */
        fun toPort(toPort: Int): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The first port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
         */
        var fromPort: Int?
        /**
         * The last port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
         */
        var toPort: Int?

        fun build(): TrafficMirrorPortRangeRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var fromPort: Int? = null
        override var toPort: Int? = null

        constructor(x: TrafficMirrorPortRangeRequest) : this() {
            this.fromPort = x.fromPort
            this.toPort = x.toPort
        }

        override fun build(): TrafficMirrorPortRangeRequest = TrafficMirrorPortRangeRequest(this)
        override fun fromPort(fromPort: Int): FluentBuilder = apply { this.fromPort = fromPort }
        override fun toPort(toPort: Int): FluentBuilder = apply { this.toPort = toPort }
    }
}
