// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ImportVolumeResponse private constructor(builder: BuilderImpl) {
    /**
     * Information about the conversion task.
     */
    val conversionTask: ConversionTask? = builder.conversionTask

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ImportVolumeResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ImportVolumeResponse(")
        append("conversionTask=$conversionTask)")
    }

    override fun hashCode(): kotlin.Int {
        var result = conversionTask?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ImportVolumeResponse

        if (conversionTask != other.conversionTask) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ImportVolumeResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ImportVolumeResponse
        /**
         * Information about the conversion task.
         */
        fun conversionTask(conversionTask: ConversionTask): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Information about the conversion task.
         */
        var conversionTask: ConversionTask?

        fun build(): ImportVolumeResponse
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.ConversionTask] inside the given [block]
         */
        fun conversionTask(block: ConversionTask.DslBuilder.() -> kotlin.Unit) {
            this.conversionTask = ConversionTask.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var conversionTask: ConversionTask? = null

        constructor(x: ImportVolumeResponse) : this() {
            this.conversionTask = x.conversionTask
        }

        override fun build(): ImportVolumeResponse = ImportVolumeResponse(this)
        override fun conversionTask(conversionTask: ConversionTask): FluentBuilder = apply { this.conversionTask = conversionTask }
    }
}
