// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class DescribeHostReservationOfferingsRequest private constructor(builder: BuilderImpl) {
    /**
     * The filters.
     * instance-family - The instance family of the offering (for example,
     * m4).
     * payment-option - The payment option (NoUpfront |
     * PartialUpfront | AllUpfront).
     */
    val filter: List<Filter>? = builder.filter
    /**
     * This is the maximum duration of the reservation to purchase, specified in seconds.
     * Reservations are available in one-year and three-year terms. The number of seconds
     * specified must be the number of seconds in a year (365x24x60x60) times one of the
     * supported durations (1 or 3). For example, specify 94608000 for three years.
     */
    val maxDuration: Int? = builder.maxDuration
    /**
     * The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
     */
    val maxResults: Int? = builder.maxResults
    /**
     * This is the minimum duration of the reservation you'd like to purchase, specified
     * in seconds. Reservations are available in one-year and three-year terms. The number of
     * seconds specified must be the number of seconds in a year (365x24x60x60) times one of
     * the supported durations (1 or 3). For example, specify 31536000 for one year.
     */
    val minDuration: Int? = builder.minDuration
    /**
     * The token to use to retrieve the next page of results.
     */
    val nextToken: String? = builder.nextToken
    /**
     * The ID of the reservation offering.
     */
    val offeringId: String? = builder.offeringId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DescribeHostReservationOfferingsRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DescribeHostReservationOfferingsRequest(")
        append("filter=$filter,")
        append("maxDuration=$maxDuration,")
        append("maxResults=$maxResults,")
        append("minDuration=$minDuration,")
        append("nextToken=$nextToken,")
        append("offeringId=$offeringId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = filter?.hashCode() ?: 0
        result = 31 * result + (maxDuration ?: 0)
        result = 31 * result + (maxResults ?: 0)
        result = 31 * result + (minDuration ?: 0)
        result = 31 * result + (nextToken?.hashCode() ?: 0)
        result = 31 * result + (offeringId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DescribeHostReservationOfferingsRequest

        if (filter != other.filter) return false
        if (maxDuration != other.maxDuration) return false
        if (maxResults != other.maxResults) return false
        if (minDuration != other.minDuration) return false
        if (nextToken != other.nextToken) return false
        if (offeringId != other.offeringId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DescribeHostReservationOfferingsRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DescribeHostReservationOfferingsRequest
        /**
         * The filters.
         * instance-family - The instance family of the offering (for example,
         * m4).
         * payment-option - The payment option (NoUpfront |
         * PartialUpfront | AllUpfront).
         */
        fun filter(filter: List<Filter>): FluentBuilder
        /**
         * This is the maximum duration of the reservation to purchase, specified in seconds.
         * Reservations are available in one-year and three-year terms. The number of seconds
         * specified must be the number of seconds in a year (365x24x60x60) times one of the
         * supported durations (1 or 3). For example, specify 94608000 for three years.
         */
        fun maxDuration(maxDuration: Int): FluentBuilder
        /**
         * The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
         */
        fun maxResults(maxResults: Int): FluentBuilder
        /**
         * This is the minimum duration of the reservation you'd like to purchase, specified
         * in seconds. Reservations are available in one-year and three-year terms. The number of
         * seconds specified must be the number of seconds in a year (365x24x60x60) times one of
         * the supported durations (1 or 3). For example, specify 31536000 for one year.
         */
        fun minDuration(minDuration: Int): FluentBuilder
        /**
         * The token to use to retrieve the next page of results.
         */
        fun nextToken(nextToken: String): FluentBuilder
        /**
         * The ID of the reservation offering.
         */
        fun offeringId(offeringId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The filters.
         * instance-family - The instance family of the offering (for example,
         * m4).
         * payment-option - The payment option (NoUpfront |
         * PartialUpfront | AllUpfront).
         */
        var filter: List<Filter>?
        /**
         * This is the maximum duration of the reservation to purchase, specified in seconds.
         * Reservations are available in one-year and three-year terms. The number of seconds
         * specified must be the number of seconds in a year (365x24x60x60) times one of the
         * supported durations (1 or 3). For example, specify 94608000 for three years.
         */
        var maxDuration: Int?
        /**
         * The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
         */
        var maxResults: Int?
        /**
         * This is the minimum duration of the reservation you'd like to purchase, specified
         * in seconds. Reservations are available in one-year and three-year terms. The number of
         * seconds specified must be the number of seconds in a year (365x24x60x60) times one of
         * the supported durations (1 or 3). For example, specify 31536000 for one year.
         */
        var minDuration: Int?
        /**
         * The token to use to retrieve the next page of results.
         */
        var nextToken: String?
        /**
         * The ID of the reservation offering.
         */
        var offeringId: String?

        fun build(): DescribeHostReservationOfferingsRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var filter: List<Filter>? = null
        override var maxDuration: Int? = null
        override var maxResults: Int? = null
        override var minDuration: Int? = null
        override var nextToken: String? = null
        override var offeringId: String? = null

        constructor(x: DescribeHostReservationOfferingsRequest) : this() {
            this.filter = x.filter
            this.maxDuration = x.maxDuration
            this.maxResults = x.maxResults
            this.minDuration = x.minDuration
            this.nextToken = x.nextToken
            this.offeringId = x.offeringId
        }

        override fun build(): DescribeHostReservationOfferingsRequest = DescribeHostReservationOfferingsRequest(this)
        override fun filter(filter: List<Filter>): FluentBuilder = apply { this.filter = filter }
        override fun maxDuration(maxDuration: Int): FluentBuilder = apply { this.maxDuration = maxDuration }
        override fun maxResults(maxResults: Int): FluentBuilder = apply { this.maxResults = maxResults }
        override fun minDuration(minDuration: Int): FluentBuilder = apply { this.minDuration = minDuration }
        override fun nextToken(nextToken: String): FluentBuilder = apply { this.nextToken = nextToken }
        override fun offeringId(offeringId: String): FluentBuilder = apply { this.offeringId = offeringId }
    }
}
