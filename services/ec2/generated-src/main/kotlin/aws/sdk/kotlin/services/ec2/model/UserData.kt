// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the user data for an instance.
 */
class UserData private constructor(builder: BuilderImpl) {
    /**
     * The user data. If you are using an Amazon Web Services SDK or command line tool, Base64-encoding is performed for you, and you
     * can load the text from a file. Otherwise, you must provide Base64-encoded text.
     */
    val data: String? = builder.data

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): UserData = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("UserData(")
        append("data=$data)")
    }

    override fun hashCode(): kotlin.Int {
        var result = data?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as UserData

        if (data != other.data) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): UserData = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): UserData
        /**
         * The user data. If you are using an Amazon Web Services SDK or command line tool, Base64-encoding is performed for you, and you
         * can load the text from a file. Otherwise, you must provide Base64-encoded text.
         */
        fun data(data: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The user data. If you are using an Amazon Web Services SDK or command line tool, Base64-encoding is performed for you, and you
         * can load the text from a file. Otherwise, you must provide Base64-encoded text.
         */
        var data: String?

        fun build(): UserData
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var data: String? = null

        constructor(x: UserData) : this() {
            this.data = x.data
        }

        override fun build(): UserData = UserData(this)
        override fun data(data: String): FluentBuilder = apply { this.data = data }
    }
}
