// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the Inference accelerators for the instance type.
 */
class InferenceDeviceInfo private constructor(builder: BuilderImpl) {
    /**
     * The number of Inference accelerators for the instance type.
     */
    val count: Int? = builder.count
    /**
     * The manufacturer of the Inference accelerator.
     */
    val manufacturer: String? = builder.manufacturer
    /**
     * The name of the Inference accelerator.
     */
    val name: String? = builder.name

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): InferenceDeviceInfo = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("InferenceDeviceInfo(")
        append("count=$count,")
        append("manufacturer=$manufacturer,")
        append("name=$name)")
    }

    override fun hashCode(): kotlin.Int {
        var result = count ?: 0
        result = 31 * result + (manufacturer?.hashCode() ?: 0)
        result = 31 * result + (name?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as InferenceDeviceInfo

        if (count != other.count) return false
        if (manufacturer != other.manufacturer) return false
        if (name != other.name) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): InferenceDeviceInfo = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): InferenceDeviceInfo
        /**
         * The number of Inference accelerators for the instance type.
         */
        fun count(count: Int): FluentBuilder
        /**
         * The manufacturer of the Inference accelerator.
         */
        fun manufacturer(manufacturer: String): FluentBuilder
        /**
         * The name of the Inference accelerator.
         */
        fun name(name: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The number of Inference accelerators for the instance type.
         */
        var count: Int?
        /**
         * The manufacturer of the Inference accelerator.
         */
        var manufacturer: String?
        /**
         * The name of the Inference accelerator.
         */
        var name: String?

        fun build(): InferenceDeviceInfo
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var count: Int? = null
        override var manufacturer: String? = null
        override var name: String? = null

        constructor(x: InferenceDeviceInfo) : this() {
            this.count = x.count
            this.manufacturer = x.manufacturer
            this.name = x.name
        }

        override fun build(): InferenceDeviceInfo = InferenceDeviceInfo(this)
        override fun count(count: Int): FluentBuilder = apply { this.count = count }
        override fun manufacturer(manufacturer: String): FluentBuilder = apply { this.manufacturer = manufacturer }
        override fun name(name: String): FluentBuilder = apply { this.name = name }
    }
}
