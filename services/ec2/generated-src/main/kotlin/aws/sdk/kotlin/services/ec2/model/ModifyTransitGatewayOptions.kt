// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * The transit gateway options.
 */
class ModifyTransitGatewayOptions private constructor(builder: BuilderImpl) {
    /**
     * Adds IPv4 or IPv6 CIDR blocks for the transit gateway. Must be a size /24 CIDR block or larger for IPv4, or a size /64 CIDR block or larger for IPv6.
     */
    val addTransitGatewayCidrBlocks: List<String>? = builder.addTransitGatewayCidrBlocks
    /**
     * The ID of the default association route table.
     */
    val associationDefaultRouteTableId: String? = builder.associationDefaultRouteTableId
    /**
     * Enable or disable automatic acceptance of attachment requests.
     */
    val autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue? = builder.autoAcceptSharedAttachments
    /**
     * Enable or disable automatic association with the default association route table.
     */
    val defaultRouteTableAssociation: DefaultRouteTableAssociationValue? = builder.defaultRouteTableAssociation
    /**
     * Enable or disable automatic propagation of routes to the default propagation route table.
     */
    val defaultRouteTablePropagation: DefaultRouteTablePropagationValue? = builder.defaultRouteTablePropagation
    /**
     * Enable or disable DNS support.
     */
    val dnsSupport: DnsSupportValue? = builder.dnsSupport
    /**
     * The ID of the default propagation route table.
     */
    val propagationDefaultRouteTableId: String? = builder.propagationDefaultRouteTableId
    /**
     * Removes CIDR blocks for the transit gateway.
     */
    val removeTransitGatewayCidrBlocks: List<String>? = builder.removeTransitGatewayCidrBlocks
    /**
     * Enable or disable Equal Cost Multipath Protocol support.
     */
    val vpnEcmpSupport: VpnEcmpSupportValue? = builder.vpnEcmpSupport

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ModifyTransitGatewayOptions = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyTransitGatewayOptions(")
        append("addTransitGatewayCidrBlocks=$addTransitGatewayCidrBlocks,")
        append("associationDefaultRouteTableId=$associationDefaultRouteTableId,")
        append("autoAcceptSharedAttachments=$autoAcceptSharedAttachments,")
        append("defaultRouteTableAssociation=$defaultRouteTableAssociation,")
        append("defaultRouteTablePropagation=$defaultRouteTablePropagation,")
        append("dnsSupport=$dnsSupport,")
        append("propagationDefaultRouteTableId=$propagationDefaultRouteTableId,")
        append("removeTransitGatewayCidrBlocks=$removeTransitGatewayCidrBlocks,")
        append("vpnEcmpSupport=$vpnEcmpSupport)")
    }

    override fun hashCode(): kotlin.Int {
        var result = addTransitGatewayCidrBlocks?.hashCode() ?: 0
        result = 31 * result + (associationDefaultRouteTableId?.hashCode() ?: 0)
        result = 31 * result + (autoAcceptSharedAttachments?.hashCode() ?: 0)
        result = 31 * result + (defaultRouteTableAssociation?.hashCode() ?: 0)
        result = 31 * result + (defaultRouteTablePropagation?.hashCode() ?: 0)
        result = 31 * result + (dnsSupport?.hashCode() ?: 0)
        result = 31 * result + (propagationDefaultRouteTableId?.hashCode() ?: 0)
        result = 31 * result + (removeTransitGatewayCidrBlocks?.hashCode() ?: 0)
        result = 31 * result + (vpnEcmpSupport?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ModifyTransitGatewayOptions

        if (addTransitGatewayCidrBlocks != other.addTransitGatewayCidrBlocks) return false
        if (associationDefaultRouteTableId != other.associationDefaultRouteTableId) return false
        if (autoAcceptSharedAttachments != other.autoAcceptSharedAttachments) return false
        if (defaultRouteTableAssociation != other.defaultRouteTableAssociation) return false
        if (defaultRouteTablePropagation != other.defaultRouteTablePropagation) return false
        if (dnsSupport != other.dnsSupport) return false
        if (propagationDefaultRouteTableId != other.propagationDefaultRouteTableId) return false
        if (removeTransitGatewayCidrBlocks != other.removeTransitGatewayCidrBlocks) return false
        if (vpnEcmpSupport != other.vpnEcmpSupport) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ModifyTransitGatewayOptions = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ModifyTransitGatewayOptions
        /**
         * Adds IPv4 or IPv6 CIDR blocks for the transit gateway. Must be a size /24 CIDR block or larger for IPv4, or a size /64 CIDR block or larger for IPv6.
         */
        fun addTransitGatewayCidrBlocks(addTransitGatewayCidrBlocks: List<String>): FluentBuilder
        /**
         * The ID of the default association route table.
         */
        fun associationDefaultRouteTableId(associationDefaultRouteTableId: String): FluentBuilder
        /**
         * Enable or disable automatic acceptance of attachment requests.
         */
        fun autoAcceptSharedAttachments(autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue): FluentBuilder
        /**
         * Enable or disable automatic association with the default association route table.
         */
        fun defaultRouteTableAssociation(defaultRouteTableAssociation: DefaultRouteTableAssociationValue): FluentBuilder
        /**
         * Enable or disable automatic propagation of routes to the default propagation route table.
         */
        fun defaultRouteTablePropagation(defaultRouteTablePropagation: DefaultRouteTablePropagationValue): FluentBuilder
        /**
         * Enable or disable DNS support.
         */
        fun dnsSupport(dnsSupport: DnsSupportValue): FluentBuilder
        /**
         * The ID of the default propagation route table.
         */
        fun propagationDefaultRouteTableId(propagationDefaultRouteTableId: String): FluentBuilder
        /**
         * Removes CIDR blocks for the transit gateway.
         */
        fun removeTransitGatewayCidrBlocks(removeTransitGatewayCidrBlocks: List<String>): FluentBuilder
        /**
         * Enable or disable Equal Cost Multipath Protocol support.
         */
        fun vpnEcmpSupport(vpnEcmpSupport: VpnEcmpSupportValue): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Adds IPv4 or IPv6 CIDR blocks for the transit gateway. Must be a size /24 CIDR block or larger for IPv4, or a size /64 CIDR block or larger for IPv6.
         */
        var addTransitGatewayCidrBlocks: List<String>?
        /**
         * The ID of the default association route table.
         */
        var associationDefaultRouteTableId: String?
        /**
         * Enable or disable automatic acceptance of attachment requests.
         */
        var autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue?
        /**
         * Enable or disable automatic association with the default association route table.
         */
        var defaultRouteTableAssociation: DefaultRouteTableAssociationValue?
        /**
         * Enable or disable automatic propagation of routes to the default propagation route table.
         */
        var defaultRouteTablePropagation: DefaultRouteTablePropagationValue?
        /**
         * Enable or disable DNS support.
         */
        var dnsSupport: DnsSupportValue?
        /**
         * The ID of the default propagation route table.
         */
        var propagationDefaultRouteTableId: String?
        /**
         * Removes CIDR blocks for the transit gateway.
         */
        var removeTransitGatewayCidrBlocks: List<String>?
        /**
         * Enable or disable Equal Cost Multipath Protocol support.
         */
        var vpnEcmpSupport: VpnEcmpSupportValue?

        fun build(): ModifyTransitGatewayOptions
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var addTransitGatewayCidrBlocks: List<String>? = null
        override var associationDefaultRouteTableId: String? = null
        override var autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue? = null
        override var defaultRouteTableAssociation: DefaultRouteTableAssociationValue? = null
        override var defaultRouteTablePropagation: DefaultRouteTablePropagationValue? = null
        override var dnsSupport: DnsSupportValue? = null
        override var propagationDefaultRouteTableId: String? = null
        override var removeTransitGatewayCidrBlocks: List<String>? = null
        override var vpnEcmpSupport: VpnEcmpSupportValue? = null

        constructor(x: ModifyTransitGatewayOptions) : this() {
            this.addTransitGatewayCidrBlocks = x.addTransitGatewayCidrBlocks
            this.associationDefaultRouteTableId = x.associationDefaultRouteTableId
            this.autoAcceptSharedAttachments = x.autoAcceptSharedAttachments
            this.defaultRouteTableAssociation = x.defaultRouteTableAssociation
            this.defaultRouteTablePropagation = x.defaultRouteTablePropagation
            this.dnsSupport = x.dnsSupport
            this.propagationDefaultRouteTableId = x.propagationDefaultRouteTableId
            this.removeTransitGatewayCidrBlocks = x.removeTransitGatewayCidrBlocks
            this.vpnEcmpSupport = x.vpnEcmpSupport
        }

        override fun build(): ModifyTransitGatewayOptions = ModifyTransitGatewayOptions(this)
        override fun addTransitGatewayCidrBlocks(addTransitGatewayCidrBlocks: List<String>): FluentBuilder = apply { this.addTransitGatewayCidrBlocks = addTransitGatewayCidrBlocks }
        override fun associationDefaultRouteTableId(associationDefaultRouteTableId: String): FluentBuilder = apply { this.associationDefaultRouteTableId = associationDefaultRouteTableId }
        override fun autoAcceptSharedAttachments(autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue): FluentBuilder = apply { this.autoAcceptSharedAttachments = autoAcceptSharedAttachments }
        override fun defaultRouteTableAssociation(defaultRouteTableAssociation: DefaultRouteTableAssociationValue): FluentBuilder = apply { this.defaultRouteTableAssociation = defaultRouteTableAssociation }
        override fun defaultRouteTablePropagation(defaultRouteTablePropagation: DefaultRouteTablePropagationValue): FluentBuilder = apply { this.defaultRouteTablePropagation = defaultRouteTablePropagation }
        override fun dnsSupport(dnsSupport: DnsSupportValue): FluentBuilder = apply { this.dnsSupport = dnsSupport }
        override fun propagationDefaultRouteTableId(propagationDefaultRouteTableId: String): FluentBuilder = apply { this.propagationDefaultRouteTableId = propagationDefaultRouteTableId }
        override fun removeTransitGatewayCidrBlocks(removeTransitGatewayCidrBlocks: List<String>): FluentBuilder = apply { this.removeTransitGatewayCidrBlocks = removeTransitGatewayCidrBlocks }
        override fun vpnEcmpSupport(vpnEcmpSupport: VpnEcmpSupportValue): FluentBuilder = apply { this.vpnEcmpSupport = vpnEcmpSupport }
    }
}
