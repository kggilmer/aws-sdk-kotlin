// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Contains the parameters for UnassignPrivateIpAddresses.
 */
class UnassignPrivateIpAddressesRequest private constructor(builder: BuilderImpl) {
    /**
     * The IPv4 prefixes to unassign from  the network interface.
     */
    val ipv4Prefixes: List<String>? = builder.ipv4Prefixes
    /**
     * The ID of the network interface.
     */
    val networkInterfaceId: String? = builder.networkInterfaceId
    /**
     * The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address.
     */
    val privateIpAddresses: List<String>? = builder.privateIpAddresses

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): UnassignPrivateIpAddressesRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("UnassignPrivateIpAddressesRequest(")
        append("ipv4Prefixes=$ipv4Prefixes,")
        append("networkInterfaceId=$networkInterfaceId,")
        append("privateIpAddresses=$privateIpAddresses)")
    }

    override fun hashCode(): kotlin.Int {
        var result = ipv4Prefixes?.hashCode() ?: 0
        result = 31 * result + (networkInterfaceId?.hashCode() ?: 0)
        result = 31 * result + (privateIpAddresses?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as UnassignPrivateIpAddressesRequest

        if (ipv4Prefixes != other.ipv4Prefixes) return false
        if (networkInterfaceId != other.networkInterfaceId) return false
        if (privateIpAddresses != other.privateIpAddresses) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): UnassignPrivateIpAddressesRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): UnassignPrivateIpAddressesRequest
        /**
         * The IPv4 prefixes to unassign from  the network interface.
         */
        fun ipv4Prefixes(ipv4Prefixes: List<String>): FluentBuilder
        /**
         * The ID of the network interface.
         */
        fun networkInterfaceId(networkInterfaceId: String): FluentBuilder
        /**
         * The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address.
         */
        fun privateIpAddresses(privateIpAddresses: List<String>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The IPv4 prefixes to unassign from  the network interface.
         */
        var ipv4Prefixes: List<String>?
        /**
         * The ID of the network interface.
         */
        var networkInterfaceId: String?
        /**
         * The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address.
         */
        var privateIpAddresses: List<String>?

        fun build(): UnassignPrivateIpAddressesRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var ipv4Prefixes: List<String>? = null
        override var networkInterfaceId: String? = null
        override var privateIpAddresses: List<String>? = null

        constructor(x: UnassignPrivateIpAddressesRequest) : this() {
            this.ipv4Prefixes = x.ipv4Prefixes
            this.networkInterfaceId = x.networkInterfaceId
            this.privateIpAddresses = x.privateIpAddresses
        }

        override fun build(): UnassignPrivateIpAddressesRequest = UnassignPrivateIpAddressesRequest(this)
        override fun ipv4Prefixes(ipv4Prefixes: List<String>): FluentBuilder = apply { this.ipv4Prefixes = ipv4Prefixes }
        override fun networkInterfaceId(networkInterfaceId: String): FluentBuilder = apply { this.networkInterfaceId = networkInterfaceId }
        override fun privateIpAddresses(privateIpAddresses: List<String>): FluentBuilder = apply { this.privateIpAddresses = privateIpAddresses }
    }
}
