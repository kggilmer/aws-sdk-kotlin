// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ModifyFpgaImageAttributeRequest private constructor(builder: BuilderImpl) {
    /**
     * The name of the attribute.
     */
    val attribute: FpgaImageAttributeName? = builder.attribute
    /**
     * A description for the AFI.
     */
    val description: String? = builder.description
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The ID of the AFI.
     */
    val fpgaImageId: String? = builder.fpgaImageId
    /**
     * The load permission for the AFI.
     */
    val loadPermission: LoadPermissionModifications? = builder.loadPermission
    /**
     * A name for the AFI.
     */
    val name: String? = builder.name
    /**
     * The operation type.
     */
    val operationType: OperationType? = builder.operationType
    /**
     * The product codes. After you add a product code to an AFI, it can't be removed.
     * This parameter is valid only when modifying the productCodes attribute.
     */
    val productCodes: List<String>? = builder.productCodes
    /**
     * The user groups. This parameter is valid only when modifying the loadPermission attribute.
     */
    val userGroups: List<String>? = builder.userGroups
    /**
     * The Amazon Web Services account IDs. This parameter is valid only when modifying the loadPermission attribute.
     */
    val userIds: List<String>? = builder.userIds

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ModifyFpgaImageAttributeRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyFpgaImageAttributeRequest(")
        append("attribute=$attribute,")
        append("description=$description,")
        append("dryRun=$dryRun,")
        append("fpgaImageId=$fpgaImageId,")
        append("loadPermission=$loadPermission,")
        append("name=$name,")
        append("operationType=$operationType,")
        append("productCodes=$productCodes,")
        append("userGroups=$userGroups,")
        append("userIds=$userIds)")
    }

    override fun hashCode(): kotlin.Int {
        var result = attribute?.hashCode() ?: 0
        result = 31 * result + (description?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (fpgaImageId?.hashCode() ?: 0)
        result = 31 * result + (loadPermission?.hashCode() ?: 0)
        result = 31 * result + (name?.hashCode() ?: 0)
        result = 31 * result + (operationType?.hashCode() ?: 0)
        result = 31 * result + (productCodes?.hashCode() ?: 0)
        result = 31 * result + (userGroups?.hashCode() ?: 0)
        result = 31 * result + (userIds?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ModifyFpgaImageAttributeRequest

        if (attribute != other.attribute) return false
        if (description != other.description) return false
        if (dryRun != other.dryRun) return false
        if (fpgaImageId != other.fpgaImageId) return false
        if (loadPermission != other.loadPermission) return false
        if (name != other.name) return false
        if (operationType != other.operationType) return false
        if (productCodes != other.productCodes) return false
        if (userGroups != other.userGroups) return false
        if (userIds != other.userIds) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ModifyFpgaImageAttributeRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ModifyFpgaImageAttributeRequest
        /**
         * The name of the attribute.
         */
        fun attribute(attribute: FpgaImageAttributeName): FluentBuilder
        /**
         * A description for the AFI.
         */
        fun description(description: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The ID of the AFI.
         */
        fun fpgaImageId(fpgaImageId: String): FluentBuilder
        /**
         * The load permission for the AFI.
         */
        fun loadPermission(loadPermission: LoadPermissionModifications): FluentBuilder
        /**
         * A name for the AFI.
         */
        fun name(name: String): FluentBuilder
        /**
         * The operation type.
         */
        fun operationType(operationType: OperationType): FluentBuilder
        /**
         * The product codes. After you add a product code to an AFI, it can't be removed.
         * This parameter is valid only when modifying the productCodes attribute.
         */
        fun productCodes(productCodes: List<String>): FluentBuilder
        /**
         * The user groups. This parameter is valid only when modifying the loadPermission attribute.
         */
        fun userGroups(userGroups: List<String>): FluentBuilder
        /**
         * The Amazon Web Services account IDs. This parameter is valid only when modifying the loadPermission attribute.
         */
        fun userIds(userIds: List<String>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The name of the attribute.
         */
        var attribute: FpgaImageAttributeName?
        /**
         * A description for the AFI.
         */
        var description: String?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The ID of the AFI.
         */
        var fpgaImageId: String?
        /**
         * The load permission for the AFI.
         */
        var loadPermission: LoadPermissionModifications?
        /**
         * A name for the AFI.
         */
        var name: String?
        /**
         * The operation type.
         */
        var operationType: OperationType?
        /**
         * The product codes. After you add a product code to an AFI, it can't be removed.
         * This parameter is valid only when modifying the productCodes attribute.
         */
        var productCodes: List<String>?
        /**
         * The user groups. This parameter is valid only when modifying the loadPermission attribute.
         */
        var userGroups: List<String>?
        /**
         * The Amazon Web Services account IDs. This parameter is valid only when modifying the loadPermission attribute.
         */
        var userIds: List<String>?

        fun build(): ModifyFpgaImageAttributeRequest
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.LoadPermissionModifications] inside the given [block]
         */
        fun loadPermission(block: LoadPermissionModifications.DslBuilder.() -> kotlin.Unit) {
            this.loadPermission = LoadPermissionModifications.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var attribute: FpgaImageAttributeName? = null
        override var description: String? = null
        override var dryRun: Boolean? = null
        override var fpgaImageId: String? = null
        override var loadPermission: LoadPermissionModifications? = null
        override var name: String? = null
        override var operationType: OperationType? = null
        override var productCodes: List<String>? = null
        override var userGroups: List<String>? = null
        override var userIds: List<String>? = null

        constructor(x: ModifyFpgaImageAttributeRequest) : this() {
            this.attribute = x.attribute
            this.description = x.description
            this.dryRun = x.dryRun
            this.fpgaImageId = x.fpgaImageId
            this.loadPermission = x.loadPermission
            this.name = x.name
            this.operationType = x.operationType
            this.productCodes = x.productCodes
            this.userGroups = x.userGroups
            this.userIds = x.userIds
        }

        override fun build(): ModifyFpgaImageAttributeRequest = ModifyFpgaImageAttributeRequest(this)
        override fun attribute(attribute: FpgaImageAttributeName): FluentBuilder = apply { this.attribute = attribute }
        override fun description(description: String): FluentBuilder = apply { this.description = description }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun fpgaImageId(fpgaImageId: String): FluentBuilder = apply { this.fpgaImageId = fpgaImageId }
        override fun loadPermission(loadPermission: LoadPermissionModifications): FluentBuilder = apply { this.loadPermission = loadPermission }
        override fun name(name: String): FluentBuilder = apply { this.name = name }
        override fun operationType(operationType: OperationType): FluentBuilder = apply { this.operationType = operationType }
        override fun productCodes(productCodes: List<String>): FluentBuilder = apply { this.productCodes = productCodes }
        override fun userGroups(userGroups: List<String>): FluentBuilder = apply { this.userGroups = userGroups }
        override fun userIds(userIds: List<String>): FluentBuilder = apply { this.userIds = userIds }
    }
}
