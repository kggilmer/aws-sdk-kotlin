// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ReleaseAddressRequest private constructor(builder: BuilderImpl) {
    /**
     * &#91;EC2-VPC&#93; The allocation ID. Required for EC2-VPC.
     */
    val allocationId: String? = builder.allocationId
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises
     * IP addresses.
     * If you provide an incorrect network border group, you receive an InvalidAddress.NotFound error.
     * You cannot use a network border group with EC2 Classic. If you attempt this operation on EC2 classic, you
     * receive an InvalidParameterCombination error.
     */
    val networkBorderGroup: String? = builder.networkBorderGroup
    /**
     * &#91;EC2-Classic&#93; The Elastic IP address. Required for EC2-Classic.
     */
    val publicIp: String? = builder.publicIp

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ReleaseAddressRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ReleaseAddressRequest(")
        append("allocationId=$allocationId,")
        append("dryRun=$dryRun,")
        append("networkBorderGroup=$networkBorderGroup,")
        append("publicIp=$publicIp)")
    }

    override fun hashCode(): kotlin.Int {
        var result = allocationId?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (networkBorderGroup?.hashCode() ?: 0)
        result = 31 * result + (publicIp?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ReleaseAddressRequest

        if (allocationId != other.allocationId) return false
        if (dryRun != other.dryRun) return false
        if (networkBorderGroup != other.networkBorderGroup) return false
        if (publicIp != other.publicIp) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ReleaseAddressRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ReleaseAddressRequest
        /**
         * &#91;EC2-VPC&#93; The allocation ID. Required for EC2-VPC.
         */
        fun allocationId(allocationId: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises
         * IP addresses.
         * If you provide an incorrect network border group, you receive an InvalidAddress.NotFound error.
         * You cannot use a network border group with EC2 Classic. If you attempt this operation on EC2 classic, you
         * receive an InvalidParameterCombination error.
         */
        fun networkBorderGroup(networkBorderGroup: String): FluentBuilder
        /**
         * &#91;EC2-Classic&#93; The Elastic IP address. Required for EC2-Classic.
         */
        fun publicIp(publicIp: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * &#91;EC2-VPC&#93; The allocation ID. Required for EC2-VPC.
         */
        var allocationId: String?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises
         * IP addresses.
         * If you provide an incorrect network border group, you receive an InvalidAddress.NotFound error.
         * You cannot use a network border group with EC2 Classic. If you attempt this operation on EC2 classic, you
         * receive an InvalidParameterCombination error.
         */
        var networkBorderGroup: String?
        /**
         * &#91;EC2-Classic&#93; The Elastic IP address. Required for EC2-Classic.
         */
        var publicIp: String?

        fun build(): ReleaseAddressRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var allocationId: String? = null
        override var dryRun: Boolean? = null
        override var networkBorderGroup: String? = null
        override var publicIp: String? = null

        constructor(x: ReleaseAddressRequest) : this() {
            this.allocationId = x.allocationId
            this.dryRun = x.dryRun
            this.networkBorderGroup = x.networkBorderGroup
            this.publicIp = x.publicIp
        }

        override fun build(): ReleaseAddressRequest = ReleaseAddressRequest(this)
        override fun allocationId(allocationId: String): FluentBuilder = apply { this.allocationId = allocationId }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun networkBorderGroup(networkBorderGroup: String): FluentBuilder = apply { this.networkBorderGroup = networkBorderGroup }
        override fun publicIp(publicIp: String): FluentBuilder = apply { this.publicIp = publicIp }
    }
}
