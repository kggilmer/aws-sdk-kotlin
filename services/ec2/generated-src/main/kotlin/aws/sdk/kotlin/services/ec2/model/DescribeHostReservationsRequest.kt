// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class DescribeHostReservationsRequest private constructor(builder: BuilderImpl) {
    /**
     * The filters.
     * instance-family - The instance family (for example,
     * m4).
     * payment-option - The payment option (NoUpfront |
     * PartialUpfront | AllUpfront).
     * state - The state of the reservation (payment-pending
     * | payment-failed | active |
     * retired).
     * tag:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
     * For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
     * tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
     */
    val filter: List<Filter>? = builder.filter
    /**
     * The host reservation IDs.
     */
    val hostReservationIdSet: List<String>? = builder.hostReservationIdSet
    /**
     * The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
     */
    val maxResults: Int? = builder.maxResults
    /**
     * The token to use to retrieve the next page of results.
     */
    val nextToken: String? = builder.nextToken

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DescribeHostReservationsRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DescribeHostReservationsRequest(")
        append("filter=$filter,")
        append("hostReservationIdSet=$hostReservationIdSet,")
        append("maxResults=$maxResults,")
        append("nextToken=$nextToken)")
    }

    override fun hashCode(): kotlin.Int {
        var result = filter?.hashCode() ?: 0
        result = 31 * result + (hostReservationIdSet?.hashCode() ?: 0)
        result = 31 * result + (maxResults ?: 0)
        result = 31 * result + (nextToken?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DescribeHostReservationsRequest

        if (filter != other.filter) return false
        if (hostReservationIdSet != other.hostReservationIdSet) return false
        if (maxResults != other.maxResults) return false
        if (nextToken != other.nextToken) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DescribeHostReservationsRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DescribeHostReservationsRequest
        /**
         * The filters.
         * instance-family - The instance family (for example,
         * m4).
         * payment-option - The payment option (NoUpfront |
         * PartialUpfront | AllUpfront).
         * state - The state of the reservation (payment-pending
         * | payment-failed | active |
         * retired).
         * tag:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
         * For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
         * tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
         */
        fun filter(filter: List<Filter>): FluentBuilder
        /**
         * The host reservation IDs.
         */
        fun hostReservationIdSet(hostReservationIdSet: List<String>): FluentBuilder
        /**
         * The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
         */
        fun maxResults(maxResults: Int): FluentBuilder
        /**
         * The token to use to retrieve the next page of results.
         */
        fun nextToken(nextToken: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The filters.
         * instance-family - The instance family (for example,
         * m4).
         * payment-option - The payment option (NoUpfront |
         * PartialUpfront | AllUpfront).
         * state - The state of the reservation (payment-pending
         * | payment-failed | active |
         * retired).
         * tag:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
         * For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
         * tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
         */
        var filter: List<Filter>?
        /**
         * The host reservation IDs.
         */
        var hostReservationIdSet: List<String>?
        /**
         * The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
         */
        var maxResults: Int?
        /**
         * The token to use to retrieve the next page of results.
         */
        var nextToken: String?

        fun build(): DescribeHostReservationsRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var filter: List<Filter>? = null
        override var hostReservationIdSet: List<String>? = null
        override var maxResults: Int? = null
        override var nextToken: String? = null

        constructor(x: DescribeHostReservationsRequest) : this() {
            this.filter = x.filter
            this.hostReservationIdSet = x.hostReservationIdSet
            this.maxResults = x.maxResults
            this.nextToken = x.nextToken
        }

        override fun build(): DescribeHostReservationsRequest = DescribeHostReservationsRequest(this)
        override fun filter(filter: List<Filter>): FluentBuilder = apply { this.filter = filter }
        override fun hostReservationIdSet(hostReservationIdSet: List<String>): FluentBuilder = apply { this.hostReservationIdSet = hostReservationIdSet }
        override fun maxResults(maxResults: Int): FluentBuilder = apply { this.maxResults = maxResults }
        override fun nextToken(nextToken: String): FluentBuilder = apply { this.nextToken = nextToken }
    }
}
