// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a path component.
 */
class PathComponent private constructor(builder: BuilderImpl) {
    /**
     * The network ACL rule.
     */
    val aclRule: AnalysisAclRule? = builder.aclRule
    /**
     * The component.
     */
    val component: AnalysisComponent? = builder.component
    /**
     * The destination VPC.
     */
    val destinationVpc: AnalysisComponent? = builder.destinationVpc
    /**
     * The inbound header.
     */
    val inboundHeader: AnalysisPacketHeader? = builder.inboundHeader
    /**
     * The outbound header.
     */
    val outboundHeader: AnalysisPacketHeader? = builder.outboundHeader
    /**
     * The route table route.
     */
    val routeTableRoute: AnalysisRouteTableRoute? = builder.routeTableRoute
    /**
     * The security group rule.
     */
    val securityGroupRule: AnalysisSecurityGroupRule? = builder.securityGroupRule
    /**
     * The sequence number.
     */
    val sequenceNumber: Int? = builder.sequenceNumber
    /**
     * The source VPC.
     */
    val sourceVpc: AnalysisComponent? = builder.sourceVpc
    /**
     * The subnet.
     */
    val subnet: AnalysisComponent? = builder.subnet
    /**
     * The component VPC.
     */
    val vpc: AnalysisComponent? = builder.vpc

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): PathComponent = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("PathComponent(")
        append("aclRule=$aclRule,")
        append("component=$component,")
        append("destinationVpc=$destinationVpc,")
        append("inboundHeader=$inboundHeader,")
        append("outboundHeader=$outboundHeader,")
        append("routeTableRoute=$routeTableRoute,")
        append("securityGroupRule=$securityGroupRule,")
        append("sequenceNumber=$sequenceNumber,")
        append("sourceVpc=$sourceVpc,")
        append("subnet=$subnet,")
        append("vpc=$vpc)")
    }

    override fun hashCode(): kotlin.Int {
        var result = aclRule?.hashCode() ?: 0
        result = 31 * result + (component?.hashCode() ?: 0)
        result = 31 * result + (destinationVpc?.hashCode() ?: 0)
        result = 31 * result + (inboundHeader?.hashCode() ?: 0)
        result = 31 * result + (outboundHeader?.hashCode() ?: 0)
        result = 31 * result + (routeTableRoute?.hashCode() ?: 0)
        result = 31 * result + (securityGroupRule?.hashCode() ?: 0)
        result = 31 * result + (sequenceNumber ?: 0)
        result = 31 * result + (sourceVpc?.hashCode() ?: 0)
        result = 31 * result + (subnet?.hashCode() ?: 0)
        result = 31 * result + (vpc?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as PathComponent

        if (aclRule != other.aclRule) return false
        if (component != other.component) return false
        if (destinationVpc != other.destinationVpc) return false
        if (inboundHeader != other.inboundHeader) return false
        if (outboundHeader != other.outboundHeader) return false
        if (routeTableRoute != other.routeTableRoute) return false
        if (securityGroupRule != other.securityGroupRule) return false
        if (sequenceNumber != other.sequenceNumber) return false
        if (sourceVpc != other.sourceVpc) return false
        if (subnet != other.subnet) return false
        if (vpc != other.vpc) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): PathComponent = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): PathComponent
        /**
         * The network ACL rule.
         */
        fun aclRule(aclRule: AnalysisAclRule): FluentBuilder
        /**
         * The component.
         */
        fun component(component: AnalysisComponent): FluentBuilder
        /**
         * The destination VPC.
         */
        fun destinationVpc(destinationVpc: AnalysisComponent): FluentBuilder
        /**
         * The inbound header.
         */
        fun inboundHeader(inboundHeader: AnalysisPacketHeader): FluentBuilder
        /**
         * The outbound header.
         */
        fun outboundHeader(outboundHeader: AnalysisPacketHeader): FluentBuilder
        /**
         * The route table route.
         */
        fun routeTableRoute(routeTableRoute: AnalysisRouteTableRoute): FluentBuilder
        /**
         * The security group rule.
         */
        fun securityGroupRule(securityGroupRule: AnalysisSecurityGroupRule): FluentBuilder
        /**
         * The sequence number.
         */
        fun sequenceNumber(sequenceNumber: Int): FluentBuilder
        /**
         * The source VPC.
         */
        fun sourceVpc(sourceVpc: AnalysisComponent): FluentBuilder
        /**
         * The subnet.
         */
        fun subnet(subnet: AnalysisComponent): FluentBuilder
        /**
         * The component VPC.
         */
        fun vpc(vpc: AnalysisComponent): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The network ACL rule.
         */
        var aclRule: AnalysisAclRule?
        /**
         * The component.
         */
        var component: AnalysisComponent?
        /**
         * The destination VPC.
         */
        var destinationVpc: AnalysisComponent?
        /**
         * The inbound header.
         */
        var inboundHeader: AnalysisPacketHeader?
        /**
         * The outbound header.
         */
        var outboundHeader: AnalysisPacketHeader?
        /**
         * The route table route.
         */
        var routeTableRoute: AnalysisRouteTableRoute?
        /**
         * The security group rule.
         */
        var securityGroupRule: AnalysisSecurityGroupRule?
        /**
         * The sequence number.
         */
        var sequenceNumber: Int?
        /**
         * The source VPC.
         */
        var sourceVpc: AnalysisComponent?
        /**
         * The subnet.
         */
        var subnet: AnalysisComponent?
        /**
         * The component VPC.
         */
        var vpc: AnalysisComponent?

        fun build(): PathComponent
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.AnalysisAclRule] inside the given [block]
         */
        fun aclRule(block: AnalysisAclRule.DslBuilder.() -> kotlin.Unit) {
            this.aclRule = AnalysisAclRule.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.AnalysisComponent] inside the given [block]
         */
        fun component(block: AnalysisComponent.DslBuilder.() -> kotlin.Unit) {
            this.component = AnalysisComponent.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.AnalysisComponent] inside the given [block]
         */
        fun destinationVpc(block: AnalysisComponent.DslBuilder.() -> kotlin.Unit) {
            this.destinationVpc = AnalysisComponent.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.AnalysisPacketHeader] inside the given [block]
         */
        fun inboundHeader(block: AnalysisPacketHeader.DslBuilder.() -> kotlin.Unit) {
            this.inboundHeader = AnalysisPacketHeader.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.AnalysisPacketHeader] inside the given [block]
         */
        fun outboundHeader(block: AnalysisPacketHeader.DslBuilder.() -> kotlin.Unit) {
            this.outboundHeader = AnalysisPacketHeader.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.AnalysisRouteTableRoute] inside the given [block]
         */
        fun routeTableRoute(block: AnalysisRouteTableRoute.DslBuilder.() -> kotlin.Unit) {
            this.routeTableRoute = AnalysisRouteTableRoute.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.AnalysisSecurityGroupRule] inside the given [block]
         */
        fun securityGroupRule(block: AnalysisSecurityGroupRule.DslBuilder.() -> kotlin.Unit) {
            this.securityGroupRule = AnalysisSecurityGroupRule.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.AnalysisComponent] inside the given [block]
         */
        fun sourceVpc(block: AnalysisComponent.DslBuilder.() -> kotlin.Unit) {
            this.sourceVpc = AnalysisComponent.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.AnalysisComponent] inside the given [block]
         */
        fun subnet(block: AnalysisComponent.DslBuilder.() -> kotlin.Unit) {
            this.subnet = AnalysisComponent.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.AnalysisComponent] inside the given [block]
         */
        fun vpc(block: AnalysisComponent.DslBuilder.() -> kotlin.Unit) {
            this.vpc = AnalysisComponent.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var aclRule: AnalysisAclRule? = null
        override var component: AnalysisComponent? = null
        override var destinationVpc: AnalysisComponent? = null
        override var inboundHeader: AnalysisPacketHeader? = null
        override var outboundHeader: AnalysisPacketHeader? = null
        override var routeTableRoute: AnalysisRouteTableRoute? = null
        override var securityGroupRule: AnalysisSecurityGroupRule? = null
        override var sequenceNumber: Int? = null
        override var sourceVpc: AnalysisComponent? = null
        override var subnet: AnalysisComponent? = null
        override var vpc: AnalysisComponent? = null

        constructor(x: PathComponent) : this() {
            this.aclRule = x.aclRule
            this.component = x.component
            this.destinationVpc = x.destinationVpc
            this.inboundHeader = x.inboundHeader
            this.outboundHeader = x.outboundHeader
            this.routeTableRoute = x.routeTableRoute
            this.securityGroupRule = x.securityGroupRule
            this.sequenceNumber = x.sequenceNumber
            this.sourceVpc = x.sourceVpc
            this.subnet = x.subnet
            this.vpc = x.vpc
        }

        override fun build(): PathComponent = PathComponent(this)
        override fun aclRule(aclRule: AnalysisAclRule): FluentBuilder = apply { this.aclRule = aclRule }
        override fun component(component: AnalysisComponent): FluentBuilder = apply { this.component = component }
        override fun destinationVpc(destinationVpc: AnalysisComponent): FluentBuilder = apply { this.destinationVpc = destinationVpc }
        override fun inboundHeader(inboundHeader: AnalysisPacketHeader): FluentBuilder = apply { this.inboundHeader = inboundHeader }
        override fun outboundHeader(outboundHeader: AnalysisPacketHeader): FluentBuilder = apply { this.outboundHeader = outboundHeader }
        override fun routeTableRoute(routeTableRoute: AnalysisRouteTableRoute): FluentBuilder = apply { this.routeTableRoute = routeTableRoute }
        override fun securityGroupRule(securityGroupRule: AnalysisSecurityGroupRule): FluentBuilder = apply { this.securityGroupRule = securityGroupRule }
        override fun sequenceNumber(sequenceNumber: Int): FluentBuilder = apply { this.sequenceNumber = sequenceNumber }
        override fun sourceVpc(sourceVpc: AnalysisComponent): FluentBuilder = apply { this.sourceVpc = sourceVpc }
        override fun subnet(subnet: AnalysisComponent): FluentBuilder = apply { this.subnet = subnet }
        override fun vpc(vpc: AnalysisComponent): FluentBuilder = apply { this.vpc = vpc }
    }
}
