// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ModifyVpnConnectionRequest private constructor(builder: BuilderImpl) {
    /**
     * The ID of the customer gateway at your end of the VPN connection.
     */
    val customerGatewayId: String? = builder.customerGatewayId
    /**
     * Checks whether you have the required permissions for the action, without actually
     * making the request, and provides an error response. If you have the required
     * permissions, the error response is DryRunOperation. Otherwise, it is
     * UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The ID of the transit gateway.
     */
    val transitGatewayId: String? = builder.transitGatewayId
    /**
     * The ID of the VPN connection.
     */
    val vpnConnectionId: String? = builder.vpnConnectionId
    /**
     * The ID of the virtual private gateway at the Amazon Web Services side of the VPN
     * connection.
     */
    val vpnGatewayId: String? = builder.vpnGatewayId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ModifyVpnConnectionRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyVpnConnectionRequest(")
        append("customerGatewayId=$customerGatewayId,")
        append("dryRun=$dryRun,")
        append("transitGatewayId=$transitGatewayId,")
        append("vpnConnectionId=$vpnConnectionId,")
        append("vpnGatewayId=$vpnGatewayId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = customerGatewayId?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (transitGatewayId?.hashCode() ?: 0)
        result = 31 * result + (vpnConnectionId?.hashCode() ?: 0)
        result = 31 * result + (vpnGatewayId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ModifyVpnConnectionRequest

        if (customerGatewayId != other.customerGatewayId) return false
        if (dryRun != other.dryRun) return false
        if (transitGatewayId != other.transitGatewayId) return false
        if (vpnConnectionId != other.vpnConnectionId) return false
        if (vpnGatewayId != other.vpnGatewayId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ModifyVpnConnectionRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ModifyVpnConnectionRequest
        /**
         * The ID of the customer gateway at your end of the VPN connection.
         */
        fun customerGatewayId(customerGatewayId: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually
         * making the request, and provides an error response. If you have the required
         * permissions, the error response is DryRunOperation. Otherwise, it is
         * UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The ID of the transit gateway.
         */
        fun transitGatewayId(transitGatewayId: String): FluentBuilder
        /**
         * The ID of the VPN connection.
         */
        fun vpnConnectionId(vpnConnectionId: String): FluentBuilder
        /**
         * The ID of the virtual private gateway at the Amazon Web Services side of the VPN
         * connection.
         */
        fun vpnGatewayId(vpnGatewayId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The ID of the customer gateway at your end of the VPN connection.
         */
        var customerGatewayId: String?
        /**
         * Checks whether you have the required permissions for the action, without actually
         * making the request, and provides an error response. If you have the required
         * permissions, the error response is DryRunOperation. Otherwise, it is
         * UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The ID of the transit gateway.
         */
        var transitGatewayId: String?
        /**
         * The ID of the VPN connection.
         */
        var vpnConnectionId: String?
        /**
         * The ID of the virtual private gateway at the Amazon Web Services side of the VPN
         * connection.
         */
        var vpnGatewayId: String?

        fun build(): ModifyVpnConnectionRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var customerGatewayId: String? = null
        override var dryRun: Boolean? = null
        override var transitGatewayId: String? = null
        override var vpnConnectionId: String? = null
        override var vpnGatewayId: String? = null

        constructor(x: ModifyVpnConnectionRequest) : this() {
            this.customerGatewayId = x.customerGatewayId
            this.dryRun = x.dryRun
            this.transitGatewayId = x.transitGatewayId
            this.vpnConnectionId = x.vpnConnectionId
            this.vpnGatewayId = x.vpnGatewayId
        }

        override fun build(): ModifyVpnConnectionRequest = ModifyVpnConnectionRequest(this)
        override fun customerGatewayId(customerGatewayId: String): FluentBuilder = apply { this.customerGatewayId = customerGatewayId }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun transitGatewayId(transitGatewayId: String): FluentBuilder = apply { this.transitGatewayId = transitGatewayId }
        override fun vpnConnectionId(vpnConnectionId: String): FluentBuilder = apply { this.vpnConnectionId = vpnConnectionId }
        override fun vpnGatewayId(vpnGatewayId: String): FluentBuilder = apply { this.vpnGatewayId = vpnGatewayId }
    }
}
