// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Contains the parameters for DeleteNetworkInterfacePermission.
 */
class DeleteNetworkInterfacePermissionRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * Specify true to remove the permission even if the network interface is
     * attached to an instance.
     */
    val force: Boolean? = builder.force
    /**
     * The ID of the network interface permission.
     */
    val networkInterfacePermissionId: String? = builder.networkInterfacePermissionId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DeleteNetworkInterfacePermissionRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DeleteNetworkInterfacePermissionRequest(")
        append("dryRun=$dryRun,")
        append("force=$force,")
        append("networkInterfacePermissionId=$networkInterfacePermissionId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (force?.hashCode() ?: 0)
        result = 31 * result + (networkInterfacePermissionId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DeleteNetworkInterfacePermissionRequest

        if (dryRun != other.dryRun) return false
        if (force != other.force) return false
        if (networkInterfacePermissionId != other.networkInterfacePermissionId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DeleteNetworkInterfacePermissionRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DeleteNetworkInterfacePermissionRequest
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * Specify true to remove the permission even if the network interface is
         * attached to an instance.
         */
        fun force(force: Boolean): FluentBuilder
        /**
         * The ID of the network interface permission.
         */
        fun networkInterfacePermissionId(networkInterfacePermissionId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * Specify true to remove the permission even if the network interface is
         * attached to an instance.
         */
        var force: Boolean?
        /**
         * The ID of the network interface permission.
         */
        var networkInterfacePermissionId: String?

        fun build(): DeleteNetworkInterfacePermissionRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var force: Boolean? = null
        override var networkInterfacePermissionId: String? = null

        constructor(x: DeleteNetworkInterfacePermissionRequest) : this() {
            this.dryRun = x.dryRun
            this.force = x.force
            this.networkInterfacePermissionId = x.networkInterfacePermissionId
        }

        override fun build(): DeleteNetworkInterfacePermissionRequest = DeleteNetworkInterfacePermissionRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun force(force: Boolean): FluentBuilder = apply { this.force = force }
        override fun networkInterfacePermissionId(networkInterfacePermissionId: String): FluentBuilder = apply { this.networkInterfacePermissionId = networkInterfacePermissionId }
    }
}
