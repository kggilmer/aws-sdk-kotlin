// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Currently available in limited preview only.
 * If you are interested in using this feature, contact your account manager.
 * Information about an association between a branch network interface with a trunk network interface.
 */
class TrunkInterfaceAssociation private constructor(builder: BuilderImpl) {
    /**
     * The ID of the association.
     */
    val associationId: String? = builder.associationId
    /**
     * The ID of the branch network interface.
     */
    val branchInterfaceId: String? = builder.branchInterfaceId
    /**
     * The application key when you use the GRE protocol.
     */
    val greKey: Int? = builder.greKey
    /**
     * The interface protocol. Valid values are VLAN and GRE.
     */
    val interfaceProtocol: InterfaceProtocolType? = builder.interfaceProtocol
    /**
     * The tags for the trunk interface association.
     */
    val tags: List<Tag>? = builder.tags
    /**
     * The ID of the trunk network interface.
     */
    val trunkInterfaceId: String? = builder.trunkInterfaceId
    /**
     * The ID of the VLAN when you use the VLAN protocol.
     */
    val vlanId: Int? = builder.vlanId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): TrunkInterfaceAssociation = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("TrunkInterfaceAssociation(")
        append("associationId=$associationId,")
        append("branchInterfaceId=$branchInterfaceId,")
        append("greKey=$greKey,")
        append("interfaceProtocol=$interfaceProtocol,")
        append("tags=$tags,")
        append("trunkInterfaceId=$trunkInterfaceId,")
        append("vlanId=$vlanId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = associationId?.hashCode() ?: 0
        result = 31 * result + (branchInterfaceId?.hashCode() ?: 0)
        result = 31 * result + (greKey ?: 0)
        result = 31 * result + (interfaceProtocol?.hashCode() ?: 0)
        result = 31 * result + (tags?.hashCode() ?: 0)
        result = 31 * result + (trunkInterfaceId?.hashCode() ?: 0)
        result = 31 * result + (vlanId ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as TrunkInterfaceAssociation

        if (associationId != other.associationId) return false
        if (branchInterfaceId != other.branchInterfaceId) return false
        if (greKey != other.greKey) return false
        if (interfaceProtocol != other.interfaceProtocol) return false
        if (tags != other.tags) return false
        if (trunkInterfaceId != other.trunkInterfaceId) return false
        if (vlanId != other.vlanId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): TrunkInterfaceAssociation = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): TrunkInterfaceAssociation
        /**
         * The ID of the association.
         */
        fun associationId(associationId: String): FluentBuilder
        /**
         * The ID of the branch network interface.
         */
        fun branchInterfaceId(branchInterfaceId: String): FluentBuilder
        /**
         * The application key when you use the GRE protocol.
         */
        fun greKey(greKey: Int): FluentBuilder
        /**
         * The interface protocol. Valid values are VLAN and GRE.
         */
        fun interfaceProtocol(interfaceProtocol: InterfaceProtocolType): FluentBuilder
        /**
         * The tags for the trunk interface association.
         */
        fun tags(tags: List<Tag>): FluentBuilder
        /**
         * The ID of the trunk network interface.
         */
        fun trunkInterfaceId(trunkInterfaceId: String): FluentBuilder
        /**
         * The ID of the VLAN when you use the VLAN protocol.
         */
        fun vlanId(vlanId: Int): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The ID of the association.
         */
        var associationId: String?
        /**
         * The ID of the branch network interface.
         */
        var branchInterfaceId: String?
        /**
         * The application key when you use the GRE protocol.
         */
        var greKey: Int?
        /**
         * The interface protocol. Valid values are VLAN and GRE.
         */
        var interfaceProtocol: InterfaceProtocolType?
        /**
         * The tags for the trunk interface association.
         */
        var tags: List<Tag>?
        /**
         * The ID of the trunk network interface.
         */
        var trunkInterfaceId: String?
        /**
         * The ID of the VLAN when you use the VLAN protocol.
         */
        var vlanId: Int?

        fun build(): TrunkInterfaceAssociation
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var associationId: String? = null
        override var branchInterfaceId: String? = null
        override var greKey: Int? = null
        override var interfaceProtocol: InterfaceProtocolType? = null
        override var tags: List<Tag>? = null
        override var trunkInterfaceId: String? = null
        override var vlanId: Int? = null

        constructor(x: TrunkInterfaceAssociation) : this() {
            this.associationId = x.associationId
            this.branchInterfaceId = x.branchInterfaceId
            this.greKey = x.greKey
            this.interfaceProtocol = x.interfaceProtocol
            this.tags = x.tags
            this.trunkInterfaceId = x.trunkInterfaceId
            this.vlanId = x.vlanId
        }

        override fun build(): TrunkInterfaceAssociation = TrunkInterfaceAssociation(this)
        override fun associationId(associationId: String): FluentBuilder = apply { this.associationId = associationId }
        override fun branchInterfaceId(branchInterfaceId: String): FluentBuilder = apply { this.branchInterfaceId = branchInterfaceId }
        override fun greKey(greKey: Int): FluentBuilder = apply { this.greKey = greKey }
        override fun interfaceProtocol(interfaceProtocol: InterfaceProtocolType): FluentBuilder = apply { this.interfaceProtocol = interfaceProtocol }
        override fun tags(tags: List<Tag>): FluentBuilder = apply { this.tags = tags }
        override fun trunkInterfaceId(trunkInterfaceId: String): FluentBuilder = apply { this.trunkInterfaceId = trunkInterfaceId }
        override fun vlanId(vlanId: Int): FluentBuilder = apply { this.vlanId = vlanId }
    }
}
