// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a launch template version that was successfully deleted.
 */
class DeleteLaunchTemplateVersionsResponseSuccessItem private constructor(builder: BuilderImpl) {
    /**
     * The ID of the launch template.
     */
    val launchTemplateId: String? = builder.launchTemplateId
    /**
     * The name of the launch template.
     */
    val launchTemplateName: String? = builder.launchTemplateName
    /**
     * The version number of the launch template.
     */
    val versionNumber: Long? = builder.versionNumber

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DeleteLaunchTemplateVersionsResponseSuccessItem = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DeleteLaunchTemplateVersionsResponseSuccessItem(")
        append("launchTemplateId=$launchTemplateId,")
        append("launchTemplateName=$launchTemplateName,")
        append("versionNumber=$versionNumber)")
    }

    override fun hashCode(): kotlin.Int {
        var result = launchTemplateId?.hashCode() ?: 0
        result = 31 * result + (launchTemplateName?.hashCode() ?: 0)
        result = 31 * result + (versionNumber?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DeleteLaunchTemplateVersionsResponseSuccessItem

        if (launchTemplateId != other.launchTemplateId) return false
        if (launchTemplateName != other.launchTemplateName) return false
        if (versionNumber != other.versionNumber) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DeleteLaunchTemplateVersionsResponseSuccessItem = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DeleteLaunchTemplateVersionsResponseSuccessItem
        /**
         * The ID of the launch template.
         */
        fun launchTemplateId(launchTemplateId: String): FluentBuilder
        /**
         * The name of the launch template.
         */
        fun launchTemplateName(launchTemplateName: String): FluentBuilder
        /**
         * The version number of the launch template.
         */
        fun versionNumber(versionNumber: Long): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The ID of the launch template.
         */
        var launchTemplateId: String?
        /**
         * The name of the launch template.
         */
        var launchTemplateName: String?
        /**
         * The version number of the launch template.
         */
        var versionNumber: Long?

        fun build(): DeleteLaunchTemplateVersionsResponseSuccessItem
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var launchTemplateId: String? = null
        override var launchTemplateName: String? = null
        override var versionNumber: Long? = null

        constructor(x: DeleteLaunchTemplateVersionsResponseSuccessItem) : this() {
            this.launchTemplateId = x.launchTemplateId
            this.launchTemplateName = x.launchTemplateName
            this.versionNumber = x.versionNumber
        }

        override fun build(): DeleteLaunchTemplateVersionsResponseSuccessItem = DeleteLaunchTemplateVersionsResponseSuccessItem(this)
        override fun launchTemplateId(launchTemplateId: String): FluentBuilder = apply { this.launchTemplateId = launchTemplateId }
        override fun launchTemplateName(launchTemplateName: String): FluentBuilder = apply { this.launchTemplateName = launchTemplateName }
        override fun versionNumber(versionNumber: Long): FluentBuilder = apply { this.versionNumber = versionNumber }
    }
}
