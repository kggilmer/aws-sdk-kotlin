// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ModifyIdentityIdFormatRequest private constructor(builder: BuilderImpl) {
    /**
     * The ARN of the principal, which can be an IAM user, IAM role, or the root user. Specify
     * all to modify the ID format for all IAM users, IAM roles, and the root user of
     * the account.
     */
    val principalArn: String? = builder.principalArn
    /**
     * The type of resource: bundle | conversion-task | customer-gateway | dhcp-options |
     * elastic-ip-allocation | elastic-ip-association |
     * export-task | flow-log | image |
     * import-task | internet-gateway | network-acl
     * | network-acl-association | network-interface |
     * network-interface-attachment | prefix-list |
     * route-table | route-table-association |
     * security-group | subnet |
     * subnet-cidr-block-association | vpc |
     * vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.
     * Alternatively, use the all-current option to include all resource types that are
     * currently within their opt-in period for longer IDs.
     */
    val resource: String? = builder.resource
    /**
     * Indicates whether the resource should use longer IDs (17-character IDs)
     */
    val useLongIds: Boolean? = builder.useLongIds

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ModifyIdentityIdFormatRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyIdentityIdFormatRequest(")
        append("principalArn=$principalArn,")
        append("resource=$resource,")
        append("useLongIds=$useLongIds)")
    }

    override fun hashCode(): kotlin.Int {
        var result = principalArn?.hashCode() ?: 0
        result = 31 * result + (resource?.hashCode() ?: 0)
        result = 31 * result + (useLongIds?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ModifyIdentityIdFormatRequest

        if (principalArn != other.principalArn) return false
        if (resource != other.resource) return false
        if (useLongIds != other.useLongIds) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ModifyIdentityIdFormatRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ModifyIdentityIdFormatRequest
        /**
         * The ARN of the principal, which can be an IAM user, IAM role, or the root user. Specify
         * all to modify the ID format for all IAM users, IAM roles, and the root user of
         * the account.
         */
        fun principalArn(principalArn: String): FluentBuilder
        /**
         * The type of resource: bundle | conversion-task | customer-gateway | dhcp-options |
         * elastic-ip-allocation | elastic-ip-association |
         * export-task | flow-log | image |
         * import-task | internet-gateway | network-acl
         * | network-acl-association | network-interface |
         * network-interface-attachment | prefix-list |
         * route-table | route-table-association |
         * security-group | subnet |
         * subnet-cidr-block-association | vpc |
         * vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.
         * Alternatively, use the all-current option to include all resource types that are
         * currently within their opt-in period for longer IDs.
         */
        fun resource(resource: String): FluentBuilder
        /**
         * Indicates whether the resource should use longer IDs (17-character IDs)
         */
        fun useLongIds(useLongIds: Boolean): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The ARN of the principal, which can be an IAM user, IAM role, or the root user. Specify
         * all to modify the ID format for all IAM users, IAM roles, and the root user of
         * the account.
         */
        var principalArn: String?
        /**
         * The type of resource: bundle | conversion-task | customer-gateway | dhcp-options |
         * elastic-ip-allocation | elastic-ip-association |
         * export-task | flow-log | image |
         * import-task | internet-gateway | network-acl
         * | network-acl-association | network-interface |
         * network-interface-attachment | prefix-list |
         * route-table | route-table-association |
         * security-group | subnet |
         * subnet-cidr-block-association | vpc |
         * vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.
         * Alternatively, use the all-current option to include all resource types that are
         * currently within their opt-in period for longer IDs.
         */
        var resource: String?
        /**
         * Indicates whether the resource should use longer IDs (17-character IDs)
         */
        var useLongIds: Boolean?

        fun build(): ModifyIdentityIdFormatRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var principalArn: String? = null
        override var resource: String? = null
        override var useLongIds: Boolean? = null

        constructor(x: ModifyIdentityIdFormatRequest) : this() {
            this.principalArn = x.principalArn
            this.resource = x.resource
            this.useLongIds = x.useLongIds
        }

        override fun build(): ModifyIdentityIdFormatRequest = ModifyIdentityIdFormatRequest(this)
        override fun principalArn(principalArn: String): FluentBuilder = apply { this.principalArn = principalArn }
        override fun resource(resource: String): FluentBuilder = apply { this.resource = resource }
        override fun useLongIds(useLongIds: Boolean): FluentBuilder = apply { this.useLongIds = useLongIds }
    }
}
