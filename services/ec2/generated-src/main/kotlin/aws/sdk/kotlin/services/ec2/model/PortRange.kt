// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a range of ports.
 */
class PortRange private constructor(builder: BuilderImpl) {
    /**
     * The first port in the range.
     */
    val from: Int? = builder.from
    /**
     * The last port in the range.
     */
    val to: Int? = builder.to

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): PortRange = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("PortRange(")
        append("from=$from,")
        append("to=$to)")
    }

    override fun hashCode(): kotlin.Int {
        var result = from ?: 0
        result = 31 * result + (to ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as PortRange

        if (from != other.from) return false
        if (to != other.to) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): PortRange = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): PortRange
        /**
         * The first port in the range.
         */
        fun from(from: Int): FluentBuilder
        /**
         * The last port in the range.
         */
        fun to(to: Int): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The first port in the range.
         */
        var from: Int?
        /**
         * The last port in the range.
         */
        var to: Int?

        fun build(): PortRange
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var from: Int? = null
        override var to: Int? = null

        constructor(x: PortRange) : this() {
            this.from = x.from
            this.to = x.to
        }

        override fun build(): PortRange = PortRange(this)
        override fun from(from: Int): FluentBuilder = apply { this.from = from }
        override fun to(to: Int): FluentBuilder = apply { this.to = to }
    }
}
