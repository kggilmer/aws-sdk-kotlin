// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * One or more targets associated with the event window.
 */
class InstanceEventWindowAssociationTarget private constructor(builder: BuilderImpl) {
    /**
     * The IDs of the Dedicated Hosts associated with the event window.
     */
    val dedicatedHostIds: List<String>? = builder.dedicatedHostIds
    /**
     * The IDs of the instances associated with the event window.
     */
    val instanceIds: List<String>? = builder.instanceIds
    /**
     * The instance tags associated with the event window. Any instances associated with the tags
     * will be associated with the event window.
     */
    val tags: List<Tag>? = builder.tags

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): InstanceEventWindowAssociationTarget = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("InstanceEventWindowAssociationTarget(")
        append("dedicatedHostIds=$dedicatedHostIds,")
        append("instanceIds=$instanceIds,")
        append("tags=$tags)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dedicatedHostIds?.hashCode() ?: 0
        result = 31 * result + (instanceIds?.hashCode() ?: 0)
        result = 31 * result + (tags?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as InstanceEventWindowAssociationTarget

        if (dedicatedHostIds != other.dedicatedHostIds) return false
        if (instanceIds != other.instanceIds) return false
        if (tags != other.tags) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): InstanceEventWindowAssociationTarget = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): InstanceEventWindowAssociationTarget
        /**
         * The IDs of the Dedicated Hosts associated with the event window.
         */
        fun dedicatedHostIds(dedicatedHostIds: List<String>): FluentBuilder
        /**
         * The IDs of the instances associated with the event window.
         */
        fun instanceIds(instanceIds: List<String>): FluentBuilder
        /**
         * The instance tags associated with the event window. Any instances associated with the tags
         * will be associated with the event window.
         */
        fun tags(tags: List<Tag>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The IDs of the Dedicated Hosts associated with the event window.
         */
        var dedicatedHostIds: List<String>?
        /**
         * The IDs of the instances associated with the event window.
         */
        var instanceIds: List<String>?
        /**
         * The instance tags associated with the event window. Any instances associated with the tags
         * will be associated with the event window.
         */
        var tags: List<Tag>?

        fun build(): InstanceEventWindowAssociationTarget
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dedicatedHostIds: List<String>? = null
        override var instanceIds: List<String>? = null
        override var tags: List<Tag>? = null

        constructor(x: InstanceEventWindowAssociationTarget) : this() {
            this.dedicatedHostIds = x.dedicatedHostIds
            this.instanceIds = x.instanceIds
            this.tags = x.tags
        }

        override fun build(): InstanceEventWindowAssociationTarget = InstanceEventWindowAssociationTarget(this)
        override fun dedicatedHostIds(dedicatedHostIds: List<String>): FluentBuilder = apply { this.dedicatedHostIds = dedicatedHostIds }
        override fun instanceIds(instanceIds: List<String>): FluentBuilder = apply { this.instanceIds = instanceIds }
        override fun tags(tags: List<Tag>): FluentBuilder = apply { this.tags = tags }
    }
}
