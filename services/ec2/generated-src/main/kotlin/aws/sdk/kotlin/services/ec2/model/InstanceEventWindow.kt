// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * The event window.
 */
class InstanceEventWindow private constructor(builder: BuilderImpl) {
    /**
     * One or more targets associated with the event window.
     */
    val associationTarget: InstanceEventWindowAssociationTarget? = builder.associationTarget
    /**
     * The cron expression defined for the event window.
     */
    val cronExpression: String? = builder.cronExpression
    /**
     * The ID of the event window.
     */
    val instanceEventWindowId: String? = builder.instanceEventWindowId
    /**
     * The name of the event window.
     */
    val name: String? = builder.name
    /**
     * The current state of the event window.
     */
    val state: InstanceEventWindowState? = builder.state
    /**
     * The instance tags associated with the event window.
     */
    val tags: List<Tag>? = builder.tags
    /**
     * One or more time ranges defined for the event window.
     */
    val timeRanges: List<InstanceEventWindowTimeRange>? = builder.timeRanges

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): InstanceEventWindow = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("InstanceEventWindow(")
        append("associationTarget=$associationTarget,")
        append("cronExpression=$cronExpression,")
        append("instanceEventWindowId=$instanceEventWindowId,")
        append("name=$name,")
        append("state=$state,")
        append("tags=$tags,")
        append("timeRanges=$timeRanges)")
    }

    override fun hashCode(): kotlin.Int {
        var result = associationTarget?.hashCode() ?: 0
        result = 31 * result + (cronExpression?.hashCode() ?: 0)
        result = 31 * result + (instanceEventWindowId?.hashCode() ?: 0)
        result = 31 * result + (name?.hashCode() ?: 0)
        result = 31 * result + (state?.hashCode() ?: 0)
        result = 31 * result + (tags?.hashCode() ?: 0)
        result = 31 * result + (timeRanges?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as InstanceEventWindow

        if (associationTarget != other.associationTarget) return false
        if (cronExpression != other.cronExpression) return false
        if (instanceEventWindowId != other.instanceEventWindowId) return false
        if (name != other.name) return false
        if (state != other.state) return false
        if (tags != other.tags) return false
        if (timeRanges != other.timeRanges) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): InstanceEventWindow = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): InstanceEventWindow
        /**
         * One or more targets associated with the event window.
         */
        fun associationTarget(associationTarget: InstanceEventWindowAssociationTarget): FluentBuilder
        /**
         * The cron expression defined for the event window.
         */
        fun cronExpression(cronExpression: String): FluentBuilder
        /**
         * The ID of the event window.
         */
        fun instanceEventWindowId(instanceEventWindowId: String): FluentBuilder
        /**
         * The name of the event window.
         */
        fun name(name: String): FluentBuilder
        /**
         * The current state of the event window.
         */
        fun state(state: InstanceEventWindowState): FluentBuilder
        /**
         * The instance tags associated with the event window.
         */
        fun tags(tags: List<Tag>): FluentBuilder
        /**
         * One or more time ranges defined for the event window.
         */
        fun timeRanges(timeRanges: List<InstanceEventWindowTimeRange>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * One or more targets associated with the event window.
         */
        var associationTarget: InstanceEventWindowAssociationTarget?
        /**
         * The cron expression defined for the event window.
         */
        var cronExpression: String?
        /**
         * The ID of the event window.
         */
        var instanceEventWindowId: String?
        /**
         * The name of the event window.
         */
        var name: String?
        /**
         * The current state of the event window.
         */
        var state: InstanceEventWindowState?
        /**
         * The instance tags associated with the event window.
         */
        var tags: List<Tag>?
        /**
         * One or more time ranges defined for the event window.
         */
        var timeRanges: List<InstanceEventWindowTimeRange>?

        fun build(): InstanceEventWindow
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.InstanceEventWindowAssociationTarget] inside the given [block]
         */
        fun associationTarget(block: InstanceEventWindowAssociationTarget.DslBuilder.() -> kotlin.Unit) {
            this.associationTarget = InstanceEventWindowAssociationTarget.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var associationTarget: InstanceEventWindowAssociationTarget? = null
        override var cronExpression: String? = null
        override var instanceEventWindowId: String? = null
        override var name: String? = null
        override var state: InstanceEventWindowState? = null
        override var tags: List<Tag>? = null
        override var timeRanges: List<InstanceEventWindowTimeRange>? = null

        constructor(x: InstanceEventWindow) : this() {
            this.associationTarget = x.associationTarget
            this.cronExpression = x.cronExpression
            this.instanceEventWindowId = x.instanceEventWindowId
            this.name = x.name
            this.state = x.state
            this.tags = x.tags
            this.timeRanges = x.timeRanges
        }

        override fun build(): InstanceEventWindow = InstanceEventWindow(this)
        override fun associationTarget(associationTarget: InstanceEventWindowAssociationTarget): FluentBuilder = apply { this.associationTarget = associationTarget }
        override fun cronExpression(cronExpression: String): FluentBuilder = apply { this.cronExpression = cronExpression }
        override fun instanceEventWindowId(instanceEventWindowId: String): FluentBuilder = apply { this.instanceEventWindowId = instanceEventWindowId }
        override fun name(name: String): FluentBuilder = apply { this.name = name }
        override fun state(state: InstanceEventWindowState): FluentBuilder = apply { this.state = state }
        override fun tags(tags: List<Tag>): FluentBuilder = apply { this.tags = tags }
        override fun timeRanges(timeRanges: List<InstanceEventWindowTimeRange>): FluentBuilder = apply { this.timeRanges = timeRanges }
    }
}
