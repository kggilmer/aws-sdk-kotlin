// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ModifyTrafficMirrorFilterRuleResponse private constructor(builder: BuilderImpl) {
    /**
     * Modifies a Traffic Mirror rule.
     */
    val trafficMirrorFilterRule: TrafficMirrorFilterRule? = builder.trafficMirrorFilterRule

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ModifyTrafficMirrorFilterRuleResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyTrafficMirrorFilterRuleResponse(")
        append("trafficMirrorFilterRule=$trafficMirrorFilterRule)")
    }

    override fun hashCode(): kotlin.Int {
        var result = trafficMirrorFilterRule?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ModifyTrafficMirrorFilterRuleResponse

        if (trafficMirrorFilterRule != other.trafficMirrorFilterRule) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ModifyTrafficMirrorFilterRuleResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ModifyTrafficMirrorFilterRuleResponse
        /**
         * Modifies a Traffic Mirror rule.
         */
        fun trafficMirrorFilterRule(trafficMirrorFilterRule: TrafficMirrorFilterRule): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Modifies a Traffic Mirror rule.
         */
        var trafficMirrorFilterRule: TrafficMirrorFilterRule?

        fun build(): ModifyTrafficMirrorFilterRuleResponse
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.TrafficMirrorFilterRule] inside the given [block]
         */
        fun trafficMirrorFilterRule(block: TrafficMirrorFilterRule.DslBuilder.() -> kotlin.Unit) {
            this.trafficMirrorFilterRule = TrafficMirrorFilterRule.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var trafficMirrorFilterRule: TrafficMirrorFilterRule? = null

        constructor(x: ModifyTrafficMirrorFilterRuleResponse) : this() {
            this.trafficMirrorFilterRule = x.trafficMirrorFilterRule
        }

        override fun build(): ModifyTrafficMirrorFilterRuleResponse = ModifyTrafficMirrorFilterRuleResponse(this)
        override fun trafficMirrorFilterRule(trafficMirrorFilterRule: TrafficMirrorFilterRule): FluentBuilder = apply { this.trafficMirrorFilterRule = trafficMirrorFilterRule }
    }
}
