// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * The cost associated with the Reserved Instance.
 */
class ReservationValue private constructor(builder: BuilderImpl) {
    /**
     * The hourly rate of the reservation.
     */
    val hourlyPrice: String? = builder.hourlyPrice
    /**
     * The balance of the total value (the sum of remainingUpfrontValue + hourlyPrice * number of hours remaining).
     */
    val remainingTotalValue: String? = builder.remainingTotalValue
    /**
     * The remaining upfront cost of the reservation.
     */
    val remainingUpfrontValue: String? = builder.remainingUpfrontValue

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ReservationValue = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ReservationValue(")
        append("hourlyPrice=$hourlyPrice,")
        append("remainingTotalValue=$remainingTotalValue,")
        append("remainingUpfrontValue=$remainingUpfrontValue)")
    }

    override fun hashCode(): kotlin.Int {
        var result = hourlyPrice?.hashCode() ?: 0
        result = 31 * result + (remainingTotalValue?.hashCode() ?: 0)
        result = 31 * result + (remainingUpfrontValue?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ReservationValue

        if (hourlyPrice != other.hourlyPrice) return false
        if (remainingTotalValue != other.remainingTotalValue) return false
        if (remainingUpfrontValue != other.remainingUpfrontValue) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ReservationValue = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ReservationValue
        /**
         * The hourly rate of the reservation.
         */
        fun hourlyPrice(hourlyPrice: String): FluentBuilder
        /**
         * The balance of the total value (the sum of remainingUpfrontValue + hourlyPrice * number of hours remaining).
         */
        fun remainingTotalValue(remainingTotalValue: String): FluentBuilder
        /**
         * The remaining upfront cost of the reservation.
         */
        fun remainingUpfrontValue(remainingUpfrontValue: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The hourly rate of the reservation.
         */
        var hourlyPrice: String?
        /**
         * The balance of the total value (the sum of remainingUpfrontValue + hourlyPrice * number of hours remaining).
         */
        var remainingTotalValue: String?
        /**
         * The remaining upfront cost of the reservation.
         */
        var remainingUpfrontValue: String?

        fun build(): ReservationValue
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var hourlyPrice: String? = null
        override var remainingTotalValue: String? = null
        override var remainingUpfrontValue: String? = null

        constructor(x: ReservationValue) : this() {
            this.hourlyPrice = x.hourlyPrice
            this.remainingTotalValue = x.remainingTotalValue
            this.remainingUpfrontValue = x.remainingUpfrontValue
        }

        override fun build(): ReservationValue = ReservationValue(this)
        override fun hourlyPrice(hourlyPrice: String): FluentBuilder = apply { this.hourlyPrice = hourlyPrice }
        override fun remainingTotalValue(remainingTotalValue: String): FluentBuilder = apply { this.remainingTotalValue = remainingTotalValue }
        override fun remainingUpfrontValue(remainingUpfrontValue: String): FluentBuilder = apply { this.remainingUpfrontValue = remainingUpfrontValue }
    }
}
