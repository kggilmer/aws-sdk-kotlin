// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ModifyInstanceEventWindowRequest private constructor(builder: BuilderImpl) {
    /**
     * The cron expression of the event window, for example, * 0-4,20-23 * * 1,5.
     * Constraints:
     * Only hour and day of the week values are supported.
     * For day of the week values, you can specify either integers 0 through
     * 6, or alternative single values SUN through
     * SAT.
     * The minute, month, and year must be specified by *.
     * The hour value must be one or a multiple range, for example, 0-4 or
     * 0-4,20-23.
     * Each hour range must be >= 2 hours, for example, 0-2 or
     * 20-23.
     * The event window must be >= 4 hours. The combined total time ranges in the event
     * window must be >= 4 hours.
     * For more information about cron expressions, see <a href="https://en.wikipedia.org/wiki/Cron">cron on the Wikipedia
     * website.
     */
    val cronExpression: String? = builder.cronExpression
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The ID of the event window.
     */
    val instanceEventWindowId: String? = builder.instanceEventWindowId
    /**
     * The name of the event window.
     */
    val name: String? = builder.name
    /**
     * The time ranges of the event window.
     */
    val timeRanges: List<InstanceEventWindowTimeRangeRequest>? = builder.timeRanges

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ModifyInstanceEventWindowRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyInstanceEventWindowRequest(")
        append("cronExpression=$cronExpression,")
        append("dryRun=$dryRun,")
        append("instanceEventWindowId=$instanceEventWindowId,")
        append("name=$name,")
        append("timeRanges=$timeRanges)")
    }

    override fun hashCode(): kotlin.Int {
        var result = cronExpression?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (instanceEventWindowId?.hashCode() ?: 0)
        result = 31 * result + (name?.hashCode() ?: 0)
        result = 31 * result + (timeRanges?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ModifyInstanceEventWindowRequest

        if (cronExpression != other.cronExpression) return false
        if (dryRun != other.dryRun) return false
        if (instanceEventWindowId != other.instanceEventWindowId) return false
        if (name != other.name) return false
        if (timeRanges != other.timeRanges) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ModifyInstanceEventWindowRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ModifyInstanceEventWindowRequest
        /**
         * The cron expression of the event window, for example, * 0-4,20-23 * * 1,5.
         * Constraints:
         * Only hour and day of the week values are supported.
         * For day of the week values, you can specify either integers 0 through
         * 6, or alternative single values SUN through
         * SAT.
         * The minute, month, and year must be specified by *.
         * The hour value must be one or a multiple range, for example, 0-4 or
         * 0-4,20-23.
         * Each hour range must be >= 2 hours, for example, 0-2 or
         * 20-23.
         * The event window must be >= 4 hours. The combined total time ranges in the event
         * window must be >= 4 hours.
         * For more information about cron expressions, see <a href="https://en.wikipedia.org/wiki/Cron">cron on the Wikipedia
         * website.
         */
        fun cronExpression(cronExpression: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The ID of the event window.
         */
        fun instanceEventWindowId(instanceEventWindowId: String): FluentBuilder
        /**
         * The name of the event window.
         */
        fun name(name: String): FluentBuilder
        /**
         * The time ranges of the event window.
         */
        fun timeRanges(timeRanges: List<InstanceEventWindowTimeRangeRequest>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The cron expression of the event window, for example, * 0-4,20-23 * * 1,5.
         * Constraints:
         * Only hour and day of the week values are supported.
         * For day of the week values, you can specify either integers 0 through
         * 6, or alternative single values SUN through
         * SAT.
         * The minute, month, and year must be specified by *.
         * The hour value must be one or a multiple range, for example, 0-4 or
         * 0-4,20-23.
         * Each hour range must be >= 2 hours, for example, 0-2 or
         * 20-23.
         * The event window must be >= 4 hours. The combined total time ranges in the event
         * window must be >= 4 hours.
         * For more information about cron expressions, see <a href="https://en.wikipedia.org/wiki/Cron">cron on the Wikipedia
         * website.
         */
        var cronExpression: String?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The ID of the event window.
         */
        var instanceEventWindowId: String?
        /**
         * The name of the event window.
         */
        var name: String?
        /**
         * The time ranges of the event window.
         */
        var timeRanges: List<InstanceEventWindowTimeRangeRequest>?

        fun build(): ModifyInstanceEventWindowRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var cronExpression: String? = null
        override var dryRun: Boolean? = null
        override var instanceEventWindowId: String? = null
        override var name: String? = null
        override var timeRanges: List<InstanceEventWindowTimeRangeRequest>? = null

        constructor(x: ModifyInstanceEventWindowRequest) : this() {
            this.cronExpression = x.cronExpression
            this.dryRun = x.dryRun
            this.instanceEventWindowId = x.instanceEventWindowId
            this.name = x.name
            this.timeRanges = x.timeRanges
        }

        override fun build(): ModifyInstanceEventWindowRequest = ModifyInstanceEventWindowRequest(this)
        override fun cronExpression(cronExpression: String): FluentBuilder = apply { this.cronExpression = cronExpression }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun instanceEventWindowId(instanceEventWindowId: String): FluentBuilder = apply { this.instanceEventWindowId = instanceEventWindowId }
        override fun name(name: String): FluentBuilder = apply { this.name = name }
        override fun timeRanges(timeRanges: List<InstanceEventWindowTimeRangeRequest>): FluentBuilder = apply { this.timeRanges = timeRanges }
    }
}
