// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class GetFlowLogsIntegrationTemplateRequest private constructor(builder: BuilderImpl) {
    /**
     * To store the CloudFormation template in Amazon S3, specify the location in Amazon S3.
     */
    val configDeliveryS3DestinationArn: String? = builder.configDeliveryS3DestinationArn
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The ID of the flow log.
     */
    val flowLogId: String? = builder.flowLogId
    /**
     * Information about the service integration.
     */
    val integrateServices: IntegrateServices? = builder.integrateServices

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): GetFlowLogsIntegrationTemplateRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("GetFlowLogsIntegrationTemplateRequest(")
        append("configDeliveryS3DestinationArn=$configDeliveryS3DestinationArn,")
        append("dryRun=$dryRun,")
        append("flowLogId=$flowLogId,")
        append("integrateServices=$integrateServices)")
    }

    override fun hashCode(): kotlin.Int {
        var result = configDeliveryS3DestinationArn?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (flowLogId?.hashCode() ?: 0)
        result = 31 * result + (integrateServices?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as GetFlowLogsIntegrationTemplateRequest

        if (configDeliveryS3DestinationArn != other.configDeliveryS3DestinationArn) return false
        if (dryRun != other.dryRun) return false
        if (flowLogId != other.flowLogId) return false
        if (integrateServices != other.integrateServices) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): GetFlowLogsIntegrationTemplateRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): GetFlowLogsIntegrationTemplateRequest
        /**
         * To store the CloudFormation template in Amazon S3, specify the location in Amazon S3.
         */
        fun configDeliveryS3DestinationArn(configDeliveryS3DestinationArn: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The ID of the flow log.
         */
        fun flowLogId(flowLogId: String): FluentBuilder
        /**
         * Information about the service integration.
         */
        fun integrateServices(integrateServices: IntegrateServices): FluentBuilder
    }

    interface DslBuilder {
        /**
         * To store the CloudFormation template in Amazon S3, specify the location in Amazon S3.
         */
        var configDeliveryS3DestinationArn: String?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The ID of the flow log.
         */
        var flowLogId: String?
        /**
         * Information about the service integration.
         */
        var integrateServices: IntegrateServices?

        fun build(): GetFlowLogsIntegrationTemplateRequest
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.IntegrateServices] inside the given [block]
         */
        fun integrateServices(block: IntegrateServices.DslBuilder.() -> kotlin.Unit) {
            this.integrateServices = IntegrateServices.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var configDeliveryS3DestinationArn: String? = null
        override var dryRun: Boolean? = null
        override var flowLogId: String? = null
        override var integrateServices: IntegrateServices? = null

        constructor(x: GetFlowLogsIntegrationTemplateRequest) : this() {
            this.configDeliveryS3DestinationArn = x.configDeliveryS3DestinationArn
            this.dryRun = x.dryRun
            this.flowLogId = x.flowLogId
            this.integrateServices = x.integrateServices
        }

        override fun build(): GetFlowLogsIntegrationTemplateRequest = GetFlowLogsIntegrationTemplateRequest(this)
        override fun configDeliveryS3DestinationArn(configDeliveryS3DestinationArn: String): FluentBuilder = apply { this.configDeliveryS3DestinationArn = configDeliveryS3DestinationArn }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun flowLogId(flowLogId: String): FluentBuilder = apply { this.flowLogId = flowLogId }
        override fun integrateServices(integrateServices: IntegrateServices): FluentBuilder = apply { this.integrateServices = integrateServices }
    }
}
