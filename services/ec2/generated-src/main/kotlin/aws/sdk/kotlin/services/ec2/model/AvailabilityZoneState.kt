// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



sealed class AvailabilityZoneState {

    abstract val value: kotlin.String

    object Available : aws.sdk.kotlin.services.ec2.model.AvailabilityZoneState() {
        override val value: kotlin.String = "available"
        override fun toString(): kotlin.String = value
    }

    object Impaired : aws.sdk.kotlin.services.ec2.model.AvailabilityZoneState() {
        override val value: kotlin.String = "impaired"
        override fun toString(): kotlin.String = value
    }

    object Information : aws.sdk.kotlin.services.ec2.model.AvailabilityZoneState() {
        override val value: kotlin.String = "information"
        override fun toString(): kotlin.String = value
    }

    object Unavailable : aws.sdk.kotlin.services.ec2.model.AvailabilityZoneState() {
        override val value: kotlin.String = "unavailable"
        override fun toString(): kotlin.String = value
    }

    data class SdkUnknown(override val value: kotlin.String) : aws.sdk.kotlin.services.ec2.model.AvailabilityZoneState() {
        override fun toString(): kotlin.String = value
    }

    companion object {
        /**
         * Convert a raw value to one of the sealed variants or [SdkUnknown]
         */
        fun fromValue(str: kotlin.String): aws.sdk.kotlin.services.ec2.model.AvailabilityZoneState = when(str) {
            "available" -> Available
            "impaired" -> Impaired
            "information" -> Information
            "unavailable" -> Unavailable
            else -> SdkUnknown(str)
        }

        /**
         * Get a list of all possible variants
         */
        fun values(): kotlin.collections.List<aws.sdk.kotlin.services.ec2.model.AvailabilityZoneState> = listOf(
            Available,
            Impaired,
            Information,
            Unavailable
        )
    }
}
