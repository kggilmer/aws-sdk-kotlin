// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class AssignIpv6AddressesResponse private constructor(builder: BuilderImpl) {
    /**
     * The new IPv6 addresses assigned to the network interface. Existing IPv6 addresses
     * that were assigned to the network interface before the request are not included.
     */
    val assignedIpv6Addresses: List<String>? = builder.assignedIpv6Addresses
    /**
     * The IPv6 prefixes that are assigned to the network interface.
     */
    val assignedIpv6Prefixes: List<String>? = builder.assignedIpv6Prefixes
    /**
     * The ID of the network interface.
     */
    val networkInterfaceId: String? = builder.networkInterfaceId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): AssignIpv6AddressesResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("AssignIpv6AddressesResponse(")
        append("assignedIpv6Addresses=$assignedIpv6Addresses,")
        append("assignedIpv6Prefixes=$assignedIpv6Prefixes,")
        append("networkInterfaceId=$networkInterfaceId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = assignedIpv6Addresses?.hashCode() ?: 0
        result = 31 * result + (assignedIpv6Prefixes?.hashCode() ?: 0)
        result = 31 * result + (networkInterfaceId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as AssignIpv6AddressesResponse

        if (assignedIpv6Addresses != other.assignedIpv6Addresses) return false
        if (assignedIpv6Prefixes != other.assignedIpv6Prefixes) return false
        if (networkInterfaceId != other.networkInterfaceId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): AssignIpv6AddressesResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): AssignIpv6AddressesResponse
        /**
         * The new IPv6 addresses assigned to the network interface. Existing IPv6 addresses
         * that were assigned to the network interface before the request are not included.
         */
        fun assignedIpv6Addresses(assignedIpv6Addresses: List<String>): FluentBuilder
        /**
         * The IPv6 prefixes that are assigned to the network interface.
         */
        fun assignedIpv6Prefixes(assignedIpv6Prefixes: List<String>): FluentBuilder
        /**
         * The ID of the network interface.
         */
        fun networkInterfaceId(networkInterfaceId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The new IPv6 addresses assigned to the network interface. Existing IPv6 addresses
         * that were assigned to the network interface before the request are not included.
         */
        var assignedIpv6Addresses: List<String>?
        /**
         * The IPv6 prefixes that are assigned to the network interface.
         */
        var assignedIpv6Prefixes: List<String>?
        /**
         * The ID of the network interface.
         */
        var networkInterfaceId: String?

        fun build(): AssignIpv6AddressesResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var assignedIpv6Addresses: List<String>? = null
        override var assignedIpv6Prefixes: List<String>? = null
        override var networkInterfaceId: String? = null

        constructor(x: AssignIpv6AddressesResponse) : this() {
            this.assignedIpv6Addresses = x.assignedIpv6Addresses
            this.assignedIpv6Prefixes = x.assignedIpv6Prefixes
            this.networkInterfaceId = x.networkInterfaceId
        }

        override fun build(): AssignIpv6AddressesResponse = AssignIpv6AddressesResponse(this)
        override fun assignedIpv6Addresses(assignedIpv6Addresses: List<String>): FluentBuilder = apply { this.assignedIpv6Addresses = assignedIpv6Addresses }
        override fun assignedIpv6Prefixes(assignedIpv6Prefixes: List<String>): FluentBuilder = apply { this.assignedIpv6Prefixes = assignedIpv6Prefixes }
        override fun networkInterfaceId(networkInterfaceId: String): FluentBuilder = apply { this.networkInterfaceId = networkInterfaceId }
    }
}
