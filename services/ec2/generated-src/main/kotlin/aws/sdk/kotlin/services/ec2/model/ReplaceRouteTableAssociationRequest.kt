// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ReplaceRouteTableAssociationRequest private constructor(builder: BuilderImpl) {
    /**
     * The association ID.
     */
    val associationId: String? = builder.associationId
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The ID of the new route table to associate with the subnet.
     */
    val routeTableId: String? = builder.routeTableId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ReplaceRouteTableAssociationRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ReplaceRouteTableAssociationRequest(")
        append("associationId=$associationId,")
        append("dryRun=$dryRun,")
        append("routeTableId=$routeTableId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = associationId?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (routeTableId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ReplaceRouteTableAssociationRequest

        if (associationId != other.associationId) return false
        if (dryRun != other.dryRun) return false
        if (routeTableId != other.routeTableId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ReplaceRouteTableAssociationRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ReplaceRouteTableAssociationRequest
        /**
         * The association ID.
         */
        fun associationId(associationId: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The ID of the new route table to associate with the subnet.
         */
        fun routeTableId(routeTableId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The association ID.
         */
        var associationId: String?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The ID of the new route table to associate with the subnet.
         */
        var routeTableId: String?

        fun build(): ReplaceRouteTableAssociationRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var associationId: String? = null
        override var dryRun: Boolean? = null
        override var routeTableId: String? = null

        constructor(x: ReplaceRouteTableAssociationRequest) : this() {
            this.associationId = x.associationId
            this.dryRun = x.dryRun
            this.routeTableId = x.routeTableId
        }

        override fun build(): ReplaceRouteTableAssociationRequest = ReplaceRouteTableAssociationRequest(this)
        override fun associationId(associationId: String): FluentBuilder = apply { this.associationId = associationId }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun routeTableId(routeTableId: String): FluentBuilder = apply { this.routeTableId = routeTableId }
    }
}
