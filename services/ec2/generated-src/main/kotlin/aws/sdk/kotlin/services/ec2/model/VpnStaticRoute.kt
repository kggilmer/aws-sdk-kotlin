// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a static route for a VPN connection.
 */
class VpnStaticRoute private constructor(builder: BuilderImpl) {
    /**
     * The CIDR block associated with the local subnet of the customer data center.
     */
    val destinationCidrBlock: String? = builder.destinationCidrBlock
    /**
     * Indicates how the routes were provided.
     */
    val source: VpnStaticRouteSource? = builder.source
    /**
     * The current state of the static route.
     */
    val state: VpnState? = builder.state

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): VpnStaticRoute = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("VpnStaticRoute(")
        append("destinationCidrBlock=$destinationCidrBlock,")
        append("source=$source,")
        append("state=$state)")
    }

    override fun hashCode(): kotlin.Int {
        var result = destinationCidrBlock?.hashCode() ?: 0
        result = 31 * result + (source?.hashCode() ?: 0)
        result = 31 * result + (state?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as VpnStaticRoute

        if (destinationCidrBlock != other.destinationCidrBlock) return false
        if (source != other.source) return false
        if (state != other.state) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): VpnStaticRoute = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): VpnStaticRoute
        /**
         * The CIDR block associated with the local subnet of the customer data center.
         */
        fun destinationCidrBlock(destinationCidrBlock: String): FluentBuilder
        /**
         * Indicates how the routes were provided.
         */
        fun source(source: VpnStaticRouteSource): FluentBuilder
        /**
         * The current state of the static route.
         */
        fun state(state: VpnState): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The CIDR block associated with the local subnet of the customer data center.
         */
        var destinationCidrBlock: String?
        /**
         * Indicates how the routes were provided.
         */
        var source: VpnStaticRouteSource?
        /**
         * The current state of the static route.
         */
        var state: VpnState?

        fun build(): VpnStaticRoute
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var destinationCidrBlock: String? = null
        override var source: VpnStaticRouteSource? = null
        override var state: VpnState? = null

        constructor(x: VpnStaticRoute) : this() {
            this.destinationCidrBlock = x.destinationCidrBlock
            this.source = x.source
            this.state = x.state
        }

        override fun build(): VpnStaticRoute = VpnStaticRoute(this)
        override fun destinationCidrBlock(destinationCidrBlock: String): FluentBuilder = apply { this.destinationCidrBlock = destinationCidrBlock }
        override fun source(source: VpnStaticRouteSource): FluentBuilder = apply { this.source = source }
        override fun state(state: VpnState): FluentBuilder = apply { this.state = state }
    }
}
