// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class CreateTransitGatewayRouteRequest private constructor(builder: BuilderImpl) {
    /**
     * Indicates whether to drop traffic that matches this route.
     */
    val blackhole: Boolean? = builder.blackhole
    /**
     * The CIDR range used for destination matches. Routing decisions are based on the
     * most specific match.
     */
    val destinationCidrBlock: String? = builder.destinationCidrBlock
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The ID of the attachment.
     */
    val transitGatewayAttachmentId: String? = builder.transitGatewayAttachmentId
    /**
     * The ID of the transit gateway route table.
     */
    val transitGatewayRouteTableId: String? = builder.transitGatewayRouteTableId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CreateTransitGatewayRouteRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CreateTransitGatewayRouteRequest(")
        append("blackhole=$blackhole,")
        append("destinationCidrBlock=$destinationCidrBlock,")
        append("dryRun=$dryRun,")
        append("transitGatewayAttachmentId=$transitGatewayAttachmentId,")
        append("transitGatewayRouteTableId=$transitGatewayRouteTableId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = blackhole?.hashCode() ?: 0
        result = 31 * result + (destinationCidrBlock?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (transitGatewayAttachmentId?.hashCode() ?: 0)
        result = 31 * result + (transitGatewayRouteTableId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CreateTransitGatewayRouteRequest

        if (blackhole != other.blackhole) return false
        if (destinationCidrBlock != other.destinationCidrBlock) return false
        if (dryRun != other.dryRun) return false
        if (transitGatewayAttachmentId != other.transitGatewayAttachmentId) return false
        if (transitGatewayRouteTableId != other.transitGatewayRouteTableId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CreateTransitGatewayRouteRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CreateTransitGatewayRouteRequest
        /**
         * Indicates whether to drop traffic that matches this route.
         */
        fun blackhole(blackhole: Boolean): FluentBuilder
        /**
         * The CIDR range used for destination matches. Routing decisions are based on the
         * most specific match.
         */
        fun destinationCidrBlock(destinationCidrBlock: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The ID of the attachment.
         */
        fun transitGatewayAttachmentId(transitGatewayAttachmentId: String): FluentBuilder
        /**
         * The ID of the transit gateway route table.
         */
        fun transitGatewayRouteTableId(transitGatewayRouteTableId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Indicates whether to drop traffic that matches this route.
         */
        var blackhole: Boolean?
        /**
         * The CIDR range used for destination matches. Routing decisions are based on the
         * most specific match.
         */
        var destinationCidrBlock: String?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The ID of the attachment.
         */
        var transitGatewayAttachmentId: String?
        /**
         * The ID of the transit gateway route table.
         */
        var transitGatewayRouteTableId: String?

        fun build(): CreateTransitGatewayRouteRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var blackhole: Boolean? = null
        override var destinationCidrBlock: String? = null
        override var dryRun: Boolean? = null
        override var transitGatewayAttachmentId: String? = null
        override var transitGatewayRouteTableId: String? = null

        constructor(x: CreateTransitGatewayRouteRequest) : this() {
            this.blackhole = x.blackhole
            this.destinationCidrBlock = x.destinationCidrBlock
            this.dryRun = x.dryRun
            this.transitGatewayAttachmentId = x.transitGatewayAttachmentId
            this.transitGatewayRouteTableId = x.transitGatewayRouteTableId
        }

        override fun build(): CreateTransitGatewayRouteRequest = CreateTransitGatewayRouteRequest(this)
        override fun blackhole(blackhole: Boolean): FluentBuilder = apply { this.blackhole = blackhole }
        override fun destinationCidrBlock(destinationCidrBlock: String): FluentBuilder = apply { this.destinationCidrBlock = destinationCidrBlock }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun transitGatewayAttachmentId(transitGatewayAttachmentId: String): FluentBuilder = apply { this.transitGatewayAttachmentId = transitGatewayAttachmentId }
        override fun transitGatewayRouteTableId(transitGatewayRouteTableId: String): FluentBuilder = apply { this.transitGatewayRouteTableId = transitGatewayRouteTableId }
    }
}
