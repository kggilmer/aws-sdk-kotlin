// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes address usage for a customer-owned address pool.
 */
class CoipAddressUsage private constructor(builder: BuilderImpl) {
    /**
     * The allocation ID of the address.
     */
    val allocationId: String? = builder.allocationId
    /**
     * The Amazon Web Services account ID.
     */
    val awsAccountId: String? = builder.awsAccountId
    /**
     * The Amazon Web Services service.
     */
    val awsService: String? = builder.awsService
    /**
     * The customer-owned IP address.
     */
    val coIp: String? = builder.coIp

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CoipAddressUsage = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CoipAddressUsage(")
        append("allocationId=$allocationId,")
        append("awsAccountId=$awsAccountId,")
        append("awsService=$awsService,")
        append("coIp=$coIp)")
    }

    override fun hashCode(): kotlin.Int {
        var result = allocationId?.hashCode() ?: 0
        result = 31 * result + (awsAccountId?.hashCode() ?: 0)
        result = 31 * result + (awsService?.hashCode() ?: 0)
        result = 31 * result + (coIp?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CoipAddressUsage

        if (allocationId != other.allocationId) return false
        if (awsAccountId != other.awsAccountId) return false
        if (awsService != other.awsService) return false
        if (coIp != other.coIp) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CoipAddressUsage = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CoipAddressUsage
        /**
         * The allocation ID of the address.
         */
        fun allocationId(allocationId: String): FluentBuilder
        /**
         * The Amazon Web Services account ID.
         */
        fun awsAccountId(awsAccountId: String): FluentBuilder
        /**
         * The Amazon Web Services service.
         */
        fun awsService(awsService: String): FluentBuilder
        /**
         * The customer-owned IP address.
         */
        fun coIp(coIp: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The allocation ID of the address.
         */
        var allocationId: String?
        /**
         * The Amazon Web Services account ID.
         */
        var awsAccountId: String?
        /**
         * The Amazon Web Services service.
         */
        var awsService: String?
        /**
         * The customer-owned IP address.
         */
        var coIp: String?

        fun build(): CoipAddressUsage
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var allocationId: String? = null
        override var awsAccountId: String? = null
        override var awsService: String? = null
        override var coIp: String? = null

        constructor(x: CoipAddressUsage) : this() {
            this.allocationId = x.allocationId
            this.awsAccountId = x.awsAccountId
            this.awsService = x.awsService
            this.coIp = x.coIp
        }

        override fun build(): CoipAddressUsage = CoipAddressUsage(this)
        override fun allocationId(allocationId: String): FluentBuilder = apply { this.allocationId = allocationId }
        override fun awsAccountId(awsAccountId: String): FluentBuilder = apply { this.awsAccountId = awsAccountId }
        override fun awsService(awsService: String): FluentBuilder = apply { this.awsService = awsService }
        override fun coIp(coIp: String): FluentBuilder = apply { this.coIp = coIp }
    }
}
