// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class RevokeSecurityGroupEgressRequest private constructor(builder: BuilderImpl) {
    /**
     * Not supported. Use a set of IP permissions to specify the CIDR.
     */
    val cidrIp: String? = builder.cidrIp
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * Not supported. Use a set of IP permissions to specify the port.
     */
    val fromPort: Int? = builder.fromPort
    /**
     * The ID of the security group.
     */
    val groupId: String? = builder.groupId
    /**
     * The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.
     */
    val ipPermissions: List<IpPermission>? = builder.ipPermissions
    /**
     * Not supported. Use a set of IP permissions to specify the protocol name or
     * number.
     */
    val ipProtocol: String? = builder.ipProtocol
    /**
     * The IDs of the security group rules.
     */
    val securityGroupRuleIds: List<String>? = builder.securityGroupRuleIds
    /**
     * Not supported. Use a set of IP permissions to specify a
     * destination security group.
     */
    val sourceSecurityGroupName: String? = builder.sourceSecurityGroupName
    /**
     * Not supported. Use a set of IP permissions to specify a destination security
     * group.
     */
    val sourceSecurityGroupOwnerId: String? = builder.sourceSecurityGroupOwnerId
    /**
     * Not supported. Use a set of IP permissions to specify the port.
     */
    val toPort: Int? = builder.toPort

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): RevokeSecurityGroupEgressRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("RevokeSecurityGroupEgressRequest(")
        append("cidrIp=$cidrIp,")
        append("dryRun=$dryRun,")
        append("fromPort=$fromPort,")
        append("groupId=$groupId,")
        append("ipPermissions=$ipPermissions,")
        append("ipProtocol=$ipProtocol,")
        append("securityGroupRuleIds=$securityGroupRuleIds,")
        append("sourceSecurityGroupName=$sourceSecurityGroupName,")
        append("sourceSecurityGroupOwnerId=$sourceSecurityGroupOwnerId,")
        append("toPort=$toPort)")
    }

    override fun hashCode(): kotlin.Int {
        var result = cidrIp?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (fromPort ?: 0)
        result = 31 * result + (groupId?.hashCode() ?: 0)
        result = 31 * result + (ipPermissions?.hashCode() ?: 0)
        result = 31 * result + (ipProtocol?.hashCode() ?: 0)
        result = 31 * result + (securityGroupRuleIds?.hashCode() ?: 0)
        result = 31 * result + (sourceSecurityGroupName?.hashCode() ?: 0)
        result = 31 * result + (sourceSecurityGroupOwnerId?.hashCode() ?: 0)
        result = 31 * result + (toPort ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as RevokeSecurityGroupEgressRequest

        if (cidrIp != other.cidrIp) return false
        if (dryRun != other.dryRun) return false
        if (fromPort != other.fromPort) return false
        if (groupId != other.groupId) return false
        if (ipPermissions != other.ipPermissions) return false
        if (ipProtocol != other.ipProtocol) return false
        if (securityGroupRuleIds != other.securityGroupRuleIds) return false
        if (sourceSecurityGroupName != other.sourceSecurityGroupName) return false
        if (sourceSecurityGroupOwnerId != other.sourceSecurityGroupOwnerId) return false
        if (toPort != other.toPort) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): RevokeSecurityGroupEgressRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): RevokeSecurityGroupEgressRequest
        /**
         * Not supported. Use a set of IP permissions to specify the CIDR.
         */
        fun cidrIp(cidrIp: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * Not supported. Use a set of IP permissions to specify the port.
         */
        fun fromPort(fromPort: Int): FluentBuilder
        /**
         * The ID of the security group.
         */
        fun groupId(groupId: String): FluentBuilder
        /**
         * The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.
         */
        fun ipPermissions(ipPermissions: List<IpPermission>): FluentBuilder
        /**
         * Not supported. Use a set of IP permissions to specify the protocol name or
         * number.
         */
        fun ipProtocol(ipProtocol: String): FluentBuilder
        /**
         * The IDs of the security group rules.
         */
        fun securityGroupRuleIds(securityGroupRuleIds: List<String>): FluentBuilder
        /**
         * Not supported. Use a set of IP permissions to specify a
         * destination security group.
         */
        fun sourceSecurityGroupName(sourceSecurityGroupName: String): FluentBuilder
        /**
         * Not supported. Use a set of IP permissions to specify a destination security
         * group.
         */
        fun sourceSecurityGroupOwnerId(sourceSecurityGroupOwnerId: String): FluentBuilder
        /**
         * Not supported. Use a set of IP permissions to specify the port.
         */
        fun toPort(toPort: Int): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Not supported. Use a set of IP permissions to specify the CIDR.
         */
        var cidrIp: String?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * Not supported. Use a set of IP permissions to specify the port.
         */
        var fromPort: Int?
        /**
         * The ID of the security group.
         */
        var groupId: String?
        /**
         * The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.
         */
        var ipPermissions: List<IpPermission>?
        /**
         * Not supported. Use a set of IP permissions to specify the protocol name or
         * number.
         */
        var ipProtocol: String?
        /**
         * The IDs of the security group rules.
         */
        var securityGroupRuleIds: List<String>?
        /**
         * Not supported. Use a set of IP permissions to specify a
         * destination security group.
         */
        var sourceSecurityGroupName: String?
        /**
         * Not supported. Use a set of IP permissions to specify a destination security
         * group.
         */
        var sourceSecurityGroupOwnerId: String?
        /**
         * Not supported. Use a set of IP permissions to specify the port.
         */
        var toPort: Int?

        fun build(): RevokeSecurityGroupEgressRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var cidrIp: String? = null
        override var dryRun: Boolean? = null
        override var fromPort: Int? = null
        override var groupId: String? = null
        override var ipPermissions: List<IpPermission>? = null
        override var ipProtocol: String? = null
        override var securityGroupRuleIds: List<String>? = null
        override var sourceSecurityGroupName: String? = null
        override var sourceSecurityGroupOwnerId: String? = null
        override var toPort: Int? = null

        constructor(x: RevokeSecurityGroupEgressRequest) : this() {
            this.cidrIp = x.cidrIp
            this.dryRun = x.dryRun
            this.fromPort = x.fromPort
            this.groupId = x.groupId
            this.ipPermissions = x.ipPermissions
            this.ipProtocol = x.ipProtocol
            this.securityGroupRuleIds = x.securityGroupRuleIds
            this.sourceSecurityGroupName = x.sourceSecurityGroupName
            this.sourceSecurityGroupOwnerId = x.sourceSecurityGroupOwnerId
            this.toPort = x.toPort
        }

        override fun build(): RevokeSecurityGroupEgressRequest = RevokeSecurityGroupEgressRequest(this)
        override fun cidrIp(cidrIp: String): FluentBuilder = apply { this.cidrIp = cidrIp }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun fromPort(fromPort: Int): FluentBuilder = apply { this.fromPort = fromPort }
        override fun groupId(groupId: String): FluentBuilder = apply { this.groupId = groupId }
        override fun ipPermissions(ipPermissions: List<IpPermission>): FluentBuilder = apply { this.ipPermissions = ipPermissions }
        override fun ipProtocol(ipProtocol: String): FluentBuilder = apply { this.ipProtocol = ipProtocol }
        override fun securityGroupRuleIds(securityGroupRuleIds: List<String>): FluentBuilder = apply { this.securityGroupRuleIds = securityGroupRuleIds }
        override fun sourceSecurityGroupName(sourceSecurityGroupName: String): FluentBuilder = apply { this.sourceSecurityGroupName = sourceSecurityGroupName }
        override fun sourceSecurityGroupOwnerId(sourceSecurityGroupOwnerId: String): FluentBuilder = apply { this.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId }
        override fun toPort(toPort: Int): FluentBuilder = apply { this.toPort = toPort }
    }
}
