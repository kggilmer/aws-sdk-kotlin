// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class DisassociateVpcCidrBlockResponse private constructor(builder: BuilderImpl) {
    /**
     * Information about the IPv4 CIDR block association.
     */
    val cidrBlockAssociation: VpcCidrBlockAssociation? = builder.cidrBlockAssociation
    /**
     * Information about the IPv6 CIDR block association.
     */
    val ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation? = builder.ipv6CidrBlockAssociation
    /**
     * The ID of the VPC.
     */
    val vpcId: String? = builder.vpcId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DisassociateVpcCidrBlockResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DisassociateVpcCidrBlockResponse(")
        append("cidrBlockAssociation=$cidrBlockAssociation,")
        append("ipv6CidrBlockAssociation=$ipv6CidrBlockAssociation,")
        append("vpcId=$vpcId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = cidrBlockAssociation?.hashCode() ?: 0
        result = 31 * result + (ipv6CidrBlockAssociation?.hashCode() ?: 0)
        result = 31 * result + (vpcId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DisassociateVpcCidrBlockResponse

        if (cidrBlockAssociation != other.cidrBlockAssociation) return false
        if (ipv6CidrBlockAssociation != other.ipv6CidrBlockAssociation) return false
        if (vpcId != other.vpcId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DisassociateVpcCidrBlockResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DisassociateVpcCidrBlockResponse
        /**
         * Information about the IPv4 CIDR block association.
         */
        fun cidrBlockAssociation(cidrBlockAssociation: VpcCidrBlockAssociation): FluentBuilder
        /**
         * Information about the IPv6 CIDR block association.
         */
        fun ipv6CidrBlockAssociation(ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation): FluentBuilder
        /**
         * The ID of the VPC.
         */
        fun vpcId(vpcId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Information about the IPv4 CIDR block association.
         */
        var cidrBlockAssociation: VpcCidrBlockAssociation?
        /**
         * Information about the IPv6 CIDR block association.
         */
        var ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation?
        /**
         * The ID of the VPC.
         */
        var vpcId: String?

        fun build(): DisassociateVpcCidrBlockResponse
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.VpcCidrBlockAssociation] inside the given [block]
         */
        fun cidrBlockAssociation(block: VpcCidrBlockAssociation.DslBuilder.() -> kotlin.Unit) {
            this.cidrBlockAssociation = VpcCidrBlockAssociation.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.VpcIpv6CidrBlockAssociation] inside the given [block]
         */
        fun ipv6CidrBlockAssociation(block: VpcIpv6CidrBlockAssociation.DslBuilder.() -> kotlin.Unit) {
            this.ipv6CidrBlockAssociation = VpcIpv6CidrBlockAssociation.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var cidrBlockAssociation: VpcCidrBlockAssociation? = null
        override var ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation? = null
        override var vpcId: String? = null

        constructor(x: DisassociateVpcCidrBlockResponse) : this() {
            this.cidrBlockAssociation = x.cidrBlockAssociation
            this.ipv6CidrBlockAssociation = x.ipv6CidrBlockAssociation
            this.vpcId = x.vpcId
        }

        override fun build(): DisassociateVpcCidrBlockResponse = DisassociateVpcCidrBlockResponse(this)
        override fun cidrBlockAssociation(cidrBlockAssociation: VpcCidrBlockAssociation): FluentBuilder = apply { this.cidrBlockAssociation = cidrBlockAssociation }
        override fun ipv6CidrBlockAssociation(ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation): FluentBuilder = apply { this.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation }
        override fun vpcId(vpcId: String): FluentBuilder = apply { this.vpcId = vpcId }
    }
}
