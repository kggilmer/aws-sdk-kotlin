// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class DescribeRegionsRequest private constructor(builder: BuilderImpl) {
    /**
     * Indicates whether to display all Regions, including Regions that are disabled for your account.
     */
    val allRegions: Boolean? = builder.allRegions
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The filters.
     * endpoint - The endpoint of the Region (for example, ec2.us-east-1.amazonaws.com).
     * opt-in-status - The opt-in status of the Region (opt-in-not-required | opted-in |
     * not-opted-in).
     * region-name - The name of the Region (for example, us-east-1).
     */
    val filters: List<Filter>? = builder.filters
    /**
     * The names of the Regions. You can specify any Regions, whether they are enabled and disabled for your account.
     */
    val regionNames: List<String>? = builder.regionNames

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DescribeRegionsRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DescribeRegionsRequest(")
        append("allRegions=$allRegions,")
        append("dryRun=$dryRun,")
        append("filters=$filters,")
        append("regionNames=$regionNames)")
    }

    override fun hashCode(): kotlin.Int {
        var result = allRegions?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (filters?.hashCode() ?: 0)
        result = 31 * result + (regionNames?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DescribeRegionsRequest

        if (allRegions != other.allRegions) return false
        if (dryRun != other.dryRun) return false
        if (filters != other.filters) return false
        if (regionNames != other.regionNames) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DescribeRegionsRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DescribeRegionsRequest
        /**
         * Indicates whether to display all Regions, including Regions that are disabled for your account.
         */
        fun allRegions(allRegions: Boolean): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The filters.
         * endpoint - The endpoint of the Region (for example, ec2.us-east-1.amazonaws.com).
         * opt-in-status - The opt-in status of the Region (opt-in-not-required | opted-in |
         * not-opted-in).
         * region-name - The name of the Region (for example, us-east-1).
         */
        fun filters(filters: List<Filter>): FluentBuilder
        /**
         * The names of the Regions. You can specify any Regions, whether they are enabled and disabled for your account.
         */
        fun regionNames(regionNames: List<String>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Indicates whether to display all Regions, including Regions that are disabled for your account.
         */
        var allRegions: Boolean?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The filters.
         * endpoint - The endpoint of the Region (for example, ec2.us-east-1.amazonaws.com).
         * opt-in-status - The opt-in status of the Region (opt-in-not-required | opted-in |
         * not-opted-in).
         * region-name - The name of the Region (for example, us-east-1).
         */
        var filters: List<Filter>?
        /**
         * The names of the Regions. You can specify any Regions, whether they are enabled and disabled for your account.
         */
        var regionNames: List<String>?

        fun build(): DescribeRegionsRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var allRegions: Boolean? = null
        override var dryRun: Boolean? = null
        override var filters: List<Filter>? = null
        override var regionNames: List<String>? = null

        constructor(x: DescribeRegionsRequest) : this() {
            this.allRegions = x.allRegions
            this.dryRun = x.dryRun
            this.filters = x.filters
            this.regionNames = x.regionNames
        }

        override fun build(): DescribeRegionsRequest = DescribeRegionsRequest(this)
        override fun allRegions(allRegions: Boolean): FluentBuilder = apply { this.allRegions = allRegions }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun filters(filters: List<Filter>): FluentBuilder = apply { this.filters = filters }
        override fun regionNames(regionNames: List<String>): FluentBuilder = apply { this.regionNames = regionNames }
    }
}
