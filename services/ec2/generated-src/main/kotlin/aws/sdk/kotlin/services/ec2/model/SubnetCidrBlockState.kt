// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the state of a CIDR block.
 */
class SubnetCidrBlockState private constructor(builder: BuilderImpl) {
    /**
     * The state of a CIDR block.
     */
    val state: SubnetCidrBlockStateCode? = builder.state
    /**
     * A message about the status of the CIDR block, if applicable.
     */
    val statusMessage: String? = builder.statusMessage

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): SubnetCidrBlockState = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("SubnetCidrBlockState(")
        append("state=$state,")
        append("statusMessage=$statusMessage)")
    }

    override fun hashCode(): kotlin.Int {
        var result = state?.hashCode() ?: 0
        result = 31 * result + (statusMessage?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as SubnetCidrBlockState

        if (state != other.state) return false
        if (statusMessage != other.statusMessage) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): SubnetCidrBlockState = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): SubnetCidrBlockState
        /**
         * The state of a CIDR block.
         */
        fun state(state: SubnetCidrBlockStateCode): FluentBuilder
        /**
         * A message about the status of the CIDR block, if applicable.
         */
        fun statusMessage(statusMessage: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The state of a CIDR block.
         */
        var state: SubnetCidrBlockStateCode?
        /**
         * A message about the status of the CIDR block, if applicable.
         */
        var statusMessage: String?

        fun build(): SubnetCidrBlockState
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var state: SubnetCidrBlockStateCode? = null
        override var statusMessage: String? = null

        constructor(x: SubnetCidrBlockState) : this() {
            this.state = x.state
            this.statusMessage = x.statusMessage
        }

        override fun build(): SubnetCidrBlockState = SubnetCidrBlockState(this)
        override fun state(state: SubnetCidrBlockStateCode): FluentBuilder = apply { this.state = state }
        override fun statusMessage(statusMessage: String): FluentBuilder = apply { this.statusMessage = statusMessage }
    }
}
