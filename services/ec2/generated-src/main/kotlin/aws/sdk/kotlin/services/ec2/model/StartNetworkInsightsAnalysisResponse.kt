// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class StartNetworkInsightsAnalysisResponse private constructor(builder: BuilderImpl) {
    /**
     * Information about the network insights analysis.
     */
    val networkInsightsAnalysis: NetworkInsightsAnalysis? = builder.networkInsightsAnalysis

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): StartNetworkInsightsAnalysisResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("StartNetworkInsightsAnalysisResponse(")
        append("networkInsightsAnalysis=$networkInsightsAnalysis)")
    }

    override fun hashCode(): kotlin.Int {
        var result = networkInsightsAnalysis?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as StartNetworkInsightsAnalysisResponse

        if (networkInsightsAnalysis != other.networkInsightsAnalysis) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): StartNetworkInsightsAnalysisResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): StartNetworkInsightsAnalysisResponse
        /**
         * Information about the network insights analysis.
         */
        fun networkInsightsAnalysis(networkInsightsAnalysis: NetworkInsightsAnalysis): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Information about the network insights analysis.
         */
        var networkInsightsAnalysis: NetworkInsightsAnalysis?

        fun build(): StartNetworkInsightsAnalysisResponse
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.NetworkInsightsAnalysis] inside the given [block]
         */
        fun networkInsightsAnalysis(block: NetworkInsightsAnalysis.DslBuilder.() -> kotlin.Unit) {
            this.networkInsightsAnalysis = NetworkInsightsAnalysis.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var networkInsightsAnalysis: NetworkInsightsAnalysis? = null

        constructor(x: StartNetworkInsightsAnalysisResponse) : this() {
            this.networkInsightsAnalysis = x.networkInsightsAnalysis
        }

        override fun build(): StartNetworkInsightsAnalysisResponse = StartNetworkInsightsAnalysisResponse(this)
        override fun networkInsightsAnalysis(networkInsightsAnalysis: NetworkInsightsAnalysis): FluentBuilder = apply { this.networkInsightsAnalysis = networkInsightsAnalysis }
    }
}
