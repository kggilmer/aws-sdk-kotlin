// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class DeleteFleetsRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The IDs of the EC2 Fleets.
     */
    val fleetIds: List<String>? = builder.fleetIds
    /**
     * Indicates whether to terminate the instances when the EC2 Fleet is deleted. The default is to
     * terminate the instances.
     * To let the instances continue to run after the EC2 Fleet is deleted, specify
     * NoTerminateInstances. Supported only for fleets of type
     * maintain and request.
     * For instant fleets, you cannot specify NoTerminateInstances. A
     * deleted instant fleet with running instances is not supported.
     */
    val terminateInstances: Boolean? = builder.terminateInstances

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DeleteFleetsRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DeleteFleetsRequest(")
        append("dryRun=$dryRun,")
        append("fleetIds=$fleetIds,")
        append("terminateInstances=$terminateInstances)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (fleetIds?.hashCode() ?: 0)
        result = 31 * result + (terminateInstances?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DeleteFleetsRequest

        if (dryRun != other.dryRun) return false
        if (fleetIds != other.fleetIds) return false
        if (terminateInstances != other.terminateInstances) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DeleteFleetsRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DeleteFleetsRequest
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The IDs of the EC2 Fleets.
         */
        fun fleetIds(fleetIds: List<String>): FluentBuilder
        /**
         * Indicates whether to terminate the instances when the EC2 Fleet is deleted. The default is to
         * terminate the instances.
         * To let the instances continue to run after the EC2 Fleet is deleted, specify
         * NoTerminateInstances. Supported only for fleets of type
         * maintain and request.
         * For instant fleets, you cannot specify NoTerminateInstances. A
         * deleted instant fleet with running instances is not supported.
         */
        fun terminateInstances(terminateInstances: Boolean): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The IDs of the EC2 Fleets.
         */
        var fleetIds: List<String>?
        /**
         * Indicates whether to terminate the instances when the EC2 Fleet is deleted. The default is to
         * terminate the instances.
         * To let the instances continue to run after the EC2 Fleet is deleted, specify
         * NoTerminateInstances. Supported only for fleets of type
         * maintain and request.
         * For instant fleets, you cannot specify NoTerminateInstances. A
         * deleted instant fleet with running instances is not supported.
         */
        var terminateInstances: Boolean?

        fun build(): DeleteFleetsRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var fleetIds: List<String>? = null
        override var terminateInstances: Boolean? = null

        constructor(x: DeleteFleetsRequest) : this() {
            this.dryRun = x.dryRun
            this.fleetIds = x.fleetIds
            this.terminateInstances = x.terminateInstances
        }

        override fun build(): DeleteFleetsRequest = DeleteFleetsRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun fleetIds(fleetIds: List<String>): FluentBuilder = apply { this.fleetIds = fleetIds }
        override fun terminateInstances(terminateInstances: Boolean): FluentBuilder = apply { this.terminateInstances = terminateInstances }
    }
}
