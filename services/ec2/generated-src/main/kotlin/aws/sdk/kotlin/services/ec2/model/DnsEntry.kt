// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a DNS entry.
 */
class DnsEntry private constructor(builder: BuilderImpl) {
    /**
     * The DNS name.
     */
    val dnsName: String? = builder.dnsName
    /**
     * The ID of the private hosted zone.
     */
    val hostedZoneId: String? = builder.hostedZoneId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DnsEntry = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DnsEntry(")
        append("dnsName=$dnsName,")
        append("hostedZoneId=$hostedZoneId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dnsName?.hashCode() ?: 0
        result = 31 * result + (hostedZoneId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DnsEntry

        if (dnsName != other.dnsName) return false
        if (hostedZoneId != other.hostedZoneId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DnsEntry = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DnsEntry
        /**
         * The DNS name.
         */
        fun dnsName(dnsName: String): FluentBuilder
        /**
         * The ID of the private hosted zone.
         */
        fun hostedZoneId(hostedZoneId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The DNS name.
         */
        var dnsName: String?
        /**
         * The ID of the private hosted zone.
         */
        var hostedZoneId: String?

        fun build(): DnsEntry
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dnsName: String? = null
        override var hostedZoneId: String? = null

        constructor(x: DnsEntry) : this() {
            this.dnsName = x.dnsName
            this.hostedZoneId = x.hostedZoneId
        }

        override fun build(): DnsEntry = DnsEntry(this)
        override fun dnsName(dnsName: String): FluentBuilder = apply { this.dnsName = dnsName }
        override fun hostedZoneId(hostedZoneId: String): FluentBuilder = apply { this.hostedZoneId = hostedZoneId }
    }
}
