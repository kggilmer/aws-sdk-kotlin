// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes an Elastic Graphics accelerator.
 */
class ElasticGpus private constructor(builder: BuilderImpl) {
    /**
     * The Availability Zone in the which the Elastic Graphics accelerator resides.
     */
    val availabilityZone: String? = builder.availabilityZone
    /**
     * The status of the Elastic Graphics accelerator.
     */
    val elasticGpuHealth: ElasticGpuHealth? = builder.elasticGpuHealth
    /**
     * The ID of the Elastic Graphics accelerator.
     */
    val elasticGpuId: String? = builder.elasticGpuId
    /**
     * The state of the Elastic Graphics accelerator.
     */
    val elasticGpuState: ElasticGpuState? = builder.elasticGpuState
    /**
     * The type of Elastic Graphics accelerator.
     */
    val elasticGpuType: String? = builder.elasticGpuType
    /**
     * The ID of the instance to which the Elastic Graphics accelerator is attached.
     */
    val instanceId: String? = builder.instanceId
    /**
     * The tags assigned to the Elastic Graphics accelerator.
     */
    val tags: List<Tag>? = builder.tags

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ElasticGpus = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ElasticGpus(")
        append("availabilityZone=$availabilityZone,")
        append("elasticGpuHealth=$elasticGpuHealth,")
        append("elasticGpuId=$elasticGpuId,")
        append("elasticGpuState=$elasticGpuState,")
        append("elasticGpuType=$elasticGpuType,")
        append("instanceId=$instanceId,")
        append("tags=$tags)")
    }

    override fun hashCode(): kotlin.Int {
        var result = availabilityZone?.hashCode() ?: 0
        result = 31 * result + (elasticGpuHealth?.hashCode() ?: 0)
        result = 31 * result + (elasticGpuId?.hashCode() ?: 0)
        result = 31 * result + (elasticGpuState?.hashCode() ?: 0)
        result = 31 * result + (elasticGpuType?.hashCode() ?: 0)
        result = 31 * result + (instanceId?.hashCode() ?: 0)
        result = 31 * result + (tags?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ElasticGpus

        if (availabilityZone != other.availabilityZone) return false
        if (elasticGpuHealth != other.elasticGpuHealth) return false
        if (elasticGpuId != other.elasticGpuId) return false
        if (elasticGpuState != other.elasticGpuState) return false
        if (elasticGpuType != other.elasticGpuType) return false
        if (instanceId != other.instanceId) return false
        if (tags != other.tags) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ElasticGpus = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ElasticGpus
        /**
         * The Availability Zone in the which the Elastic Graphics accelerator resides.
         */
        fun availabilityZone(availabilityZone: String): FluentBuilder
        /**
         * The status of the Elastic Graphics accelerator.
         */
        fun elasticGpuHealth(elasticGpuHealth: ElasticGpuHealth): FluentBuilder
        /**
         * The ID of the Elastic Graphics accelerator.
         */
        fun elasticGpuId(elasticGpuId: String): FluentBuilder
        /**
         * The state of the Elastic Graphics accelerator.
         */
        fun elasticGpuState(elasticGpuState: ElasticGpuState): FluentBuilder
        /**
         * The type of Elastic Graphics accelerator.
         */
        fun elasticGpuType(elasticGpuType: String): FluentBuilder
        /**
         * The ID of the instance to which the Elastic Graphics accelerator is attached.
         */
        fun instanceId(instanceId: String): FluentBuilder
        /**
         * The tags assigned to the Elastic Graphics accelerator.
         */
        fun tags(tags: List<Tag>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The Availability Zone in the which the Elastic Graphics accelerator resides.
         */
        var availabilityZone: String?
        /**
         * The status of the Elastic Graphics accelerator.
         */
        var elasticGpuHealth: ElasticGpuHealth?
        /**
         * The ID of the Elastic Graphics accelerator.
         */
        var elasticGpuId: String?
        /**
         * The state of the Elastic Graphics accelerator.
         */
        var elasticGpuState: ElasticGpuState?
        /**
         * The type of Elastic Graphics accelerator.
         */
        var elasticGpuType: String?
        /**
         * The ID of the instance to which the Elastic Graphics accelerator is attached.
         */
        var instanceId: String?
        /**
         * The tags assigned to the Elastic Graphics accelerator.
         */
        var tags: List<Tag>?

        fun build(): ElasticGpus
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.ElasticGpuHealth] inside the given [block]
         */
        fun elasticGpuHealth(block: ElasticGpuHealth.DslBuilder.() -> kotlin.Unit) {
            this.elasticGpuHealth = ElasticGpuHealth.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var availabilityZone: String? = null
        override var elasticGpuHealth: ElasticGpuHealth? = null
        override var elasticGpuId: String? = null
        override var elasticGpuState: ElasticGpuState? = null
        override var elasticGpuType: String? = null
        override var instanceId: String? = null
        override var tags: List<Tag>? = null

        constructor(x: ElasticGpus) : this() {
            this.availabilityZone = x.availabilityZone
            this.elasticGpuHealth = x.elasticGpuHealth
            this.elasticGpuId = x.elasticGpuId
            this.elasticGpuState = x.elasticGpuState
            this.elasticGpuType = x.elasticGpuType
            this.instanceId = x.instanceId
            this.tags = x.tags
        }

        override fun build(): ElasticGpus = ElasticGpus(this)
        override fun availabilityZone(availabilityZone: String): FluentBuilder = apply { this.availabilityZone = availabilityZone }
        override fun elasticGpuHealth(elasticGpuHealth: ElasticGpuHealth): FluentBuilder = apply { this.elasticGpuHealth = elasticGpuHealth }
        override fun elasticGpuId(elasticGpuId: String): FluentBuilder = apply { this.elasticGpuId = elasticGpuId }
        override fun elasticGpuState(elasticGpuState: ElasticGpuState): FluentBuilder = apply { this.elasticGpuState = elasticGpuState }
        override fun elasticGpuType(elasticGpuType: String): FluentBuilder = apply { this.elasticGpuType = elasticGpuType }
        override fun instanceId(instanceId: String): FluentBuilder = apply { this.instanceId = instanceId }
        override fun tags(tags: List<Tag>): FluentBuilder = apply { this.tags = tags }
    }
}
