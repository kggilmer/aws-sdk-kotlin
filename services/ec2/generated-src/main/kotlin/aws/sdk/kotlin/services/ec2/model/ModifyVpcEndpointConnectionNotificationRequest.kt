// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ModifyVpcEndpointConnectionNotificationRequest private constructor(builder: BuilderImpl) {
    /**
     * One or more events for the endpoint. Valid values are Accept,
     * Connect, Delete, and Reject.
     */
    val connectionEvents: List<String>? = builder.connectionEvents
    /**
     * The ARN for the SNS topic for the notification.
     */
    val connectionNotificationArn: String? = builder.connectionNotificationArn
    /**
     * The ID of the notification.
     */
    val connectionNotificationId: String? = builder.connectionNotificationId
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ModifyVpcEndpointConnectionNotificationRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyVpcEndpointConnectionNotificationRequest(")
        append("connectionEvents=$connectionEvents,")
        append("connectionNotificationArn=$connectionNotificationArn,")
        append("connectionNotificationId=$connectionNotificationId,")
        append("dryRun=$dryRun)")
    }

    override fun hashCode(): kotlin.Int {
        var result = connectionEvents?.hashCode() ?: 0
        result = 31 * result + (connectionNotificationArn?.hashCode() ?: 0)
        result = 31 * result + (connectionNotificationId?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ModifyVpcEndpointConnectionNotificationRequest

        if (connectionEvents != other.connectionEvents) return false
        if (connectionNotificationArn != other.connectionNotificationArn) return false
        if (connectionNotificationId != other.connectionNotificationId) return false
        if (dryRun != other.dryRun) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ModifyVpcEndpointConnectionNotificationRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ModifyVpcEndpointConnectionNotificationRequest
        /**
         * One or more events for the endpoint. Valid values are Accept,
         * Connect, Delete, and Reject.
         */
        fun connectionEvents(connectionEvents: List<String>): FluentBuilder
        /**
         * The ARN for the SNS topic for the notification.
         */
        fun connectionNotificationArn(connectionNotificationArn: String): FluentBuilder
        /**
         * The ID of the notification.
         */
        fun connectionNotificationId(connectionNotificationId: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
    }

    interface DslBuilder {
        /**
         * One or more events for the endpoint. Valid values are Accept,
         * Connect, Delete, and Reject.
         */
        var connectionEvents: List<String>?
        /**
         * The ARN for the SNS topic for the notification.
         */
        var connectionNotificationArn: String?
        /**
         * The ID of the notification.
         */
        var connectionNotificationId: String?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?

        fun build(): ModifyVpcEndpointConnectionNotificationRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var connectionEvents: List<String>? = null
        override var connectionNotificationArn: String? = null
        override var connectionNotificationId: String? = null
        override var dryRun: Boolean? = null

        constructor(x: ModifyVpcEndpointConnectionNotificationRequest) : this() {
            this.connectionEvents = x.connectionEvents
            this.connectionNotificationArn = x.connectionNotificationArn
            this.connectionNotificationId = x.connectionNotificationId
            this.dryRun = x.dryRun
        }

        override fun build(): ModifyVpcEndpointConnectionNotificationRequest = ModifyVpcEndpointConnectionNotificationRequest(this)
        override fun connectionEvents(connectionEvents: List<String>): FluentBuilder = apply { this.connectionEvents = connectionEvents }
        override fun connectionNotificationArn(connectionNotificationArn: String): FluentBuilder = apply { this.connectionNotificationArn = connectionNotificationArn }
        override fun connectionNotificationId(connectionNotificationId: String): FluentBuilder = apply { this.connectionNotificationId = connectionNotificationId }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
    }
}
