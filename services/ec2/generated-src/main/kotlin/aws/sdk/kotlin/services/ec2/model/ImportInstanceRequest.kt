// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ImportInstanceRequest private constructor(builder: BuilderImpl) {
    /**
     * A description for the instance being imported.
     */
    val description: String? = builder.description
    /**
     * The disk image.
     */
    val diskImages: List<DiskImage>? = builder.diskImages
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The launch specification.
     */
    val launchSpecification: ImportInstanceLaunchSpecification? = builder.launchSpecification
    /**
     * The instance operating system.
     */
    val platform: PlatformValues? = builder.platform

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ImportInstanceRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ImportInstanceRequest(")
        append("description=$description,")
        append("diskImages=$diskImages,")
        append("dryRun=$dryRun,")
        append("launchSpecification=$launchSpecification,")
        append("platform=$platform)")
    }

    override fun hashCode(): kotlin.Int {
        var result = description?.hashCode() ?: 0
        result = 31 * result + (diskImages?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (launchSpecification?.hashCode() ?: 0)
        result = 31 * result + (platform?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ImportInstanceRequest

        if (description != other.description) return false
        if (diskImages != other.diskImages) return false
        if (dryRun != other.dryRun) return false
        if (launchSpecification != other.launchSpecification) return false
        if (platform != other.platform) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ImportInstanceRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ImportInstanceRequest
        /**
         * A description for the instance being imported.
         */
        fun description(description: String): FluentBuilder
        /**
         * The disk image.
         */
        fun diskImages(diskImages: List<DiskImage>): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The launch specification.
         */
        fun launchSpecification(launchSpecification: ImportInstanceLaunchSpecification): FluentBuilder
        /**
         * The instance operating system.
         */
        fun platform(platform: PlatformValues): FluentBuilder
    }

    interface DslBuilder {
        /**
         * A description for the instance being imported.
         */
        var description: String?
        /**
         * The disk image.
         */
        var diskImages: List<DiskImage>?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The launch specification.
         */
        var launchSpecification: ImportInstanceLaunchSpecification?
        /**
         * The instance operating system.
         */
        var platform: PlatformValues?

        fun build(): ImportInstanceRequest
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.ImportInstanceLaunchSpecification] inside the given [block]
         */
        fun launchSpecification(block: ImportInstanceLaunchSpecification.DslBuilder.() -> kotlin.Unit) {
            this.launchSpecification = ImportInstanceLaunchSpecification.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var description: String? = null
        override var diskImages: List<DiskImage>? = null
        override var dryRun: Boolean? = null
        override var launchSpecification: ImportInstanceLaunchSpecification? = null
        override var platform: PlatformValues? = null

        constructor(x: ImportInstanceRequest) : this() {
            this.description = x.description
            this.diskImages = x.diskImages
            this.dryRun = x.dryRun
            this.launchSpecification = x.launchSpecification
            this.platform = x.platform
        }

        override fun build(): ImportInstanceRequest = ImportInstanceRequest(this)
        override fun description(description: String): FluentBuilder = apply { this.description = description }
        override fun diskImages(diskImages: List<DiskImage>): FluentBuilder = apply { this.diskImages = diskImages }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun launchSpecification(launchSpecification: ImportInstanceLaunchSpecification): FluentBuilder = apply { this.launchSpecification = launchSpecification }
        override fun platform(platform: PlatformValues): FluentBuilder = apply { this.platform = platform }
    }
}
