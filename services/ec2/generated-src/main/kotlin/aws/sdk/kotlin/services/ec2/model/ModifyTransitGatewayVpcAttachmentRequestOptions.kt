// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the options for a VPC attachment.
 */
class ModifyTransitGatewayVpcAttachmentRequestOptions private constructor(builder: BuilderImpl) {
    /**
     * Enable or disable support for appliance mode. If enabled, a traffic flow between a source and destination uses the same Availability Zone for the VPC attachment for the lifetime of that flow. The default is disable.
     */
    val applianceModeSupport: ApplianceModeSupportValue? = builder.applianceModeSupport
    /**
     * Enable or disable DNS support. The default is enable.
     */
    val dnsSupport: DnsSupportValue? = builder.dnsSupport
    /**
     * Enable or disable IPv6 support. The default is enable.
     */
    val ipv6Support: Ipv6SupportValue? = builder.ipv6Support

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ModifyTransitGatewayVpcAttachmentRequestOptions = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyTransitGatewayVpcAttachmentRequestOptions(")
        append("applianceModeSupport=$applianceModeSupport,")
        append("dnsSupport=$dnsSupport,")
        append("ipv6Support=$ipv6Support)")
    }

    override fun hashCode(): kotlin.Int {
        var result = applianceModeSupport?.hashCode() ?: 0
        result = 31 * result + (dnsSupport?.hashCode() ?: 0)
        result = 31 * result + (ipv6Support?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ModifyTransitGatewayVpcAttachmentRequestOptions

        if (applianceModeSupport != other.applianceModeSupport) return false
        if (dnsSupport != other.dnsSupport) return false
        if (ipv6Support != other.ipv6Support) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ModifyTransitGatewayVpcAttachmentRequestOptions = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ModifyTransitGatewayVpcAttachmentRequestOptions
        /**
         * Enable or disable support for appliance mode. If enabled, a traffic flow between a source and destination uses the same Availability Zone for the VPC attachment for the lifetime of that flow. The default is disable.
         */
        fun applianceModeSupport(applianceModeSupport: ApplianceModeSupportValue): FluentBuilder
        /**
         * Enable or disable DNS support. The default is enable.
         */
        fun dnsSupport(dnsSupport: DnsSupportValue): FluentBuilder
        /**
         * Enable or disable IPv6 support. The default is enable.
         */
        fun ipv6Support(ipv6Support: Ipv6SupportValue): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Enable or disable support for appliance mode. If enabled, a traffic flow between a source and destination uses the same Availability Zone for the VPC attachment for the lifetime of that flow. The default is disable.
         */
        var applianceModeSupport: ApplianceModeSupportValue?
        /**
         * Enable or disable DNS support. The default is enable.
         */
        var dnsSupport: DnsSupportValue?
        /**
         * Enable or disable IPv6 support. The default is enable.
         */
        var ipv6Support: Ipv6SupportValue?

        fun build(): ModifyTransitGatewayVpcAttachmentRequestOptions
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var applianceModeSupport: ApplianceModeSupportValue? = null
        override var dnsSupport: DnsSupportValue? = null
        override var ipv6Support: Ipv6SupportValue? = null

        constructor(x: ModifyTransitGatewayVpcAttachmentRequestOptions) : this() {
            this.applianceModeSupport = x.applianceModeSupport
            this.dnsSupport = x.dnsSupport
            this.ipv6Support = x.ipv6Support
        }

        override fun build(): ModifyTransitGatewayVpcAttachmentRequestOptions = ModifyTransitGatewayVpcAttachmentRequestOptions(this)
        override fun applianceModeSupport(applianceModeSupport: ApplianceModeSupportValue): FluentBuilder = apply { this.applianceModeSupport = applianceModeSupport }
        override fun dnsSupport(dnsSupport: DnsSupportValue): FluentBuilder = apply { this.dnsSupport = dnsSupport }
        override fun ipv6Support(ipv6Support: Ipv6SupportValue): FluentBuilder = apply { this.ipv6Support = ipv6Support }
    }
}
