// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the Traffic Mirror rule.
 */
class TrafficMirrorFilterRule private constructor(builder: BuilderImpl) {
    /**
     * The description of the Traffic Mirror rule.
     */
    val description: String? = builder.description
    /**
     * The destination CIDR block assigned to the Traffic Mirror rule.
     */
    val destinationCidrBlock: String? = builder.destinationCidrBlock
    /**
     * The destination port range assigned to the Traffic Mirror rule.
     */
    val destinationPortRange: TrafficMirrorPortRange? = builder.destinationPortRange
    /**
     * The protocol assigned to the Traffic Mirror rule.
     */
    val protocol: Int? = builder.protocol
    /**
     * The action assigned to the Traffic Mirror rule.
     */
    val ruleAction: TrafficMirrorRuleAction? = builder.ruleAction
    /**
     * The rule number of the Traffic Mirror rule.
     */
    val ruleNumber: Int? = builder.ruleNumber
    /**
     * The source CIDR block assigned to the Traffic Mirror rule.
     */
    val sourceCidrBlock: String? = builder.sourceCidrBlock
    /**
     * The source port range assigned to the Traffic Mirror rule.
     */
    val sourcePortRange: TrafficMirrorPortRange? = builder.sourcePortRange
    /**
     * The traffic direction assigned to the Traffic Mirror rule.
     */
    val trafficDirection: TrafficDirection? = builder.trafficDirection
    /**
     * The ID of the Traffic Mirror filter that the rule is associated with.
     */
    val trafficMirrorFilterId: String? = builder.trafficMirrorFilterId
    /**
     * The ID of the Traffic Mirror rule.
     */
    val trafficMirrorFilterRuleId: String? = builder.trafficMirrorFilterRuleId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): TrafficMirrorFilterRule = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("TrafficMirrorFilterRule(")
        append("description=$description,")
        append("destinationCidrBlock=$destinationCidrBlock,")
        append("destinationPortRange=$destinationPortRange,")
        append("protocol=$protocol,")
        append("ruleAction=$ruleAction,")
        append("ruleNumber=$ruleNumber,")
        append("sourceCidrBlock=$sourceCidrBlock,")
        append("sourcePortRange=$sourcePortRange,")
        append("trafficDirection=$trafficDirection,")
        append("trafficMirrorFilterId=$trafficMirrorFilterId,")
        append("trafficMirrorFilterRuleId=$trafficMirrorFilterRuleId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = description?.hashCode() ?: 0
        result = 31 * result + (destinationCidrBlock?.hashCode() ?: 0)
        result = 31 * result + (destinationPortRange?.hashCode() ?: 0)
        result = 31 * result + (protocol ?: 0)
        result = 31 * result + (ruleAction?.hashCode() ?: 0)
        result = 31 * result + (ruleNumber ?: 0)
        result = 31 * result + (sourceCidrBlock?.hashCode() ?: 0)
        result = 31 * result + (sourcePortRange?.hashCode() ?: 0)
        result = 31 * result + (trafficDirection?.hashCode() ?: 0)
        result = 31 * result + (trafficMirrorFilterId?.hashCode() ?: 0)
        result = 31 * result + (trafficMirrorFilterRuleId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as TrafficMirrorFilterRule

        if (description != other.description) return false
        if (destinationCidrBlock != other.destinationCidrBlock) return false
        if (destinationPortRange != other.destinationPortRange) return false
        if (protocol != other.protocol) return false
        if (ruleAction != other.ruleAction) return false
        if (ruleNumber != other.ruleNumber) return false
        if (sourceCidrBlock != other.sourceCidrBlock) return false
        if (sourcePortRange != other.sourcePortRange) return false
        if (trafficDirection != other.trafficDirection) return false
        if (trafficMirrorFilterId != other.trafficMirrorFilterId) return false
        if (trafficMirrorFilterRuleId != other.trafficMirrorFilterRuleId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): TrafficMirrorFilterRule = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): TrafficMirrorFilterRule
        /**
         * The description of the Traffic Mirror rule.
         */
        fun description(description: String): FluentBuilder
        /**
         * The destination CIDR block assigned to the Traffic Mirror rule.
         */
        fun destinationCidrBlock(destinationCidrBlock: String): FluentBuilder
        /**
         * The destination port range assigned to the Traffic Mirror rule.
         */
        fun destinationPortRange(destinationPortRange: TrafficMirrorPortRange): FluentBuilder
        /**
         * The protocol assigned to the Traffic Mirror rule.
         */
        fun protocol(protocol: Int): FluentBuilder
        /**
         * The action assigned to the Traffic Mirror rule.
         */
        fun ruleAction(ruleAction: TrafficMirrorRuleAction): FluentBuilder
        /**
         * The rule number of the Traffic Mirror rule.
         */
        fun ruleNumber(ruleNumber: Int): FluentBuilder
        /**
         * The source CIDR block assigned to the Traffic Mirror rule.
         */
        fun sourceCidrBlock(sourceCidrBlock: String): FluentBuilder
        /**
         * The source port range assigned to the Traffic Mirror rule.
         */
        fun sourcePortRange(sourcePortRange: TrafficMirrorPortRange): FluentBuilder
        /**
         * The traffic direction assigned to the Traffic Mirror rule.
         */
        fun trafficDirection(trafficDirection: TrafficDirection): FluentBuilder
        /**
         * The ID of the Traffic Mirror filter that the rule is associated with.
         */
        fun trafficMirrorFilterId(trafficMirrorFilterId: String): FluentBuilder
        /**
         * The ID of the Traffic Mirror rule.
         */
        fun trafficMirrorFilterRuleId(trafficMirrorFilterRuleId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The description of the Traffic Mirror rule.
         */
        var description: String?
        /**
         * The destination CIDR block assigned to the Traffic Mirror rule.
         */
        var destinationCidrBlock: String?
        /**
         * The destination port range assigned to the Traffic Mirror rule.
         */
        var destinationPortRange: TrafficMirrorPortRange?
        /**
         * The protocol assigned to the Traffic Mirror rule.
         */
        var protocol: Int?
        /**
         * The action assigned to the Traffic Mirror rule.
         */
        var ruleAction: TrafficMirrorRuleAction?
        /**
         * The rule number of the Traffic Mirror rule.
         */
        var ruleNumber: Int?
        /**
         * The source CIDR block assigned to the Traffic Mirror rule.
         */
        var sourceCidrBlock: String?
        /**
         * The source port range assigned to the Traffic Mirror rule.
         */
        var sourcePortRange: TrafficMirrorPortRange?
        /**
         * The traffic direction assigned to the Traffic Mirror rule.
         */
        var trafficDirection: TrafficDirection?
        /**
         * The ID of the Traffic Mirror filter that the rule is associated with.
         */
        var trafficMirrorFilterId: String?
        /**
         * The ID of the Traffic Mirror rule.
         */
        var trafficMirrorFilterRuleId: String?

        fun build(): TrafficMirrorFilterRule
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.TrafficMirrorPortRange] inside the given [block]
         */
        fun destinationPortRange(block: TrafficMirrorPortRange.DslBuilder.() -> kotlin.Unit) {
            this.destinationPortRange = TrafficMirrorPortRange.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.TrafficMirrorPortRange] inside the given [block]
         */
        fun sourcePortRange(block: TrafficMirrorPortRange.DslBuilder.() -> kotlin.Unit) {
            this.sourcePortRange = TrafficMirrorPortRange.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var description: String? = null
        override var destinationCidrBlock: String? = null
        override var destinationPortRange: TrafficMirrorPortRange? = null
        override var protocol: Int? = null
        override var ruleAction: TrafficMirrorRuleAction? = null
        override var ruleNumber: Int? = null
        override var sourceCidrBlock: String? = null
        override var sourcePortRange: TrafficMirrorPortRange? = null
        override var trafficDirection: TrafficDirection? = null
        override var trafficMirrorFilterId: String? = null
        override var trafficMirrorFilterRuleId: String? = null

        constructor(x: TrafficMirrorFilterRule) : this() {
            this.description = x.description
            this.destinationCidrBlock = x.destinationCidrBlock
            this.destinationPortRange = x.destinationPortRange
            this.protocol = x.protocol
            this.ruleAction = x.ruleAction
            this.ruleNumber = x.ruleNumber
            this.sourceCidrBlock = x.sourceCidrBlock
            this.sourcePortRange = x.sourcePortRange
            this.trafficDirection = x.trafficDirection
            this.trafficMirrorFilterId = x.trafficMirrorFilterId
            this.trafficMirrorFilterRuleId = x.trafficMirrorFilterRuleId
        }

        override fun build(): TrafficMirrorFilterRule = TrafficMirrorFilterRule(this)
        override fun description(description: String): FluentBuilder = apply { this.description = description }
        override fun destinationCidrBlock(destinationCidrBlock: String): FluentBuilder = apply { this.destinationCidrBlock = destinationCidrBlock }
        override fun destinationPortRange(destinationPortRange: TrafficMirrorPortRange): FluentBuilder = apply { this.destinationPortRange = destinationPortRange }
        override fun protocol(protocol: Int): FluentBuilder = apply { this.protocol = protocol }
        override fun ruleAction(ruleAction: TrafficMirrorRuleAction): FluentBuilder = apply { this.ruleAction = ruleAction }
        override fun ruleNumber(ruleNumber: Int): FluentBuilder = apply { this.ruleNumber = ruleNumber }
        override fun sourceCidrBlock(sourceCidrBlock: String): FluentBuilder = apply { this.sourceCidrBlock = sourceCidrBlock }
        override fun sourcePortRange(sourcePortRange: TrafficMirrorPortRange): FluentBuilder = apply { this.sourcePortRange = sourcePortRange }
        override fun trafficDirection(trafficDirection: TrafficDirection): FluentBuilder = apply { this.trafficDirection = trafficDirection }
        override fun trafficMirrorFilterId(trafficMirrorFilterId: String): FluentBuilder = apply { this.trafficMirrorFilterId = trafficMirrorFilterId }
        override fun trafficMirrorFilterRuleId(trafficMirrorFilterRuleId: String): FluentBuilder = apply { this.trafficMirrorFilterRuleId = trafficMirrorFilterRuleId }
    }
}
