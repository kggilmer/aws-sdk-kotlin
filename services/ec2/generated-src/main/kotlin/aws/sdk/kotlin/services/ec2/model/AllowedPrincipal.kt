// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a principal.
 */
class AllowedPrincipal private constructor(builder: BuilderImpl) {
    /**
     * The Amazon Resource Name (ARN) of the principal.
     */
    val principal: String? = builder.principal
    /**
     * The type of principal.
     */
    val principalType: PrincipalType? = builder.principalType

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): AllowedPrincipal = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("AllowedPrincipal(")
        append("principal=$principal,")
        append("principalType=$principalType)")
    }

    override fun hashCode(): kotlin.Int {
        var result = principal?.hashCode() ?: 0
        result = 31 * result + (principalType?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as AllowedPrincipal

        if (principal != other.principal) return false
        if (principalType != other.principalType) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): AllowedPrincipal = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): AllowedPrincipal
        /**
         * The Amazon Resource Name (ARN) of the principal.
         */
        fun principal(principal: String): FluentBuilder
        /**
         * The type of principal.
         */
        fun principalType(principalType: PrincipalType): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The Amazon Resource Name (ARN) of the principal.
         */
        var principal: String?
        /**
         * The type of principal.
         */
        var principalType: PrincipalType?

        fun build(): AllowedPrincipal
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var principal: String? = null
        override var principalType: PrincipalType? = null

        constructor(x: AllowedPrincipal) : this() {
            this.principal = x.principal
            this.principalType = x.principalType
        }

        override fun build(): AllowedPrincipal = AllowedPrincipal(this)
        override fun principal(principal: String): FluentBuilder = apply { this.principal = principal }
        override fun principalType(principalType: PrincipalType): FluentBuilder = apply { this.principalType = principalType }
    }
}
