// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class CreateTransitGatewayVpcAttachmentRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The VPC attachment options.
     */
    val options: CreateTransitGatewayVpcAttachmentRequestOptions? = builder.options
    /**
     * The IDs of one or more subnets. You can specify only one subnet per Availability Zone.
     * You must specify at least one subnet, but we recommend that you specify two subnets for better availability.
     * The transit gateway uses one IP address from each specified subnet.
     */
    val subnetIds: List<String>? = builder.subnetIds
    /**
     * The tags to apply to the VPC attachment.
     */
    val tagSpecifications: List<TagSpecification>? = builder.tagSpecifications
    /**
     * The ID of the transit gateway.
     */
    val transitGatewayId: String? = builder.transitGatewayId
    /**
     * The ID of the VPC.
     */
    val vpcId: String? = builder.vpcId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CreateTransitGatewayVpcAttachmentRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CreateTransitGatewayVpcAttachmentRequest(")
        append("dryRun=$dryRun,")
        append("options=$options,")
        append("subnetIds=$subnetIds,")
        append("tagSpecifications=$tagSpecifications,")
        append("transitGatewayId=$transitGatewayId,")
        append("vpcId=$vpcId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (options?.hashCode() ?: 0)
        result = 31 * result + (subnetIds?.hashCode() ?: 0)
        result = 31 * result + (tagSpecifications?.hashCode() ?: 0)
        result = 31 * result + (transitGatewayId?.hashCode() ?: 0)
        result = 31 * result + (vpcId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CreateTransitGatewayVpcAttachmentRequest

        if (dryRun != other.dryRun) return false
        if (options != other.options) return false
        if (subnetIds != other.subnetIds) return false
        if (tagSpecifications != other.tagSpecifications) return false
        if (transitGatewayId != other.transitGatewayId) return false
        if (vpcId != other.vpcId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CreateTransitGatewayVpcAttachmentRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CreateTransitGatewayVpcAttachmentRequest
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The VPC attachment options.
         */
        fun options(options: CreateTransitGatewayVpcAttachmentRequestOptions): FluentBuilder
        /**
         * The IDs of one or more subnets. You can specify only one subnet per Availability Zone.
         * You must specify at least one subnet, but we recommend that you specify two subnets for better availability.
         * The transit gateway uses one IP address from each specified subnet.
         */
        fun subnetIds(subnetIds: List<String>): FluentBuilder
        /**
         * The tags to apply to the VPC attachment.
         */
        fun tagSpecifications(tagSpecifications: List<TagSpecification>): FluentBuilder
        /**
         * The ID of the transit gateway.
         */
        fun transitGatewayId(transitGatewayId: String): FluentBuilder
        /**
         * The ID of the VPC.
         */
        fun vpcId(vpcId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The VPC attachment options.
         */
        var options: CreateTransitGatewayVpcAttachmentRequestOptions?
        /**
         * The IDs of one or more subnets. You can specify only one subnet per Availability Zone.
         * You must specify at least one subnet, but we recommend that you specify two subnets for better availability.
         * The transit gateway uses one IP address from each specified subnet.
         */
        var subnetIds: List<String>?
        /**
         * The tags to apply to the VPC attachment.
         */
        var tagSpecifications: List<TagSpecification>?
        /**
         * The ID of the transit gateway.
         */
        var transitGatewayId: String?
        /**
         * The ID of the VPC.
         */
        var vpcId: String?

        fun build(): CreateTransitGatewayVpcAttachmentRequest
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.CreateTransitGatewayVpcAttachmentRequestOptions] inside the given [block]
         */
        fun options(block: CreateTransitGatewayVpcAttachmentRequestOptions.DslBuilder.() -> kotlin.Unit) {
            this.options = CreateTransitGatewayVpcAttachmentRequestOptions.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var options: CreateTransitGatewayVpcAttachmentRequestOptions? = null
        override var subnetIds: List<String>? = null
        override var tagSpecifications: List<TagSpecification>? = null
        override var transitGatewayId: String? = null
        override var vpcId: String? = null

        constructor(x: CreateTransitGatewayVpcAttachmentRequest) : this() {
            this.dryRun = x.dryRun
            this.options = x.options
            this.subnetIds = x.subnetIds
            this.tagSpecifications = x.tagSpecifications
            this.transitGatewayId = x.transitGatewayId
            this.vpcId = x.vpcId
        }

        override fun build(): CreateTransitGatewayVpcAttachmentRequest = CreateTransitGatewayVpcAttachmentRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun options(options: CreateTransitGatewayVpcAttachmentRequestOptions): FluentBuilder = apply { this.options = options }
        override fun subnetIds(subnetIds: List<String>): FluentBuilder = apply { this.subnetIds = subnetIds }
        override fun tagSpecifications(tagSpecifications: List<TagSpecification>): FluentBuilder = apply { this.tagSpecifications = tagSpecifications }
        override fun transitGatewayId(transitGatewayId: String): FluentBuilder = apply { this.transitGatewayId = transitGatewayId }
        override fun vpcId(vpcId: String): FluentBuilder = apply { this.vpcId = vpcId }
    }
}
