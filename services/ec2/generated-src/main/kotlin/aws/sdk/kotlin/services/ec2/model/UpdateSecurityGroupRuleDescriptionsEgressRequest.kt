// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class UpdateSecurityGroupRuleDescriptionsEgressRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The ID of the security group. You must specify either the security group ID or the
     * security group name in the request. For security groups in a nondefault VPC, you must
     * specify the security group ID.
     */
    val groupId: String? = builder.groupId
    /**
     * &#91;Default VPC&#93; The name of the security group. You must specify either the security group
     * ID or the security group name in the request.
     */
    val groupName: String? = builder.groupName
    /**
     * The IP permissions for the security group rule. You must specify either the IP permissions
     * or the description.
     */
    val ipPermissions: List<IpPermission>? = builder.ipPermissions
    /**
     * The description for the egress security group rules. You must specify either the
     * description or the IP permissions.
     */
    val securityGroupRuleDescriptions: List<SecurityGroupRuleDescription>? = builder.securityGroupRuleDescriptions

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): UpdateSecurityGroupRuleDescriptionsEgressRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("UpdateSecurityGroupRuleDescriptionsEgressRequest(")
        append("dryRun=$dryRun,")
        append("groupId=$groupId,")
        append("groupName=$groupName,")
        append("ipPermissions=$ipPermissions,")
        append("securityGroupRuleDescriptions=$securityGroupRuleDescriptions)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (groupId?.hashCode() ?: 0)
        result = 31 * result + (groupName?.hashCode() ?: 0)
        result = 31 * result + (ipPermissions?.hashCode() ?: 0)
        result = 31 * result + (securityGroupRuleDescriptions?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as UpdateSecurityGroupRuleDescriptionsEgressRequest

        if (dryRun != other.dryRun) return false
        if (groupId != other.groupId) return false
        if (groupName != other.groupName) return false
        if (ipPermissions != other.ipPermissions) return false
        if (securityGroupRuleDescriptions != other.securityGroupRuleDescriptions) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): UpdateSecurityGroupRuleDescriptionsEgressRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): UpdateSecurityGroupRuleDescriptionsEgressRequest
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The ID of the security group. You must specify either the security group ID or the
         * security group name in the request. For security groups in a nondefault VPC, you must
         * specify the security group ID.
         */
        fun groupId(groupId: String): FluentBuilder
        /**
         * &#91;Default VPC&#93; The name of the security group. You must specify either the security group
         * ID or the security group name in the request.
         */
        fun groupName(groupName: String): FluentBuilder
        /**
         * The IP permissions for the security group rule. You must specify either the IP permissions
         * or the description.
         */
        fun ipPermissions(ipPermissions: List<IpPermission>): FluentBuilder
        /**
         * The description for the egress security group rules. You must specify either the
         * description or the IP permissions.
         */
        fun securityGroupRuleDescriptions(securityGroupRuleDescriptions: List<SecurityGroupRuleDescription>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The ID of the security group. You must specify either the security group ID or the
         * security group name in the request. For security groups in a nondefault VPC, you must
         * specify the security group ID.
         */
        var groupId: String?
        /**
         * &#91;Default VPC&#93; The name of the security group. You must specify either the security group
         * ID or the security group name in the request.
         */
        var groupName: String?
        /**
         * The IP permissions for the security group rule. You must specify either the IP permissions
         * or the description.
         */
        var ipPermissions: List<IpPermission>?
        /**
         * The description for the egress security group rules. You must specify either the
         * description or the IP permissions.
         */
        var securityGroupRuleDescriptions: List<SecurityGroupRuleDescription>?

        fun build(): UpdateSecurityGroupRuleDescriptionsEgressRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var groupId: String? = null
        override var groupName: String? = null
        override var ipPermissions: List<IpPermission>? = null
        override var securityGroupRuleDescriptions: List<SecurityGroupRuleDescription>? = null

        constructor(x: UpdateSecurityGroupRuleDescriptionsEgressRequest) : this() {
            this.dryRun = x.dryRun
            this.groupId = x.groupId
            this.groupName = x.groupName
            this.ipPermissions = x.ipPermissions
            this.securityGroupRuleDescriptions = x.securityGroupRuleDescriptions
        }

        override fun build(): UpdateSecurityGroupRuleDescriptionsEgressRequest = UpdateSecurityGroupRuleDescriptionsEgressRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun groupId(groupId: String): FluentBuilder = apply { this.groupId = groupId }
        override fun groupName(groupName: String): FluentBuilder = apply { this.groupName = groupName }
        override fun ipPermissions(ipPermissions: List<IpPermission>): FluentBuilder = apply { this.ipPermissions = ipPermissions }
        override fun securityGroupRuleDescriptions(securityGroupRuleDescriptions: List<SecurityGroupRuleDescription>): FluentBuilder = apply { this.securityGroupRuleDescriptions = securityGroupRuleDescriptions }
    }
}
