// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Information about the DNS server to be used.
 */
class DnsServersOptionsModifyStructure private constructor(builder: BuilderImpl) {
    /**
     * The IPv4 address range, in CIDR notation, of the DNS servers to be used. You can specify up to
     * two DNS servers. Ensure that the DNS servers can be reached by the clients. The specified values
     * overwrite the existing values.
     */
    val customDnsServers: List<String>? = builder.customDnsServers
    /**
     * Indicates whether DNS servers should be used. Specify False to delete the existing DNS
     * servers.
     */
    val enabled: Boolean? = builder.enabled

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DnsServersOptionsModifyStructure = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DnsServersOptionsModifyStructure(")
        append("customDnsServers=$customDnsServers,")
        append("enabled=$enabled)")
    }

    override fun hashCode(): kotlin.Int {
        var result = customDnsServers?.hashCode() ?: 0
        result = 31 * result + (enabled?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DnsServersOptionsModifyStructure

        if (customDnsServers != other.customDnsServers) return false
        if (enabled != other.enabled) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DnsServersOptionsModifyStructure = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DnsServersOptionsModifyStructure
        /**
         * The IPv4 address range, in CIDR notation, of the DNS servers to be used. You can specify up to
         * two DNS servers. Ensure that the DNS servers can be reached by the clients. The specified values
         * overwrite the existing values.
         */
        fun customDnsServers(customDnsServers: List<String>): FluentBuilder
        /**
         * Indicates whether DNS servers should be used. Specify False to delete the existing DNS
         * servers.
         */
        fun enabled(enabled: Boolean): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The IPv4 address range, in CIDR notation, of the DNS servers to be used. You can specify up to
         * two DNS servers. Ensure that the DNS servers can be reached by the clients. The specified values
         * overwrite the existing values.
         */
        var customDnsServers: List<String>?
        /**
         * Indicates whether DNS servers should be used. Specify False to delete the existing DNS
         * servers.
         */
        var enabled: Boolean?

        fun build(): DnsServersOptionsModifyStructure
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var customDnsServers: List<String>? = null
        override var enabled: Boolean? = null

        constructor(x: DnsServersOptionsModifyStructure) : this() {
            this.customDnsServers = x.customDnsServers
            this.enabled = x.enabled
        }

        override fun build(): DnsServersOptionsModifyStructure = DnsServersOptionsModifyStructure(this)
        override fun customDnsServers(customDnsServers: List<String>): FluentBuilder = apply { this.customDnsServers = customDnsServers }
        override fun enabled(enabled: Boolean): FluentBuilder = apply { this.enabled = enabled }
    }
}
