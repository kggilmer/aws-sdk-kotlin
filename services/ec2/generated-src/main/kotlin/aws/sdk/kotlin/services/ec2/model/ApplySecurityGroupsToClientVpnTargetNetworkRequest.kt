// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ApplySecurityGroupsToClientVpnTargetNetworkRequest private constructor(builder: BuilderImpl) {
    /**
     * The ID of the Client VPN endpoint.
     */
    val clientVpnEndpointId: String? = builder.clientVpnEndpointId
    /**
     * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The IDs of the security groups to apply to the associated target network. Up to 5 security groups can
     * be applied to an associated target network.
     */
    val securityGroupIds: List<String>? = builder.securityGroupIds
    /**
     * The ID of the VPC in which the associated target network is located.
     */
    val vpcId: String? = builder.vpcId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ApplySecurityGroupsToClientVpnTargetNetworkRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ApplySecurityGroupsToClientVpnTargetNetworkRequest(")
        append("clientVpnEndpointId=$clientVpnEndpointId,")
        append("dryRun=$dryRun,")
        append("securityGroupIds=$securityGroupIds,")
        append("vpcId=$vpcId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = clientVpnEndpointId?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (securityGroupIds?.hashCode() ?: 0)
        result = 31 * result + (vpcId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ApplySecurityGroupsToClientVpnTargetNetworkRequest

        if (clientVpnEndpointId != other.clientVpnEndpointId) return false
        if (dryRun != other.dryRun) return false
        if (securityGroupIds != other.securityGroupIds) return false
        if (vpcId != other.vpcId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ApplySecurityGroupsToClientVpnTargetNetworkRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ApplySecurityGroupsToClientVpnTargetNetworkRequest
        /**
         * The ID of the Client VPN endpoint.
         */
        fun clientVpnEndpointId(clientVpnEndpointId: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The IDs of the security groups to apply to the associated target network. Up to 5 security groups can
         * be applied to an associated target network.
         */
        fun securityGroupIds(securityGroupIds: List<String>): FluentBuilder
        /**
         * The ID of the VPC in which the associated target network is located.
         */
        fun vpcId(vpcId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The ID of the Client VPN endpoint.
         */
        var clientVpnEndpointId: String?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The IDs of the security groups to apply to the associated target network. Up to 5 security groups can
         * be applied to an associated target network.
         */
        var securityGroupIds: List<String>?
        /**
         * The ID of the VPC in which the associated target network is located.
         */
        var vpcId: String?

        fun build(): ApplySecurityGroupsToClientVpnTargetNetworkRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var clientVpnEndpointId: String? = null
        override var dryRun: Boolean? = null
        override var securityGroupIds: List<String>? = null
        override var vpcId: String? = null

        constructor(x: ApplySecurityGroupsToClientVpnTargetNetworkRequest) : this() {
            this.clientVpnEndpointId = x.clientVpnEndpointId
            this.dryRun = x.dryRun
            this.securityGroupIds = x.securityGroupIds
            this.vpcId = x.vpcId
        }

        override fun build(): ApplySecurityGroupsToClientVpnTargetNetworkRequest = ApplySecurityGroupsToClientVpnTargetNetworkRequest(this)
        override fun clientVpnEndpointId(clientVpnEndpointId: String): FluentBuilder = apply { this.clientVpnEndpointId = clientVpnEndpointId }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun securityGroupIds(securityGroupIds: List<String>): FluentBuilder = apply { this.securityGroupIds = securityGroupIds }
        override fun vpcId(vpcId: String): FluentBuilder = apply { this.vpcId = vpcId }
    }
}
