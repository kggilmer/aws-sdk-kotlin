// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ProvisionByoipCidrRequest private constructor(builder: BuilderImpl) {
    /**
     * The public IPv4 or IPv6 address range, in CIDR notation. The most specific IPv4 prefix that you can
     * specify is /24. The most specific IPv6 prefix you can specify is /56. The address range cannot overlap with another address range that you've
     * brought to this or another Region.
     */
    val cidr: String? = builder.cidr
    /**
     * A signed document that proves that you are authorized to bring the specified IP address
     * range to Amazon using BYOIP.
     */
    val cidrAuthorizationContext: CidrAuthorizationContext? = builder.cidrAuthorizationContext
    /**
     * A description for the address range and the address pool.
     */
    val description: String? = builder.description
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * <para>Reserved.</para>
     */
    val multiRegion: Boolean? = builder.multiRegion
    /**
     * The tags to apply to the address pool.
     */
    val poolTagSpecifications: List<TagSpecification>? = builder.poolTagSpecifications
    /**
     * (IPv6 only) Indicate whether the address range will be publicly advertised to the
     * internet.
     * Default: true
     */
    val publiclyAdvertisable: Boolean? = builder.publiclyAdvertisable

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ProvisionByoipCidrRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ProvisionByoipCidrRequest(")
        append("cidr=$cidr,")
        append("cidrAuthorizationContext=$cidrAuthorizationContext,")
        append("description=$description,")
        append("dryRun=$dryRun,")
        append("multiRegion=$multiRegion,")
        append("poolTagSpecifications=$poolTagSpecifications,")
        append("publiclyAdvertisable=$publiclyAdvertisable)")
    }

    override fun hashCode(): kotlin.Int {
        var result = cidr?.hashCode() ?: 0
        result = 31 * result + (cidrAuthorizationContext?.hashCode() ?: 0)
        result = 31 * result + (description?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (multiRegion?.hashCode() ?: 0)
        result = 31 * result + (poolTagSpecifications?.hashCode() ?: 0)
        result = 31 * result + (publiclyAdvertisable?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ProvisionByoipCidrRequest

        if (cidr != other.cidr) return false
        if (cidrAuthorizationContext != other.cidrAuthorizationContext) return false
        if (description != other.description) return false
        if (dryRun != other.dryRun) return false
        if (multiRegion != other.multiRegion) return false
        if (poolTagSpecifications != other.poolTagSpecifications) return false
        if (publiclyAdvertisable != other.publiclyAdvertisable) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ProvisionByoipCidrRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ProvisionByoipCidrRequest
        /**
         * The public IPv4 or IPv6 address range, in CIDR notation. The most specific IPv4 prefix that you can
         * specify is /24. The most specific IPv6 prefix you can specify is /56. The address range cannot overlap with another address range that you've
         * brought to this or another Region.
         */
        fun cidr(cidr: String): FluentBuilder
        /**
         * A signed document that proves that you are authorized to bring the specified IP address
         * range to Amazon using BYOIP.
         */
        fun cidrAuthorizationContext(cidrAuthorizationContext: CidrAuthorizationContext): FluentBuilder
        /**
         * A description for the address range and the address pool.
         */
        fun description(description: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * <para>Reserved.</para>
         */
        fun multiRegion(multiRegion: Boolean): FluentBuilder
        /**
         * The tags to apply to the address pool.
         */
        fun poolTagSpecifications(poolTagSpecifications: List<TagSpecification>): FluentBuilder
        /**
         * (IPv6 only) Indicate whether the address range will be publicly advertised to the
         * internet.
         * Default: true
         */
        fun publiclyAdvertisable(publiclyAdvertisable: Boolean): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The public IPv4 or IPv6 address range, in CIDR notation. The most specific IPv4 prefix that you can
         * specify is /24. The most specific IPv6 prefix you can specify is /56. The address range cannot overlap with another address range that you've
         * brought to this or another Region.
         */
        var cidr: String?
        /**
         * A signed document that proves that you are authorized to bring the specified IP address
         * range to Amazon using BYOIP.
         */
        var cidrAuthorizationContext: CidrAuthorizationContext?
        /**
         * A description for the address range and the address pool.
         */
        var description: String?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * <para>Reserved.</para>
         */
        var multiRegion: Boolean?
        /**
         * The tags to apply to the address pool.
         */
        var poolTagSpecifications: List<TagSpecification>?
        /**
         * (IPv6 only) Indicate whether the address range will be publicly advertised to the
         * internet.
         * Default: true
         */
        var publiclyAdvertisable: Boolean?

        fun build(): ProvisionByoipCidrRequest
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.CidrAuthorizationContext] inside the given [block]
         */
        fun cidrAuthorizationContext(block: CidrAuthorizationContext.DslBuilder.() -> kotlin.Unit) {
            this.cidrAuthorizationContext = CidrAuthorizationContext.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var cidr: String? = null
        override var cidrAuthorizationContext: CidrAuthorizationContext? = null
        override var description: String? = null
        override var dryRun: Boolean? = null
        override var multiRegion: Boolean? = null
        override var poolTagSpecifications: List<TagSpecification>? = null
        override var publiclyAdvertisable: Boolean? = null

        constructor(x: ProvisionByoipCidrRequest) : this() {
            this.cidr = x.cidr
            this.cidrAuthorizationContext = x.cidrAuthorizationContext
            this.description = x.description
            this.dryRun = x.dryRun
            this.multiRegion = x.multiRegion
            this.poolTagSpecifications = x.poolTagSpecifications
            this.publiclyAdvertisable = x.publiclyAdvertisable
        }

        override fun build(): ProvisionByoipCidrRequest = ProvisionByoipCidrRequest(this)
        override fun cidr(cidr: String): FluentBuilder = apply { this.cidr = cidr }
        override fun cidrAuthorizationContext(cidrAuthorizationContext: CidrAuthorizationContext): FluentBuilder = apply { this.cidrAuthorizationContext = cidrAuthorizationContext }
        override fun description(description: String): FluentBuilder = apply { this.description = description }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun multiRegion(multiRegion: Boolean): FluentBuilder = apply { this.multiRegion = multiRegion }
        override fun poolTagSpecifications(poolTagSpecifications: List<TagSpecification>): FluentBuilder = apply { this.poolTagSpecifications = poolTagSpecifications }
        override fun publiclyAdvertisable(publiclyAdvertisable: Boolean): FluentBuilder = apply { this.publiclyAdvertisable = publiclyAdvertisable }
    }
}
