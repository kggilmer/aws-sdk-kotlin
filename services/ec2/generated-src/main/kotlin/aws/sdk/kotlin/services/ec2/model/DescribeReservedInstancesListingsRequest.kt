// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Contains the parameters for DescribeReservedInstancesListings.
 */
class DescribeReservedInstancesListingsRequest private constructor(builder: BuilderImpl) {
    /**
     * One or more filters.
     * reserved-instances-id - The ID of the Reserved Instances.
     * reserved-instances-listing-id - The ID of the Reserved Instances listing.
     * status - The status of the Reserved Instance listing (pending | active |
     * cancelled | closed).
     * status-message - The reason for the status.
     */
    val filters: List<Filter>? = builder.filters
    /**
     * One or more Reserved Instance IDs.
     */
    val reservedInstancesId: String? = builder.reservedInstancesId
    /**
     * One or more Reserved Instance listing IDs.
     */
    val reservedInstancesListingId: String? = builder.reservedInstancesListingId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DescribeReservedInstancesListingsRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DescribeReservedInstancesListingsRequest(")
        append("filters=$filters,")
        append("reservedInstancesId=$reservedInstancesId,")
        append("reservedInstancesListingId=$reservedInstancesListingId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = filters?.hashCode() ?: 0
        result = 31 * result + (reservedInstancesId?.hashCode() ?: 0)
        result = 31 * result + (reservedInstancesListingId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DescribeReservedInstancesListingsRequest

        if (filters != other.filters) return false
        if (reservedInstancesId != other.reservedInstancesId) return false
        if (reservedInstancesListingId != other.reservedInstancesListingId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DescribeReservedInstancesListingsRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DescribeReservedInstancesListingsRequest
        /**
         * One or more filters.
         * reserved-instances-id - The ID of the Reserved Instances.
         * reserved-instances-listing-id - The ID of the Reserved Instances listing.
         * status - The status of the Reserved Instance listing (pending | active |
         * cancelled | closed).
         * status-message - The reason for the status.
         */
        fun filters(filters: List<Filter>): FluentBuilder
        /**
         * One or more Reserved Instance IDs.
         */
        fun reservedInstancesId(reservedInstancesId: String): FluentBuilder
        /**
         * One or more Reserved Instance listing IDs.
         */
        fun reservedInstancesListingId(reservedInstancesListingId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * One or more filters.
         * reserved-instances-id - The ID of the Reserved Instances.
         * reserved-instances-listing-id - The ID of the Reserved Instances listing.
         * status - The status of the Reserved Instance listing (pending | active |
         * cancelled | closed).
         * status-message - The reason for the status.
         */
        var filters: List<Filter>?
        /**
         * One or more Reserved Instance IDs.
         */
        var reservedInstancesId: String?
        /**
         * One or more Reserved Instance listing IDs.
         */
        var reservedInstancesListingId: String?

        fun build(): DescribeReservedInstancesListingsRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var filters: List<Filter>? = null
        override var reservedInstancesId: String? = null
        override var reservedInstancesListingId: String? = null

        constructor(x: DescribeReservedInstancesListingsRequest) : this() {
            this.filters = x.filters
            this.reservedInstancesId = x.reservedInstancesId
            this.reservedInstancesListingId = x.reservedInstancesListingId
        }

        override fun build(): DescribeReservedInstancesListingsRequest = DescribeReservedInstancesListingsRequest(this)
        override fun filters(filters: List<Filter>): FluentBuilder = apply { this.filters = filters }
        override fun reservedInstancesId(reservedInstancesId: String): FluentBuilder = apply { this.reservedInstancesId = reservedInstancesId }
        override fun reservedInstancesListingId(reservedInstancesListingId: String): FluentBuilder = apply { this.reservedInstancesListingId = reservedInstancesListingId }
    }
}
