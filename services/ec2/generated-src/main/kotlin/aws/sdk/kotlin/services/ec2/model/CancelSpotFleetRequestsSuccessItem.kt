// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a Spot Fleet request that was successfully canceled.
 */
class CancelSpotFleetRequestsSuccessItem private constructor(builder: BuilderImpl) {
    /**
     * The current state of the Spot Fleet request.
     */
    val currentSpotFleetRequestState: BatchState? = builder.currentSpotFleetRequestState
    /**
     * The previous state of the Spot Fleet request.
     */
    val previousSpotFleetRequestState: BatchState? = builder.previousSpotFleetRequestState
    /**
     * The ID of the Spot Fleet request.
     */
    val spotFleetRequestId: String? = builder.spotFleetRequestId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CancelSpotFleetRequestsSuccessItem = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CancelSpotFleetRequestsSuccessItem(")
        append("currentSpotFleetRequestState=$currentSpotFleetRequestState,")
        append("previousSpotFleetRequestState=$previousSpotFleetRequestState,")
        append("spotFleetRequestId=$spotFleetRequestId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = currentSpotFleetRequestState?.hashCode() ?: 0
        result = 31 * result + (previousSpotFleetRequestState?.hashCode() ?: 0)
        result = 31 * result + (spotFleetRequestId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CancelSpotFleetRequestsSuccessItem

        if (currentSpotFleetRequestState != other.currentSpotFleetRequestState) return false
        if (previousSpotFleetRequestState != other.previousSpotFleetRequestState) return false
        if (spotFleetRequestId != other.spotFleetRequestId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CancelSpotFleetRequestsSuccessItem = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CancelSpotFleetRequestsSuccessItem
        /**
         * The current state of the Spot Fleet request.
         */
        fun currentSpotFleetRequestState(currentSpotFleetRequestState: BatchState): FluentBuilder
        /**
         * The previous state of the Spot Fleet request.
         */
        fun previousSpotFleetRequestState(previousSpotFleetRequestState: BatchState): FluentBuilder
        /**
         * The ID of the Spot Fleet request.
         */
        fun spotFleetRequestId(spotFleetRequestId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The current state of the Spot Fleet request.
         */
        var currentSpotFleetRequestState: BatchState?
        /**
         * The previous state of the Spot Fleet request.
         */
        var previousSpotFleetRequestState: BatchState?
        /**
         * The ID of the Spot Fleet request.
         */
        var spotFleetRequestId: String?

        fun build(): CancelSpotFleetRequestsSuccessItem
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var currentSpotFleetRequestState: BatchState? = null
        override var previousSpotFleetRequestState: BatchState? = null
        override var spotFleetRequestId: String? = null

        constructor(x: CancelSpotFleetRequestsSuccessItem) : this() {
            this.currentSpotFleetRequestState = x.currentSpotFleetRequestState
            this.previousSpotFleetRequestState = x.previousSpotFleetRequestState
            this.spotFleetRequestId = x.spotFleetRequestId
        }

        override fun build(): CancelSpotFleetRequestsSuccessItem = CancelSpotFleetRequestsSuccessItem(this)
        override fun currentSpotFleetRequestState(currentSpotFleetRequestState: BatchState): FluentBuilder = apply { this.currentSpotFleetRequestState = currentSpotFleetRequestState }
        override fun previousSpotFleetRequestState(previousSpotFleetRequestState: BatchState): FluentBuilder = apply { this.previousSpotFleetRequestState = previousSpotFleetRequestState }
        override fun spotFleetRequestId(spotFleetRequestId: String): FluentBuilder = apply { this.spotFleetRequestId = spotFleetRequestId }
    }
}
