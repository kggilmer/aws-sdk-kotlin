// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class UnassignIpv6AddressesResponse private constructor(builder: BuilderImpl) {
    /**
     * The ID of the network interface.
     */
    val networkInterfaceId: String? = builder.networkInterfaceId
    /**
     * The IPv6 addresses that have been unassigned from the network interface.
     */
    val unassignedIpv6Addresses: List<String>? = builder.unassignedIpv6Addresses
    /**
     * The IPv4 prefixes that have been unassigned from  the network interface.
     */
    val unassignedIpv6Prefixes: List<String>? = builder.unassignedIpv6Prefixes

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): UnassignIpv6AddressesResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("UnassignIpv6AddressesResponse(")
        append("networkInterfaceId=$networkInterfaceId,")
        append("unassignedIpv6Addresses=$unassignedIpv6Addresses,")
        append("unassignedIpv6Prefixes=$unassignedIpv6Prefixes)")
    }

    override fun hashCode(): kotlin.Int {
        var result = networkInterfaceId?.hashCode() ?: 0
        result = 31 * result + (unassignedIpv6Addresses?.hashCode() ?: 0)
        result = 31 * result + (unassignedIpv6Prefixes?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as UnassignIpv6AddressesResponse

        if (networkInterfaceId != other.networkInterfaceId) return false
        if (unassignedIpv6Addresses != other.unassignedIpv6Addresses) return false
        if (unassignedIpv6Prefixes != other.unassignedIpv6Prefixes) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): UnassignIpv6AddressesResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): UnassignIpv6AddressesResponse
        /**
         * The ID of the network interface.
         */
        fun networkInterfaceId(networkInterfaceId: String): FluentBuilder
        /**
         * The IPv6 addresses that have been unassigned from the network interface.
         */
        fun unassignedIpv6Addresses(unassignedIpv6Addresses: List<String>): FluentBuilder
        /**
         * The IPv4 prefixes that have been unassigned from  the network interface.
         */
        fun unassignedIpv6Prefixes(unassignedIpv6Prefixes: List<String>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The ID of the network interface.
         */
        var networkInterfaceId: String?
        /**
         * The IPv6 addresses that have been unassigned from the network interface.
         */
        var unassignedIpv6Addresses: List<String>?
        /**
         * The IPv4 prefixes that have been unassigned from  the network interface.
         */
        var unassignedIpv6Prefixes: List<String>?

        fun build(): UnassignIpv6AddressesResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var networkInterfaceId: String? = null
        override var unassignedIpv6Addresses: List<String>? = null
        override var unassignedIpv6Prefixes: List<String>? = null

        constructor(x: UnassignIpv6AddressesResponse) : this() {
            this.networkInterfaceId = x.networkInterfaceId
            this.unassignedIpv6Addresses = x.unassignedIpv6Addresses
            this.unassignedIpv6Prefixes = x.unassignedIpv6Prefixes
        }

        override fun build(): UnassignIpv6AddressesResponse = UnassignIpv6AddressesResponse(this)
        override fun networkInterfaceId(networkInterfaceId: String): FluentBuilder = apply { this.networkInterfaceId = networkInterfaceId }
        override fun unassignedIpv6Addresses(unassignedIpv6Addresses: List<String>): FluentBuilder = apply { this.unassignedIpv6Addresses = unassignedIpv6Addresses }
        override fun unassignedIpv6Prefixes(unassignedIpv6Prefixes: List<String>): FluentBuilder = apply { this.unassignedIpv6Prefixes = unassignedIpv6Prefixes }
    }
}
