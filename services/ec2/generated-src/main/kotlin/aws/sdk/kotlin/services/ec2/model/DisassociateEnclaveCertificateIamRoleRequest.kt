// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class DisassociateEnclaveCertificateIamRoleRequest private constructor(builder: BuilderImpl) {
    /**
     * The ARN of the ACM certificate from which to disassociate the IAM role.
     */
    val certificateArn: String? = builder.certificateArn
    /**
     * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The ARN of the IAM role to disassociate.
     */
    val roleArn: String? = builder.roleArn

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DisassociateEnclaveCertificateIamRoleRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DisassociateEnclaveCertificateIamRoleRequest(")
        append("certificateArn=$certificateArn,")
        append("dryRun=$dryRun,")
        append("roleArn=$roleArn)")
    }

    override fun hashCode(): kotlin.Int {
        var result = certificateArn?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (roleArn?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DisassociateEnclaveCertificateIamRoleRequest

        if (certificateArn != other.certificateArn) return false
        if (dryRun != other.dryRun) return false
        if (roleArn != other.roleArn) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DisassociateEnclaveCertificateIamRoleRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DisassociateEnclaveCertificateIamRoleRequest
        /**
         * The ARN of the ACM certificate from which to disassociate the IAM role.
         */
        fun certificateArn(certificateArn: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The ARN of the IAM role to disassociate.
         */
        fun roleArn(roleArn: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The ARN of the ACM certificate from which to disassociate the IAM role.
         */
        var certificateArn: String?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The ARN of the IAM role to disassociate.
         */
        var roleArn: String?

        fun build(): DisassociateEnclaveCertificateIamRoleRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var certificateArn: String? = null
        override var dryRun: Boolean? = null
        override var roleArn: String? = null

        constructor(x: DisassociateEnclaveCertificateIamRoleRequest) : this() {
            this.certificateArn = x.certificateArn
            this.dryRun = x.dryRun
            this.roleArn = x.roleArn
        }

        override fun build(): DisassociateEnclaveCertificateIamRoleRequest = DisassociateEnclaveCertificateIamRoleRequest(this)
        override fun certificateArn(certificateArn: String): FluentBuilder = apply { this.certificateArn = certificateArn }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun roleArn(roleArn: String): FluentBuilder = apply { this.roleArn = roleArn }
    }
}
