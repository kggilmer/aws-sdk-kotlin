// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a load balancer target.
 */
class AnalysisLoadBalancerTarget private constructor(builder: BuilderImpl) {
    /**
     * The IP address.
     */
    val address: String? = builder.address
    /**
     * The Availability Zone.
     */
    val availabilityZone: String? = builder.availabilityZone
    /**
     * Information about the instance.
     */
    val instance: AnalysisComponent? = builder.instance
    /**
     * The port on which the target is listening.
     */
    val port: Int? = builder.port

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): AnalysisLoadBalancerTarget = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("AnalysisLoadBalancerTarget(")
        append("address=$address,")
        append("availabilityZone=$availabilityZone,")
        append("instance=$instance,")
        append("port=$port)")
    }

    override fun hashCode(): kotlin.Int {
        var result = address?.hashCode() ?: 0
        result = 31 * result + (availabilityZone?.hashCode() ?: 0)
        result = 31 * result + (instance?.hashCode() ?: 0)
        result = 31 * result + (port ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as AnalysisLoadBalancerTarget

        if (address != other.address) return false
        if (availabilityZone != other.availabilityZone) return false
        if (instance != other.instance) return false
        if (port != other.port) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): AnalysisLoadBalancerTarget = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): AnalysisLoadBalancerTarget
        /**
         * The IP address.
         */
        fun address(address: String): FluentBuilder
        /**
         * The Availability Zone.
         */
        fun availabilityZone(availabilityZone: String): FluentBuilder
        /**
         * Information about the instance.
         */
        fun instance(instance: AnalysisComponent): FluentBuilder
        /**
         * The port on which the target is listening.
         */
        fun port(port: Int): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The IP address.
         */
        var address: String?
        /**
         * The Availability Zone.
         */
        var availabilityZone: String?
        /**
         * Information about the instance.
         */
        var instance: AnalysisComponent?
        /**
         * The port on which the target is listening.
         */
        var port: Int?

        fun build(): AnalysisLoadBalancerTarget
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.AnalysisComponent] inside the given [block]
         */
        fun instance(block: AnalysisComponent.DslBuilder.() -> kotlin.Unit) {
            this.instance = AnalysisComponent.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var address: String? = null
        override var availabilityZone: String? = null
        override var instance: AnalysisComponent? = null
        override var port: Int? = null

        constructor(x: AnalysisLoadBalancerTarget) : this() {
            this.address = x.address
            this.availabilityZone = x.availabilityZone
            this.instance = x.instance
            this.port = x.port
        }

        override fun build(): AnalysisLoadBalancerTarget = AnalysisLoadBalancerTarget(this)
        override fun address(address: String): FluentBuilder = apply { this.address = address }
        override fun availabilityZone(availabilityZone: String): FluentBuilder = apply { this.availabilityZone = availabilityZone }
        override fun instance(instance: AnalysisComponent): FluentBuilder = apply { this.instance = instance }
        override fun port(port: Int): FluentBuilder = apply { this.port = port }
    }
}
