// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class CreateVpcPeeringConnectionRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The Amazon Web Services account ID of the owner of the accepter VPC.
     * Default: Your Amazon Web Services account ID
     */
    val peerOwnerId: String? = builder.peerOwnerId
    /**
     * The Region code for the accepter VPC, if the accepter VPC is located in a Region
     * other than the Region in which you make the request.
     * Default: The Region in which you make the request.
     */
    val peerRegion: String? = builder.peerRegion
    /**
     * The ID of the VPC with which you are creating the VPC peering connection. You must
     * specify this parameter in the request.
     */
    val peerVpcId: String? = builder.peerVpcId
    /**
     * The tags to assign to the peering connection.
     */
    val tagSpecifications: List<TagSpecification>? = builder.tagSpecifications
    /**
     * The ID of the requester VPC. You must specify this parameter in the
     * request.
     */
    val vpcId: String? = builder.vpcId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CreateVpcPeeringConnectionRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CreateVpcPeeringConnectionRequest(")
        append("dryRun=$dryRun,")
        append("peerOwnerId=$peerOwnerId,")
        append("peerRegion=$peerRegion,")
        append("peerVpcId=$peerVpcId,")
        append("tagSpecifications=$tagSpecifications,")
        append("vpcId=$vpcId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (peerOwnerId?.hashCode() ?: 0)
        result = 31 * result + (peerRegion?.hashCode() ?: 0)
        result = 31 * result + (peerVpcId?.hashCode() ?: 0)
        result = 31 * result + (tagSpecifications?.hashCode() ?: 0)
        result = 31 * result + (vpcId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CreateVpcPeeringConnectionRequest

        if (dryRun != other.dryRun) return false
        if (peerOwnerId != other.peerOwnerId) return false
        if (peerRegion != other.peerRegion) return false
        if (peerVpcId != other.peerVpcId) return false
        if (tagSpecifications != other.tagSpecifications) return false
        if (vpcId != other.vpcId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CreateVpcPeeringConnectionRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CreateVpcPeeringConnectionRequest
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The Amazon Web Services account ID of the owner of the accepter VPC.
         * Default: Your Amazon Web Services account ID
         */
        fun peerOwnerId(peerOwnerId: String): FluentBuilder
        /**
         * The Region code for the accepter VPC, if the accepter VPC is located in a Region
         * other than the Region in which you make the request.
         * Default: The Region in which you make the request.
         */
        fun peerRegion(peerRegion: String): FluentBuilder
        /**
         * The ID of the VPC with which you are creating the VPC peering connection. You must
         * specify this parameter in the request.
         */
        fun peerVpcId(peerVpcId: String): FluentBuilder
        /**
         * The tags to assign to the peering connection.
         */
        fun tagSpecifications(tagSpecifications: List<TagSpecification>): FluentBuilder
        /**
         * The ID of the requester VPC. You must specify this parameter in the
         * request.
         */
        fun vpcId(vpcId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The Amazon Web Services account ID of the owner of the accepter VPC.
         * Default: Your Amazon Web Services account ID
         */
        var peerOwnerId: String?
        /**
         * The Region code for the accepter VPC, if the accepter VPC is located in a Region
         * other than the Region in which you make the request.
         * Default: The Region in which you make the request.
         */
        var peerRegion: String?
        /**
         * The ID of the VPC with which you are creating the VPC peering connection. You must
         * specify this parameter in the request.
         */
        var peerVpcId: String?
        /**
         * The tags to assign to the peering connection.
         */
        var tagSpecifications: List<TagSpecification>?
        /**
         * The ID of the requester VPC. You must specify this parameter in the
         * request.
         */
        var vpcId: String?

        fun build(): CreateVpcPeeringConnectionRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var peerOwnerId: String? = null
        override var peerRegion: String? = null
        override var peerVpcId: String? = null
        override var tagSpecifications: List<TagSpecification>? = null
        override var vpcId: String? = null

        constructor(x: CreateVpcPeeringConnectionRequest) : this() {
            this.dryRun = x.dryRun
            this.peerOwnerId = x.peerOwnerId
            this.peerRegion = x.peerRegion
            this.peerVpcId = x.peerVpcId
            this.tagSpecifications = x.tagSpecifications
            this.vpcId = x.vpcId
        }

        override fun build(): CreateVpcPeeringConnectionRequest = CreateVpcPeeringConnectionRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun peerOwnerId(peerOwnerId: String): FluentBuilder = apply { this.peerOwnerId = peerOwnerId }
        override fun peerRegion(peerRegion: String): FluentBuilder = apply { this.peerRegion = peerRegion }
        override fun peerVpcId(peerVpcId: String): FluentBuilder = apply { this.peerVpcId = peerVpcId }
        override fun tagSpecifications(tagSpecifications: List<TagSpecification>): FluentBuilder = apply { this.tagSpecifications = tagSpecifications }
        override fun vpcId(vpcId: String): FluentBuilder = apply { this.vpcId = vpcId }
    }
}
