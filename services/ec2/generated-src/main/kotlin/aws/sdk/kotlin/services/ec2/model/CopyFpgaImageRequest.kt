// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class CopyFpgaImageRequest private constructor(builder: BuilderImpl) {
    /**
     * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
     * For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring idempotency.
     */
    val clientToken: String? = builder.clientToken
    /**
     * The description for the new AFI.
     */
    val description: String? = builder.description
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The name for the new AFI. The default is the name of the source AFI.
     */
    val name: String? = builder.name
    /**
     * The ID of the source AFI.
     */
    val sourceFpgaImageId: String? = builder.sourceFpgaImageId
    /**
     * The Region that contains the source AFI.
     */
    val sourceRegion: String? = builder.sourceRegion

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CopyFpgaImageRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CopyFpgaImageRequest(")
        append("clientToken=$clientToken,")
        append("description=$description,")
        append("dryRun=$dryRun,")
        append("name=$name,")
        append("sourceFpgaImageId=$sourceFpgaImageId,")
        append("sourceRegion=$sourceRegion)")
    }

    override fun hashCode(): kotlin.Int {
        var result = clientToken?.hashCode() ?: 0
        result = 31 * result + (description?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (name?.hashCode() ?: 0)
        result = 31 * result + (sourceFpgaImageId?.hashCode() ?: 0)
        result = 31 * result + (sourceRegion?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CopyFpgaImageRequest

        if (clientToken != other.clientToken) return false
        if (description != other.description) return false
        if (dryRun != other.dryRun) return false
        if (name != other.name) return false
        if (sourceFpgaImageId != other.sourceFpgaImageId) return false
        if (sourceRegion != other.sourceRegion) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CopyFpgaImageRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CopyFpgaImageRequest
        /**
         * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
         * For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring idempotency.
         */
        fun clientToken(clientToken: String): FluentBuilder
        /**
         * The description for the new AFI.
         */
        fun description(description: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The name for the new AFI. The default is the name of the source AFI.
         */
        fun name(name: String): FluentBuilder
        /**
         * The ID of the source AFI.
         */
        fun sourceFpgaImageId(sourceFpgaImageId: String): FluentBuilder
        /**
         * The Region that contains the source AFI.
         */
        fun sourceRegion(sourceRegion: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
         * For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring idempotency.
         */
        var clientToken: String?
        /**
         * The description for the new AFI.
         */
        var description: String?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The name for the new AFI. The default is the name of the source AFI.
         */
        var name: String?
        /**
         * The ID of the source AFI.
         */
        var sourceFpgaImageId: String?
        /**
         * The Region that contains the source AFI.
         */
        var sourceRegion: String?

        fun build(): CopyFpgaImageRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var clientToken: String? = null
        override var description: String? = null
        override var dryRun: Boolean? = null
        override var name: String? = null
        override var sourceFpgaImageId: String? = null
        override var sourceRegion: String? = null

        constructor(x: CopyFpgaImageRequest) : this() {
            this.clientToken = x.clientToken
            this.description = x.description
            this.dryRun = x.dryRun
            this.name = x.name
            this.sourceFpgaImageId = x.sourceFpgaImageId
            this.sourceRegion = x.sourceRegion
        }

        override fun build(): CopyFpgaImageRequest = CopyFpgaImageRequest(this)
        override fun clientToken(clientToken: String): FluentBuilder = apply { this.clientToken = clientToken }
        override fun description(description: String): FluentBuilder = apply { this.description = description }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun name(name: String): FluentBuilder = apply { this.name = name }
        override fun sourceFpgaImageId(sourceFpgaImageId: String): FluentBuilder = apply { this.sourceFpgaImageId = sourceFpgaImageId }
        override fun sourceRegion(sourceRegion: String): FluentBuilder = apply { this.sourceRegion = sourceRegion }
    }
}
