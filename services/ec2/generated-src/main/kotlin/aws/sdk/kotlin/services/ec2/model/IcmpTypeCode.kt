// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the ICMP type and code.
 */
class IcmpTypeCode private constructor(builder: BuilderImpl) {
    /**
     * The ICMP code. A value of -1 means all codes for the specified ICMP type.
     */
    val code: Int? = builder.code
    /**
     * The ICMP type. A value of -1 means all types.
     */
    val type: Int? = builder.type

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): IcmpTypeCode = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("IcmpTypeCode(")
        append("code=$code,")
        append("type=$type)")
    }

    override fun hashCode(): kotlin.Int {
        var result = code ?: 0
        result = 31 * result + (type ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as IcmpTypeCode

        if (code != other.code) return false
        if (type != other.type) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): IcmpTypeCode = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): IcmpTypeCode
        /**
         * The ICMP code. A value of -1 means all codes for the specified ICMP type.
         */
        fun code(code: Int): FluentBuilder
        /**
         * The ICMP type. A value of -1 means all types.
         */
        fun type(type: Int): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The ICMP code. A value of -1 means all codes for the specified ICMP type.
         */
        var code: Int?
        /**
         * The ICMP type. A value of -1 means all types.
         */
        var type: Int?

        fun build(): IcmpTypeCode
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var code: Int? = null
        override var type: Int? = null

        constructor(x: IcmpTypeCode) : this() {
            this.code = x.code
            this.type = x.type
        }

        override fun build(): IcmpTypeCode = IcmpTypeCode(this)
        override fun code(code: Int): FluentBuilder = apply { this.code = code }
        override fun type(type: Int): FluentBuilder = apply { this.type = type }
    }
}
