// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class DeleteNetworkAclEntryRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * Indicates whether the rule is an egress rule.
     */
    val egress: Boolean? = builder.egress
    /**
     * The ID of the network ACL.
     */
    val networkAclId: String? = builder.networkAclId
    /**
     * The rule number of the entry to delete.
     */
    val ruleNumber: Int? = builder.ruleNumber

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DeleteNetworkAclEntryRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DeleteNetworkAclEntryRequest(")
        append("dryRun=$dryRun,")
        append("egress=$egress,")
        append("networkAclId=$networkAclId,")
        append("ruleNumber=$ruleNumber)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (egress?.hashCode() ?: 0)
        result = 31 * result + (networkAclId?.hashCode() ?: 0)
        result = 31 * result + (ruleNumber ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DeleteNetworkAclEntryRequest

        if (dryRun != other.dryRun) return false
        if (egress != other.egress) return false
        if (networkAclId != other.networkAclId) return false
        if (ruleNumber != other.ruleNumber) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DeleteNetworkAclEntryRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DeleteNetworkAclEntryRequest
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * Indicates whether the rule is an egress rule.
         */
        fun egress(egress: Boolean): FluentBuilder
        /**
         * The ID of the network ACL.
         */
        fun networkAclId(networkAclId: String): FluentBuilder
        /**
         * The rule number of the entry to delete.
         */
        fun ruleNumber(ruleNumber: Int): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * Indicates whether the rule is an egress rule.
         */
        var egress: Boolean?
        /**
         * The ID of the network ACL.
         */
        var networkAclId: String?
        /**
         * The rule number of the entry to delete.
         */
        var ruleNumber: Int?

        fun build(): DeleteNetworkAclEntryRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var egress: Boolean? = null
        override var networkAclId: String? = null
        override var ruleNumber: Int? = null

        constructor(x: DeleteNetworkAclEntryRequest) : this() {
            this.dryRun = x.dryRun
            this.egress = x.egress
            this.networkAclId = x.networkAclId
            this.ruleNumber = x.ruleNumber
        }

        override fun build(): DeleteNetworkAclEntryRequest = DeleteNetworkAclEntryRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun egress(egress: Boolean): FluentBuilder = apply { this.egress = egress }
        override fun networkAclId(networkAclId: String): FluentBuilder = apply { this.networkAclId = networkAclId }
        override fun ruleNumber(ruleNumber: Int): FluentBuilder = apply { this.ruleNumber = ruleNumber }
    }
}
