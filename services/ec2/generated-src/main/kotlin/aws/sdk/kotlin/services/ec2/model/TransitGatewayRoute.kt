// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a route for a transit gateway route table.
 */
class TransitGatewayRoute private constructor(builder: BuilderImpl) {
    /**
     * The CIDR block used for destination matches.
     */
    val destinationCidrBlock: String? = builder.destinationCidrBlock
    /**
     * The ID of the prefix list used for destination matches.
     */
    val prefixListId: String? = builder.prefixListId
    /**
     * The state of the route.
     */
    val state: TransitGatewayRouteState? = builder.state
    /**
     * The attachments.
     */
    val transitGatewayAttachments: List<TransitGatewayRouteAttachment>? = builder.transitGatewayAttachments
    /**
     * The route type.
     */
    val type: TransitGatewayRouteType? = builder.type

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): TransitGatewayRoute = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("TransitGatewayRoute(")
        append("destinationCidrBlock=$destinationCidrBlock,")
        append("prefixListId=$prefixListId,")
        append("state=$state,")
        append("transitGatewayAttachments=$transitGatewayAttachments,")
        append("type=$type)")
    }

    override fun hashCode(): kotlin.Int {
        var result = destinationCidrBlock?.hashCode() ?: 0
        result = 31 * result + (prefixListId?.hashCode() ?: 0)
        result = 31 * result + (state?.hashCode() ?: 0)
        result = 31 * result + (transitGatewayAttachments?.hashCode() ?: 0)
        result = 31 * result + (type?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as TransitGatewayRoute

        if (destinationCidrBlock != other.destinationCidrBlock) return false
        if (prefixListId != other.prefixListId) return false
        if (state != other.state) return false
        if (transitGatewayAttachments != other.transitGatewayAttachments) return false
        if (type != other.type) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): TransitGatewayRoute = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): TransitGatewayRoute
        /**
         * The CIDR block used for destination matches.
         */
        fun destinationCidrBlock(destinationCidrBlock: String): FluentBuilder
        /**
         * The ID of the prefix list used for destination matches.
         */
        fun prefixListId(prefixListId: String): FluentBuilder
        /**
         * The state of the route.
         */
        fun state(state: TransitGatewayRouteState): FluentBuilder
        /**
         * The attachments.
         */
        fun transitGatewayAttachments(transitGatewayAttachments: List<TransitGatewayRouteAttachment>): FluentBuilder
        /**
         * The route type.
         */
        fun type(type: TransitGatewayRouteType): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The CIDR block used for destination matches.
         */
        var destinationCidrBlock: String?
        /**
         * The ID of the prefix list used for destination matches.
         */
        var prefixListId: String?
        /**
         * The state of the route.
         */
        var state: TransitGatewayRouteState?
        /**
         * The attachments.
         */
        var transitGatewayAttachments: List<TransitGatewayRouteAttachment>?
        /**
         * The route type.
         */
        var type: TransitGatewayRouteType?

        fun build(): TransitGatewayRoute
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var destinationCidrBlock: String? = null
        override var prefixListId: String? = null
        override var state: TransitGatewayRouteState? = null
        override var transitGatewayAttachments: List<TransitGatewayRouteAttachment>? = null
        override var type: TransitGatewayRouteType? = null

        constructor(x: TransitGatewayRoute) : this() {
            this.destinationCidrBlock = x.destinationCidrBlock
            this.prefixListId = x.prefixListId
            this.state = x.state
            this.transitGatewayAttachments = x.transitGatewayAttachments
            this.type = x.type
        }

        override fun build(): TransitGatewayRoute = TransitGatewayRoute(this)
        override fun destinationCidrBlock(destinationCidrBlock: String): FluentBuilder = apply { this.destinationCidrBlock = destinationCidrBlock }
        override fun prefixListId(prefixListId: String): FluentBuilder = apply { this.prefixListId = prefixListId }
        override fun state(state: TransitGatewayRouteState): FluentBuilder = apply { this.state = state }
        override fun transitGatewayAttachments(transitGatewayAttachments: List<TransitGatewayRouteAttachment>): FluentBuilder = apply { this.transitGatewayAttachments = transitGatewayAttachments }
        override fun type(type: TransitGatewayRouteType): FluentBuilder = apply { this.type = type }
    }
}
