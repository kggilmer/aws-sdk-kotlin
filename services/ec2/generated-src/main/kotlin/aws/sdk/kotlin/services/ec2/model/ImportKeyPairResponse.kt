// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ImportKeyPairResponse private constructor(builder: BuilderImpl) {
    /**
     * The MD5 public key fingerprint as specified in section 4 of RFC 4716.
     */
    val keyFingerprint: String? = builder.keyFingerprint
    /**
     * The key pair name that you provided.
     */
    val keyName: String? = builder.keyName
    /**
     * The ID of the resulting key pair.
     */
    val keyPairId: String? = builder.keyPairId
    /**
     * The tags applied to the imported key pair.
     */
    val tags: List<Tag>? = builder.tags

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ImportKeyPairResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ImportKeyPairResponse(")
        append("keyFingerprint=$keyFingerprint,")
        append("keyName=$keyName,")
        append("keyPairId=$keyPairId,")
        append("tags=$tags)")
    }

    override fun hashCode(): kotlin.Int {
        var result = keyFingerprint?.hashCode() ?: 0
        result = 31 * result + (keyName?.hashCode() ?: 0)
        result = 31 * result + (keyPairId?.hashCode() ?: 0)
        result = 31 * result + (tags?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ImportKeyPairResponse

        if (keyFingerprint != other.keyFingerprint) return false
        if (keyName != other.keyName) return false
        if (keyPairId != other.keyPairId) return false
        if (tags != other.tags) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ImportKeyPairResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ImportKeyPairResponse
        /**
         * The MD5 public key fingerprint as specified in section 4 of RFC 4716.
         */
        fun keyFingerprint(keyFingerprint: String): FluentBuilder
        /**
         * The key pair name that you provided.
         */
        fun keyName(keyName: String): FluentBuilder
        /**
         * The ID of the resulting key pair.
         */
        fun keyPairId(keyPairId: String): FluentBuilder
        /**
         * The tags applied to the imported key pair.
         */
        fun tags(tags: List<Tag>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The MD5 public key fingerprint as specified in section 4 of RFC 4716.
         */
        var keyFingerprint: String?
        /**
         * The key pair name that you provided.
         */
        var keyName: String?
        /**
         * The ID of the resulting key pair.
         */
        var keyPairId: String?
        /**
         * The tags applied to the imported key pair.
         */
        var tags: List<Tag>?

        fun build(): ImportKeyPairResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var keyFingerprint: String? = null
        override var keyName: String? = null
        override var keyPairId: String? = null
        override var tags: List<Tag>? = null

        constructor(x: ImportKeyPairResponse) : this() {
            this.keyFingerprint = x.keyFingerprint
            this.keyName = x.keyName
            this.keyPairId = x.keyPairId
            this.tags = x.tags
        }

        override fun build(): ImportKeyPairResponse = ImportKeyPairResponse(this)
        override fun keyFingerprint(keyFingerprint: String): FluentBuilder = apply { this.keyFingerprint = keyFingerprint }
        override fun keyName(keyName: String): FluentBuilder = apply { this.keyName = keyName }
        override fun keyPairId(keyPairId: String): FluentBuilder = apply { this.keyPairId = keyPairId }
        override fun tags(tags: List<Tag>): FluentBuilder = apply { this.tags = tags }
    }
}
