// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class DeleteLaunchTemplateRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually
     * making the request, and provides an error response. If you have the required
     * permissions, the error response is DryRunOperation. Otherwise, it is
     * UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The ID of the launch template. You must specify either the launch template ID or
     * launch template name in the request.
     */
    val launchTemplateId: String? = builder.launchTemplateId
    /**
     * The name of the launch template. You must specify either the launch template ID or
     * launch template name in the request.
     */
    val launchTemplateName: String? = builder.launchTemplateName

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DeleteLaunchTemplateRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DeleteLaunchTemplateRequest(")
        append("dryRun=$dryRun,")
        append("launchTemplateId=$launchTemplateId,")
        append("launchTemplateName=$launchTemplateName)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (launchTemplateId?.hashCode() ?: 0)
        result = 31 * result + (launchTemplateName?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DeleteLaunchTemplateRequest

        if (dryRun != other.dryRun) return false
        if (launchTemplateId != other.launchTemplateId) return false
        if (launchTemplateName != other.launchTemplateName) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DeleteLaunchTemplateRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DeleteLaunchTemplateRequest
        /**
         * Checks whether you have the required permissions for the action, without actually
         * making the request, and provides an error response. If you have the required
         * permissions, the error response is DryRunOperation. Otherwise, it is
         * UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The ID of the launch template. You must specify either the launch template ID or
         * launch template name in the request.
         */
        fun launchTemplateId(launchTemplateId: String): FluentBuilder
        /**
         * The name of the launch template. You must specify either the launch template ID or
         * launch template name in the request.
         */
        fun launchTemplateName(launchTemplateName: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually
         * making the request, and provides an error response. If you have the required
         * permissions, the error response is DryRunOperation. Otherwise, it is
         * UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The ID of the launch template. You must specify either the launch template ID or
         * launch template name in the request.
         */
        var launchTemplateId: String?
        /**
         * The name of the launch template. You must specify either the launch template ID or
         * launch template name in the request.
         */
        var launchTemplateName: String?

        fun build(): DeleteLaunchTemplateRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var launchTemplateId: String? = null
        override var launchTemplateName: String? = null

        constructor(x: DeleteLaunchTemplateRequest) : this() {
            this.dryRun = x.dryRun
            this.launchTemplateId = x.launchTemplateId
            this.launchTemplateName = x.launchTemplateName
        }

        override fun build(): DeleteLaunchTemplateRequest = DeleteLaunchTemplateRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun launchTemplateId(launchTemplateId: String): FluentBuilder = apply { this.launchTemplateId = launchTemplateId }
        override fun launchTemplateName(launchTemplateName: String): FluentBuilder = apply { this.launchTemplateName = launchTemplateName }
    }
}
