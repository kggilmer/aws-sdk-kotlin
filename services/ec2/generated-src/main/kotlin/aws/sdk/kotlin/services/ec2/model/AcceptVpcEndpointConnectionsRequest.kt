// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class AcceptVpcEndpointConnectionsRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The ID of the VPC endpoint service.
     */
    val serviceId: String? = builder.serviceId
    /**
     * The IDs of one or more interface VPC endpoints.
     */
    val vpcEndpointIds: List<String>? = builder.vpcEndpointIds

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): AcceptVpcEndpointConnectionsRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("AcceptVpcEndpointConnectionsRequest(")
        append("dryRun=$dryRun,")
        append("serviceId=$serviceId,")
        append("vpcEndpointIds=$vpcEndpointIds)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (serviceId?.hashCode() ?: 0)
        result = 31 * result + (vpcEndpointIds?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as AcceptVpcEndpointConnectionsRequest

        if (dryRun != other.dryRun) return false
        if (serviceId != other.serviceId) return false
        if (vpcEndpointIds != other.vpcEndpointIds) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): AcceptVpcEndpointConnectionsRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): AcceptVpcEndpointConnectionsRequest
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The ID of the VPC endpoint service.
         */
        fun serviceId(serviceId: String): FluentBuilder
        /**
         * The IDs of one or more interface VPC endpoints.
         */
        fun vpcEndpointIds(vpcEndpointIds: List<String>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The ID of the VPC endpoint service.
         */
        var serviceId: String?
        /**
         * The IDs of one or more interface VPC endpoints.
         */
        var vpcEndpointIds: List<String>?

        fun build(): AcceptVpcEndpointConnectionsRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var serviceId: String? = null
        override var vpcEndpointIds: List<String>? = null

        constructor(x: AcceptVpcEndpointConnectionsRequest) : this() {
            this.dryRun = x.dryRun
            this.serviceId = x.serviceId
            this.vpcEndpointIds = x.vpcEndpointIds
        }

        override fun build(): AcceptVpcEndpointConnectionsRequest = AcceptVpcEndpointConnectionsRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun serviceId(serviceId: String): FluentBuilder = apply { this.serviceId = serviceId }
        override fun vpcEndpointIds(vpcEndpointIds: List<String>): FluentBuilder = apply { this.vpcEndpointIds = vpcEndpointIds }
    }
}
