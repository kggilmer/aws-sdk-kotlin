// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a disk image volume.
 */
class DiskImageVolumeDescription private constructor(builder: BuilderImpl) {
    /**
     * The volume identifier.
     */
    val id: String? = builder.id
    /**
     * The size of the volume, in GiB.
     */
    val size: Long? = builder.size

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DiskImageVolumeDescription = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DiskImageVolumeDescription(")
        append("id=$id,")
        append("size=$size)")
    }

    override fun hashCode(): kotlin.Int {
        var result = id?.hashCode() ?: 0
        result = 31 * result + (size?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DiskImageVolumeDescription

        if (id != other.id) return false
        if (size != other.size) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DiskImageVolumeDescription = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DiskImageVolumeDescription
        /**
         * The volume identifier.
         */
        fun id(id: String): FluentBuilder
        /**
         * The size of the volume, in GiB.
         */
        fun size(size: Long): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The volume identifier.
         */
        var id: String?
        /**
         * The size of the volume, in GiB.
         */
        var size: Long?

        fun build(): DiskImageVolumeDescription
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var id: String? = null
        override var size: Long? = null

        constructor(x: DiskImageVolumeDescription) : this() {
            this.id = x.id
            this.size = x.size
        }

        override fun build(): DiskImageVolumeDescription = DiskImageVolumeDescription(this)
        override fun id(id: String): FluentBuilder = apply { this.id = id }
        override fun size(size: Long): FluentBuilder = apply { this.size = size }
    }
}
