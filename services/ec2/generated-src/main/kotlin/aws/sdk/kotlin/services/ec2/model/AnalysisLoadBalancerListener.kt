// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a load balancer listener.
 */
class AnalysisLoadBalancerListener private constructor(builder: BuilderImpl) {
    /**
     * &#91;Classic Load Balancers&#93; The back-end port for the listener.
     */
    val instancePort: Int? = builder.instancePort
    /**
     * The port on which the load balancer is listening.
     */
    val loadBalancerPort: Int? = builder.loadBalancerPort

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): AnalysisLoadBalancerListener = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("AnalysisLoadBalancerListener(")
        append("instancePort=$instancePort,")
        append("loadBalancerPort=$loadBalancerPort)")
    }

    override fun hashCode(): kotlin.Int {
        var result = instancePort ?: 0
        result = 31 * result + (loadBalancerPort ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as AnalysisLoadBalancerListener

        if (instancePort != other.instancePort) return false
        if (loadBalancerPort != other.loadBalancerPort) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): AnalysisLoadBalancerListener = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): AnalysisLoadBalancerListener
        /**
         * &#91;Classic Load Balancers&#93; The back-end port for the listener.
         */
        fun instancePort(instancePort: Int): FluentBuilder
        /**
         * The port on which the load balancer is listening.
         */
        fun loadBalancerPort(loadBalancerPort: Int): FluentBuilder
    }

    interface DslBuilder {
        /**
         * &#91;Classic Load Balancers&#93; The back-end port for the listener.
         */
        var instancePort: Int?
        /**
         * The port on which the load balancer is listening.
         */
        var loadBalancerPort: Int?

        fun build(): AnalysisLoadBalancerListener
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var instancePort: Int? = null
        override var loadBalancerPort: Int? = null

        constructor(x: AnalysisLoadBalancerListener) : this() {
            this.instancePort = x.instancePort
            this.loadBalancerPort = x.loadBalancerPort
        }

        override fun build(): AnalysisLoadBalancerListener = AnalysisLoadBalancerListener(this)
        override fun instancePort(instancePort: Int): FluentBuilder = apply { this.instancePort = instancePort }
        override fun loadBalancerPort(loadBalancerPort: Int): FluentBuilder = apply { this.loadBalancerPort = loadBalancerPort }
    }
}
