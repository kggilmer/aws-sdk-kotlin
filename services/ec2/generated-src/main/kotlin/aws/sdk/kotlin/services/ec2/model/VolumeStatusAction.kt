// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a volume status operation code.
 */
class VolumeStatusAction private constructor(builder: BuilderImpl) {
    /**
     * The code identifying the operation, for example, enable-volume-io.
     */
    val code: String? = builder.code
    /**
     * A description of the operation.
     */
    val description: String? = builder.description
    /**
     * The ID of the event associated with this operation.
     */
    val eventId: String? = builder.eventId
    /**
     * The event type associated with this operation.
     */
    val eventType: String? = builder.eventType

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): VolumeStatusAction = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("VolumeStatusAction(")
        append("code=$code,")
        append("description=$description,")
        append("eventId=$eventId,")
        append("eventType=$eventType)")
    }

    override fun hashCode(): kotlin.Int {
        var result = code?.hashCode() ?: 0
        result = 31 * result + (description?.hashCode() ?: 0)
        result = 31 * result + (eventId?.hashCode() ?: 0)
        result = 31 * result + (eventType?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as VolumeStatusAction

        if (code != other.code) return false
        if (description != other.description) return false
        if (eventId != other.eventId) return false
        if (eventType != other.eventType) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): VolumeStatusAction = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): VolumeStatusAction
        /**
         * The code identifying the operation, for example, enable-volume-io.
         */
        fun code(code: String): FluentBuilder
        /**
         * A description of the operation.
         */
        fun description(description: String): FluentBuilder
        /**
         * The ID of the event associated with this operation.
         */
        fun eventId(eventId: String): FluentBuilder
        /**
         * The event type associated with this operation.
         */
        fun eventType(eventType: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The code identifying the operation, for example, enable-volume-io.
         */
        var code: String?
        /**
         * A description of the operation.
         */
        var description: String?
        /**
         * The ID of the event associated with this operation.
         */
        var eventId: String?
        /**
         * The event type associated with this operation.
         */
        var eventType: String?

        fun build(): VolumeStatusAction
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var code: String? = null
        override var description: String? = null
        override var eventId: String? = null
        override var eventType: String? = null

        constructor(x: VolumeStatusAction) : this() {
            this.code = x.code
            this.description = x.description
            this.eventId = x.eventId
            this.eventType = x.eventType
        }

        override fun build(): VolumeStatusAction = VolumeStatusAction(this)
        override fun code(code: String): FluentBuilder = apply { this.code = code }
        override fun description(description: String): FluentBuilder = apply { this.description = description }
        override fun eventId(eventId: String): FluentBuilder = apply { this.eventId = eventId }
        override fun eventType(eventType: String): FluentBuilder = apply { this.eventType = eventType }
    }
}
