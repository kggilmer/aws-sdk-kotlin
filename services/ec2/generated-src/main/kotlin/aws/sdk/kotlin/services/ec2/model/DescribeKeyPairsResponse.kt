// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class DescribeKeyPairsResponse private constructor(builder: BuilderImpl) {
    /**
     * Information about the key pairs.
     */
    val keyPairs: List<KeyPairInfo>? = builder.keyPairs

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DescribeKeyPairsResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DescribeKeyPairsResponse(")
        append("keyPairs=$keyPairs)")
    }

    override fun hashCode(): kotlin.Int {
        var result = keyPairs?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DescribeKeyPairsResponse

        if (keyPairs != other.keyPairs) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DescribeKeyPairsResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DescribeKeyPairsResponse
        /**
         * Information about the key pairs.
         */
        fun keyPairs(keyPairs: List<KeyPairInfo>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Information about the key pairs.
         */
        var keyPairs: List<KeyPairInfo>?

        fun build(): DescribeKeyPairsResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var keyPairs: List<KeyPairInfo>? = null

        constructor(x: DescribeKeyPairsResponse) : this() {
            this.keyPairs = x.keyPairs
        }

        override fun build(): DescribeKeyPairsResponse = DescribeKeyPairsResponse(this)
        override fun keyPairs(keyPairs: List<KeyPairInfo>): FluentBuilder = apply { this.keyPairs = keyPairs }
    }
}
