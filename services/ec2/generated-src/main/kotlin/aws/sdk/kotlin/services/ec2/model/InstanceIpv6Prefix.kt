// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Information about an IPv6 prefix.
 */
class InstanceIpv6Prefix private constructor(builder: BuilderImpl) {
    /**
     * One or more IPv6 prefixes assigned to the network interface.
     */
    val ipv6Prefix: String? = builder.ipv6Prefix

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): InstanceIpv6Prefix = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("InstanceIpv6Prefix(")
        append("ipv6Prefix=$ipv6Prefix)")
    }

    override fun hashCode(): kotlin.Int {
        var result = ipv6Prefix?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as InstanceIpv6Prefix

        if (ipv6Prefix != other.ipv6Prefix) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): InstanceIpv6Prefix = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): InstanceIpv6Prefix
        /**
         * One or more IPv6 prefixes assigned to the network interface.
         */
        fun ipv6Prefix(ipv6Prefix: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * One or more IPv6 prefixes assigned to the network interface.
         */
        var ipv6Prefix: String?

        fun build(): InstanceIpv6Prefix
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var ipv6Prefix: String? = null

        constructor(x: InstanceIpv6Prefix) : this() {
            this.ipv6Prefix = x.ipv6Prefix
        }

        override fun build(): InstanceIpv6Prefix = InstanceIpv6Prefix(this)
        override fun ipv6Prefix(ipv6Prefix: String): FluentBuilder = apply { this.ipv6Prefix = ipv6Prefix }
    }
}
