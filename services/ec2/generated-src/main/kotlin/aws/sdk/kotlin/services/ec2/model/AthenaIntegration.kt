// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model

import aws.smithy.kotlin.runtime.time.Instant

/**
 * Describes integration options for Amazon Athena.
 */
class AthenaIntegration private constructor(builder: BuilderImpl) {
    /**
     * The location in Amazon S3 to store the generated CloudFormation template.
     */
    val integrationResultS3DestinationArn: String? = builder.integrationResultS3DestinationArn
    /**
     * The end date for the partition.
     */
    val partitionEndDate: Instant? = builder.partitionEndDate
    /**
     * The schedule for adding new partitions to the table.
     */
    val partitionLoadFrequency: PartitionLoadFrequency? = builder.partitionLoadFrequency
    /**
     * The start date for the partition.
     */
    val partitionStartDate: Instant? = builder.partitionStartDate

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): AthenaIntegration = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("AthenaIntegration(")
        append("integrationResultS3DestinationArn=$integrationResultS3DestinationArn,")
        append("partitionEndDate=$partitionEndDate,")
        append("partitionLoadFrequency=$partitionLoadFrequency,")
        append("partitionStartDate=$partitionStartDate)")
    }

    override fun hashCode(): kotlin.Int {
        var result = integrationResultS3DestinationArn?.hashCode() ?: 0
        result = 31 * result + (partitionEndDate?.hashCode() ?: 0)
        result = 31 * result + (partitionLoadFrequency?.hashCode() ?: 0)
        result = 31 * result + (partitionStartDate?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as AthenaIntegration

        if (integrationResultS3DestinationArn != other.integrationResultS3DestinationArn) return false
        if (partitionEndDate != other.partitionEndDate) return false
        if (partitionLoadFrequency != other.partitionLoadFrequency) return false
        if (partitionStartDate != other.partitionStartDate) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): AthenaIntegration = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): AthenaIntegration
        /**
         * The location in Amazon S3 to store the generated CloudFormation template.
         */
        fun integrationResultS3DestinationArn(integrationResultS3DestinationArn: String): FluentBuilder
        /**
         * The end date for the partition.
         */
        fun partitionEndDate(partitionEndDate: Instant): FluentBuilder
        /**
         * The schedule for adding new partitions to the table.
         */
        fun partitionLoadFrequency(partitionLoadFrequency: PartitionLoadFrequency): FluentBuilder
        /**
         * The start date for the partition.
         */
        fun partitionStartDate(partitionStartDate: Instant): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The location in Amazon S3 to store the generated CloudFormation template.
         */
        var integrationResultS3DestinationArn: String?
        /**
         * The end date for the partition.
         */
        var partitionEndDate: Instant?
        /**
         * The schedule for adding new partitions to the table.
         */
        var partitionLoadFrequency: PartitionLoadFrequency?
        /**
         * The start date for the partition.
         */
        var partitionStartDate: Instant?

        fun build(): AthenaIntegration
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var integrationResultS3DestinationArn: String? = null
        override var partitionEndDate: Instant? = null
        override var partitionLoadFrequency: PartitionLoadFrequency? = null
        override var partitionStartDate: Instant? = null

        constructor(x: AthenaIntegration) : this() {
            this.integrationResultS3DestinationArn = x.integrationResultS3DestinationArn
            this.partitionEndDate = x.partitionEndDate
            this.partitionLoadFrequency = x.partitionLoadFrequency
            this.partitionStartDate = x.partitionStartDate
        }

        override fun build(): AthenaIntegration = AthenaIntegration(this)
        override fun integrationResultS3DestinationArn(integrationResultS3DestinationArn: String): FluentBuilder = apply { this.integrationResultS3DestinationArn = integrationResultS3DestinationArn }
        override fun partitionEndDate(partitionEndDate: Instant): FluentBuilder = apply { this.partitionEndDate = partitionEndDate }
        override fun partitionLoadFrequency(partitionLoadFrequency: PartitionLoadFrequency): FluentBuilder = apply { this.partitionLoadFrequency = partitionLoadFrequency }
        override fun partitionStartDate(partitionStartDate: Instant): FluentBuilder = apply { this.partitionStartDate = partitionStartDate }
    }
}
