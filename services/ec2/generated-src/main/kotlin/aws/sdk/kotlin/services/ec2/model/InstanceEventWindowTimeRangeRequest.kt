// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * The start day and time and the end day and time of the time range, in UTC.
 */
class InstanceEventWindowTimeRangeRequest private constructor(builder: BuilderImpl) {
    /**
     * The hour when the time range ends.
     */
    val endHour: Int? = builder.endHour
    /**
     * The day on which the time range ends.
     */
    val endWeekDay: WeekDay? = builder.endWeekDay
    /**
     * The hour when the time range begins.
     */
    val startHour: Int? = builder.startHour
    /**
     * The day on which the time range begins.
     */
    val startWeekDay: WeekDay? = builder.startWeekDay

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): InstanceEventWindowTimeRangeRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("InstanceEventWindowTimeRangeRequest(")
        append("endHour=$endHour,")
        append("endWeekDay=$endWeekDay,")
        append("startHour=$startHour,")
        append("startWeekDay=$startWeekDay)")
    }

    override fun hashCode(): kotlin.Int {
        var result = endHour ?: 0
        result = 31 * result + (endWeekDay?.hashCode() ?: 0)
        result = 31 * result + (startHour ?: 0)
        result = 31 * result + (startWeekDay?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as InstanceEventWindowTimeRangeRequest

        if (endHour != other.endHour) return false
        if (endWeekDay != other.endWeekDay) return false
        if (startHour != other.startHour) return false
        if (startWeekDay != other.startWeekDay) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): InstanceEventWindowTimeRangeRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): InstanceEventWindowTimeRangeRequest
        /**
         * The hour when the time range ends.
         */
        fun endHour(endHour: Int): FluentBuilder
        /**
         * The day on which the time range ends.
         */
        fun endWeekDay(endWeekDay: WeekDay): FluentBuilder
        /**
         * The hour when the time range begins.
         */
        fun startHour(startHour: Int): FluentBuilder
        /**
         * The day on which the time range begins.
         */
        fun startWeekDay(startWeekDay: WeekDay): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The hour when the time range ends.
         */
        var endHour: Int?
        /**
         * The day on which the time range ends.
         */
        var endWeekDay: WeekDay?
        /**
         * The hour when the time range begins.
         */
        var startHour: Int?
        /**
         * The day on which the time range begins.
         */
        var startWeekDay: WeekDay?

        fun build(): InstanceEventWindowTimeRangeRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var endHour: Int? = null
        override var endWeekDay: WeekDay? = null
        override var startHour: Int? = null
        override var startWeekDay: WeekDay? = null

        constructor(x: InstanceEventWindowTimeRangeRequest) : this() {
            this.endHour = x.endHour
            this.endWeekDay = x.endWeekDay
            this.startHour = x.startHour
            this.startWeekDay = x.startWeekDay
        }

        override fun build(): InstanceEventWindowTimeRangeRequest = InstanceEventWindowTimeRangeRequest(this)
        override fun endHour(endHour: Int): FluentBuilder = apply { this.endHour = endHour }
        override fun endWeekDay(endWeekDay: WeekDay): FluentBuilder = apply { this.endWeekDay = endWeekDay }
        override fun startHour(startHour: Int): FluentBuilder = apply { this.startHour = startHour }
        override fun startWeekDay(startWeekDay: WeekDay): FluentBuilder = apply { this.startWeekDay = startWeekDay }
    }
}
