// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Contains the parameters for ModifyVpcEndpoint.
 */
class ModifyVpcEndpointRequest private constructor(builder: BuilderImpl) {
    /**
     * (Gateway endpoint) One or more route tables IDs to associate with the endpoint.
     */
    val addRouteTableIds: List<String>? = builder.addRouteTableIds
    /**
     * (Interface endpoint) One or more security group IDs to associate with the network interface.
     */
    val addSecurityGroupIds: List<String>? = builder.addSecurityGroupIds
    /**
     * (Interface and Gateway Load Balancer endpoints) One or more subnet IDs in which to serve the endpoint. For a Gateway Load Balancer endpoint, you can specify only one subnet.
     */
    val addSubnetIds: List<String>? = builder.addSubnetIds
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * (Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must
     * be in valid JSON format.
     */
    val policyDocument: String? = builder.policyDocument
    /**
     * (Interface endpoint) Indicates whether a private hosted zone is associated with the
     * VPC.
     */
    val privateDnsEnabled: Boolean? = builder.privateDnsEnabled
    /**
     * (Gateway endpoint) One or more route table IDs to disassociate from the endpoint.
     */
    val removeRouteTableIds: List<String>? = builder.removeRouteTableIds
    /**
     * (Interface endpoint) One or more security group IDs to disassociate from the network interface.
     */
    val removeSecurityGroupIds: List<String>? = builder.removeSecurityGroupIds
    /**
     * (Interface endpoint) One or more subnets IDs in which to remove the endpoint.
     */
    val removeSubnetIds: List<String>? = builder.removeSubnetIds
    /**
     * (Gateway endpoint) Specify true to reset the policy document to the
     * default policy. The default policy allows full access to the service.
     */
    val resetPolicy: Boolean? = builder.resetPolicy
    /**
     * The ID of the endpoint.
     */
    val vpcEndpointId: String? = builder.vpcEndpointId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ModifyVpcEndpointRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyVpcEndpointRequest(")
        append("addRouteTableIds=$addRouteTableIds,")
        append("addSecurityGroupIds=$addSecurityGroupIds,")
        append("addSubnetIds=$addSubnetIds,")
        append("dryRun=$dryRun,")
        append("policyDocument=$policyDocument,")
        append("privateDnsEnabled=$privateDnsEnabled,")
        append("removeRouteTableIds=$removeRouteTableIds,")
        append("removeSecurityGroupIds=$removeSecurityGroupIds,")
        append("removeSubnetIds=$removeSubnetIds,")
        append("resetPolicy=$resetPolicy,")
        append("vpcEndpointId=$vpcEndpointId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = addRouteTableIds?.hashCode() ?: 0
        result = 31 * result + (addSecurityGroupIds?.hashCode() ?: 0)
        result = 31 * result + (addSubnetIds?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (policyDocument?.hashCode() ?: 0)
        result = 31 * result + (privateDnsEnabled?.hashCode() ?: 0)
        result = 31 * result + (removeRouteTableIds?.hashCode() ?: 0)
        result = 31 * result + (removeSecurityGroupIds?.hashCode() ?: 0)
        result = 31 * result + (removeSubnetIds?.hashCode() ?: 0)
        result = 31 * result + (resetPolicy?.hashCode() ?: 0)
        result = 31 * result + (vpcEndpointId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ModifyVpcEndpointRequest

        if (addRouteTableIds != other.addRouteTableIds) return false
        if (addSecurityGroupIds != other.addSecurityGroupIds) return false
        if (addSubnetIds != other.addSubnetIds) return false
        if (dryRun != other.dryRun) return false
        if (policyDocument != other.policyDocument) return false
        if (privateDnsEnabled != other.privateDnsEnabled) return false
        if (removeRouteTableIds != other.removeRouteTableIds) return false
        if (removeSecurityGroupIds != other.removeSecurityGroupIds) return false
        if (removeSubnetIds != other.removeSubnetIds) return false
        if (resetPolicy != other.resetPolicy) return false
        if (vpcEndpointId != other.vpcEndpointId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ModifyVpcEndpointRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ModifyVpcEndpointRequest
        /**
         * (Gateway endpoint) One or more route tables IDs to associate with the endpoint.
         */
        fun addRouteTableIds(addRouteTableIds: List<String>): FluentBuilder
        /**
         * (Interface endpoint) One or more security group IDs to associate with the network interface.
         */
        fun addSecurityGroupIds(addSecurityGroupIds: List<String>): FluentBuilder
        /**
         * (Interface and Gateway Load Balancer endpoints) One or more subnet IDs in which to serve the endpoint. For a Gateway Load Balancer endpoint, you can specify only one subnet.
         */
        fun addSubnetIds(addSubnetIds: List<String>): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * (Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must
         * be in valid JSON format.
         */
        fun policyDocument(policyDocument: String): FluentBuilder
        /**
         * (Interface endpoint) Indicates whether a private hosted zone is associated with the
         * VPC.
         */
        fun privateDnsEnabled(privateDnsEnabled: Boolean): FluentBuilder
        /**
         * (Gateway endpoint) One or more route table IDs to disassociate from the endpoint.
         */
        fun removeRouteTableIds(removeRouteTableIds: List<String>): FluentBuilder
        /**
         * (Interface endpoint) One or more security group IDs to disassociate from the network interface.
         */
        fun removeSecurityGroupIds(removeSecurityGroupIds: List<String>): FluentBuilder
        /**
         * (Interface endpoint) One or more subnets IDs in which to remove the endpoint.
         */
        fun removeSubnetIds(removeSubnetIds: List<String>): FluentBuilder
        /**
         * (Gateway endpoint) Specify true to reset the policy document to the
         * default policy. The default policy allows full access to the service.
         */
        fun resetPolicy(resetPolicy: Boolean): FluentBuilder
        /**
         * The ID of the endpoint.
         */
        fun vpcEndpointId(vpcEndpointId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * (Gateway endpoint) One or more route tables IDs to associate with the endpoint.
         */
        var addRouteTableIds: List<String>?
        /**
         * (Interface endpoint) One or more security group IDs to associate with the network interface.
         */
        var addSecurityGroupIds: List<String>?
        /**
         * (Interface and Gateway Load Balancer endpoints) One or more subnet IDs in which to serve the endpoint. For a Gateway Load Balancer endpoint, you can specify only one subnet.
         */
        var addSubnetIds: List<String>?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * (Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must
         * be in valid JSON format.
         */
        var policyDocument: String?
        /**
         * (Interface endpoint) Indicates whether a private hosted zone is associated with the
         * VPC.
         */
        var privateDnsEnabled: Boolean?
        /**
         * (Gateway endpoint) One or more route table IDs to disassociate from the endpoint.
         */
        var removeRouteTableIds: List<String>?
        /**
         * (Interface endpoint) One or more security group IDs to disassociate from the network interface.
         */
        var removeSecurityGroupIds: List<String>?
        /**
         * (Interface endpoint) One or more subnets IDs in which to remove the endpoint.
         */
        var removeSubnetIds: List<String>?
        /**
         * (Gateway endpoint) Specify true to reset the policy document to the
         * default policy. The default policy allows full access to the service.
         */
        var resetPolicy: Boolean?
        /**
         * The ID of the endpoint.
         */
        var vpcEndpointId: String?

        fun build(): ModifyVpcEndpointRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var addRouteTableIds: List<String>? = null
        override var addSecurityGroupIds: List<String>? = null
        override var addSubnetIds: List<String>? = null
        override var dryRun: Boolean? = null
        override var policyDocument: String? = null
        override var privateDnsEnabled: Boolean? = null
        override var removeRouteTableIds: List<String>? = null
        override var removeSecurityGroupIds: List<String>? = null
        override var removeSubnetIds: List<String>? = null
        override var resetPolicy: Boolean? = null
        override var vpcEndpointId: String? = null

        constructor(x: ModifyVpcEndpointRequest) : this() {
            this.addRouteTableIds = x.addRouteTableIds
            this.addSecurityGroupIds = x.addSecurityGroupIds
            this.addSubnetIds = x.addSubnetIds
            this.dryRun = x.dryRun
            this.policyDocument = x.policyDocument
            this.privateDnsEnabled = x.privateDnsEnabled
            this.removeRouteTableIds = x.removeRouteTableIds
            this.removeSecurityGroupIds = x.removeSecurityGroupIds
            this.removeSubnetIds = x.removeSubnetIds
            this.resetPolicy = x.resetPolicy
            this.vpcEndpointId = x.vpcEndpointId
        }

        override fun build(): ModifyVpcEndpointRequest = ModifyVpcEndpointRequest(this)
        override fun addRouteTableIds(addRouteTableIds: List<String>): FluentBuilder = apply { this.addRouteTableIds = addRouteTableIds }
        override fun addSecurityGroupIds(addSecurityGroupIds: List<String>): FluentBuilder = apply { this.addSecurityGroupIds = addSecurityGroupIds }
        override fun addSubnetIds(addSubnetIds: List<String>): FluentBuilder = apply { this.addSubnetIds = addSubnetIds }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun policyDocument(policyDocument: String): FluentBuilder = apply { this.policyDocument = policyDocument }
        override fun privateDnsEnabled(privateDnsEnabled: Boolean): FluentBuilder = apply { this.privateDnsEnabled = privateDnsEnabled }
        override fun removeRouteTableIds(removeRouteTableIds: List<String>): FluentBuilder = apply { this.removeRouteTableIds = removeRouteTableIds }
        override fun removeSecurityGroupIds(removeSecurityGroupIds: List<String>): FluentBuilder = apply { this.removeSecurityGroupIds = removeSecurityGroupIds }
        override fun removeSubnetIds(removeSubnetIds: List<String>): FluentBuilder = apply { this.removeSubnetIds = removeSubnetIds }
        override fun resetPolicy(resetPolicy: Boolean): FluentBuilder = apply { this.resetPolicy = resetPolicy }
        override fun vpcEndpointId(vpcEndpointId: String): FluentBuilder = apply { this.vpcEndpointId = vpcEndpointId }
    }
}
