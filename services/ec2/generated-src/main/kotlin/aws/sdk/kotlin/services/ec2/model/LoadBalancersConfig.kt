// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the Classic Load Balancers and target groups to attach to a Spot Fleet
 * request.
 */
class LoadBalancersConfig private constructor(builder: BuilderImpl) {
    /**
     * The Classic Load Balancers.
     */
    val classicLoadBalancersConfig: ClassicLoadBalancersConfig? = builder.classicLoadBalancersConfig
    /**
     * The target groups.
     */
    val targetGroupsConfig: TargetGroupsConfig? = builder.targetGroupsConfig

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): LoadBalancersConfig = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("LoadBalancersConfig(")
        append("classicLoadBalancersConfig=$classicLoadBalancersConfig,")
        append("targetGroupsConfig=$targetGroupsConfig)")
    }

    override fun hashCode(): kotlin.Int {
        var result = classicLoadBalancersConfig?.hashCode() ?: 0
        result = 31 * result + (targetGroupsConfig?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as LoadBalancersConfig

        if (classicLoadBalancersConfig != other.classicLoadBalancersConfig) return false
        if (targetGroupsConfig != other.targetGroupsConfig) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): LoadBalancersConfig = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): LoadBalancersConfig
        /**
         * The Classic Load Balancers.
         */
        fun classicLoadBalancersConfig(classicLoadBalancersConfig: ClassicLoadBalancersConfig): FluentBuilder
        /**
         * The target groups.
         */
        fun targetGroupsConfig(targetGroupsConfig: TargetGroupsConfig): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The Classic Load Balancers.
         */
        var classicLoadBalancersConfig: ClassicLoadBalancersConfig?
        /**
         * The target groups.
         */
        var targetGroupsConfig: TargetGroupsConfig?

        fun build(): LoadBalancersConfig
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.ClassicLoadBalancersConfig] inside the given [block]
         */
        fun classicLoadBalancersConfig(block: ClassicLoadBalancersConfig.DslBuilder.() -> kotlin.Unit) {
            this.classicLoadBalancersConfig = ClassicLoadBalancersConfig.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.TargetGroupsConfig] inside the given [block]
         */
        fun targetGroupsConfig(block: TargetGroupsConfig.DslBuilder.() -> kotlin.Unit) {
            this.targetGroupsConfig = TargetGroupsConfig.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var classicLoadBalancersConfig: ClassicLoadBalancersConfig? = null
        override var targetGroupsConfig: TargetGroupsConfig? = null

        constructor(x: LoadBalancersConfig) : this() {
            this.classicLoadBalancersConfig = x.classicLoadBalancersConfig
            this.targetGroupsConfig = x.targetGroupsConfig
        }

        override fun build(): LoadBalancersConfig = LoadBalancersConfig(this)
        override fun classicLoadBalancersConfig(classicLoadBalancersConfig: ClassicLoadBalancersConfig): FluentBuilder = apply { this.classicLoadBalancersConfig = classicLoadBalancersConfig }
        override fun targetGroupsConfig(targetGroupsConfig: TargetGroupsConfig): FluentBuilder = apply { this.targetGroupsConfig = targetGroupsConfig }
    }
}
