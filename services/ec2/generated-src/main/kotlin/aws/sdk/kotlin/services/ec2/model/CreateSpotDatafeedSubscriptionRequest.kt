// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Contains the parameters for CreateSpotDatafeedSubscription.
 */
class CreateSpotDatafeedSubscriptionRequest private constructor(builder: BuilderImpl) {
    /**
     * The name of the Amazon S3 bucket in which to store the Spot Instance data feed. For
     * more information about bucket names, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html#bucketnamingrules">Rules for bucket
     * naming in the Amazon S3 Developer Guide.
     */
    val bucket: String? = builder.bucket
    /**
     * Checks whether you have the required permissions for the action, without actually
     * making the request, and provides an error response. If you have the required
     * permissions, the error response is DryRunOperation. Otherwise, it is
     * UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The prefix for the data feed file names.
     */
    val prefix: String? = builder.prefix

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CreateSpotDatafeedSubscriptionRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CreateSpotDatafeedSubscriptionRequest(")
        append("bucket=$bucket,")
        append("dryRun=$dryRun,")
        append("prefix=$prefix)")
    }

    override fun hashCode(): kotlin.Int {
        var result = bucket?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (prefix?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CreateSpotDatafeedSubscriptionRequest

        if (bucket != other.bucket) return false
        if (dryRun != other.dryRun) return false
        if (prefix != other.prefix) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CreateSpotDatafeedSubscriptionRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CreateSpotDatafeedSubscriptionRequest
        /**
         * The name of the Amazon S3 bucket in which to store the Spot Instance data feed. For
         * more information about bucket names, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html#bucketnamingrules">Rules for bucket
         * naming in the Amazon S3 Developer Guide.
         */
        fun bucket(bucket: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually
         * making the request, and provides an error response. If you have the required
         * permissions, the error response is DryRunOperation. Otherwise, it is
         * UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The prefix for the data feed file names.
         */
        fun prefix(prefix: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The name of the Amazon S3 bucket in which to store the Spot Instance data feed. For
         * more information about bucket names, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html#bucketnamingrules">Rules for bucket
         * naming in the Amazon S3 Developer Guide.
         */
        var bucket: String?
        /**
         * Checks whether you have the required permissions for the action, without actually
         * making the request, and provides an error response. If you have the required
         * permissions, the error response is DryRunOperation. Otherwise, it is
         * UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The prefix for the data feed file names.
         */
        var prefix: String?

        fun build(): CreateSpotDatafeedSubscriptionRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var bucket: String? = null
        override var dryRun: Boolean? = null
        override var prefix: String? = null

        constructor(x: CreateSpotDatafeedSubscriptionRequest) : this() {
            this.bucket = x.bucket
            this.dryRun = x.dryRun
            this.prefix = x.prefix
        }

        override fun build(): CreateSpotDatafeedSubscriptionRequest = CreateSpotDatafeedSubscriptionRequest(this)
        override fun bucket(bucket: String): FluentBuilder = apply { this.bucket = bucket }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun prefix(prefix: String): FluentBuilder = apply { this.prefix = prefix }
    }
}
