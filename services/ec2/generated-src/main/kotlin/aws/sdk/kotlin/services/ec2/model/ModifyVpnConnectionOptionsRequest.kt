// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ModifyVpnConnectionOptionsRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * Default: 0.0.0.0/0
     */
    val localIpv4NetworkCidr: String? = builder.localIpv4NetworkCidr
    /**
     * The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * Default: ::/0
     */
    val localIpv6NetworkCidr: String? = builder.localIpv6NetworkCidr
    /**
     * The IPv4 CIDR on the Amazon Web Services side of the VPN connection.
     * Default: 0.0.0.0/0
     */
    val remoteIpv4NetworkCidr: String? = builder.remoteIpv4NetworkCidr
    /**
     * The IPv6 CIDR on the Amazon Web Services side of the VPN connection.
     * Default: ::/0
     */
    val remoteIpv6NetworkCidr: String? = builder.remoteIpv6NetworkCidr
    /**
     * The ID of the Site-to-Site VPN connection.
     */
    val vpnConnectionId: String? = builder.vpnConnectionId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ModifyVpnConnectionOptionsRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyVpnConnectionOptionsRequest(")
        append("dryRun=$dryRun,")
        append("localIpv4NetworkCidr=$localIpv4NetworkCidr,")
        append("localIpv6NetworkCidr=$localIpv6NetworkCidr,")
        append("remoteIpv4NetworkCidr=$remoteIpv4NetworkCidr,")
        append("remoteIpv6NetworkCidr=$remoteIpv6NetworkCidr,")
        append("vpnConnectionId=$vpnConnectionId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (localIpv4NetworkCidr?.hashCode() ?: 0)
        result = 31 * result + (localIpv6NetworkCidr?.hashCode() ?: 0)
        result = 31 * result + (remoteIpv4NetworkCidr?.hashCode() ?: 0)
        result = 31 * result + (remoteIpv6NetworkCidr?.hashCode() ?: 0)
        result = 31 * result + (vpnConnectionId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ModifyVpnConnectionOptionsRequest

        if (dryRun != other.dryRun) return false
        if (localIpv4NetworkCidr != other.localIpv4NetworkCidr) return false
        if (localIpv6NetworkCidr != other.localIpv6NetworkCidr) return false
        if (remoteIpv4NetworkCidr != other.remoteIpv4NetworkCidr) return false
        if (remoteIpv6NetworkCidr != other.remoteIpv6NetworkCidr) return false
        if (vpnConnectionId != other.vpnConnectionId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ModifyVpnConnectionOptionsRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ModifyVpnConnectionOptionsRequest
        /**
         * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
         * Default: 0.0.0.0/0
         */
        fun localIpv4NetworkCidr(localIpv4NetworkCidr: String): FluentBuilder
        /**
         * The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
         * Default: ::/0
         */
        fun localIpv6NetworkCidr(localIpv6NetworkCidr: String): FluentBuilder
        /**
         * The IPv4 CIDR on the Amazon Web Services side of the VPN connection.
         * Default: 0.0.0.0/0
         */
        fun remoteIpv4NetworkCidr(remoteIpv4NetworkCidr: String): FluentBuilder
        /**
         * The IPv6 CIDR on the Amazon Web Services side of the VPN connection.
         * Default: ::/0
         */
        fun remoteIpv6NetworkCidr(remoteIpv6NetworkCidr: String): FluentBuilder
        /**
         * The ID of the Site-to-Site VPN connection.
         */
        fun vpnConnectionId(vpnConnectionId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
         * Default: 0.0.0.0/0
         */
        var localIpv4NetworkCidr: String?
        /**
         * The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
         * Default: ::/0
         */
        var localIpv6NetworkCidr: String?
        /**
         * The IPv4 CIDR on the Amazon Web Services side of the VPN connection.
         * Default: 0.0.0.0/0
         */
        var remoteIpv4NetworkCidr: String?
        /**
         * The IPv6 CIDR on the Amazon Web Services side of the VPN connection.
         * Default: ::/0
         */
        var remoteIpv6NetworkCidr: String?
        /**
         * The ID of the Site-to-Site VPN connection.
         */
        var vpnConnectionId: String?

        fun build(): ModifyVpnConnectionOptionsRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var localIpv4NetworkCidr: String? = null
        override var localIpv6NetworkCidr: String? = null
        override var remoteIpv4NetworkCidr: String? = null
        override var remoteIpv6NetworkCidr: String? = null
        override var vpnConnectionId: String? = null

        constructor(x: ModifyVpnConnectionOptionsRequest) : this() {
            this.dryRun = x.dryRun
            this.localIpv4NetworkCidr = x.localIpv4NetworkCidr
            this.localIpv6NetworkCidr = x.localIpv6NetworkCidr
            this.remoteIpv4NetworkCidr = x.remoteIpv4NetworkCidr
            this.remoteIpv6NetworkCidr = x.remoteIpv6NetworkCidr
            this.vpnConnectionId = x.vpnConnectionId
        }

        override fun build(): ModifyVpnConnectionOptionsRequest = ModifyVpnConnectionOptionsRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun localIpv4NetworkCidr(localIpv4NetworkCidr: String): FluentBuilder = apply { this.localIpv4NetworkCidr = localIpv4NetworkCidr }
        override fun localIpv6NetworkCidr(localIpv6NetworkCidr: String): FluentBuilder = apply { this.localIpv6NetworkCidr = localIpv6NetworkCidr }
        override fun remoteIpv4NetworkCidr(remoteIpv4NetworkCidr: String): FluentBuilder = apply { this.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr }
        override fun remoteIpv6NetworkCidr(remoteIpv6NetworkCidr: String): FluentBuilder = apply { this.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr }
        override fun vpnConnectionId(vpnConnectionId: String): FluentBuilder = apply { this.vpnConnectionId = vpnConnectionId }
    }
}
