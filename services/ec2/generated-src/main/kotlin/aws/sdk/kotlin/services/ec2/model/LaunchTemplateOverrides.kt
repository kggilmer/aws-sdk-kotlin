// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes overrides for a launch template.
 */
class LaunchTemplateOverrides private constructor(builder: BuilderImpl) {
    /**
     * The Availability Zone in which to launch the instances.
     */
    val availabilityZone: String? = builder.availabilityZone
    /**
     * The instance type.
     */
    val instanceType: InstanceType? = builder.instanceType
    /**
     * The priority for the launch template override. The highest priority is launched
     * first.
     * If OnDemandAllocationStrategy is set to prioritized, Spot Fleet
     * uses priority to determine which launch template override to use first in fulfilling
     * On-Demand capacity.
     * If the Spot AllocationStrategy is set to
     * capacityOptimizedPrioritized, Spot Fleet uses priority on a best-effort basis
     * to determine which launch template override to use in fulfilling Spot capacity, but
     * optimizes for capacity first.
     * Valid values are whole numbers starting at 0. The lower the number, the
     * higher the priority. If no number is set, the launch template override has the lowest
     * priority. You can set the same priority for different launch template overrides.
     */
    val priority: Double? = builder.priority
    /**
     * The maximum price per unit hour that you are willing to pay for a Spot
     * Instance.
     */
    val spotPrice: String? = builder.spotPrice
    /**
     * The ID of the subnet in which to launch the instances.
     */
    val subnetId: String? = builder.subnetId
    /**
     * The number of units provided by the specified instance type.
     */
    val weightedCapacity: Double? = builder.weightedCapacity

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): LaunchTemplateOverrides = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("LaunchTemplateOverrides(")
        append("availabilityZone=$availabilityZone,")
        append("instanceType=$instanceType,")
        append("priority=$priority,")
        append("spotPrice=$spotPrice,")
        append("subnetId=$subnetId,")
        append("weightedCapacity=$weightedCapacity)")
    }

    override fun hashCode(): kotlin.Int {
        var result = availabilityZone?.hashCode() ?: 0
        result = 31 * result + (instanceType?.hashCode() ?: 0)
        result = 31 * result + (priority?.hashCode() ?: 0)
        result = 31 * result + (spotPrice?.hashCode() ?: 0)
        result = 31 * result + (subnetId?.hashCode() ?: 0)
        result = 31 * result + (weightedCapacity?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as LaunchTemplateOverrides

        if (availabilityZone != other.availabilityZone) return false
        if (instanceType != other.instanceType) return false
        if (priority != other.priority) return false
        if (spotPrice != other.spotPrice) return false
        if (subnetId != other.subnetId) return false
        if (weightedCapacity != other.weightedCapacity) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): LaunchTemplateOverrides = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): LaunchTemplateOverrides
        /**
         * The Availability Zone in which to launch the instances.
         */
        fun availabilityZone(availabilityZone: String): FluentBuilder
        /**
         * The instance type.
         */
        fun instanceType(instanceType: InstanceType): FluentBuilder
        /**
         * The priority for the launch template override. The highest priority is launched
         * first.
         * If OnDemandAllocationStrategy is set to prioritized, Spot Fleet
         * uses priority to determine which launch template override to use first in fulfilling
         * On-Demand capacity.
         * If the Spot AllocationStrategy is set to
         * capacityOptimizedPrioritized, Spot Fleet uses priority on a best-effort basis
         * to determine which launch template override to use in fulfilling Spot capacity, but
         * optimizes for capacity first.
         * Valid values are whole numbers starting at 0. The lower the number, the
         * higher the priority. If no number is set, the launch template override has the lowest
         * priority. You can set the same priority for different launch template overrides.
         */
        fun priority(priority: Double): FluentBuilder
        /**
         * The maximum price per unit hour that you are willing to pay for a Spot
         * Instance.
         */
        fun spotPrice(spotPrice: String): FluentBuilder
        /**
         * The ID of the subnet in which to launch the instances.
         */
        fun subnetId(subnetId: String): FluentBuilder
        /**
         * The number of units provided by the specified instance type.
         */
        fun weightedCapacity(weightedCapacity: Double): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The Availability Zone in which to launch the instances.
         */
        var availabilityZone: String?
        /**
         * The instance type.
         */
        var instanceType: InstanceType?
        /**
         * The priority for the launch template override. The highest priority is launched
         * first.
         * If OnDemandAllocationStrategy is set to prioritized, Spot Fleet
         * uses priority to determine which launch template override to use first in fulfilling
         * On-Demand capacity.
         * If the Spot AllocationStrategy is set to
         * capacityOptimizedPrioritized, Spot Fleet uses priority on a best-effort basis
         * to determine which launch template override to use in fulfilling Spot capacity, but
         * optimizes for capacity first.
         * Valid values are whole numbers starting at 0. The lower the number, the
         * higher the priority. If no number is set, the launch template override has the lowest
         * priority. You can set the same priority for different launch template overrides.
         */
        var priority: Double?
        /**
         * The maximum price per unit hour that you are willing to pay for a Spot
         * Instance.
         */
        var spotPrice: String?
        /**
         * The ID of the subnet in which to launch the instances.
         */
        var subnetId: String?
        /**
         * The number of units provided by the specified instance type.
         */
        var weightedCapacity: Double?

        fun build(): LaunchTemplateOverrides
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var availabilityZone: String? = null
        override var instanceType: InstanceType? = null
        override var priority: Double? = null
        override var spotPrice: String? = null
        override var subnetId: String? = null
        override var weightedCapacity: Double? = null

        constructor(x: LaunchTemplateOverrides) : this() {
            this.availabilityZone = x.availabilityZone
            this.instanceType = x.instanceType
            this.priority = x.priority
            this.spotPrice = x.spotPrice
            this.subnetId = x.subnetId
            this.weightedCapacity = x.weightedCapacity
        }

        override fun build(): LaunchTemplateOverrides = LaunchTemplateOverrides(this)
        override fun availabilityZone(availabilityZone: String): FluentBuilder = apply { this.availabilityZone = availabilityZone }
        override fun instanceType(instanceType: InstanceType): FluentBuilder = apply { this.instanceType = instanceType }
        override fun priority(priority: Double): FluentBuilder = apply { this.priority = priority }
        override fun spotPrice(spotPrice: String): FluentBuilder = apply { this.spotPrice = spotPrice }
        override fun subnetId(subnetId: String): FluentBuilder = apply { this.subnetId = subnetId }
        override fun weightedCapacity(weightedCapacity: Double): FluentBuilder = apply { this.weightedCapacity = weightedCapacity }
    }
}
