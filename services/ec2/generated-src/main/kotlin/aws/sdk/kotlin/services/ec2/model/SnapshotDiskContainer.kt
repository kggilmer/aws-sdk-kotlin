// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * The disk container object for the import snapshot request.
 */
class SnapshotDiskContainer private constructor(builder: BuilderImpl) {
    /**
     * The description of the disk image being imported.
     */
    val description: String? = builder.description
    /**
     * The format of the disk image being imported.
     * Valid values: VHD | VMDK | RAW
     */
    val format: String? = builder.format
    /**
     * The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon
     * S3 URL (s3://..).
     */
    val url: String? = builder.url
    /**
     * The Amazon S3 bucket for the disk image.
     */
    val userBucket: UserBucket? = builder.userBucket

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): SnapshotDiskContainer = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("SnapshotDiskContainer(")
        append("description=$description,")
        append("format=$format,")
        append("url=$url,")
        append("userBucket=$userBucket)")
    }

    override fun hashCode(): kotlin.Int {
        var result = description?.hashCode() ?: 0
        result = 31 * result + (format?.hashCode() ?: 0)
        result = 31 * result + (url?.hashCode() ?: 0)
        result = 31 * result + (userBucket?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as SnapshotDiskContainer

        if (description != other.description) return false
        if (format != other.format) return false
        if (url != other.url) return false
        if (userBucket != other.userBucket) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): SnapshotDiskContainer = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): SnapshotDiskContainer
        /**
         * The description of the disk image being imported.
         */
        fun description(description: String): FluentBuilder
        /**
         * The format of the disk image being imported.
         * Valid values: VHD | VMDK | RAW
         */
        fun format(format: String): FluentBuilder
        /**
         * The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon
         * S3 URL (s3://..).
         */
        fun url(url: String): FluentBuilder
        /**
         * The Amazon S3 bucket for the disk image.
         */
        fun userBucket(userBucket: UserBucket): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The description of the disk image being imported.
         */
        var description: String?
        /**
         * The format of the disk image being imported.
         * Valid values: VHD | VMDK | RAW
         */
        var format: String?
        /**
         * The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon
         * S3 URL (s3://..).
         */
        var url: String?
        /**
         * The Amazon S3 bucket for the disk image.
         */
        var userBucket: UserBucket?

        fun build(): SnapshotDiskContainer
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.UserBucket] inside the given [block]
         */
        fun userBucket(block: UserBucket.DslBuilder.() -> kotlin.Unit) {
            this.userBucket = UserBucket.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var description: String? = null
        override var format: String? = null
        override var url: String? = null
        override var userBucket: UserBucket? = null

        constructor(x: SnapshotDiskContainer) : this() {
            this.description = x.description
            this.format = x.format
            this.url = x.url
            this.userBucket = x.userBucket
        }

        override fun build(): SnapshotDiskContainer = SnapshotDiskContainer(this)
        override fun description(description: String): FluentBuilder = apply { this.description = description }
        override fun format(format: String): FluentBuilder = apply { this.format = format }
        override fun url(url: String): FluentBuilder = apply { this.url = url }
        override fun userBucket(userBucket: UserBucket): FluentBuilder = apply { this.userBucket = userBucket }
    }
}
