// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class GetSubnetCidrReservationsResponse private constructor(builder: BuilderImpl) {
    /**
     * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
     */
    val nextToken: String? = builder.nextToken
    /**
     * Information about the IPv4 subnet CIDR reservations.
     */
    val subnetIpv4CidrReservations: List<SubnetCidrReservation>? = builder.subnetIpv4CidrReservations
    /**
     * Information about the IPv6 subnet CIDR reservations.
     */
    val subnetIpv6CidrReservations: List<SubnetCidrReservation>? = builder.subnetIpv6CidrReservations

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): GetSubnetCidrReservationsResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("GetSubnetCidrReservationsResponse(")
        append("nextToken=$nextToken,")
        append("subnetIpv4CidrReservations=$subnetIpv4CidrReservations,")
        append("subnetIpv6CidrReservations=$subnetIpv6CidrReservations)")
    }

    override fun hashCode(): kotlin.Int {
        var result = nextToken?.hashCode() ?: 0
        result = 31 * result + (subnetIpv4CidrReservations?.hashCode() ?: 0)
        result = 31 * result + (subnetIpv6CidrReservations?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as GetSubnetCidrReservationsResponse

        if (nextToken != other.nextToken) return false
        if (subnetIpv4CidrReservations != other.subnetIpv4CidrReservations) return false
        if (subnetIpv6CidrReservations != other.subnetIpv6CidrReservations) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): GetSubnetCidrReservationsResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): GetSubnetCidrReservationsResponse
        /**
         * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
         */
        fun nextToken(nextToken: String): FluentBuilder
        /**
         * Information about the IPv4 subnet CIDR reservations.
         */
        fun subnetIpv4CidrReservations(subnetIpv4CidrReservations: List<SubnetCidrReservation>): FluentBuilder
        /**
         * Information about the IPv6 subnet CIDR reservations.
         */
        fun subnetIpv6CidrReservations(subnetIpv6CidrReservations: List<SubnetCidrReservation>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
         */
        var nextToken: String?
        /**
         * Information about the IPv4 subnet CIDR reservations.
         */
        var subnetIpv4CidrReservations: List<SubnetCidrReservation>?
        /**
         * Information about the IPv6 subnet CIDR reservations.
         */
        var subnetIpv6CidrReservations: List<SubnetCidrReservation>?

        fun build(): GetSubnetCidrReservationsResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var nextToken: String? = null
        override var subnetIpv4CidrReservations: List<SubnetCidrReservation>? = null
        override var subnetIpv6CidrReservations: List<SubnetCidrReservation>? = null

        constructor(x: GetSubnetCidrReservationsResponse) : this() {
            this.nextToken = x.nextToken
            this.subnetIpv4CidrReservations = x.subnetIpv4CidrReservations
            this.subnetIpv6CidrReservations = x.subnetIpv6CidrReservations
        }

        override fun build(): GetSubnetCidrReservationsResponse = GetSubnetCidrReservationsResponse(this)
        override fun nextToken(nextToken: String): FluentBuilder = apply { this.nextToken = nextToken }
        override fun subnetIpv4CidrReservations(subnetIpv4CidrReservations: List<SubnetCidrReservation>): FluentBuilder = apply { this.subnetIpv4CidrReservations = subnetIpv4CidrReservations }
        override fun subnetIpv6CidrReservations(subnetIpv6CidrReservations: List<SubnetCidrReservation>): FluentBuilder = apply { this.subnetIpv6CidrReservations = subnetIpv6CidrReservations }
    }
}
