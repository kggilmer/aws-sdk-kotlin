// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ReplaceRouteRequest private constructor(builder: BuilderImpl) {
    /**
     * &#91;IPv4 traffic only&#93; The ID of a carrier gateway.
     */
    val carrierGatewayId: String? = builder.carrierGatewayId
    /**
     * The IPv4 CIDR address block used for the destination match. The value that you
     * provide must match the CIDR of an existing route in the table.
     */
    val destinationCidrBlock: String? = builder.destinationCidrBlock
    /**
     * The IPv6 CIDR address block used for the destination match. The value that you
     * provide must match the CIDR of an existing route in the table.
     */
    val destinationIpv6CidrBlock: String? = builder.destinationIpv6CidrBlock
    /**
     * The ID of the prefix list for the route.
     */
    val destinationPrefixListId: String? = builder.destinationPrefixListId
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * &#91;IPv6 traffic only&#93; The ID of an egress-only internet gateway.
     */
    val egressOnlyInternetGatewayId: String? = builder.egressOnlyInternetGatewayId
    /**
     * The ID of an internet gateway or virtual private gateway.
     */
    val gatewayId: String? = builder.gatewayId
    /**
     * The ID of a NAT instance in your VPC.
     */
    val instanceId: String? = builder.instanceId
    /**
     * The ID of the local gateway.
     */
    val localGatewayId: String? = builder.localGatewayId
    /**
     * Specifies whether to reset the local route to its default target (local).
     */
    val localTarget: Boolean? = builder.localTarget
    /**
     * &#91;IPv4 traffic only&#93; The ID of a NAT gateway.
     */
    val natGatewayId: String? = builder.natGatewayId
    /**
     * The ID of a network interface.
     */
    val networkInterfaceId: String? = builder.networkInterfaceId
    /**
     * The ID of the route table.
     */
    val routeTableId: String? = builder.routeTableId
    /**
     * The ID of a transit gateway.
     */
    val transitGatewayId: String? = builder.transitGatewayId
    /**
     * The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
     */
    val vpcEndpointId: String? = builder.vpcEndpointId
    /**
     * The ID of a VPC peering connection.
     */
    val vpcPeeringConnectionId: String? = builder.vpcPeeringConnectionId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ReplaceRouteRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ReplaceRouteRequest(")
        append("carrierGatewayId=$carrierGatewayId,")
        append("destinationCidrBlock=$destinationCidrBlock,")
        append("destinationIpv6CidrBlock=$destinationIpv6CidrBlock,")
        append("destinationPrefixListId=$destinationPrefixListId,")
        append("dryRun=$dryRun,")
        append("egressOnlyInternetGatewayId=$egressOnlyInternetGatewayId,")
        append("gatewayId=$gatewayId,")
        append("instanceId=$instanceId,")
        append("localGatewayId=$localGatewayId,")
        append("localTarget=$localTarget,")
        append("natGatewayId=$natGatewayId,")
        append("networkInterfaceId=$networkInterfaceId,")
        append("routeTableId=$routeTableId,")
        append("transitGatewayId=$transitGatewayId,")
        append("vpcEndpointId=$vpcEndpointId,")
        append("vpcPeeringConnectionId=$vpcPeeringConnectionId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = carrierGatewayId?.hashCode() ?: 0
        result = 31 * result + (destinationCidrBlock?.hashCode() ?: 0)
        result = 31 * result + (destinationIpv6CidrBlock?.hashCode() ?: 0)
        result = 31 * result + (destinationPrefixListId?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (egressOnlyInternetGatewayId?.hashCode() ?: 0)
        result = 31 * result + (gatewayId?.hashCode() ?: 0)
        result = 31 * result + (instanceId?.hashCode() ?: 0)
        result = 31 * result + (localGatewayId?.hashCode() ?: 0)
        result = 31 * result + (localTarget?.hashCode() ?: 0)
        result = 31 * result + (natGatewayId?.hashCode() ?: 0)
        result = 31 * result + (networkInterfaceId?.hashCode() ?: 0)
        result = 31 * result + (routeTableId?.hashCode() ?: 0)
        result = 31 * result + (transitGatewayId?.hashCode() ?: 0)
        result = 31 * result + (vpcEndpointId?.hashCode() ?: 0)
        result = 31 * result + (vpcPeeringConnectionId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ReplaceRouteRequest

        if (carrierGatewayId != other.carrierGatewayId) return false
        if (destinationCidrBlock != other.destinationCidrBlock) return false
        if (destinationIpv6CidrBlock != other.destinationIpv6CidrBlock) return false
        if (destinationPrefixListId != other.destinationPrefixListId) return false
        if (dryRun != other.dryRun) return false
        if (egressOnlyInternetGatewayId != other.egressOnlyInternetGatewayId) return false
        if (gatewayId != other.gatewayId) return false
        if (instanceId != other.instanceId) return false
        if (localGatewayId != other.localGatewayId) return false
        if (localTarget != other.localTarget) return false
        if (natGatewayId != other.natGatewayId) return false
        if (networkInterfaceId != other.networkInterfaceId) return false
        if (routeTableId != other.routeTableId) return false
        if (transitGatewayId != other.transitGatewayId) return false
        if (vpcEndpointId != other.vpcEndpointId) return false
        if (vpcPeeringConnectionId != other.vpcPeeringConnectionId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ReplaceRouteRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ReplaceRouteRequest
        /**
         * &#91;IPv4 traffic only&#93; The ID of a carrier gateway.
         */
        fun carrierGatewayId(carrierGatewayId: String): FluentBuilder
        /**
         * The IPv4 CIDR address block used for the destination match. The value that you
         * provide must match the CIDR of an existing route in the table.
         */
        fun destinationCidrBlock(destinationCidrBlock: String): FluentBuilder
        /**
         * The IPv6 CIDR address block used for the destination match. The value that you
         * provide must match the CIDR of an existing route in the table.
         */
        fun destinationIpv6CidrBlock(destinationIpv6CidrBlock: String): FluentBuilder
        /**
         * The ID of the prefix list for the route.
         */
        fun destinationPrefixListId(destinationPrefixListId: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * &#91;IPv6 traffic only&#93; The ID of an egress-only internet gateway.
         */
        fun egressOnlyInternetGatewayId(egressOnlyInternetGatewayId: String): FluentBuilder
        /**
         * The ID of an internet gateway or virtual private gateway.
         */
        fun gatewayId(gatewayId: String): FluentBuilder
        /**
         * The ID of a NAT instance in your VPC.
         */
        fun instanceId(instanceId: String): FluentBuilder
        /**
         * The ID of the local gateway.
         */
        fun localGatewayId(localGatewayId: String): FluentBuilder
        /**
         * Specifies whether to reset the local route to its default target (local).
         */
        fun localTarget(localTarget: Boolean): FluentBuilder
        /**
         * &#91;IPv4 traffic only&#93; The ID of a NAT gateway.
         */
        fun natGatewayId(natGatewayId: String): FluentBuilder
        /**
         * The ID of a network interface.
         */
        fun networkInterfaceId(networkInterfaceId: String): FluentBuilder
        /**
         * The ID of the route table.
         */
        fun routeTableId(routeTableId: String): FluentBuilder
        /**
         * The ID of a transit gateway.
         */
        fun transitGatewayId(transitGatewayId: String): FluentBuilder
        /**
         * The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
         */
        fun vpcEndpointId(vpcEndpointId: String): FluentBuilder
        /**
         * The ID of a VPC peering connection.
         */
        fun vpcPeeringConnectionId(vpcPeeringConnectionId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * &#91;IPv4 traffic only&#93; The ID of a carrier gateway.
         */
        var carrierGatewayId: String?
        /**
         * The IPv4 CIDR address block used for the destination match. The value that you
         * provide must match the CIDR of an existing route in the table.
         */
        var destinationCidrBlock: String?
        /**
         * The IPv6 CIDR address block used for the destination match. The value that you
         * provide must match the CIDR of an existing route in the table.
         */
        var destinationIpv6CidrBlock: String?
        /**
         * The ID of the prefix list for the route.
         */
        var destinationPrefixListId: String?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * &#91;IPv6 traffic only&#93; The ID of an egress-only internet gateway.
         */
        var egressOnlyInternetGatewayId: String?
        /**
         * The ID of an internet gateway or virtual private gateway.
         */
        var gatewayId: String?
        /**
         * The ID of a NAT instance in your VPC.
         */
        var instanceId: String?
        /**
         * The ID of the local gateway.
         */
        var localGatewayId: String?
        /**
         * Specifies whether to reset the local route to its default target (local).
         */
        var localTarget: Boolean?
        /**
         * &#91;IPv4 traffic only&#93; The ID of a NAT gateway.
         */
        var natGatewayId: String?
        /**
         * The ID of a network interface.
         */
        var networkInterfaceId: String?
        /**
         * The ID of the route table.
         */
        var routeTableId: String?
        /**
         * The ID of a transit gateway.
         */
        var transitGatewayId: String?
        /**
         * The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
         */
        var vpcEndpointId: String?
        /**
         * The ID of a VPC peering connection.
         */
        var vpcPeeringConnectionId: String?

        fun build(): ReplaceRouteRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var carrierGatewayId: String? = null
        override var destinationCidrBlock: String? = null
        override var destinationIpv6CidrBlock: String? = null
        override var destinationPrefixListId: String? = null
        override var dryRun: Boolean? = null
        override var egressOnlyInternetGatewayId: String? = null
        override var gatewayId: String? = null
        override var instanceId: String? = null
        override var localGatewayId: String? = null
        override var localTarget: Boolean? = null
        override var natGatewayId: String? = null
        override var networkInterfaceId: String? = null
        override var routeTableId: String? = null
        override var transitGatewayId: String? = null
        override var vpcEndpointId: String? = null
        override var vpcPeeringConnectionId: String? = null

        constructor(x: ReplaceRouteRequest) : this() {
            this.carrierGatewayId = x.carrierGatewayId
            this.destinationCidrBlock = x.destinationCidrBlock
            this.destinationIpv6CidrBlock = x.destinationIpv6CidrBlock
            this.destinationPrefixListId = x.destinationPrefixListId
            this.dryRun = x.dryRun
            this.egressOnlyInternetGatewayId = x.egressOnlyInternetGatewayId
            this.gatewayId = x.gatewayId
            this.instanceId = x.instanceId
            this.localGatewayId = x.localGatewayId
            this.localTarget = x.localTarget
            this.natGatewayId = x.natGatewayId
            this.networkInterfaceId = x.networkInterfaceId
            this.routeTableId = x.routeTableId
            this.transitGatewayId = x.transitGatewayId
            this.vpcEndpointId = x.vpcEndpointId
            this.vpcPeeringConnectionId = x.vpcPeeringConnectionId
        }

        override fun build(): ReplaceRouteRequest = ReplaceRouteRequest(this)
        override fun carrierGatewayId(carrierGatewayId: String): FluentBuilder = apply { this.carrierGatewayId = carrierGatewayId }
        override fun destinationCidrBlock(destinationCidrBlock: String): FluentBuilder = apply { this.destinationCidrBlock = destinationCidrBlock }
        override fun destinationIpv6CidrBlock(destinationIpv6CidrBlock: String): FluentBuilder = apply { this.destinationIpv6CidrBlock = destinationIpv6CidrBlock }
        override fun destinationPrefixListId(destinationPrefixListId: String): FluentBuilder = apply { this.destinationPrefixListId = destinationPrefixListId }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun egressOnlyInternetGatewayId(egressOnlyInternetGatewayId: String): FluentBuilder = apply { this.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId }
        override fun gatewayId(gatewayId: String): FluentBuilder = apply { this.gatewayId = gatewayId }
        override fun instanceId(instanceId: String): FluentBuilder = apply { this.instanceId = instanceId }
        override fun localGatewayId(localGatewayId: String): FluentBuilder = apply { this.localGatewayId = localGatewayId }
        override fun localTarget(localTarget: Boolean): FluentBuilder = apply { this.localTarget = localTarget }
        override fun natGatewayId(natGatewayId: String): FluentBuilder = apply { this.natGatewayId = natGatewayId }
        override fun networkInterfaceId(networkInterfaceId: String): FluentBuilder = apply { this.networkInterfaceId = networkInterfaceId }
        override fun routeTableId(routeTableId: String): FluentBuilder = apply { this.routeTableId = routeTableId }
        override fun transitGatewayId(transitGatewayId: String): FluentBuilder = apply { this.transitGatewayId = transitGatewayId }
        override fun vpcEndpointId(vpcEndpointId: String): FluentBuilder = apply { this.vpcEndpointId = vpcEndpointId }
        override fun vpcPeeringConnectionId(vpcPeeringConnectionId: String): FluentBuilder = apply { this.vpcPeeringConnectionId = vpcPeeringConnectionId }
    }
}
