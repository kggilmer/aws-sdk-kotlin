// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the current state of an instance.
 */
class InstanceState private constructor(builder: BuilderImpl) {
    /**
     * The state of the instance as a 16-bit unsigned integer.
     * The high byte is all of the bits between 2^8 and (2^16)-1, which equals decimal values
     * between 256 and 65,535. These numerical values are used for internal purposes and should
     * be ignored.
     * The low byte is all of the bits between 2^0 and (2^8)-1, which equals decimal values
     * between 0 and 255.
     * The valid values for instance-state-code will all be in the range of the low byte and
     * they are:
     * 0 : pending
     * 16 : running
     * 32 : shutting-down
     * 48 : terminated
     * 64 : stopping
     * 80 : stopped
     * You can ignore the high byte value by zeroing out all of the bits above 2^8 or 256 in
     * decimal.
     */
    val code: Int? = builder.code
    /**
     * The current state of the instance.
     */
    val name: InstanceStateName? = builder.name

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): InstanceState = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("InstanceState(")
        append("code=$code,")
        append("name=$name)")
    }

    override fun hashCode(): kotlin.Int {
        var result = code ?: 0
        result = 31 * result + (name?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as InstanceState

        if (code != other.code) return false
        if (name != other.name) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): InstanceState = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): InstanceState
        /**
         * The state of the instance as a 16-bit unsigned integer.
         * The high byte is all of the bits between 2^8 and (2^16)-1, which equals decimal values
         * between 256 and 65,535. These numerical values are used for internal purposes and should
         * be ignored.
         * The low byte is all of the bits between 2^0 and (2^8)-1, which equals decimal values
         * between 0 and 255.
         * The valid values for instance-state-code will all be in the range of the low byte and
         * they are:
         * 0 : pending
         * 16 : running
         * 32 : shutting-down
         * 48 : terminated
         * 64 : stopping
         * 80 : stopped
         * You can ignore the high byte value by zeroing out all of the bits above 2^8 or 256 in
         * decimal.
         */
        fun code(code: Int): FluentBuilder
        /**
         * The current state of the instance.
         */
        fun name(name: InstanceStateName): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The state of the instance as a 16-bit unsigned integer.
         * The high byte is all of the bits between 2^8 and (2^16)-1, which equals decimal values
         * between 256 and 65,535. These numerical values are used for internal purposes and should
         * be ignored.
         * The low byte is all of the bits between 2^0 and (2^8)-1, which equals decimal values
         * between 0 and 255.
         * The valid values for instance-state-code will all be in the range of the low byte and
         * they are:
         * 0 : pending
         * 16 : running
         * 32 : shutting-down
         * 48 : terminated
         * 64 : stopping
         * 80 : stopped
         * You can ignore the high byte value by zeroing out all of the bits above 2^8 or 256 in
         * decimal.
         */
        var code: Int?
        /**
         * The current state of the instance.
         */
        var name: InstanceStateName?

        fun build(): InstanceState
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var code: Int? = null
        override var name: InstanceStateName? = null

        constructor(x: InstanceState) : this() {
            this.code = x.code
            this.name = x.name
        }

        override fun build(): InstanceState = InstanceState(this)
        override fun code(code: Int): FluentBuilder = apply { this.code = code }
        override fun name(name: InstanceStateName): FluentBuilder = apply { this.name = name }
    }
}
