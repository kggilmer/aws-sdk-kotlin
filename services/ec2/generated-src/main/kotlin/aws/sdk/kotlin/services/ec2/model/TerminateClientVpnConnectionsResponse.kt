// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class TerminateClientVpnConnectionsResponse private constructor(builder: BuilderImpl) {
    /**
     * The ID of the Client VPN endpoint.
     */
    val clientVpnEndpointId: String? = builder.clientVpnEndpointId
    /**
     * The current state of the client connections.
     */
    val connectionStatuses: List<TerminateConnectionStatus>? = builder.connectionStatuses
    /**
     * The user who established the terminated client connections.
     */
    val username: String? = builder.username

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): TerminateClientVpnConnectionsResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("TerminateClientVpnConnectionsResponse(")
        append("clientVpnEndpointId=$clientVpnEndpointId,")
        append("connectionStatuses=$connectionStatuses,")
        append("username=$username)")
    }

    override fun hashCode(): kotlin.Int {
        var result = clientVpnEndpointId?.hashCode() ?: 0
        result = 31 * result + (connectionStatuses?.hashCode() ?: 0)
        result = 31 * result + (username?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as TerminateClientVpnConnectionsResponse

        if (clientVpnEndpointId != other.clientVpnEndpointId) return false
        if (connectionStatuses != other.connectionStatuses) return false
        if (username != other.username) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): TerminateClientVpnConnectionsResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): TerminateClientVpnConnectionsResponse
        /**
         * The ID of the Client VPN endpoint.
         */
        fun clientVpnEndpointId(clientVpnEndpointId: String): FluentBuilder
        /**
         * The current state of the client connections.
         */
        fun connectionStatuses(connectionStatuses: List<TerminateConnectionStatus>): FluentBuilder
        /**
         * The user who established the terminated client connections.
         */
        fun username(username: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The ID of the Client VPN endpoint.
         */
        var clientVpnEndpointId: String?
        /**
         * The current state of the client connections.
         */
        var connectionStatuses: List<TerminateConnectionStatus>?
        /**
         * The user who established the terminated client connections.
         */
        var username: String?

        fun build(): TerminateClientVpnConnectionsResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var clientVpnEndpointId: String? = null
        override var connectionStatuses: List<TerminateConnectionStatus>? = null
        override var username: String? = null

        constructor(x: TerminateClientVpnConnectionsResponse) : this() {
            this.clientVpnEndpointId = x.clientVpnEndpointId
            this.connectionStatuses = x.connectionStatuses
            this.username = x.username
        }

        override fun build(): TerminateClientVpnConnectionsResponse = TerminateClientVpnConnectionsResponse(this)
        override fun clientVpnEndpointId(clientVpnEndpointId: String): FluentBuilder = apply { this.clientVpnEndpointId = clientVpnEndpointId }
        override fun connectionStatuses(connectionStatuses: List<TerminateConnectionStatus>): FluentBuilder = apply { this.connectionStatuses = connectionStatuses }
        override fun username(username: String): FluentBuilder = apply { this.username = username }
    }
}
