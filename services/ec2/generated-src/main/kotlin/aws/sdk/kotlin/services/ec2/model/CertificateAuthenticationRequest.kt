// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Information about the client certificate to be used for authentication.
 */
class CertificateAuthenticationRequest private constructor(builder: BuilderImpl) {
    /**
     * The ARN of the client certificate. The certificate must be signed by a certificate
     * authority (CA) and it must be provisioned in Certificate Manager (ACM).
     */
    val clientRootCertificateChainArn: String? = builder.clientRootCertificateChainArn

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CertificateAuthenticationRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CertificateAuthenticationRequest(")
        append("clientRootCertificateChainArn=$clientRootCertificateChainArn)")
    }

    override fun hashCode(): kotlin.Int {
        var result = clientRootCertificateChainArn?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CertificateAuthenticationRequest

        if (clientRootCertificateChainArn != other.clientRootCertificateChainArn) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CertificateAuthenticationRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CertificateAuthenticationRequest
        /**
         * The ARN of the client certificate. The certificate must be signed by a certificate
         * authority (CA) and it must be provisioned in Certificate Manager (ACM).
         */
        fun clientRootCertificateChainArn(clientRootCertificateChainArn: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The ARN of the client certificate. The certificate must be signed by a certificate
         * authority (CA) and it must be provisioned in Certificate Manager (ACM).
         */
        var clientRootCertificateChainArn: String?

        fun build(): CertificateAuthenticationRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var clientRootCertificateChainArn: String? = null

        constructor(x: CertificateAuthenticationRequest) : this() {
            this.clientRootCertificateChainArn = x.clientRootCertificateChainArn
        }

        override fun build(): CertificateAuthenticationRequest = CertificateAuthenticationRequest(this)
        override fun clientRootCertificateChainArn(clientRootCertificateChainArn: String): FluentBuilder = apply { this.clientRootCertificateChainArn = clientRootCertificateChainArn }
    }
}
