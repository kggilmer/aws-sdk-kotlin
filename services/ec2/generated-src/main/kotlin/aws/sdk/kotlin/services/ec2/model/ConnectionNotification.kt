// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a connection notification for a VPC endpoint or VPC endpoint
 * service.
 */
class ConnectionNotification private constructor(builder: BuilderImpl) {
    /**
     * The events for the notification. Valid values are Accept,
     * Connect, Delete, and Reject.
     */
    val connectionEvents: List<String>? = builder.connectionEvents
    /**
     * The ARN of the SNS topic for the notification.
     */
    val connectionNotificationArn: String? = builder.connectionNotificationArn
    /**
     * The ID of the notification.
     */
    val connectionNotificationId: String? = builder.connectionNotificationId
    /**
     * The state of the notification.
     */
    val connectionNotificationState: ConnectionNotificationState? = builder.connectionNotificationState
    /**
     * The type of notification.
     */
    val connectionNotificationType: ConnectionNotificationType? = builder.connectionNotificationType
    /**
     * The ID of the endpoint service.
     */
    val serviceId: String? = builder.serviceId
    /**
     * The ID of the VPC endpoint.
     */
    val vpcEndpointId: String? = builder.vpcEndpointId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ConnectionNotification = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ConnectionNotification(")
        append("connectionEvents=$connectionEvents,")
        append("connectionNotificationArn=$connectionNotificationArn,")
        append("connectionNotificationId=$connectionNotificationId,")
        append("connectionNotificationState=$connectionNotificationState,")
        append("connectionNotificationType=$connectionNotificationType,")
        append("serviceId=$serviceId,")
        append("vpcEndpointId=$vpcEndpointId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = connectionEvents?.hashCode() ?: 0
        result = 31 * result + (connectionNotificationArn?.hashCode() ?: 0)
        result = 31 * result + (connectionNotificationId?.hashCode() ?: 0)
        result = 31 * result + (connectionNotificationState?.hashCode() ?: 0)
        result = 31 * result + (connectionNotificationType?.hashCode() ?: 0)
        result = 31 * result + (serviceId?.hashCode() ?: 0)
        result = 31 * result + (vpcEndpointId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ConnectionNotification

        if (connectionEvents != other.connectionEvents) return false
        if (connectionNotificationArn != other.connectionNotificationArn) return false
        if (connectionNotificationId != other.connectionNotificationId) return false
        if (connectionNotificationState != other.connectionNotificationState) return false
        if (connectionNotificationType != other.connectionNotificationType) return false
        if (serviceId != other.serviceId) return false
        if (vpcEndpointId != other.vpcEndpointId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ConnectionNotification = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ConnectionNotification
        /**
         * The events for the notification. Valid values are Accept,
         * Connect, Delete, and Reject.
         */
        fun connectionEvents(connectionEvents: List<String>): FluentBuilder
        /**
         * The ARN of the SNS topic for the notification.
         */
        fun connectionNotificationArn(connectionNotificationArn: String): FluentBuilder
        /**
         * The ID of the notification.
         */
        fun connectionNotificationId(connectionNotificationId: String): FluentBuilder
        /**
         * The state of the notification.
         */
        fun connectionNotificationState(connectionNotificationState: ConnectionNotificationState): FluentBuilder
        /**
         * The type of notification.
         */
        fun connectionNotificationType(connectionNotificationType: ConnectionNotificationType): FluentBuilder
        /**
         * The ID of the endpoint service.
         */
        fun serviceId(serviceId: String): FluentBuilder
        /**
         * The ID of the VPC endpoint.
         */
        fun vpcEndpointId(vpcEndpointId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The events for the notification. Valid values are Accept,
         * Connect, Delete, and Reject.
         */
        var connectionEvents: List<String>?
        /**
         * The ARN of the SNS topic for the notification.
         */
        var connectionNotificationArn: String?
        /**
         * The ID of the notification.
         */
        var connectionNotificationId: String?
        /**
         * The state of the notification.
         */
        var connectionNotificationState: ConnectionNotificationState?
        /**
         * The type of notification.
         */
        var connectionNotificationType: ConnectionNotificationType?
        /**
         * The ID of the endpoint service.
         */
        var serviceId: String?
        /**
         * The ID of the VPC endpoint.
         */
        var vpcEndpointId: String?

        fun build(): ConnectionNotification
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var connectionEvents: List<String>? = null
        override var connectionNotificationArn: String? = null
        override var connectionNotificationId: String? = null
        override var connectionNotificationState: ConnectionNotificationState? = null
        override var connectionNotificationType: ConnectionNotificationType? = null
        override var serviceId: String? = null
        override var vpcEndpointId: String? = null

        constructor(x: ConnectionNotification) : this() {
            this.connectionEvents = x.connectionEvents
            this.connectionNotificationArn = x.connectionNotificationArn
            this.connectionNotificationId = x.connectionNotificationId
            this.connectionNotificationState = x.connectionNotificationState
            this.connectionNotificationType = x.connectionNotificationType
            this.serviceId = x.serviceId
            this.vpcEndpointId = x.vpcEndpointId
        }

        override fun build(): ConnectionNotification = ConnectionNotification(this)
        override fun connectionEvents(connectionEvents: List<String>): FluentBuilder = apply { this.connectionEvents = connectionEvents }
        override fun connectionNotificationArn(connectionNotificationArn: String): FluentBuilder = apply { this.connectionNotificationArn = connectionNotificationArn }
        override fun connectionNotificationId(connectionNotificationId: String): FluentBuilder = apply { this.connectionNotificationId = connectionNotificationId }
        override fun connectionNotificationState(connectionNotificationState: ConnectionNotificationState): FluentBuilder = apply { this.connectionNotificationState = connectionNotificationState }
        override fun connectionNotificationType(connectionNotificationType: ConnectionNotificationType): FluentBuilder = apply { this.connectionNotificationType = connectionNotificationType }
        override fun serviceId(serviceId: String): FluentBuilder = apply { this.serviceId = serviceId }
        override fun vpcEndpointId(vpcEndpointId: String): FluentBuilder = apply { this.vpcEndpointId = vpcEndpointId }
    }
}
