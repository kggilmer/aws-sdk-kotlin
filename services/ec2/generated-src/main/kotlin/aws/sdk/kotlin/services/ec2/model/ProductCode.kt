// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a product code.
 */
class ProductCode private constructor(builder: BuilderImpl) {
    /**
     * The product code.
     */
    val productCodeId: String? = builder.productCodeId
    /**
     * The type of product code.
     */
    val productCodeType: ProductCodeValues? = builder.productCodeType

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ProductCode = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ProductCode(")
        append("productCodeId=$productCodeId,")
        append("productCodeType=$productCodeType)")
    }

    override fun hashCode(): kotlin.Int {
        var result = productCodeId?.hashCode() ?: 0
        result = 31 * result + (productCodeType?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ProductCode

        if (productCodeId != other.productCodeId) return false
        if (productCodeType != other.productCodeType) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ProductCode = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ProductCode
        /**
         * The product code.
         */
        fun productCodeId(productCodeId: String): FluentBuilder
        /**
         * The type of product code.
         */
        fun productCodeType(productCodeType: ProductCodeValues): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The product code.
         */
        var productCodeId: String?
        /**
         * The type of product code.
         */
        var productCodeType: ProductCodeValues?

        fun build(): ProductCode
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var productCodeId: String? = null
        override var productCodeType: ProductCodeValues? = null

        constructor(x: ProductCode) : this() {
            this.productCodeId = x.productCodeId
            this.productCodeType = x.productCodeType
        }

        override fun build(): ProductCode = ProductCode(this)
        override fun productCodeId(productCodeId: String): FluentBuilder = apply { this.productCodeId = productCodeId }
        override fun productCodeType(productCodeType: ProductCodeValues): FluentBuilder = apply { this.productCodeType = productCodeType }
    }
}
