// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a subnet CIDR reservation.
 */
class SubnetCidrReservation private constructor(builder: BuilderImpl) {
    /**
     * The CIDR that has been reserved.
     */
    val cidr: String? = builder.cidr
    /**
     * The
     * description
     * assigned to the subnet CIDR
     * reservation.
     */
    val description: String? = builder.description
    /**
     * The ID of the account that owns the subnet CIDR reservation.
     */
    val ownerId: String? = builder.ownerId
    /**
     * The type of reservation.
     */
    val reservationType: SubnetCidrReservationType? = builder.reservationType
    /**
     * The ID of the subnet CIDR reservation.
     */
    val subnetCidrReservationId: String? = builder.subnetCidrReservationId
    /**
     * The ID of the subnet.
     */
    val subnetId: String? = builder.subnetId
    /**
     * The tags assigned to the subnet CIDR reservation.
     */
    val tags: List<Tag>? = builder.tags

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): SubnetCidrReservation = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("SubnetCidrReservation(")
        append("cidr=$cidr,")
        append("description=$description,")
        append("ownerId=$ownerId,")
        append("reservationType=$reservationType,")
        append("subnetCidrReservationId=$subnetCidrReservationId,")
        append("subnetId=$subnetId,")
        append("tags=$tags)")
    }

    override fun hashCode(): kotlin.Int {
        var result = cidr?.hashCode() ?: 0
        result = 31 * result + (description?.hashCode() ?: 0)
        result = 31 * result + (ownerId?.hashCode() ?: 0)
        result = 31 * result + (reservationType?.hashCode() ?: 0)
        result = 31 * result + (subnetCidrReservationId?.hashCode() ?: 0)
        result = 31 * result + (subnetId?.hashCode() ?: 0)
        result = 31 * result + (tags?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as SubnetCidrReservation

        if (cidr != other.cidr) return false
        if (description != other.description) return false
        if (ownerId != other.ownerId) return false
        if (reservationType != other.reservationType) return false
        if (subnetCidrReservationId != other.subnetCidrReservationId) return false
        if (subnetId != other.subnetId) return false
        if (tags != other.tags) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): SubnetCidrReservation = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): SubnetCidrReservation
        /**
         * The CIDR that has been reserved.
         */
        fun cidr(cidr: String): FluentBuilder
        /**
         * The
         * description
         * assigned to the subnet CIDR
         * reservation.
         */
        fun description(description: String): FluentBuilder
        /**
         * The ID of the account that owns the subnet CIDR reservation.
         */
        fun ownerId(ownerId: String): FluentBuilder
        /**
         * The type of reservation.
         */
        fun reservationType(reservationType: SubnetCidrReservationType): FluentBuilder
        /**
         * The ID of the subnet CIDR reservation.
         */
        fun subnetCidrReservationId(subnetCidrReservationId: String): FluentBuilder
        /**
         * The ID of the subnet.
         */
        fun subnetId(subnetId: String): FluentBuilder
        /**
         * The tags assigned to the subnet CIDR reservation.
         */
        fun tags(tags: List<Tag>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The CIDR that has been reserved.
         */
        var cidr: String?
        /**
         * The
         * description
         * assigned to the subnet CIDR
         * reservation.
         */
        var description: String?
        /**
         * The ID of the account that owns the subnet CIDR reservation.
         */
        var ownerId: String?
        /**
         * The type of reservation.
         */
        var reservationType: SubnetCidrReservationType?
        /**
         * The ID of the subnet CIDR reservation.
         */
        var subnetCidrReservationId: String?
        /**
         * The ID of the subnet.
         */
        var subnetId: String?
        /**
         * The tags assigned to the subnet CIDR reservation.
         */
        var tags: List<Tag>?

        fun build(): SubnetCidrReservation
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var cidr: String? = null
        override var description: String? = null
        override var ownerId: String? = null
        override var reservationType: SubnetCidrReservationType? = null
        override var subnetCidrReservationId: String? = null
        override var subnetId: String? = null
        override var tags: List<Tag>? = null

        constructor(x: SubnetCidrReservation) : this() {
            this.cidr = x.cidr
            this.description = x.description
            this.ownerId = x.ownerId
            this.reservationType = x.reservationType
            this.subnetCidrReservationId = x.subnetCidrReservationId
            this.subnetId = x.subnetId
            this.tags = x.tags
        }

        override fun build(): SubnetCidrReservation = SubnetCidrReservation(this)
        override fun cidr(cidr: String): FluentBuilder = apply { this.cidr = cidr }
        override fun description(description: String): FluentBuilder = apply { this.description = description }
        override fun ownerId(ownerId: String): FluentBuilder = apply { this.ownerId = ownerId }
        override fun reservationType(reservationType: SubnetCidrReservationType): FluentBuilder = apply { this.reservationType = reservationType }
        override fun subnetCidrReservationId(subnetCidrReservationId: String): FluentBuilder = apply { this.subnetCidrReservationId = subnetCidrReservationId }
        override fun subnetId(subnetId: String): FluentBuilder = apply { this.subnetId = subnetId }
        override fun tags(tags: List<Tag>): FluentBuilder = apply { this.tags = tags }
    }
}
