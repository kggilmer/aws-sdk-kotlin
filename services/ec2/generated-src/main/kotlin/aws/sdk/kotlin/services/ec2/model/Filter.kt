// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * A filter name and value pair that is used to return a more specific list of results from a describe operation.
 * Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.
 */
class Filter private constructor(builder: BuilderImpl) {
    /**
     * The name of the filter. Filter names are case-sensitive.
     */
    val name: String? = builder.name
    /**
     * The filter values. Filter values are case-sensitive.
     */
    val values: List<String>? = builder.values

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): Filter = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("Filter(")
        append("name=$name,")
        append("values=$values)")
    }

    override fun hashCode(): kotlin.Int {
        var result = name?.hashCode() ?: 0
        result = 31 * result + (values?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Filter

        if (name != other.name) return false
        if (values != other.values) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): Filter = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): Filter
        /**
         * The name of the filter. Filter names are case-sensitive.
         */
        fun name(name: String): FluentBuilder
        /**
         * The filter values. Filter values are case-sensitive.
         */
        fun values(values: List<String>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The name of the filter. Filter names are case-sensitive.
         */
        var name: String?
        /**
         * The filter values. Filter values are case-sensitive.
         */
        var values: List<String>?

        fun build(): Filter
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var name: String? = null
        override var values: List<String>? = null

        constructor(x: Filter) : this() {
            this.name = x.name
            this.values = x.values
        }

        override fun build(): Filter = Filter(this)
        override fun name(name: String): FluentBuilder = apply { this.name = name }
        override fun values(values: List<String>): FluentBuilder = apply { this.values = values }
    }
}
