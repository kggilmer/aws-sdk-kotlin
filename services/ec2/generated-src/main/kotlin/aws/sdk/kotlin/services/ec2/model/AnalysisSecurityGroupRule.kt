// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a security group rule.
 */
class AnalysisSecurityGroupRule private constructor(builder: BuilderImpl) {
    /**
     * The IPv4 address range, in CIDR notation.
     */
    val cidr: String? = builder.cidr
    /**
     * The direction. The following are possible values:
     * egress
     * ingress
     */
    val direction: String? = builder.direction
    /**
     * The port range.
     */
    val portRange: PortRange? = builder.portRange
    /**
     * The prefix list ID.
     */
    val prefixListId: String? = builder.prefixListId
    /**
     * The protocol name.
     */
    val protocol: String? = builder.protocol
    /**
     * The security group ID.
     */
    val securityGroupId: String? = builder.securityGroupId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): AnalysisSecurityGroupRule = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("AnalysisSecurityGroupRule(")
        append("cidr=$cidr,")
        append("direction=$direction,")
        append("portRange=$portRange,")
        append("prefixListId=$prefixListId,")
        append("protocol=$protocol,")
        append("securityGroupId=$securityGroupId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = cidr?.hashCode() ?: 0
        result = 31 * result + (direction?.hashCode() ?: 0)
        result = 31 * result + (portRange?.hashCode() ?: 0)
        result = 31 * result + (prefixListId?.hashCode() ?: 0)
        result = 31 * result + (protocol?.hashCode() ?: 0)
        result = 31 * result + (securityGroupId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as AnalysisSecurityGroupRule

        if (cidr != other.cidr) return false
        if (direction != other.direction) return false
        if (portRange != other.portRange) return false
        if (prefixListId != other.prefixListId) return false
        if (protocol != other.protocol) return false
        if (securityGroupId != other.securityGroupId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): AnalysisSecurityGroupRule = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): AnalysisSecurityGroupRule
        /**
         * The IPv4 address range, in CIDR notation.
         */
        fun cidr(cidr: String): FluentBuilder
        /**
         * The direction. The following are possible values:
         * egress
         * ingress
         */
        fun direction(direction: String): FluentBuilder
        /**
         * The port range.
         */
        fun portRange(portRange: PortRange): FluentBuilder
        /**
         * The prefix list ID.
         */
        fun prefixListId(prefixListId: String): FluentBuilder
        /**
         * The protocol name.
         */
        fun protocol(protocol: String): FluentBuilder
        /**
         * The security group ID.
         */
        fun securityGroupId(securityGroupId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The IPv4 address range, in CIDR notation.
         */
        var cidr: String?
        /**
         * The direction. The following are possible values:
         * egress
         * ingress
         */
        var direction: String?
        /**
         * The port range.
         */
        var portRange: PortRange?
        /**
         * The prefix list ID.
         */
        var prefixListId: String?
        /**
         * The protocol name.
         */
        var protocol: String?
        /**
         * The security group ID.
         */
        var securityGroupId: String?

        fun build(): AnalysisSecurityGroupRule
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.PortRange] inside the given [block]
         */
        fun portRange(block: PortRange.DslBuilder.() -> kotlin.Unit) {
            this.portRange = PortRange.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var cidr: String? = null
        override var direction: String? = null
        override var portRange: PortRange? = null
        override var prefixListId: String? = null
        override var protocol: String? = null
        override var securityGroupId: String? = null

        constructor(x: AnalysisSecurityGroupRule) : this() {
            this.cidr = x.cidr
            this.direction = x.direction
            this.portRange = x.portRange
            this.prefixListId = x.prefixListId
            this.protocol = x.protocol
            this.securityGroupId = x.securityGroupId
        }

        override fun build(): AnalysisSecurityGroupRule = AnalysisSecurityGroupRule(this)
        override fun cidr(cidr: String): FluentBuilder = apply { this.cidr = cidr }
        override fun direction(direction: String): FluentBuilder = apply { this.direction = direction }
        override fun portRange(portRange: PortRange): FluentBuilder = apply { this.portRange = portRange }
        override fun prefixListId(prefixListId: String): FluentBuilder = apply { this.prefixListId = prefixListId }
        override fun protocol(protocol: String): FluentBuilder = apply { this.protocol = protocol }
        override fun securityGroupId(securityGroupId: String): FluentBuilder = apply { this.securityGroupId = securityGroupId }
    }
}
