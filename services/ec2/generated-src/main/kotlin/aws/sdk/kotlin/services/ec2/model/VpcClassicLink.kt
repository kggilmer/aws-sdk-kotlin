// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes whether a VPC is enabled for ClassicLink.
 */
class VpcClassicLink private constructor(builder: BuilderImpl) {
    /**
     * Indicates whether the VPC is enabled for ClassicLink.
     */
    val classicLinkEnabled: Boolean? = builder.classicLinkEnabled
    /**
     * Any tags assigned to the VPC.
     */
    val tags: List<Tag>? = builder.tags
    /**
     * The ID of the VPC.
     */
    val vpcId: String? = builder.vpcId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): VpcClassicLink = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("VpcClassicLink(")
        append("classicLinkEnabled=$classicLinkEnabled,")
        append("tags=$tags,")
        append("vpcId=$vpcId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = classicLinkEnabled?.hashCode() ?: 0
        result = 31 * result + (tags?.hashCode() ?: 0)
        result = 31 * result + (vpcId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as VpcClassicLink

        if (classicLinkEnabled != other.classicLinkEnabled) return false
        if (tags != other.tags) return false
        if (vpcId != other.vpcId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): VpcClassicLink = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): VpcClassicLink
        /**
         * Indicates whether the VPC is enabled for ClassicLink.
         */
        fun classicLinkEnabled(classicLinkEnabled: Boolean): FluentBuilder
        /**
         * Any tags assigned to the VPC.
         */
        fun tags(tags: List<Tag>): FluentBuilder
        /**
         * The ID of the VPC.
         */
        fun vpcId(vpcId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Indicates whether the VPC is enabled for ClassicLink.
         */
        var classicLinkEnabled: Boolean?
        /**
         * Any tags assigned to the VPC.
         */
        var tags: List<Tag>?
        /**
         * The ID of the VPC.
         */
        var vpcId: String?

        fun build(): VpcClassicLink
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var classicLinkEnabled: Boolean? = null
        override var tags: List<Tag>? = null
        override var vpcId: String? = null

        constructor(x: VpcClassicLink) : this() {
            this.classicLinkEnabled = x.classicLinkEnabled
            this.tags = x.tags
            this.vpcId = x.vpcId
        }

        override fun build(): VpcClassicLink = VpcClassicLink(this)
        override fun classicLinkEnabled(classicLinkEnabled: Boolean): FluentBuilder = apply { this.classicLinkEnabled = classicLinkEnabled }
        override fun tags(tags: List<Tag>): FluentBuilder = apply { this.tags = tags }
        override fun vpcId(vpcId: String): FluentBuilder = apply { this.vpcId = vpcId }
    }
}
