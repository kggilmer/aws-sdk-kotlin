// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class PurchaseHostReservationResponse private constructor(builder: BuilderImpl) {
    /**
     * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency.
     */
    val clientToken: String? = builder.clientToken
    /**
     * The currency in which the totalUpfrontPrice and
     * totalHourlyPrice amounts are specified. At this time, the only
     * supported currency is USD.
     */
    val currencyCode: CurrencyCodeValues? = builder.currencyCode
    /**
     * Describes the details of the purchase.
     */
    val purchase: List<Purchase>? = builder.purchase
    /**
     * The total hourly price of the reservation calculated per hour.
     */
    val totalHourlyPrice: String? = builder.totalHourlyPrice
    /**
     * The total amount charged to your account when you purchase the reservation.
     */
    val totalUpfrontPrice: String? = builder.totalUpfrontPrice

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): PurchaseHostReservationResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("PurchaseHostReservationResponse(")
        append("clientToken=$clientToken,")
        append("currencyCode=$currencyCode,")
        append("purchase=$purchase,")
        append("totalHourlyPrice=$totalHourlyPrice,")
        append("totalUpfrontPrice=$totalUpfrontPrice)")
    }

    override fun hashCode(): kotlin.Int {
        var result = clientToken?.hashCode() ?: 0
        result = 31 * result + (currencyCode?.hashCode() ?: 0)
        result = 31 * result + (purchase?.hashCode() ?: 0)
        result = 31 * result + (totalHourlyPrice?.hashCode() ?: 0)
        result = 31 * result + (totalUpfrontPrice?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as PurchaseHostReservationResponse

        if (clientToken != other.clientToken) return false
        if (currencyCode != other.currencyCode) return false
        if (purchase != other.purchase) return false
        if (totalHourlyPrice != other.totalHourlyPrice) return false
        if (totalUpfrontPrice != other.totalUpfrontPrice) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): PurchaseHostReservationResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): PurchaseHostReservationResponse
        /**
         * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency.
         */
        fun clientToken(clientToken: String): FluentBuilder
        /**
         * The currency in which the totalUpfrontPrice and
         * totalHourlyPrice amounts are specified. At this time, the only
         * supported currency is USD.
         */
        fun currencyCode(currencyCode: CurrencyCodeValues): FluentBuilder
        /**
         * Describes the details of the purchase.
         */
        fun purchase(purchase: List<Purchase>): FluentBuilder
        /**
         * The total hourly price of the reservation calculated per hour.
         */
        fun totalHourlyPrice(totalHourlyPrice: String): FluentBuilder
        /**
         * The total amount charged to your account when you purchase the reservation.
         */
        fun totalUpfrontPrice(totalUpfrontPrice: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency.
         */
        var clientToken: String?
        /**
         * The currency in which the totalUpfrontPrice and
         * totalHourlyPrice amounts are specified. At this time, the only
         * supported currency is USD.
         */
        var currencyCode: CurrencyCodeValues?
        /**
         * Describes the details of the purchase.
         */
        var purchase: List<Purchase>?
        /**
         * The total hourly price of the reservation calculated per hour.
         */
        var totalHourlyPrice: String?
        /**
         * The total amount charged to your account when you purchase the reservation.
         */
        var totalUpfrontPrice: String?

        fun build(): PurchaseHostReservationResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var clientToken: String? = null
        override var currencyCode: CurrencyCodeValues? = null
        override var purchase: List<Purchase>? = null
        override var totalHourlyPrice: String? = null
        override var totalUpfrontPrice: String? = null

        constructor(x: PurchaseHostReservationResponse) : this() {
            this.clientToken = x.clientToken
            this.currencyCode = x.currencyCode
            this.purchase = x.purchase
            this.totalHourlyPrice = x.totalHourlyPrice
            this.totalUpfrontPrice = x.totalUpfrontPrice
        }

        override fun build(): PurchaseHostReservationResponse = PurchaseHostReservationResponse(this)
        override fun clientToken(clientToken: String): FluentBuilder = apply { this.clientToken = clientToken }
        override fun currencyCode(currencyCode: CurrencyCodeValues): FluentBuilder = apply { this.currencyCode = currencyCode }
        override fun purchase(purchase: List<Purchase>): FluentBuilder = apply { this.purchase = purchase }
        override fun totalHourlyPrice(totalHourlyPrice: String): FluentBuilder = apply { this.totalHourlyPrice = totalHourlyPrice }
        override fun totalUpfrontPrice(totalUpfrontPrice: String): FluentBuilder = apply { this.totalUpfrontPrice = totalUpfrontPrice }
    }
}
