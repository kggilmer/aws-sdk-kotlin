// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class CreateInstanceEventWindowResponse private constructor(builder: BuilderImpl) {
    /**
     * Information about the event window.
     */
    val instanceEventWindow: InstanceEventWindow? = builder.instanceEventWindow

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CreateInstanceEventWindowResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CreateInstanceEventWindowResponse(")
        append("instanceEventWindow=$instanceEventWindow)")
    }

    override fun hashCode(): kotlin.Int {
        var result = instanceEventWindow?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CreateInstanceEventWindowResponse

        if (instanceEventWindow != other.instanceEventWindow) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CreateInstanceEventWindowResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CreateInstanceEventWindowResponse
        /**
         * Information about the event window.
         */
        fun instanceEventWindow(instanceEventWindow: InstanceEventWindow): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Information about the event window.
         */
        var instanceEventWindow: InstanceEventWindow?

        fun build(): CreateInstanceEventWindowResponse
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.InstanceEventWindow] inside the given [block]
         */
        fun instanceEventWindow(block: InstanceEventWindow.DslBuilder.() -> kotlin.Unit) {
            this.instanceEventWindow = InstanceEventWindow.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var instanceEventWindow: InstanceEventWindow? = null

        constructor(x: CreateInstanceEventWindowResponse) : this() {
            this.instanceEventWindow = x.instanceEventWindow
        }

        override fun build(): CreateInstanceEventWindowResponse = CreateInstanceEventWindowResponse(this)
        override fun instanceEventWindow(instanceEventWindow: InstanceEventWindow): FluentBuilder = apply { this.instanceEventWindow = instanceEventWindow }
    }
}
