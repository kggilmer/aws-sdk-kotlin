// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes an elastic inference accelerator.
 */
class ElasticInferenceAccelerator private constructor(builder: BuilderImpl) {
    /**
     * The number of elastic inference accelerators to attach to the instance.
     * Default: 1
     */
    val count: Int? = builder.count
    /**
     * The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, eia1.xlarge, eia2.medium, eia2.large, and eia2.xlarge.
     */
    val type: String? = builder.type

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ElasticInferenceAccelerator = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ElasticInferenceAccelerator(")
        append("count=$count,")
        append("type=$type)")
    }

    override fun hashCode(): kotlin.Int {
        var result = count ?: 0
        result = 31 * result + (type?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ElasticInferenceAccelerator

        if (count != other.count) return false
        if (type != other.type) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ElasticInferenceAccelerator = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ElasticInferenceAccelerator
        /**
         * The number of elastic inference accelerators to attach to the instance.
         * Default: 1
         */
        fun count(count: Int): FluentBuilder
        /**
         * The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, eia1.xlarge, eia2.medium, eia2.large, and eia2.xlarge.
         */
        fun type(type: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The number of elastic inference accelerators to attach to the instance.
         * Default: 1
         */
        var count: Int?
        /**
         * The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, eia1.xlarge, eia2.medium, eia2.large, and eia2.xlarge.
         */
        var type: String?

        fun build(): ElasticInferenceAccelerator
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var count: Int? = null
        override var type: String? = null

        constructor(x: ElasticInferenceAccelerator) : this() {
            this.count = x.count
            this.type = x.type
        }

        override fun build(): ElasticInferenceAccelerator = ElasticInferenceAccelerator(this)
        override fun count(count: Int): FluentBuilder = apply { this.count = count }
        override fun type(type: String): FluentBuilder = apply { this.type = type }
    }
}
