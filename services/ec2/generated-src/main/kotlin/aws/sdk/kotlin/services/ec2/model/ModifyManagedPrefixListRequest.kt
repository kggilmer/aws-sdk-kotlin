// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ModifyManagedPrefixListRequest private constructor(builder: BuilderImpl) {
    /**
     * One or more entries to add to the prefix list.
     */
    val addEntries: List<AddPrefixListEntry>? = builder.addEntries
    /**
     * The current version of the prefix list.
     */
    val currentVersion: Long? = builder.currentVersion
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The maximum number of entries for the prefix list. You cannot modify the entries
     * of a prefix list and modify the size of a prefix list at the same time.
     * If any of the resources that reference the prefix list cannot support the new
     * maximum size, the modify operation fails. Check the state message for the IDs of
     * the first ten resources that do not support the new maximum size.
     */
    val maxEntries: Int? = builder.maxEntries
    /**
     * The ID of the prefix list.
     */
    val prefixListId: String? = builder.prefixListId
    /**
     * A name for the prefix list.
     */
    val prefixListName: String? = builder.prefixListName
    /**
     * One or more entries to remove from the prefix list.
     */
    val removeEntries: List<RemovePrefixListEntry>? = builder.removeEntries

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ModifyManagedPrefixListRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyManagedPrefixListRequest(")
        append("addEntries=$addEntries,")
        append("currentVersion=$currentVersion,")
        append("dryRun=$dryRun,")
        append("maxEntries=$maxEntries,")
        append("prefixListId=$prefixListId,")
        append("prefixListName=$prefixListName,")
        append("removeEntries=$removeEntries)")
    }

    override fun hashCode(): kotlin.Int {
        var result = addEntries?.hashCode() ?: 0
        result = 31 * result + (currentVersion?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (maxEntries ?: 0)
        result = 31 * result + (prefixListId?.hashCode() ?: 0)
        result = 31 * result + (prefixListName?.hashCode() ?: 0)
        result = 31 * result + (removeEntries?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ModifyManagedPrefixListRequest

        if (addEntries != other.addEntries) return false
        if (currentVersion != other.currentVersion) return false
        if (dryRun != other.dryRun) return false
        if (maxEntries != other.maxEntries) return false
        if (prefixListId != other.prefixListId) return false
        if (prefixListName != other.prefixListName) return false
        if (removeEntries != other.removeEntries) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ModifyManagedPrefixListRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ModifyManagedPrefixListRequest
        /**
         * One or more entries to add to the prefix list.
         */
        fun addEntries(addEntries: List<AddPrefixListEntry>): FluentBuilder
        /**
         * The current version of the prefix list.
         */
        fun currentVersion(currentVersion: Long): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The maximum number of entries for the prefix list. You cannot modify the entries
         * of a prefix list and modify the size of a prefix list at the same time.
         * If any of the resources that reference the prefix list cannot support the new
         * maximum size, the modify operation fails. Check the state message for the IDs of
         * the first ten resources that do not support the new maximum size.
         */
        fun maxEntries(maxEntries: Int): FluentBuilder
        /**
         * The ID of the prefix list.
         */
        fun prefixListId(prefixListId: String): FluentBuilder
        /**
         * A name for the prefix list.
         */
        fun prefixListName(prefixListName: String): FluentBuilder
        /**
         * One or more entries to remove from the prefix list.
         */
        fun removeEntries(removeEntries: List<RemovePrefixListEntry>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * One or more entries to add to the prefix list.
         */
        var addEntries: List<AddPrefixListEntry>?
        /**
         * The current version of the prefix list.
         */
        var currentVersion: Long?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The maximum number of entries for the prefix list. You cannot modify the entries
         * of a prefix list and modify the size of a prefix list at the same time.
         * If any of the resources that reference the prefix list cannot support the new
         * maximum size, the modify operation fails. Check the state message for the IDs of
         * the first ten resources that do not support the new maximum size.
         */
        var maxEntries: Int?
        /**
         * The ID of the prefix list.
         */
        var prefixListId: String?
        /**
         * A name for the prefix list.
         */
        var prefixListName: String?
        /**
         * One or more entries to remove from the prefix list.
         */
        var removeEntries: List<RemovePrefixListEntry>?

        fun build(): ModifyManagedPrefixListRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var addEntries: List<AddPrefixListEntry>? = null
        override var currentVersion: Long? = null
        override var dryRun: Boolean? = null
        override var maxEntries: Int? = null
        override var prefixListId: String? = null
        override var prefixListName: String? = null
        override var removeEntries: List<RemovePrefixListEntry>? = null

        constructor(x: ModifyManagedPrefixListRequest) : this() {
            this.addEntries = x.addEntries
            this.currentVersion = x.currentVersion
            this.dryRun = x.dryRun
            this.maxEntries = x.maxEntries
            this.prefixListId = x.prefixListId
            this.prefixListName = x.prefixListName
            this.removeEntries = x.removeEntries
        }

        override fun build(): ModifyManagedPrefixListRequest = ModifyManagedPrefixListRequest(this)
        override fun addEntries(addEntries: List<AddPrefixListEntry>): FluentBuilder = apply { this.addEntries = addEntries }
        override fun currentVersion(currentVersion: Long): FluentBuilder = apply { this.currentVersion = currentVersion }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun maxEntries(maxEntries: Int): FluentBuilder = apply { this.maxEntries = maxEntries }
        override fun prefixListId(prefixListId: String): FluentBuilder = apply { this.prefixListId = prefixListId }
        override fun prefixListName(prefixListName: String): FluentBuilder = apply { this.prefixListName = prefixListName }
        override fun removeEntries(removeEntries: List<RemovePrefixListEntry>): FluentBuilder = apply { this.removeEntries = removeEntries }
    }
}
