// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class CreateTrafficMirrorFilterRuleResponse private constructor(builder: BuilderImpl) {
    /**
     * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency.
     */
    val clientToken: String? = builder.clientToken
    /**
     * The Traffic Mirror rule.
     */
    val trafficMirrorFilterRule: TrafficMirrorFilterRule? = builder.trafficMirrorFilterRule

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CreateTrafficMirrorFilterRuleResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CreateTrafficMirrorFilterRuleResponse(")
        append("clientToken=$clientToken,")
        append("trafficMirrorFilterRule=$trafficMirrorFilterRule)")
    }

    override fun hashCode(): kotlin.Int {
        var result = clientToken?.hashCode() ?: 0
        result = 31 * result + (trafficMirrorFilterRule?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CreateTrafficMirrorFilterRuleResponse

        if (clientToken != other.clientToken) return false
        if (trafficMirrorFilterRule != other.trafficMirrorFilterRule) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CreateTrafficMirrorFilterRuleResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CreateTrafficMirrorFilterRuleResponse
        /**
         * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency.
         */
        fun clientToken(clientToken: String): FluentBuilder
        /**
         * The Traffic Mirror rule.
         */
        fun trafficMirrorFilterRule(trafficMirrorFilterRule: TrafficMirrorFilterRule): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency.
         */
        var clientToken: String?
        /**
         * The Traffic Mirror rule.
         */
        var trafficMirrorFilterRule: TrafficMirrorFilterRule?

        fun build(): CreateTrafficMirrorFilterRuleResponse
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.TrafficMirrorFilterRule] inside the given [block]
         */
        fun trafficMirrorFilterRule(block: TrafficMirrorFilterRule.DslBuilder.() -> kotlin.Unit) {
            this.trafficMirrorFilterRule = TrafficMirrorFilterRule.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var clientToken: String? = null
        override var trafficMirrorFilterRule: TrafficMirrorFilterRule? = null

        constructor(x: CreateTrafficMirrorFilterRuleResponse) : this() {
            this.clientToken = x.clientToken
            this.trafficMirrorFilterRule = x.trafficMirrorFilterRule
        }

        override fun build(): CreateTrafficMirrorFilterRuleResponse = CreateTrafficMirrorFilterRuleResponse(this)
        override fun clientToken(clientToken: String): FluentBuilder = apply { this.clientToken = clientToken }
        override fun trafficMirrorFilterRule(trafficMirrorFilterRule: TrafficMirrorFilterRule): FluentBuilder = apply { this.trafficMirrorFilterRule = trafficMirrorFilterRule }
    }
}
