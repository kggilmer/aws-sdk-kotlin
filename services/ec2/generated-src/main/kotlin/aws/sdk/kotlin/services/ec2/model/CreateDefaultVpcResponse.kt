// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class CreateDefaultVpcResponse private constructor(builder: BuilderImpl) {
    /**
     * Information about the VPC.
     */
    val vpc: Vpc? = builder.vpc

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CreateDefaultVpcResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CreateDefaultVpcResponse(")
        append("vpc=$vpc)")
    }

    override fun hashCode(): kotlin.Int {
        var result = vpc?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CreateDefaultVpcResponse

        if (vpc != other.vpc) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CreateDefaultVpcResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CreateDefaultVpcResponse
        /**
         * Information about the VPC.
         */
        fun vpc(vpc: Vpc): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Information about the VPC.
         */
        var vpc: Vpc?

        fun build(): CreateDefaultVpcResponse
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.Vpc] inside the given [block]
         */
        fun vpc(block: Vpc.DslBuilder.() -> kotlin.Unit) {
            this.vpc = Vpc.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var vpc: Vpc? = null

        constructor(x: CreateDefaultVpcResponse) : this() {
            this.vpc = x.vpc
        }

        override fun build(): CreateDefaultVpcResponse = CreateDefaultVpcResponse(this)
        override fun vpc(vpc: Vpc): FluentBuilder = apply { this.vpc = vpc }
    }
}
