// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.Subnet
import aws.sdk.kotlin.services.ec2.model.SubnetIpv6CidrBlockAssociation
import aws.sdk.kotlin.services.ec2.model.SubnetState
import aws.sdk.kotlin.services.ec2.model.Tag
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName


internal suspend fun deserializeSubnetDocument(deserializer: Deserializer): Subnet {
    val builder = Subnet.builder()
    val ASSIGNIPV6ADDRESSONCREATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("assignIpv6AddressOnCreation"))
    val AVAILABILITYZONE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("availabilityZone"))
    val AVAILABILITYZONEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("availabilityZoneId"))
    val AVAILABLEIPADDRESSCOUNT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("availableIpAddressCount"))
    val CIDRBLOCK_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("cidrBlock"))
    val CUSTOMEROWNEDIPV4POOL_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("customerOwnedIpv4Pool"))
    val DEFAULTFORAZ_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("defaultForAz"))
    val IPV6CIDRBLOCKASSOCIATIONSET_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("ipv6CidrBlockAssociationSet"), XmlCollectionName("item"))
    val MAPCUSTOMEROWNEDIPONLAUNCH_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("mapCustomerOwnedIpOnLaunch"))
    val MAPPUBLICIPONLAUNCH_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("mapPublicIpOnLaunch"))
    val OUTPOSTARN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("outpostArn"))
    val OWNERID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ownerId"))
    val STATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("state"))
    val SUBNETARN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("subnetArn"))
    val SUBNETID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("subnetId"))
    val TAGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("tagSet"), XmlCollectionName("item"))
    val VPCID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("vpcId"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("Subnet"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(ASSIGNIPV6ADDRESSONCREATION_DESCRIPTOR)
        field(AVAILABILITYZONE_DESCRIPTOR)
        field(AVAILABILITYZONEID_DESCRIPTOR)
        field(AVAILABLEIPADDRESSCOUNT_DESCRIPTOR)
        field(CIDRBLOCK_DESCRIPTOR)
        field(CUSTOMEROWNEDIPV4POOL_DESCRIPTOR)
        field(DEFAULTFORAZ_DESCRIPTOR)
        field(IPV6CIDRBLOCKASSOCIATIONSET_DESCRIPTOR)
        field(MAPCUSTOMEROWNEDIPONLAUNCH_DESCRIPTOR)
        field(MAPPUBLICIPONLAUNCH_DESCRIPTOR)
        field(OUTPOSTARN_DESCRIPTOR)
        field(OWNERID_DESCRIPTOR)
        field(STATE_DESCRIPTOR)
        field(SUBNETARN_DESCRIPTOR)
        field(SUBNETID_DESCRIPTOR)
        field(TAGS_DESCRIPTOR)
        field(VPCID_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                ASSIGNIPV6ADDRESSONCREATION_DESCRIPTOR.index -> builder.assignIpv6AddressOnCreation = deserializeBoolean()
                AVAILABILITYZONE_DESCRIPTOR.index -> builder.availabilityZone = deserializeString()
                AVAILABILITYZONEID_DESCRIPTOR.index -> builder.availabilityZoneId = deserializeString()
                AVAILABLEIPADDRESSCOUNT_DESCRIPTOR.index -> builder.availableIpAddressCount = deserializeInt()
                CIDRBLOCK_DESCRIPTOR.index -> builder.cidrBlock = deserializeString()
                CUSTOMEROWNEDIPV4POOL_DESCRIPTOR.index -> builder.customerOwnedIpv4Pool = deserializeString()
                DEFAULTFORAZ_DESCRIPTOR.index -> builder.defaultForAz = deserializeBoolean()
                IPV6CIDRBLOCKASSOCIATIONSET_DESCRIPTOR.index -> builder.ipv6CidrBlockAssociationSet =
                    deserializer.deserializeList(IPV6CIDRBLOCKASSOCIATIONSET_DESCRIPTOR) {
                        val col0 = mutableListOf<SubnetIpv6CidrBlockAssociation>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeSubnetIpv6CidrBlockAssociationDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                MAPCUSTOMEROWNEDIPONLAUNCH_DESCRIPTOR.index -> builder.mapCustomerOwnedIpOnLaunch = deserializeBoolean()
                MAPPUBLICIPONLAUNCH_DESCRIPTOR.index -> builder.mapPublicIpOnLaunch = deserializeBoolean()
                OUTPOSTARN_DESCRIPTOR.index -> builder.outpostArn = deserializeString()
                OWNERID_DESCRIPTOR.index -> builder.ownerId = deserializeString()
                STATE_DESCRIPTOR.index -> builder.state = deserializeString().let { SubnetState.fromValue(it) }
                SUBNETARN_DESCRIPTOR.index -> builder.subnetArn = deserializeString()
                SUBNETID_DESCRIPTOR.index -> builder.subnetId = deserializeString()
                TAGS_DESCRIPTOR.index -> builder.tags =
                    deserializer.deserializeList(TAGS_DESCRIPTOR) {
                        val col0 = mutableListOf<Tag>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeTagDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                VPCID_DESCRIPTOR.index -> builder.vpcId = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
