// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ModifyTrafficMirrorFilterNetworkServicesRequest private constructor(builder: BuilderImpl) {
    /**
     * The network service, for example Amazon DNS, that you want to mirror.
     */
    val addNetworkServices: List<TrafficMirrorNetworkService>? = builder.addNetworkServices
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The network service, for example Amazon DNS, that you no longer want to mirror.
     */
    val removeNetworkServices: List<TrafficMirrorNetworkService>? = builder.removeNetworkServices
    /**
     * The ID of the Traffic Mirror filter.
     */
    val trafficMirrorFilterId: String? = builder.trafficMirrorFilterId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ModifyTrafficMirrorFilterNetworkServicesRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyTrafficMirrorFilterNetworkServicesRequest(")
        append("addNetworkServices=$addNetworkServices,")
        append("dryRun=$dryRun,")
        append("removeNetworkServices=$removeNetworkServices,")
        append("trafficMirrorFilterId=$trafficMirrorFilterId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = addNetworkServices?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (removeNetworkServices?.hashCode() ?: 0)
        result = 31 * result + (trafficMirrorFilterId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ModifyTrafficMirrorFilterNetworkServicesRequest

        if (addNetworkServices != other.addNetworkServices) return false
        if (dryRun != other.dryRun) return false
        if (removeNetworkServices != other.removeNetworkServices) return false
        if (trafficMirrorFilterId != other.trafficMirrorFilterId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ModifyTrafficMirrorFilterNetworkServicesRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ModifyTrafficMirrorFilterNetworkServicesRequest
        /**
         * The network service, for example Amazon DNS, that you want to mirror.
         */
        fun addNetworkServices(addNetworkServices: List<TrafficMirrorNetworkService>): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The network service, for example Amazon DNS, that you no longer want to mirror.
         */
        fun removeNetworkServices(removeNetworkServices: List<TrafficMirrorNetworkService>): FluentBuilder
        /**
         * The ID of the Traffic Mirror filter.
         */
        fun trafficMirrorFilterId(trafficMirrorFilterId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The network service, for example Amazon DNS, that you want to mirror.
         */
        var addNetworkServices: List<TrafficMirrorNetworkService>?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The network service, for example Amazon DNS, that you no longer want to mirror.
         */
        var removeNetworkServices: List<TrafficMirrorNetworkService>?
        /**
         * The ID of the Traffic Mirror filter.
         */
        var trafficMirrorFilterId: String?

        fun build(): ModifyTrafficMirrorFilterNetworkServicesRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var addNetworkServices: List<TrafficMirrorNetworkService>? = null
        override var dryRun: Boolean? = null
        override var removeNetworkServices: List<TrafficMirrorNetworkService>? = null
        override var trafficMirrorFilterId: String? = null

        constructor(x: ModifyTrafficMirrorFilterNetworkServicesRequest) : this() {
            this.addNetworkServices = x.addNetworkServices
            this.dryRun = x.dryRun
            this.removeNetworkServices = x.removeNetworkServices
            this.trafficMirrorFilterId = x.trafficMirrorFilterId
        }

        override fun build(): ModifyTrafficMirrorFilterNetworkServicesRequest = ModifyTrafficMirrorFilterNetworkServicesRequest(this)
        override fun addNetworkServices(addNetworkServices: List<TrafficMirrorNetworkService>): FluentBuilder = apply { this.addNetworkServices = addNetworkServices }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun removeNetworkServices(removeNetworkServices: List<TrafficMirrorNetworkService>): FluentBuilder = apply { this.removeNetworkServices = removeNetworkServices }
        override fun trafficMirrorFilterId(trafficMirrorFilterId: String): FluentBuilder = apply { this.trafficMirrorFilterId = trafficMirrorFilterId }
    }
}
