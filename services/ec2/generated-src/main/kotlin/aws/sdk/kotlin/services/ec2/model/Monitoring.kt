// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the monitoring of an instance.
 */
class Monitoring private constructor(builder: BuilderImpl) {
    /**
     * Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is
     * enabled.
     */
    val state: MonitoringState? = builder.state

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): Monitoring = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("Monitoring(")
        append("state=$state)")
    }

    override fun hashCode(): kotlin.Int {
        var result = state?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Monitoring

        if (state != other.state) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): Monitoring = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): Monitoring
        /**
         * Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is
         * enabled.
         */
        fun state(state: MonitoringState): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is
         * enabled.
         */
        var state: MonitoringState?

        fun build(): Monitoring
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var state: MonitoringState? = null

        constructor(x: Monitoring) : this() {
            this.state = x.state
        }

        override fun build(): Monitoring = Monitoring(this)
        override fun state(state: MonitoringState): FluentBuilder = apply { this.state = state }
    }
}
