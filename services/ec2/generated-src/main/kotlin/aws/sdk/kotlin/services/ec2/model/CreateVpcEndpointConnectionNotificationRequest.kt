// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class CreateVpcEndpointConnectionNotificationRequest private constructor(builder: BuilderImpl) {
    /**
     * Unique, case-sensitive identifier that you provide to ensure the idempotency of the
     * request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure
     * idempotency.
     */
    val clientToken: String? = builder.clientToken
    /**
     * One or more endpoint events for which to receive notifications. Valid values are
     * Accept, Connect, Delete, and
     * Reject.
     */
    val connectionEvents: List<String>? = builder.connectionEvents
    /**
     * The ARN of the SNS topic for the notifications.
     */
    val connectionNotificationArn: String? = builder.connectionNotificationArn
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * The ID of the endpoint service.
     */
    val serviceId: String? = builder.serviceId
    /**
     * The ID of the endpoint.
     */
    val vpcEndpointId: String? = builder.vpcEndpointId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CreateVpcEndpointConnectionNotificationRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CreateVpcEndpointConnectionNotificationRequest(")
        append("clientToken=$clientToken,")
        append("connectionEvents=$connectionEvents,")
        append("connectionNotificationArn=$connectionNotificationArn,")
        append("dryRun=$dryRun,")
        append("serviceId=$serviceId,")
        append("vpcEndpointId=$vpcEndpointId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = clientToken?.hashCode() ?: 0
        result = 31 * result + (connectionEvents?.hashCode() ?: 0)
        result = 31 * result + (connectionNotificationArn?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (serviceId?.hashCode() ?: 0)
        result = 31 * result + (vpcEndpointId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CreateVpcEndpointConnectionNotificationRequest

        if (clientToken != other.clientToken) return false
        if (connectionEvents != other.connectionEvents) return false
        if (connectionNotificationArn != other.connectionNotificationArn) return false
        if (dryRun != other.dryRun) return false
        if (serviceId != other.serviceId) return false
        if (vpcEndpointId != other.vpcEndpointId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CreateVpcEndpointConnectionNotificationRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CreateVpcEndpointConnectionNotificationRequest
        /**
         * Unique, case-sensitive identifier that you provide to ensure the idempotency of the
         * request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure
         * idempotency.
         */
        fun clientToken(clientToken: String): FluentBuilder
        /**
         * One or more endpoint events for which to receive notifications. Valid values are
         * Accept, Connect, Delete, and
         * Reject.
         */
        fun connectionEvents(connectionEvents: List<String>): FluentBuilder
        /**
         * The ARN of the SNS topic for the notifications.
         */
        fun connectionNotificationArn(connectionNotificationArn: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * The ID of the endpoint service.
         */
        fun serviceId(serviceId: String): FluentBuilder
        /**
         * The ID of the endpoint.
         */
        fun vpcEndpointId(vpcEndpointId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Unique, case-sensitive identifier that you provide to ensure the idempotency of the
         * request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure
         * idempotency.
         */
        var clientToken: String?
        /**
         * One or more endpoint events for which to receive notifications. Valid values are
         * Accept, Connect, Delete, and
         * Reject.
         */
        var connectionEvents: List<String>?
        /**
         * The ARN of the SNS topic for the notifications.
         */
        var connectionNotificationArn: String?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * The ID of the endpoint service.
         */
        var serviceId: String?
        /**
         * The ID of the endpoint.
         */
        var vpcEndpointId: String?

        fun build(): CreateVpcEndpointConnectionNotificationRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var clientToken: String? = null
        override var connectionEvents: List<String>? = null
        override var connectionNotificationArn: String? = null
        override var dryRun: Boolean? = null
        override var serviceId: String? = null
        override var vpcEndpointId: String? = null

        constructor(x: CreateVpcEndpointConnectionNotificationRequest) : this() {
            this.clientToken = x.clientToken
            this.connectionEvents = x.connectionEvents
            this.connectionNotificationArn = x.connectionNotificationArn
            this.dryRun = x.dryRun
            this.serviceId = x.serviceId
            this.vpcEndpointId = x.vpcEndpointId
        }

        override fun build(): CreateVpcEndpointConnectionNotificationRequest = CreateVpcEndpointConnectionNotificationRequest(this)
        override fun clientToken(clientToken: String): FluentBuilder = apply { this.clientToken = clientToken }
        override fun connectionEvents(connectionEvents: List<String>): FluentBuilder = apply { this.connectionEvents = connectionEvents }
        override fun connectionNotificationArn(connectionNotificationArn: String): FluentBuilder = apply { this.connectionNotificationArn = connectionNotificationArn }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun serviceId(serviceId: String): FluentBuilder = apply { this.serviceId = serviceId }
        override fun vpcEndpointId(vpcEndpointId: String): FluentBuilder = apply { this.vpcEndpointId = vpcEndpointId }
    }
}
