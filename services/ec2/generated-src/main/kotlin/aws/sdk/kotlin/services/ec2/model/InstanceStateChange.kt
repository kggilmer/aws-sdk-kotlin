// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes an instance state change.
 */
class InstanceStateChange private constructor(builder: BuilderImpl) {
    /**
     * The current state of the instance.
     */
    val currentState: InstanceState? = builder.currentState
    /**
     * The ID of the instance.
     */
    val instanceId: String? = builder.instanceId
    /**
     * The previous state of the instance.
     */
    val previousState: InstanceState? = builder.previousState

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): InstanceStateChange = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("InstanceStateChange(")
        append("currentState=$currentState,")
        append("instanceId=$instanceId,")
        append("previousState=$previousState)")
    }

    override fun hashCode(): kotlin.Int {
        var result = currentState?.hashCode() ?: 0
        result = 31 * result + (instanceId?.hashCode() ?: 0)
        result = 31 * result + (previousState?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as InstanceStateChange

        if (currentState != other.currentState) return false
        if (instanceId != other.instanceId) return false
        if (previousState != other.previousState) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): InstanceStateChange = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): InstanceStateChange
        /**
         * The current state of the instance.
         */
        fun currentState(currentState: InstanceState): FluentBuilder
        /**
         * The ID of the instance.
         */
        fun instanceId(instanceId: String): FluentBuilder
        /**
         * The previous state of the instance.
         */
        fun previousState(previousState: InstanceState): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The current state of the instance.
         */
        var currentState: InstanceState?
        /**
         * The ID of the instance.
         */
        var instanceId: String?
        /**
         * The previous state of the instance.
         */
        var previousState: InstanceState?

        fun build(): InstanceStateChange
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.InstanceState] inside the given [block]
         */
        fun currentState(block: InstanceState.DslBuilder.() -> kotlin.Unit) {
            this.currentState = InstanceState.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.InstanceState] inside the given [block]
         */
        fun previousState(block: InstanceState.DslBuilder.() -> kotlin.Unit) {
            this.previousState = InstanceState.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var currentState: InstanceState? = null
        override var instanceId: String? = null
        override var previousState: InstanceState? = null

        constructor(x: InstanceStateChange) : this() {
            this.currentState = x.currentState
            this.instanceId = x.instanceId
            this.previousState = x.previousState
        }

        override fun build(): InstanceStateChange = InstanceStateChange(this)
        override fun currentState(currentState: InstanceState): FluentBuilder = apply { this.currentState = currentState }
        override fun instanceId(instanceId: String): FluentBuilder = apply { this.instanceId = instanceId }
        override fun previousState(previousState: InstanceState): FluentBuilder = apply { this.previousState = previousState }
    }
}
