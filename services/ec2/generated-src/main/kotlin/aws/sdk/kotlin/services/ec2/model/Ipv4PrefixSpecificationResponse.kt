// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Information about the IPv4 delegated prefixes assigned
 * to a network interface.
 */
class Ipv4PrefixSpecificationResponse private constructor(builder: BuilderImpl) {
    /**
     * One or more IPv4 delegated prefixes assigned to the network interface.
     */
    val ipv4Prefix: String? = builder.ipv4Prefix

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): Ipv4PrefixSpecificationResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("Ipv4PrefixSpecificationResponse(")
        append("ipv4Prefix=$ipv4Prefix)")
    }

    override fun hashCode(): kotlin.Int {
        var result = ipv4Prefix?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Ipv4PrefixSpecificationResponse

        if (ipv4Prefix != other.ipv4Prefix) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): Ipv4PrefixSpecificationResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): Ipv4PrefixSpecificationResponse
        /**
         * One or more IPv4 delegated prefixes assigned to the network interface.
         */
        fun ipv4Prefix(ipv4Prefix: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * One or more IPv4 delegated prefixes assigned to the network interface.
         */
        var ipv4Prefix: String?

        fun build(): Ipv4PrefixSpecificationResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var ipv4Prefix: String? = null

        constructor(x: Ipv4PrefixSpecificationResponse) : this() {
            this.ipv4Prefix = x.ipv4Prefix
        }

        override fun build(): Ipv4PrefixSpecificationResponse = Ipv4PrefixSpecificationResponse(this)
        override fun ipv4Prefix(ipv4Prefix: String): FluentBuilder = apply { this.ipv4Prefix = ipv4Prefix }
    }
}
