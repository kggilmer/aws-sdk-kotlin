// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class DescribeInstanceTypeOfferingsRequest private constructor(builder: BuilderImpl) {
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is
     * DryRunOperation. Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * One or more filters. Filter names and values are case-sensitive.
     * location - This depends on the location type. For example, if the location type is
     * region (default), the location is the Region code (for example, us-east-2.)
     * instance-type - The instance type. For example,
     * c5.2xlarge.
     */
    val filters: List<Filter>? = builder.filters
    /**
     * The location type.
     */
    val locationType: LocationType? = builder.locationType
    /**
     * The maximum number of results to return for the request in a single page. The remaining results
     * can be seen by sending another request with the next token value.
     */
    val maxResults: Int? = builder.maxResults
    /**
     * The token to retrieve the next page of results.
     */
    val nextToken: String? = builder.nextToken

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DescribeInstanceTypeOfferingsRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DescribeInstanceTypeOfferingsRequest(")
        append("dryRun=$dryRun,")
        append("filters=$filters,")
        append("locationType=$locationType,")
        append("maxResults=$maxResults,")
        append("nextToken=$nextToken)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (filters?.hashCode() ?: 0)
        result = 31 * result + (locationType?.hashCode() ?: 0)
        result = 31 * result + (maxResults ?: 0)
        result = 31 * result + (nextToken?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DescribeInstanceTypeOfferingsRequest

        if (dryRun != other.dryRun) return false
        if (filters != other.filters) return false
        if (locationType != other.locationType) return false
        if (maxResults != other.maxResults) return false
        if (nextToken != other.nextToken) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DescribeInstanceTypeOfferingsRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DescribeInstanceTypeOfferingsRequest
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is
         * DryRunOperation. Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * One or more filters. Filter names and values are case-sensitive.
         * location - This depends on the location type. For example, if the location type is
         * region (default), the location is the Region code (for example, us-east-2.)
         * instance-type - The instance type. For example,
         * c5.2xlarge.
         */
        fun filters(filters: List<Filter>): FluentBuilder
        /**
         * The location type.
         */
        fun locationType(locationType: LocationType): FluentBuilder
        /**
         * The maximum number of results to return for the request in a single page. The remaining results
         * can be seen by sending another request with the next token value.
         */
        fun maxResults(maxResults: Int): FluentBuilder
        /**
         * The token to retrieve the next page of results.
         */
        fun nextToken(nextToken: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is
         * DryRunOperation. Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * One or more filters. Filter names and values are case-sensitive.
         * location - This depends on the location type. For example, if the location type is
         * region (default), the location is the Region code (for example, us-east-2.)
         * instance-type - The instance type. For example,
         * c5.2xlarge.
         */
        var filters: List<Filter>?
        /**
         * The location type.
         */
        var locationType: LocationType?
        /**
         * The maximum number of results to return for the request in a single page. The remaining results
         * can be seen by sending another request with the next token value.
         */
        var maxResults: Int?
        /**
         * The token to retrieve the next page of results.
         */
        var nextToken: String?

        fun build(): DescribeInstanceTypeOfferingsRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var dryRun: Boolean? = null
        override var filters: List<Filter>? = null
        override var locationType: LocationType? = null
        override var maxResults: Int? = null
        override var nextToken: String? = null

        constructor(x: DescribeInstanceTypeOfferingsRequest) : this() {
            this.dryRun = x.dryRun
            this.filters = x.filters
            this.locationType = x.locationType
            this.maxResults = x.maxResults
            this.nextToken = x.nextToken
        }

        override fun build(): DescribeInstanceTypeOfferingsRequest = DescribeInstanceTypeOfferingsRequest(this)
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun filters(filters: List<Filter>): FluentBuilder = apply { this.filters = filters }
        override fun locationType(locationType: LocationType): FluentBuilder = apply { this.locationType = locationType }
        override fun maxResults(maxResults: Int): FluentBuilder = apply { this.maxResults = maxResults }
        override fun nextToken(nextToken: String): FluentBuilder = apply { this.nextToken = nextToken }
    }
}
