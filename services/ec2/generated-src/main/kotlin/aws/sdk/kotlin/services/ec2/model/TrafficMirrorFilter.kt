// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the Traffic Mirror filter.
 */
class TrafficMirrorFilter private constructor(builder: BuilderImpl) {
    /**
     * The description of the Traffic Mirror filter.
     */
    val description: String? = builder.description
    /**
     * Information about the egress rules that are associated with the Traffic Mirror filter.
     */
    val egressFilterRules: List<TrafficMirrorFilterRule>? = builder.egressFilterRules
    /**
     * Information about the ingress rules that are associated with the Traffic Mirror filter.
     */
    val ingressFilterRules: List<TrafficMirrorFilterRule>? = builder.ingressFilterRules
    /**
     * The network service traffic that is associated with the Traffic Mirror filter.
     */
    val networkServices: List<TrafficMirrorNetworkService>? = builder.networkServices
    /**
     * The tags assigned to the Traffic Mirror filter.
     */
    val tags: List<Tag>? = builder.tags
    /**
     * The ID of the Traffic Mirror filter.
     */
    val trafficMirrorFilterId: String? = builder.trafficMirrorFilterId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): TrafficMirrorFilter = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("TrafficMirrorFilter(")
        append("description=$description,")
        append("egressFilterRules=$egressFilterRules,")
        append("ingressFilterRules=$ingressFilterRules,")
        append("networkServices=$networkServices,")
        append("tags=$tags,")
        append("trafficMirrorFilterId=$trafficMirrorFilterId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = description?.hashCode() ?: 0
        result = 31 * result + (egressFilterRules?.hashCode() ?: 0)
        result = 31 * result + (ingressFilterRules?.hashCode() ?: 0)
        result = 31 * result + (networkServices?.hashCode() ?: 0)
        result = 31 * result + (tags?.hashCode() ?: 0)
        result = 31 * result + (trafficMirrorFilterId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as TrafficMirrorFilter

        if (description != other.description) return false
        if (egressFilterRules != other.egressFilterRules) return false
        if (ingressFilterRules != other.ingressFilterRules) return false
        if (networkServices != other.networkServices) return false
        if (tags != other.tags) return false
        if (trafficMirrorFilterId != other.trafficMirrorFilterId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): TrafficMirrorFilter = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): TrafficMirrorFilter
        /**
         * The description of the Traffic Mirror filter.
         */
        fun description(description: String): FluentBuilder
        /**
         * Information about the egress rules that are associated with the Traffic Mirror filter.
         */
        fun egressFilterRules(egressFilterRules: List<TrafficMirrorFilterRule>): FluentBuilder
        /**
         * Information about the ingress rules that are associated with the Traffic Mirror filter.
         */
        fun ingressFilterRules(ingressFilterRules: List<TrafficMirrorFilterRule>): FluentBuilder
        /**
         * The network service traffic that is associated with the Traffic Mirror filter.
         */
        fun networkServices(networkServices: List<TrafficMirrorNetworkService>): FluentBuilder
        /**
         * The tags assigned to the Traffic Mirror filter.
         */
        fun tags(tags: List<Tag>): FluentBuilder
        /**
         * The ID of the Traffic Mirror filter.
         */
        fun trafficMirrorFilterId(trafficMirrorFilterId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The description of the Traffic Mirror filter.
         */
        var description: String?
        /**
         * Information about the egress rules that are associated with the Traffic Mirror filter.
         */
        var egressFilterRules: List<TrafficMirrorFilterRule>?
        /**
         * Information about the ingress rules that are associated with the Traffic Mirror filter.
         */
        var ingressFilterRules: List<TrafficMirrorFilterRule>?
        /**
         * The network service traffic that is associated with the Traffic Mirror filter.
         */
        var networkServices: List<TrafficMirrorNetworkService>?
        /**
         * The tags assigned to the Traffic Mirror filter.
         */
        var tags: List<Tag>?
        /**
         * The ID of the Traffic Mirror filter.
         */
        var trafficMirrorFilterId: String?

        fun build(): TrafficMirrorFilter
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var description: String? = null
        override var egressFilterRules: List<TrafficMirrorFilterRule>? = null
        override var ingressFilterRules: List<TrafficMirrorFilterRule>? = null
        override var networkServices: List<TrafficMirrorNetworkService>? = null
        override var tags: List<Tag>? = null
        override var trafficMirrorFilterId: String? = null

        constructor(x: TrafficMirrorFilter) : this() {
            this.description = x.description
            this.egressFilterRules = x.egressFilterRules
            this.ingressFilterRules = x.ingressFilterRules
            this.networkServices = x.networkServices
            this.tags = x.tags
            this.trafficMirrorFilterId = x.trafficMirrorFilterId
        }

        override fun build(): TrafficMirrorFilter = TrafficMirrorFilter(this)
        override fun description(description: String): FluentBuilder = apply { this.description = description }
        override fun egressFilterRules(egressFilterRules: List<TrafficMirrorFilterRule>): FluentBuilder = apply { this.egressFilterRules = egressFilterRules }
        override fun ingressFilterRules(ingressFilterRules: List<TrafficMirrorFilterRule>): FluentBuilder = apply { this.ingressFilterRules = ingressFilterRules }
        override fun networkServices(networkServices: List<TrafficMirrorNetworkService>): FluentBuilder = apply { this.networkServices = networkServices }
        override fun tags(tags: List<Tag>): FluentBuilder = apply { this.tags = tags }
        override fun trafficMirrorFilterId(trafficMirrorFilterId: String): FluentBuilder = apply { this.trafficMirrorFilterId = trafficMirrorFilterId }
    }
}
