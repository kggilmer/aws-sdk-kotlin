// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2

import aws.sdk.kotlin.runtime.auth.signing.AwsSigV4SigningMiddleware
import aws.sdk.kotlin.runtime.http.ApiMetadata
import aws.sdk.kotlin.runtime.http.AwsUserAgentMetadata
import aws.sdk.kotlin.runtime.http.middleware.ResolveAwsEndpoint
import aws.sdk.kotlin.runtime.http.middleware.UserAgent
import aws.sdk.kotlin.runtime.http.retries.AwsDefaultRetryPolicy
import aws.sdk.kotlin.services.ec2.model.*
import aws.smithy.kotlin.runtime.http.middleware.MutateHeaders
import aws.smithy.kotlin.runtime.http.middleware.RetryFeature
import aws.smithy.kotlin.runtime.http.operation.SdkHttpOperation

private val awsUserAgentMetadata = AwsUserAgentMetadata.fromEnvironment(ApiMetadata(ServiceId, SdkVersion))

internal fun registerAcceptReservedInstancesExchangeQuoteMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AcceptReservedInstancesExchangeQuoteRequest,AcceptReservedInstancesExchangeQuoteResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAcceptTransitGatewayMulticastDomainAssociationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AcceptTransitGatewayMulticastDomainAssociationsRequest,AcceptTransitGatewayMulticastDomainAssociationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAcceptTransitGatewayPeeringAttachmentMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AcceptTransitGatewayPeeringAttachmentRequest,AcceptTransitGatewayPeeringAttachmentResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAcceptTransitGatewayVpcAttachmentMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AcceptTransitGatewayVpcAttachmentRequest,AcceptTransitGatewayVpcAttachmentResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAcceptVpcEndpointConnectionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AcceptVpcEndpointConnectionsRequest,AcceptVpcEndpointConnectionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAcceptVpcPeeringConnectionMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AcceptVpcPeeringConnectionRequest,AcceptVpcPeeringConnectionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAdvertiseByoipCidrMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AdvertiseByoipCidrRequest,AdvertiseByoipCidrResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAllocateAddressMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AllocateAddressRequest,AllocateAddressResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAllocateHostsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AllocateHostsRequest,AllocateHostsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerApplySecurityGroupsToClientVpnTargetNetworkMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ApplySecurityGroupsToClientVpnTargetNetworkRequest,ApplySecurityGroupsToClientVpnTargetNetworkResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAssignIpv6AddressesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AssignIpv6AddressesRequest,AssignIpv6AddressesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAssignPrivateIpAddressesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AssignPrivateIpAddressesRequest,AssignPrivateIpAddressesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAssociateAddressMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AssociateAddressRequest,AssociateAddressResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAssociateClientVpnTargetNetworkMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AssociateClientVpnTargetNetworkRequest,AssociateClientVpnTargetNetworkResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAssociateDhcpOptionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AssociateDhcpOptionsRequest,AssociateDhcpOptionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAssociateEnclaveCertificateIamRoleMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AssociateEnclaveCertificateIamRoleRequest,AssociateEnclaveCertificateIamRoleResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAssociateIamInstanceProfileMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AssociateIamInstanceProfileRequest,AssociateIamInstanceProfileResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAssociateInstanceEventWindowMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AssociateInstanceEventWindowRequest,AssociateInstanceEventWindowResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAssociateRouteTableMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AssociateRouteTableRequest,AssociateRouteTableResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAssociateSubnetCidrBlockMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AssociateSubnetCidrBlockRequest,AssociateSubnetCidrBlockResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAssociateTransitGatewayMulticastDomainMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AssociateTransitGatewayMulticastDomainRequest,AssociateTransitGatewayMulticastDomainResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAssociateTransitGatewayRouteTableMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AssociateTransitGatewayRouteTableRequest,AssociateTransitGatewayRouteTableResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAssociateTrunkInterfaceMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AssociateTrunkInterfaceRequest,AssociateTrunkInterfaceResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAssociateVpcCidrBlockMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AssociateVpcCidrBlockRequest,AssociateVpcCidrBlockResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAttachClassicLinkVpcMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AttachClassicLinkVpcRequest,AttachClassicLinkVpcResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAttachInternetGatewayMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AttachInternetGatewayRequest,AttachInternetGatewayResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAttachNetworkInterfaceMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AttachNetworkInterfaceRequest,AttachNetworkInterfaceResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAttachVolumeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AttachVolumeRequest,AttachVolumeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAttachVpnGatewayMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AttachVpnGatewayRequest,AttachVpnGatewayResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAuthorizeClientVpnIngressMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AuthorizeClientVpnIngressRequest,AuthorizeClientVpnIngressResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAuthorizeSecurityGroupEgressMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AuthorizeSecurityGroupEgressRequest,AuthorizeSecurityGroupEgressResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerAuthorizeSecurityGroupIngressMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<AuthorizeSecurityGroupIngressRequest,AuthorizeSecurityGroupIngressResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerBundleInstanceMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<BundleInstanceRequest,BundleInstanceResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCancelBundleTaskMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CancelBundleTaskRequest,CancelBundleTaskResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCancelCapacityReservationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CancelCapacityReservationRequest,CancelCapacityReservationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCancelCapacityReservationFleetsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CancelCapacityReservationFleetsRequest,CancelCapacityReservationFleetsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCancelConversionTaskMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CancelConversionTaskRequest,CancelConversionTaskResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCancelExportTaskMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CancelExportTaskRequest,CancelExportTaskResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCancelImportTaskMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CancelImportTaskRequest,CancelImportTaskResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCancelReservedInstancesListingMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CancelReservedInstancesListingRequest,CancelReservedInstancesListingResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCancelSpotFleetRequestsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CancelSpotFleetRequestsRequest,CancelSpotFleetRequestsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCancelSpotInstanceRequestsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CancelSpotInstanceRequestsRequest,CancelSpotInstanceRequestsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerConfirmProductInstanceMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ConfirmProductInstanceRequest,ConfirmProductInstanceResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCopyFpgaImageMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CopyFpgaImageRequest,CopyFpgaImageResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCopyImageMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CopyImageRequest,CopyImageResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCopySnapshotMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CopySnapshotRequest,CopySnapshotResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateCapacityReservationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateCapacityReservationRequest,CreateCapacityReservationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateCapacityReservationFleetMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateCapacityReservationFleetRequest,CreateCapacityReservationFleetResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateCarrierGatewayMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateCarrierGatewayRequest,CreateCarrierGatewayResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateClientVpnEndpointMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateClientVpnEndpointRequest,CreateClientVpnEndpointResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateClientVpnRouteMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateClientVpnRouteRequest,CreateClientVpnRouteResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateCustomerGatewayMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateCustomerGatewayRequest,CreateCustomerGatewayResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateDefaultSubnetMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateDefaultSubnetRequest,CreateDefaultSubnetResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateDefaultVpcMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateDefaultVpcRequest,CreateDefaultVpcResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateDhcpOptionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateDhcpOptionsRequest,CreateDhcpOptionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateEgressOnlyInternetGatewayMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateEgressOnlyInternetGatewayRequest,CreateEgressOnlyInternetGatewayResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateFleetMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateFleetRequest,CreateFleetResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateFlowLogsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateFlowLogsRequest,CreateFlowLogsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateFpgaImageMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateFpgaImageRequest,CreateFpgaImageResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateImageMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateImageRequest,CreateImageResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateInstanceEventWindowMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateInstanceEventWindowRequest,CreateInstanceEventWindowResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateInstanceExportTaskMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateInstanceExportTaskRequest,CreateInstanceExportTaskResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateInternetGatewayMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateInternetGatewayRequest,CreateInternetGatewayResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateKeyPairMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateKeyPairRequest,CreateKeyPairResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateLaunchTemplateMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateLaunchTemplateRequest,CreateLaunchTemplateResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateLaunchTemplateVersionMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateLaunchTemplateVersionRequest,CreateLaunchTemplateVersionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateLocalGatewayRouteMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateLocalGatewayRouteRequest,CreateLocalGatewayRouteResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateLocalGatewayRouteTableVpcAssociationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateLocalGatewayRouteTableVpcAssociationRequest,CreateLocalGatewayRouteTableVpcAssociationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateManagedPrefixListMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateManagedPrefixListRequest,CreateManagedPrefixListResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateNatGatewayMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateNatGatewayRequest,CreateNatGatewayResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateNetworkAclMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateNetworkAclRequest,CreateNetworkAclResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateNetworkAclEntryMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateNetworkAclEntryRequest,CreateNetworkAclEntryResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateNetworkInsightsPathMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateNetworkInsightsPathRequest,CreateNetworkInsightsPathResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateNetworkInterfaceMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateNetworkInterfaceRequest,CreateNetworkInterfaceResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateNetworkInterfacePermissionMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateNetworkInterfacePermissionRequest,CreateNetworkInterfacePermissionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreatePlacementGroupMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreatePlacementGroupRequest,CreatePlacementGroupResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateReplaceRootVolumeTaskMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateReplaceRootVolumeTaskRequest,CreateReplaceRootVolumeTaskResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateReservedInstancesListingMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateReservedInstancesListingRequest,CreateReservedInstancesListingResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateRestoreImageTaskMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateRestoreImageTaskRequest,CreateRestoreImageTaskResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateRouteMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateRouteRequest,CreateRouteResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateRouteTableMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateRouteTableRequest,CreateRouteTableResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateSecurityGroupMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateSecurityGroupRequest,CreateSecurityGroupResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateSnapshotMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateSnapshotRequest,CreateSnapshotResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateSnapshotsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateSnapshotsRequest,CreateSnapshotsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateSpotDatafeedSubscriptionMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateSpotDatafeedSubscriptionRequest,CreateSpotDatafeedSubscriptionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateStoreImageTaskMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateStoreImageTaskRequest,CreateStoreImageTaskResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateSubnetMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateSubnetRequest,CreateSubnetResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateSubnetCidrReservationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateSubnetCidrReservationRequest,CreateSubnetCidrReservationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateTagsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateTagsRequest,CreateTagsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateTrafficMirrorFilterMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateTrafficMirrorFilterRequest,CreateTrafficMirrorFilterResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateTrafficMirrorFilterRuleMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateTrafficMirrorFilterRuleRequest,CreateTrafficMirrorFilterRuleResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateTrafficMirrorSessionMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateTrafficMirrorSessionRequest,CreateTrafficMirrorSessionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateTrafficMirrorTargetMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateTrafficMirrorTargetRequest,CreateTrafficMirrorTargetResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateTransitGatewayMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateTransitGatewayRequest,CreateTransitGatewayResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateTransitGatewayConnectMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateTransitGatewayConnectRequest,CreateTransitGatewayConnectResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateTransitGatewayConnectPeerMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateTransitGatewayConnectPeerRequest,CreateTransitGatewayConnectPeerResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateTransitGatewayMulticastDomainMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateTransitGatewayMulticastDomainRequest,CreateTransitGatewayMulticastDomainResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateTransitGatewayPeeringAttachmentMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateTransitGatewayPeeringAttachmentRequest,CreateTransitGatewayPeeringAttachmentResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateTransitGatewayPrefixListReferenceMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateTransitGatewayPrefixListReferenceRequest,CreateTransitGatewayPrefixListReferenceResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateTransitGatewayRouteMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateTransitGatewayRouteRequest,CreateTransitGatewayRouteResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateTransitGatewayRouteTableMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateTransitGatewayRouteTableRequest,CreateTransitGatewayRouteTableResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateTransitGatewayVpcAttachmentMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateTransitGatewayVpcAttachmentRequest,CreateTransitGatewayVpcAttachmentResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateVolumeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateVolumeRequest,CreateVolumeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateVpcMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateVpcRequest,CreateVpcResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateVpcEndpointMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateVpcEndpointRequest,CreateVpcEndpointResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateVpcEndpointConnectionNotificationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateVpcEndpointConnectionNotificationRequest,CreateVpcEndpointConnectionNotificationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateVpcEndpointServiceConfigurationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateVpcEndpointServiceConfigurationRequest,CreateVpcEndpointServiceConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateVpcPeeringConnectionMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateVpcPeeringConnectionRequest,CreateVpcPeeringConnectionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateVpnConnectionMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateVpnConnectionRequest,CreateVpnConnectionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateVpnConnectionRouteMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateVpnConnectionRouteRequest,CreateVpnConnectionRouteResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerCreateVpnGatewayMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<CreateVpnGatewayRequest,CreateVpnGatewayResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteCarrierGatewayMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteCarrierGatewayRequest,DeleteCarrierGatewayResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteClientVpnEndpointMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteClientVpnEndpointRequest,DeleteClientVpnEndpointResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteClientVpnRouteMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteClientVpnRouteRequest,DeleteClientVpnRouteResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteCustomerGatewayMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteCustomerGatewayRequest,DeleteCustomerGatewayResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteDhcpOptionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteDhcpOptionsRequest,DeleteDhcpOptionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteEgressOnlyInternetGatewayMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteEgressOnlyInternetGatewayRequest,DeleteEgressOnlyInternetGatewayResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteFleetsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteFleetsRequest,DeleteFleetsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteFlowLogsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteFlowLogsRequest,DeleteFlowLogsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteFpgaImageMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteFpgaImageRequest,DeleteFpgaImageResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteInstanceEventWindowMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteInstanceEventWindowRequest,DeleteInstanceEventWindowResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteInternetGatewayMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteInternetGatewayRequest,DeleteInternetGatewayResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteKeyPairMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteKeyPairRequest,DeleteKeyPairResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteLaunchTemplateMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteLaunchTemplateRequest,DeleteLaunchTemplateResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteLaunchTemplateVersionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteLaunchTemplateVersionsRequest,DeleteLaunchTemplateVersionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteLocalGatewayRouteMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteLocalGatewayRouteRequest,DeleteLocalGatewayRouteResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteLocalGatewayRouteTableVpcAssociationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteLocalGatewayRouteTableVpcAssociationRequest,DeleteLocalGatewayRouteTableVpcAssociationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteManagedPrefixListMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteManagedPrefixListRequest,DeleteManagedPrefixListResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteNatGatewayMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteNatGatewayRequest,DeleteNatGatewayResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteNetworkAclMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteNetworkAclRequest,DeleteNetworkAclResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteNetworkAclEntryMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteNetworkAclEntryRequest,DeleteNetworkAclEntryResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteNetworkInsightsAnalysisMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteNetworkInsightsAnalysisRequest,DeleteNetworkInsightsAnalysisResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteNetworkInsightsPathMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteNetworkInsightsPathRequest,DeleteNetworkInsightsPathResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteNetworkInterfaceMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteNetworkInterfaceRequest,DeleteNetworkInterfaceResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteNetworkInterfacePermissionMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteNetworkInterfacePermissionRequest,DeleteNetworkInterfacePermissionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeletePlacementGroupMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeletePlacementGroupRequest,DeletePlacementGroupResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteQueuedReservedInstancesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteQueuedReservedInstancesRequest,DeleteQueuedReservedInstancesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteRouteMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteRouteRequest,DeleteRouteResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteRouteTableMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteRouteTableRequest,DeleteRouteTableResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteSecurityGroupMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteSecurityGroupRequest,DeleteSecurityGroupResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteSnapshotMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteSnapshotRequest,DeleteSnapshotResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteSpotDatafeedSubscriptionMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteSpotDatafeedSubscriptionRequest,DeleteSpotDatafeedSubscriptionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteSubnetMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteSubnetRequest,DeleteSubnetResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteSubnetCidrReservationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteSubnetCidrReservationRequest,DeleteSubnetCidrReservationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteTagsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteTagsRequest,DeleteTagsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteTrafficMirrorFilterMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteTrafficMirrorFilterRequest,DeleteTrafficMirrorFilterResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteTrafficMirrorFilterRuleMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteTrafficMirrorFilterRuleRequest,DeleteTrafficMirrorFilterRuleResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteTrafficMirrorSessionMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteTrafficMirrorSessionRequest,DeleteTrafficMirrorSessionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteTrafficMirrorTargetMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteTrafficMirrorTargetRequest,DeleteTrafficMirrorTargetResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteTransitGatewayMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteTransitGatewayRequest,DeleteTransitGatewayResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteTransitGatewayConnectMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteTransitGatewayConnectRequest,DeleteTransitGatewayConnectResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteTransitGatewayConnectPeerMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteTransitGatewayConnectPeerRequest,DeleteTransitGatewayConnectPeerResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteTransitGatewayMulticastDomainMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteTransitGatewayMulticastDomainRequest,DeleteTransitGatewayMulticastDomainResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteTransitGatewayPeeringAttachmentMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteTransitGatewayPeeringAttachmentRequest,DeleteTransitGatewayPeeringAttachmentResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteTransitGatewayPrefixListReferenceMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteTransitGatewayPrefixListReferenceRequest,DeleteTransitGatewayPrefixListReferenceResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteTransitGatewayRouteMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteTransitGatewayRouteRequest,DeleteTransitGatewayRouteResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteTransitGatewayRouteTableMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteTransitGatewayRouteTableRequest,DeleteTransitGatewayRouteTableResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteTransitGatewayVpcAttachmentMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteTransitGatewayVpcAttachmentRequest,DeleteTransitGatewayVpcAttachmentResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteVolumeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteVolumeRequest,DeleteVolumeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteVpcMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteVpcRequest,DeleteVpcResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteVpcEndpointConnectionNotificationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteVpcEndpointConnectionNotificationsRequest,DeleteVpcEndpointConnectionNotificationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteVpcEndpointServiceConfigurationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteVpcEndpointServiceConfigurationsRequest,DeleteVpcEndpointServiceConfigurationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteVpcEndpointsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteVpcEndpointsRequest,DeleteVpcEndpointsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteVpcPeeringConnectionMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteVpcPeeringConnectionRequest,DeleteVpcPeeringConnectionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteVpnConnectionMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteVpnConnectionRequest,DeleteVpnConnectionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteVpnConnectionRouteMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteVpnConnectionRouteRequest,DeleteVpnConnectionRouteResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeleteVpnGatewayMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeleteVpnGatewayRequest,DeleteVpnGatewayResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeprovisionByoipCidrMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeprovisionByoipCidrRequest,DeprovisionByoipCidrResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeregisterImageMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeregisterImageRequest,DeregisterImageResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeregisterInstanceEventNotificationAttributesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeregisterInstanceEventNotificationAttributesRequest,DeregisterInstanceEventNotificationAttributesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeregisterTransitGatewayMulticastGroupMembersMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeregisterTransitGatewayMulticastGroupMembersRequest,DeregisterTransitGatewayMulticastGroupMembersResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDeregisterTransitGatewayMulticastGroupSourcesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DeregisterTransitGatewayMulticastGroupSourcesRequest,DeregisterTransitGatewayMulticastGroupSourcesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeAccountAttributesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeAccountAttributesRequest,DescribeAccountAttributesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeAddressesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeAddressesRequest,DescribeAddressesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeAddressesAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeAddressesAttributeRequest,DescribeAddressesAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeAggregateIdFormatMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeAggregateIdFormatRequest,DescribeAggregateIdFormatResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeAvailabilityZonesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeAvailabilityZonesRequest,DescribeAvailabilityZonesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeBundleTasksMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeBundleTasksRequest,DescribeBundleTasksResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeByoipCidrsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeByoipCidrsRequest,DescribeByoipCidrsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeCapacityReservationFleetsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeCapacityReservationFleetsRequest,DescribeCapacityReservationFleetsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeCapacityReservationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeCapacityReservationsRequest,DescribeCapacityReservationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeCarrierGatewaysMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeCarrierGatewaysRequest,DescribeCarrierGatewaysResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeClassicLinkInstancesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeClassicLinkInstancesRequest,DescribeClassicLinkInstancesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeClientVpnAuthorizationRulesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeClientVpnAuthorizationRulesRequest,DescribeClientVpnAuthorizationRulesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeClientVpnConnectionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeClientVpnConnectionsRequest,DescribeClientVpnConnectionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeClientVpnEndpointsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeClientVpnEndpointsRequest,DescribeClientVpnEndpointsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeClientVpnRoutesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeClientVpnRoutesRequest,DescribeClientVpnRoutesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeClientVpnTargetNetworksMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeClientVpnTargetNetworksRequest,DescribeClientVpnTargetNetworksResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeCoipPoolsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeCoipPoolsRequest,DescribeCoipPoolsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeConversionTasksMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeConversionTasksRequest,DescribeConversionTasksResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeCustomerGatewaysMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeCustomerGatewaysRequest,DescribeCustomerGatewaysResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeDhcpOptionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeDhcpOptionsRequest,DescribeDhcpOptionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeEgressOnlyInternetGatewaysMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeEgressOnlyInternetGatewaysRequest,DescribeEgressOnlyInternetGatewaysResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeElasticGpusMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeElasticGpusRequest,DescribeElasticGpusResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeExportImageTasksMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeExportImageTasksRequest,DescribeExportImageTasksResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeExportTasksMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeExportTasksRequest,DescribeExportTasksResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeFastSnapshotRestoresMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeFastSnapshotRestoresRequest,DescribeFastSnapshotRestoresResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeFleetHistoryMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeFleetHistoryRequest,DescribeFleetHistoryResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeFleetInstancesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeFleetInstancesRequest,DescribeFleetInstancesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeFleetsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeFleetsRequest,DescribeFleetsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeFlowLogsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeFlowLogsRequest,DescribeFlowLogsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeFpgaImageAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeFpgaImageAttributeRequest,DescribeFpgaImageAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeFpgaImagesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeFpgaImagesRequest,DescribeFpgaImagesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeHostReservationOfferingsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeHostReservationOfferingsRequest,DescribeHostReservationOfferingsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeHostReservationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeHostReservationsRequest,DescribeHostReservationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeHostsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeHostsRequest,DescribeHostsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeIamInstanceProfileAssociationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeIamInstanceProfileAssociationsRequest,DescribeIamInstanceProfileAssociationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeIdFormatMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeIdFormatRequest,DescribeIdFormatResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeIdentityIdFormatMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeIdentityIdFormatRequest,DescribeIdentityIdFormatResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeImageAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeImageAttributeRequest,DescribeImageAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeImagesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeImagesRequest,DescribeImagesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeImportImageTasksMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeImportImageTasksRequest,DescribeImportImageTasksResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeImportSnapshotTasksMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeImportSnapshotTasksRequest,DescribeImportSnapshotTasksResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeInstanceAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeInstanceAttributeRequest,DescribeInstanceAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeInstanceCreditSpecificationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeInstanceCreditSpecificationsRequest,DescribeInstanceCreditSpecificationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeInstanceEventNotificationAttributesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeInstanceEventNotificationAttributesRequest,DescribeInstanceEventNotificationAttributesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeInstanceEventWindowsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeInstanceEventWindowsRequest,DescribeInstanceEventWindowsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeInstanceStatusMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeInstanceStatusRequest,DescribeInstanceStatusResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeInstanceTypeOfferingsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeInstanceTypeOfferingsRequest,DescribeInstanceTypeOfferingsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeInstanceTypesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeInstanceTypesRequest,DescribeInstanceTypesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeInstancesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeInstancesRequest,DescribeInstancesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeInternetGatewaysMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeInternetGatewaysRequest,DescribeInternetGatewaysResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeIpv6PoolsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeIpv6PoolsRequest,DescribeIpv6PoolsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeKeyPairsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeKeyPairsRequest,DescribeKeyPairsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeLaunchTemplateVersionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeLaunchTemplateVersionsRequest,DescribeLaunchTemplateVersionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeLaunchTemplatesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeLaunchTemplatesRequest,DescribeLaunchTemplatesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest,DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeLocalGatewayRouteTableVpcAssociationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeLocalGatewayRouteTableVpcAssociationsRequest,DescribeLocalGatewayRouteTableVpcAssociationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeLocalGatewayRouteTablesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeLocalGatewayRouteTablesRequest,DescribeLocalGatewayRouteTablesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeLocalGatewayVirtualInterfaceGroupsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeLocalGatewayVirtualInterfaceGroupsRequest,DescribeLocalGatewayVirtualInterfaceGroupsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeLocalGatewayVirtualInterfacesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeLocalGatewayVirtualInterfacesRequest,DescribeLocalGatewayVirtualInterfacesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeLocalGatewaysMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeLocalGatewaysRequest,DescribeLocalGatewaysResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeManagedPrefixListsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeManagedPrefixListsRequest,DescribeManagedPrefixListsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeMovingAddressesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeMovingAddressesRequest,DescribeMovingAddressesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeNatGatewaysMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeNatGatewaysRequest,DescribeNatGatewaysResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeNetworkAclsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeNetworkAclsRequest,DescribeNetworkAclsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeNetworkInsightsAnalysesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeNetworkInsightsAnalysesRequest,DescribeNetworkInsightsAnalysesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeNetworkInsightsPathsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeNetworkInsightsPathsRequest,DescribeNetworkInsightsPathsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeNetworkInterfaceAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeNetworkInterfaceAttributeRequest,DescribeNetworkInterfaceAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeNetworkInterfacePermissionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeNetworkInterfacePermissionsRequest,DescribeNetworkInterfacePermissionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeNetworkInterfacesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeNetworkInterfacesRequest,DescribeNetworkInterfacesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribePlacementGroupsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribePlacementGroupsRequest,DescribePlacementGroupsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribePrefixListsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribePrefixListsRequest,DescribePrefixListsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribePrincipalIdFormatMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribePrincipalIdFormatRequest,DescribePrincipalIdFormatResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribePublicIpv4PoolsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribePublicIpv4PoolsRequest,DescribePublicIpv4PoolsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeRegionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeRegionsRequest,DescribeRegionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeReplaceRootVolumeTasksMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeReplaceRootVolumeTasksRequest,DescribeReplaceRootVolumeTasksResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeReservedInstancesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeReservedInstancesRequest,DescribeReservedInstancesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeReservedInstancesListingsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeReservedInstancesListingsRequest,DescribeReservedInstancesListingsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeReservedInstancesModificationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeReservedInstancesModificationsRequest,DescribeReservedInstancesModificationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeReservedInstancesOfferingsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeReservedInstancesOfferingsRequest,DescribeReservedInstancesOfferingsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeRouteTablesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeRouteTablesRequest,DescribeRouteTablesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeScheduledInstanceAvailabilityMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeScheduledInstanceAvailabilityRequest,DescribeScheduledInstanceAvailabilityResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeScheduledInstancesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeScheduledInstancesRequest,DescribeScheduledInstancesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeSecurityGroupReferencesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeSecurityGroupReferencesRequest,DescribeSecurityGroupReferencesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeSecurityGroupRulesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeSecurityGroupRulesRequest,DescribeSecurityGroupRulesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeSecurityGroupsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeSecurityGroupsRequest,DescribeSecurityGroupsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeSnapshotAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeSnapshotAttributeRequest,DescribeSnapshotAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeSnapshotsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeSnapshotsRequest,DescribeSnapshotsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeSpotDatafeedSubscriptionMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeSpotDatafeedSubscriptionRequest,DescribeSpotDatafeedSubscriptionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeSpotFleetInstancesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeSpotFleetInstancesRequest,DescribeSpotFleetInstancesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeSpotFleetRequestHistoryMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeSpotFleetRequestHistoryRequest,DescribeSpotFleetRequestHistoryResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeSpotFleetRequestsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeSpotFleetRequestsRequest,DescribeSpotFleetRequestsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeSpotInstanceRequestsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeSpotInstanceRequestsRequest,DescribeSpotInstanceRequestsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeSpotPriceHistoryMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeSpotPriceHistoryRequest,DescribeSpotPriceHistoryResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeStaleSecurityGroupsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeStaleSecurityGroupsRequest,DescribeStaleSecurityGroupsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeStoreImageTasksMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeStoreImageTasksRequest,DescribeStoreImageTasksResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeSubnetsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeSubnetsRequest,DescribeSubnetsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeTagsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeTagsRequest,DescribeTagsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeTrafficMirrorFiltersMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeTrafficMirrorFiltersRequest,DescribeTrafficMirrorFiltersResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeTrafficMirrorSessionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeTrafficMirrorSessionsRequest,DescribeTrafficMirrorSessionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeTrafficMirrorTargetsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeTrafficMirrorTargetsRequest,DescribeTrafficMirrorTargetsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeTransitGatewayAttachmentsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeTransitGatewayAttachmentsRequest,DescribeTransitGatewayAttachmentsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeTransitGatewayConnectPeersMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeTransitGatewayConnectPeersRequest,DescribeTransitGatewayConnectPeersResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeTransitGatewayConnectsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeTransitGatewayConnectsRequest,DescribeTransitGatewayConnectsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeTransitGatewayMulticastDomainsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeTransitGatewayMulticastDomainsRequest,DescribeTransitGatewayMulticastDomainsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeTransitGatewayPeeringAttachmentsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeTransitGatewayPeeringAttachmentsRequest,DescribeTransitGatewayPeeringAttachmentsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeTransitGatewayRouteTablesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeTransitGatewayRouteTablesRequest,DescribeTransitGatewayRouteTablesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeTransitGatewayVpcAttachmentsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeTransitGatewayVpcAttachmentsRequest,DescribeTransitGatewayVpcAttachmentsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeTransitGatewaysMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeTransitGatewaysRequest,DescribeTransitGatewaysResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeTrunkInterfaceAssociationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeTrunkInterfaceAssociationsRequest,DescribeTrunkInterfaceAssociationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeVolumeAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeVolumeAttributeRequest,DescribeVolumeAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeVolumeStatusMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeVolumeStatusRequest,DescribeVolumeStatusResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeVolumesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeVolumesRequest,DescribeVolumesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeVolumesModificationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeVolumesModificationsRequest,DescribeVolumesModificationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeVpcAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeVpcAttributeRequest,DescribeVpcAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeVpcClassicLinkMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeVpcClassicLinkRequest,DescribeVpcClassicLinkResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeVpcClassicLinkDnsSupportMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeVpcClassicLinkDnsSupportRequest,DescribeVpcClassicLinkDnsSupportResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeVpcEndpointConnectionNotificationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeVpcEndpointConnectionNotificationsRequest,DescribeVpcEndpointConnectionNotificationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeVpcEndpointConnectionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeVpcEndpointConnectionsRequest,DescribeVpcEndpointConnectionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeVpcEndpointServiceConfigurationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeVpcEndpointServiceConfigurationsRequest,DescribeVpcEndpointServiceConfigurationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeVpcEndpointServicePermissionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeVpcEndpointServicePermissionsRequest,DescribeVpcEndpointServicePermissionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeVpcEndpointServicesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeVpcEndpointServicesRequest,DescribeVpcEndpointServicesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeVpcEndpointsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeVpcEndpointsRequest,DescribeVpcEndpointsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeVpcPeeringConnectionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeVpcPeeringConnectionsRequest,DescribeVpcPeeringConnectionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeVpcsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeVpcsRequest,DescribeVpcsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeVpnConnectionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeVpnConnectionsRequest,DescribeVpnConnectionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDescribeVpnGatewaysMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DescribeVpnGatewaysRequest,DescribeVpnGatewaysResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDetachClassicLinkVpcMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DetachClassicLinkVpcRequest,DetachClassicLinkVpcResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDetachInternetGatewayMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DetachInternetGatewayRequest,DetachInternetGatewayResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDetachNetworkInterfaceMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DetachNetworkInterfaceRequest,DetachNetworkInterfaceResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDetachVolumeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DetachVolumeRequest,DetachVolumeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDetachVpnGatewayMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DetachVpnGatewayRequest,DetachVpnGatewayResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDisableEbsEncryptionByDefaultMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DisableEbsEncryptionByDefaultRequest,DisableEbsEncryptionByDefaultResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDisableFastSnapshotRestoresMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DisableFastSnapshotRestoresRequest,DisableFastSnapshotRestoresResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDisableImageDeprecationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DisableImageDeprecationRequest,DisableImageDeprecationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDisableSerialConsoleAccessMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DisableSerialConsoleAccessRequest,DisableSerialConsoleAccessResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDisableTransitGatewayRouteTablePropagationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DisableTransitGatewayRouteTablePropagationRequest,DisableTransitGatewayRouteTablePropagationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDisableVgwRoutePropagationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DisableVgwRoutePropagationRequest,DisableVgwRoutePropagationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDisableVpcClassicLinkMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DisableVpcClassicLinkRequest,DisableVpcClassicLinkResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDisableVpcClassicLinkDnsSupportMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DisableVpcClassicLinkDnsSupportRequest,DisableVpcClassicLinkDnsSupportResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDisassociateAddressMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DisassociateAddressRequest,DisassociateAddressResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDisassociateClientVpnTargetNetworkMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DisassociateClientVpnTargetNetworkRequest,DisassociateClientVpnTargetNetworkResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDisassociateEnclaveCertificateIamRoleMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DisassociateEnclaveCertificateIamRoleRequest,DisassociateEnclaveCertificateIamRoleResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDisassociateIamInstanceProfileMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DisassociateIamInstanceProfileRequest,DisassociateIamInstanceProfileResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDisassociateInstanceEventWindowMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DisassociateInstanceEventWindowRequest,DisassociateInstanceEventWindowResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDisassociateRouteTableMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DisassociateRouteTableRequest,DisassociateRouteTableResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDisassociateSubnetCidrBlockMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DisassociateSubnetCidrBlockRequest,DisassociateSubnetCidrBlockResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDisassociateTransitGatewayMulticastDomainMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DisassociateTransitGatewayMulticastDomainRequest,DisassociateTransitGatewayMulticastDomainResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDisassociateTransitGatewayRouteTableMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DisassociateTransitGatewayRouteTableRequest,DisassociateTransitGatewayRouteTableResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDisassociateTrunkInterfaceMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DisassociateTrunkInterfaceRequest,DisassociateTrunkInterfaceResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerDisassociateVpcCidrBlockMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<DisassociateVpcCidrBlockRequest,DisassociateVpcCidrBlockResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerEnableEbsEncryptionByDefaultMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<EnableEbsEncryptionByDefaultRequest,EnableEbsEncryptionByDefaultResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerEnableFastSnapshotRestoresMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<EnableFastSnapshotRestoresRequest,EnableFastSnapshotRestoresResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerEnableImageDeprecationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<EnableImageDeprecationRequest,EnableImageDeprecationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerEnableSerialConsoleAccessMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<EnableSerialConsoleAccessRequest,EnableSerialConsoleAccessResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerEnableTransitGatewayRouteTablePropagationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<EnableTransitGatewayRouteTablePropagationRequest,EnableTransitGatewayRouteTablePropagationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerEnableVgwRoutePropagationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<EnableVgwRoutePropagationRequest,EnableVgwRoutePropagationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerEnableVolumeIoMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<EnableVolumeIoRequest,EnableVolumeIoResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerEnableVpcClassicLinkMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<EnableVpcClassicLinkRequest,EnableVpcClassicLinkResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerEnableVpcClassicLinkDnsSupportMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<EnableVpcClassicLinkDnsSupportRequest,EnableVpcClassicLinkDnsSupportResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerExportClientVpnClientCertificateRevocationListMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ExportClientVpnClientCertificateRevocationListRequest,ExportClientVpnClientCertificateRevocationListResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerExportClientVpnClientConfigurationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ExportClientVpnClientConfigurationRequest,ExportClientVpnClientConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerExportImageMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ExportImageRequest,ExportImageResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerExportTransitGatewayRoutesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ExportTransitGatewayRoutesRequest,ExportTransitGatewayRoutesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetAssociatedEnclaveCertificateIamRolesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetAssociatedEnclaveCertificateIamRolesRequest,GetAssociatedEnclaveCertificateIamRolesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetAssociatedIpv6PoolCidrsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetAssociatedIpv6PoolCidrsRequest,GetAssociatedIpv6PoolCidrsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetCapacityReservationUsageMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetCapacityReservationUsageRequest,GetCapacityReservationUsageResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetCoipPoolUsageMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetCoipPoolUsageRequest,GetCoipPoolUsageResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetConsoleOutputMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetConsoleOutputRequest,GetConsoleOutputResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetConsoleScreenshotMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetConsoleScreenshotRequest,GetConsoleScreenshotResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetDefaultCreditSpecificationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetDefaultCreditSpecificationRequest,GetDefaultCreditSpecificationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetEbsDefaultKmsKeyIdMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetEbsDefaultKmsKeyIdRequest,GetEbsDefaultKmsKeyIdResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetEbsEncryptionByDefaultMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetEbsEncryptionByDefaultRequest,GetEbsEncryptionByDefaultResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetFlowLogsIntegrationTemplateMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetFlowLogsIntegrationTemplateRequest,GetFlowLogsIntegrationTemplateResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetGroupsForCapacityReservationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetGroupsForCapacityReservationRequest,GetGroupsForCapacityReservationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetHostReservationPurchasePreviewMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetHostReservationPurchasePreviewRequest,GetHostReservationPurchasePreviewResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetLaunchTemplateDataMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetLaunchTemplateDataRequest,GetLaunchTemplateDataResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetManagedPrefixListAssociationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetManagedPrefixListAssociationsRequest,GetManagedPrefixListAssociationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetManagedPrefixListEntriesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetManagedPrefixListEntriesRequest,GetManagedPrefixListEntriesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetPasswordDataMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetPasswordDataRequest,GetPasswordDataResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetReservedInstancesExchangeQuoteMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetReservedInstancesExchangeQuoteRequest,GetReservedInstancesExchangeQuoteResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetSerialConsoleAccessStatusMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetSerialConsoleAccessStatusRequest,GetSerialConsoleAccessStatusResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetSubnetCidrReservationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetSubnetCidrReservationsRequest,GetSubnetCidrReservationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetTransitGatewayAttachmentPropagationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetTransitGatewayAttachmentPropagationsRequest,GetTransitGatewayAttachmentPropagationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetTransitGatewayMulticastDomainAssociationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetTransitGatewayMulticastDomainAssociationsRequest,GetTransitGatewayMulticastDomainAssociationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetTransitGatewayPrefixListReferencesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetTransitGatewayPrefixListReferencesRequest,GetTransitGatewayPrefixListReferencesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetTransitGatewayRouteTableAssociationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetTransitGatewayRouteTableAssociationsRequest,GetTransitGatewayRouteTableAssociationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetTransitGatewayRouteTablePropagationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetTransitGatewayRouteTablePropagationsRequest,GetTransitGatewayRouteTablePropagationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetVpnConnectionDeviceSampleConfigurationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetVpnConnectionDeviceSampleConfigurationRequest,GetVpnConnectionDeviceSampleConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerGetVpnConnectionDeviceTypesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<GetVpnConnectionDeviceTypesRequest,GetVpnConnectionDeviceTypesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerImportClientVpnClientCertificateRevocationListMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ImportClientVpnClientCertificateRevocationListRequest,ImportClientVpnClientCertificateRevocationListResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerImportImageMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ImportImageRequest,ImportImageResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerImportInstanceMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ImportInstanceRequest,ImportInstanceResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerImportKeyPairMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ImportKeyPairRequest,ImportKeyPairResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerImportSnapshotMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ImportSnapshotRequest,ImportSnapshotResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerImportVolumeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ImportVolumeRequest,ImportVolumeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyAddressAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyAddressAttributeRequest,ModifyAddressAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyAvailabilityZoneGroupMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyAvailabilityZoneGroupRequest,ModifyAvailabilityZoneGroupResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyCapacityReservationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyCapacityReservationRequest,ModifyCapacityReservationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyCapacityReservationFleetMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyCapacityReservationFleetRequest,ModifyCapacityReservationFleetResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyClientVpnEndpointMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyClientVpnEndpointRequest,ModifyClientVpnEndpointResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyDefaultCreditSpecificationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyDefaultCreditSpecificationRequest,ModifyDefaultCreditSpecificationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyEbsDefaultKmsKeyIdMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyEbsDefaultKmsKeyIdRequest,ModifyEbsDefaultKmsKeyIdResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyFleetMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyFleetRequest,ModifyFleetResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyFpgaImageAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyFpgaImageAttributeRequest,ModifyFpgaImageAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyHostsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyHostsRequest,ModifyHostsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyIdFormatMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyIdFormatRequest,ModifyIdFormatResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyIdentityIdFormatMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyIdentityIdFormatRequest,ModifyIdentityIdFormatResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyImageAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyImageAttributeRequest,ModifyImageAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyInstanceAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyInstanceAttributeRequest,ModifyInstanceAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyInstanceCapacityReservationAttributesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyInstanceCapacityReservationAttributesRequest,ModifyInstanceCapacityReservationAttributesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyInstanceCreditSpecificationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyInstanceCreditSpecificationRequest,ModifyInstanceCreditSpecificationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyInstanceEventStartTimeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyInstanceEventStartTimeRequest,ModifyInstanceEventStartTimeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyInstanceEventWindowMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyInstanceEventWindowRequest,ModifyInstanceEventWindowResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyInstanceMetadataOptionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyInstanceMetadataOptionsRequest,ModifyInstanceMetadataOptionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyInstancePlacementMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyInstancePlacementRequest,ModifyInstancePlacementResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyLaunchTemplateMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyLaunchTemplateRequest,ModifyLaunchTemplateResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyManagedPrefixListMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyManagedPrefixListRequest,ModifyManagedPrefixListResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyNetworkInterfaceAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyNetworkInterfaceAttributeRequest,ModifyNetworkInterfaceAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyReservedInstancesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyReservedInstancesRequest,ModifyReservedInstancesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifySecurityGroupRulesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifySecurityGroupRulesRequest,ModifySecurityGroupRulesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifySnapshotAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifySnapshotAttributeRequest,ModifySnapshotAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifySpotFleetRequestMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifySpotFleetRequestRequest,ModifySpotFleetRequestResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifySubnetAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifySubnetAttributeRequest,ModifySubnetAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyTrafficMirrorFilterNetworkServicesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyTrafficMirrorFilterNetworkServicesRequest,ModifyTrafficMirrorFilterNetworkServicesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyTrafficMirrorFilterRuleMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyTrafficMirrorFilterRuleRequest,ModifyTrafficMirrorFilterRuleResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyTrafficMirrorSessionMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyTrafficMirrorSessionRequest,ModifyTrafficMirrorSessionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyTransitGatewayMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyTransitGatewayRequest,ModifyTransitGatewayResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyTransitGatewayPrefixListReferenceMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyTransitGatewayPrefixListReferenceRequest,ModifyTransitGatewayPrefixListReferenceResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyTransitGatewayVpcAttachmentMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyTransitGatewayVpcAttachmentRequest,ModifyTransitGatewayVpcAttachmentResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyVolumeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyVolumeRequest,ModifyVolumeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyVolumeAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyVolumeAttributeRequest,ModifyVolumeAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyVpcAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyVpcAttributeRequest,ModifyVpcAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyVpcEndpointMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyVpcEndpointRequest,ModifyVpcEndpointResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyVpcEndpointConnectionNotificationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyVpcEndpointConnectionNotificationRequest,ModifyVpcEndpointConnectionNotificationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyVpcEndpointServiceConfigurationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyVpcEndpointServiceConfigurationRequest,ModifyVpcEndpointServiceConfigurationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyVpcEndpointServicePermissionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyVpcEndpointServicePermissionsRequest,ModifyVpcEndpointServicePermissionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyVpcPeeringConnectionOptionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyVpcPeeringConnectionOptionsRequest,ModifyVpcPeeringConnectionOptionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyVpcTenancyMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyVpcTenancyRequest,ModifyVpcTenancyResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyVpnConnectionMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyVpnConnectionRequest,ModifyVpnConnectionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyVpnConnectionOptionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyVpnConnectionOptionsRequest,ModifyVpnConnectionOptionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyVpnTunnelCertificateMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyVpnTunnelCertificateRequest,ModifyVpnTunnelCertificateResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerModifyVpnTunnelOptionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ModifyVpnTunnelOptionsRequest,ModifyVpnTunnelOptionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerMonitorInstancesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<MonitorInstancesRequest,MonitorInstancesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerMoveAddressToVpcMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<MoveAddressToVpcRequest,MoveAddressToVpcResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerProvisionByoipCidrMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ProvisionByoipCidrRequest,ProvisionByoipCidrResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerPurchaseHostReservationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<PurchaseHostReservationRequest,PurchaseHostReservationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerPurchaseReservedInstancesOfferingMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<PurchaseReservedInstancesOfferingRequest,PurchaseReservedInstancesOfferingResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerPurchaseScheduledInstancesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<PurchaseScheduledInstancesRequest,PurchaseScheduledInstancesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerRebootInstancesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<RebootInstancesRequest,RebootInstancesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerRegisterImageMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<RegisterImageRequest,RegisterImageResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerRegisterInstanceEventNotificationAttributesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<RegisterInstanceEventNotificationAttributesRequest,RegisterInstanceEventNotificationAttributesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerRegisterTransitGatewayMulticastGroupMembersMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<RegisterTransitGatewayMulticastGroupMembersRequest,RegisterTransitGatewayMulticastGroupMembersResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerRegisterTransitGatewayMulticastGroupSourcesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<RegisterTransitGatewayMulticastGroupSourcesRequest,RegisterTransitGatewayMulticastGroupSourcesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerRejectTransitGatewayMulticastDomainAssociationsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<RejectTransitGatewayMulticastDomainAssociationsRequest,RejectTransitGatewayMulticastDomainAssociationsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerRejectTransitGatewayPeeringAttachmentMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<RejectTransitGatewayPeeringAttachmentRequest,RejectTransitGatewayPeeringAttachmentResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerRejectTransitGatewayVpcAttachmentMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<RejectTransitGatewayVpcAttachmentRequest,RejectTransitGatewayVpcAttachmentResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerRejectVpcEndpointConnectionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<RejectVpcEndpointConnectionsRequest,RejectVpcEndpointConnectionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerRejectVpcPeeringConnectionMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<RejectVpcPeeringConnectionRequest,RejectVpcPeeringConnectionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerReleaseAddressMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ReleaseAddressRequest,ReleaseAddressResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerReleaseHostsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ReleaseHostsRequest,ReleaseHostsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerReplaceIamInstanceProfileAssociationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ReplaceIamInstanceProfileAssociationRequest,ReplaceIamInstanceProfileAssociationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerReplaceNetworkAclAssociationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ReplaceNetworkAclAssociationRequest,ReplaceNetworkAclAssociationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerReplaceNetworkAclEntryMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ReplaceNetworkAclEntryRequest,ReplaceNetworkAclEntryResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerReplaceRouteMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ReplaceRouteRequest,ReplaceRouteResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerReplaceRouteTableAssociationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ReplaceRouteTableAssociationRequest,ReplaceRouteTableAssociationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerReplaceTransitGatewayRouteMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ReplaceTransitGatewayRouteRequest,ReplaceTransitGatewayRouteResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerReportInstanceStatusMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ReportInstanceStatusRequest,ReportInstanceStatusResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerRequestSpotFleetMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<RequestSpotFleetRequest,RequestSpotFleetResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerRequestSpotInstancesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<RequestSpotInstancesRequest,RequestSpotInstancesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerResetAddressAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ResetAddressAttributeRequest,ResetAddressAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerResetEbsDefaultKmsKeyIdMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ResetEbsDefaultKmsKeyIdRequest,ResetEbsDefaultKmsKeyIdResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerResetFpgaImageAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ResetFpgaImageAttributeRequest,ResetFpgaImageAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerResetImageAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ResetImageAttributeRequest,ResetImageAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerResetInstanceAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ResetInstanceAttributeRequest,ResetInstanceAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerResetNetworkInterfaceAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ResetNetworkInterfaceAttributeRequest,ResetNetworkInterfaceAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerResetSnapshotAttributeMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<ResetSnapshotAttributeRequest,ResetSnapshotAttributeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerRestoreAddressToClassicMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<RestoreAddressToClassicRequest,RestoreAddressToClassicResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerRestoreManagedPrefixListVersionMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<RestoreManagedPrefixListVersionRequest,RestoreManagedPrefixListVersionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerRevokeClientVpnIngressMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<RevokeClientVpnIngressRequest,RevokeClientVpnIngressResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerRevokeSecurityGroupEgressMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<RevokeSecurityGroupEgressRequest,RevokeSecurityGroupEgressResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerRevokeSecurityGroupIngressMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<RevokeSecurityGroupIngressRequest,RevokeSecurityGroupIngressResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerRunInstancesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<RunInstancesRequest,RunInstancesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerRunScheduledInstancesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<RunScheduledInstancesRequest,RunScheduledInstancesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerSearchLocalGatewayRoutesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<SearchLocalGatewayRoutesRequest,SearchLocalGatewayRoutesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerSearchTransitGatewayMulticastGroupsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<SearchTransitGatewayMulticastGroupsRequest,SearchTransitGatewayMulticastGroupsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerSearchTransitGatewayRoutesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<SearchTransitGatewayRoutesRequest,SearchTransitGatewayRoutesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerSendDiagnosticInterruptMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<SendDiagnosticInterruptRequest,SendDiagnosticInterruptResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerStartInstancesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<StartInstancesRequest,StartInstancesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerStartNetworkInsightsAnalysisMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<StartNetworkInsightsAnalysisRequest,StartNetworkInsightsAnalysisResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerStartVpcEndpointServicePrivateDnsVerificationMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<StartVpcEndpointServicePrivateDnsVerificationRequest,StartVpcEndpointServicePrivateDnsVerificationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerStopInstancesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<StopInstancesRequest,StopInstancesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerTerminateClientVpnConnectionsMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<TerminateClientVpnConnectionsRequest,TerminateClientVpnConnectionsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerTerminateInstancesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<TerminateInstancesRequest,TerminateInstancesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerUnassignIpv6AddressesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<UnassignIpv6AddressesRequest,UnassignIpv6AddressesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerUnassignPrivateIpAddressesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<UnassignPrivateIpAddressesRequest,UnassignPrivateIpAddressesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerUnmonitorInstancesMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<UnmonitorInstancesRequest,UnmonitorInstancesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerUpdateSecurityGroupRuleDescriptionsEgressMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<UpdateSecurityGroupRuleDescriptionsEgressRequest,UpdateSecurityGroupRuleDescriptionsEgressResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerUpdateSecurityGroupRuleDescriptionsIngressMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<UpdateSecurityGroupRuleDescriptionsIngressRequest,UpdateSecurityGroupRuleDescriptionsIngressResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}

internal fun registerWithdrawByoipCidrMiddleware(config: Ec2Client.Config, op: SdkHttpOperation<WithdrawByoipCidrRequest,WithdrawByoipCidrResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(MutateHeaders) {
            setIfMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "ec2"
        }
    }
}
