// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class RevokeClientVpnIngressRequest private constructor(builder: BuilderImpl) {
    /**
     * The ID of the Active Directory group for which to revoke access.
     */
    val accessGroupId: String? = builder.accessGroupId
    /**
     * The ID of the Client VPN endpoint with which the authorization rule is associated.
     */
    val clientVpnEndpointId: String? = builder.clientVpnEndpointId
    /**
     * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: Boolean? = builder.dryRun
    /**
     * Indicates whether access should be revoked for all clients.
     */
    val revokeAllGroups: Boolean? = builder.revokeAllGroups
    /**
     * The IPv4 address range, in CIDR notation, of the network for which access is being removed.
     */
    val targetNetworkCidr: String? = builder.targetNetworkCidr

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): RevokeClientVpnIngressRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("RevokeClientVpnIngressRequest(")
        append("accessGroupId=$accessGroupId,")
        append("clientVpnEndpointId=$clientVpnEndpointId,")
        append("dryRun=$dryRun,")
        append("revokeAllGroups=$revokeAllGroups,")
        append("targetNetworkCidr=$targetNetworkCidr)")
    }

    override fun hashCode(): kotlin.Int {
        var result = accessGroupId?.hashCode() ?: 0
        result = 31 * result + (clientVpnEndpointId?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (revokeAllGroups?.hashCode() ?: 0)
        result = 31 * result + (targetNetworkCidr?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as RevokeClientVpnIngressRequest

        if (accessGroupId != other.accessGroupId) return false
        if (clientVpnEndpointId != other.clientVpnEndpointId) return false
        if (dryRun != other.dryRun) return false
        if (revokeAllGroups != other.revokeAllGroups) return false
        if (targetNetworkCidr != other.targetNetworkCidr) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): RevokeClientVpnIngressRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): RevokeClientVpnIngressRequest
        /**
         * The ID of the Active Directory group for which to revoke access.
         */
        fun accessGroupId(accessGroupId: String): FluentBuilder
        /**
         * The ID of the Client VPN endpoint with which the authorization rule is associated.
         */
        fun clientVpnEndpointId(clientVpnEndpointId: String): FluentBuilder
        /**
         * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
         */
        fun dryRun(dryRun: Boolean): FluentBuilder
        /**
         * Indicates whether access should be revoked for all clients.
         */
        fun revokeAllGroups(revokeAllGroups: Boolean): FluentBuilder
        /**
         * The IPv4 address range, in CIDR notation, of the network for which access is being removed.
         */
        fun targetNetworkCidr(targetNetworkCidr: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The ID of the Active Directory group for which to revoke access.
         */
        var accessGroupId: String?
        /**
         * The ID of the Client VPN endpoint with which the authorization rule is associated.
         */
        var clientVpnEndpointId: String?
        /**
         * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: Boolean?
        /**
         * Indicates whether access should be revoked for all clients.
         */
        var revokeAllGroups: Boolean?
        /**
         * The IPv4 address range, in CIDR notation, of the network for which access is being removed.
         */
        var targetNetworkCidr: String?

        fun build(): RevokeClientVpnIngressRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var accessGroupId: String? = null
        override var clientVpnEndpointId: String? = null
        override var dryRun: Boolean? = null
        override var revokeAllGroups: Boolean? = null
        override var targetNetworkCidr: String? = null

        constructor(x: RevokeClientVpnIngressRequest) : this() {
            this.accessGroupId = x.accessGroupId
            this.clientVpnEndpointId = x.clientVpnEndpointId
            this.dryRun = x.dryRun
            this.revokeAllGroups = x.revokeAllGroups
            this.targetNetworkCidr = x.targetNetworkCidr
        }

        override fun build(): RevokeClientVpnIngressRequest = RevokeClientVpnIngressRequest(this)
        override fun accessGroupId(accessGroupId: String): FluentBuilder = apply { this.accessGroupId = accessGroupId }
        override fun clientVpnEndpointId(clientVpnEndpointId: String): FluentBuilder = apply { this.clientVpnEndpointId = clientVpnEndpointId }
        override fun dryRun(dryRun: Boolean): FluentBuilder = apply { this.dryRun = dryRun }
        override fun revokeAllGroups(revokeAllGroups: Boolean): FluentBuilder = apply { this.revokeAllGroups = revokeAllGroups }
        override fun targetNetworkCidr(targetNetworkCidr: String): FluentBuilder = apply { this.targetNetworkCidr = targetNetworkCidr }
    }
}
