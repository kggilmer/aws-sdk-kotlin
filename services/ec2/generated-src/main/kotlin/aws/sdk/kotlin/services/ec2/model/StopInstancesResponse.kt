// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class StopInstancesResponse private constructor(builder: BuilderImpl) {
    /**
     * Information about the stopped instances.
     */
    val stoppingInstances: List<InstanceStateChange>? = builder.stoppingInstances

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): StopInstancesResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("StopInstancesResponse(")
        append("stoppingInstances=$stoppingInstances)")
    }

    override fun hashCode(): kotlin.Int {
        var result = stoppingInstances?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as StopInstancesResponse

        if (stoppingInstances != other.stoppingInstances) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): StopInstancesResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): StopInstancesResponse
        /**
         * Information about the stopped instances.
         */
        fun stoppingInstances(stoppingInstances: List<InstanceStateChange>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Information about the stopped instances.
         */
        var stoppingInstances: List<InstanceStateChange>?

        fun build(): StopInstancesResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var stoppingInstances: List<InstanceStateChange>? = null

        constructor(x: StopInstancesResponse) : this() {
            this.stoppingInstances = x.stoppingInstances
        }

        override fun build(): StopInstancesResponse = StopInstancesResponse(this)
        override fun stoppingInstances(stoppingInstances: List<InstanceStateChange>): FluentBuilder = apply { this.stoppingInstances = stoppingInstances }
    }
}
