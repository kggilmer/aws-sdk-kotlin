// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes an potential intermediate component of a feasible path.
 */
class AlternatePathHint private constructor(builder: BuilderImpl) {
    /**
     * The Amazon Resource Name (ARN) of the component.
     */
    val componentArn: String? = builder.componentArn
    /**
     * The ID of the component.
     */
    val componentId: String? = builder.componentId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): AlternatePathHint = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("AlternatePathHint(")
        append("componentArn=$componentArn,")
        append("componentId=$componentId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = componentArn?.hashCode() ?: 0
        result = 31 * result + (componentId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as AlternatePathHint

        if (componentArn != other.componentArn) return false
        if (componentId != other.componentId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): AlternatePathHint = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): AlternatePathHint
        /**
         * The Amazon Resource Name (ARN) of the component.
         */
        fun componentArn(componentArn: String): FluentBuilder
        /**
         * The ID of the component.
         */
        fun componentId(componentId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The Amazon Resource Name (ARN) of the component.
         */
        var componentArn: String?
        /**
         * The ID of the component.
         */
        var componentId: String?

        fun build(): AlternatePathHint
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var componentArn: String? = null
        override var componentId: String? = null

        constructor(x: AlternatePathHint) : this() {
            this.componentArn = x.componentArn
            this.componentId = x.componentId
        }

        override fun build(): AlternatePathHint = AlternatePathHint(this)
        override fun componentArn(componentArn: String): FluentBuilder = apply { this.componentArn = componentArn }
        override fun componentId(componentId: String): FluentBuilder = apply { this.componentId = componentId }
    }
}
