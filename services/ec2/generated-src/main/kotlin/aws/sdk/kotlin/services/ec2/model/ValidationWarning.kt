// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * The error codes and error messages that are returned for the parameters or parameter combinations that are not valid when a new launch template or new version of a launch template is created.
 */
class ValidationWarning private constructor(builder: BuilderImpl) {
    /**
     * The error codes and error messages.
     */
    val errors: List<ValidationError>? = builder.errors

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ValidationWarning = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ValidationWarning(")
        append("errors=$errors)")
    }

    override fun hashCode(): kotlin.Int {
        var result = errors?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ValidationWarning

        if (errors != other.errors) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ValidationWarning = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ValidationWarning
        /**
         * The error codes and error messages.
         */
        fun errors(errors: List<ValidationError>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The error codes and error messages.
         */
        var errors: List<ValidationError>?

        fun build(): ValidationWarning
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var errors: List<ValidationError>? = null

        constructor(x: ValidationWarning) : this() {
            this.errors = x.errors
        }

        override fun build(): ValidationWarning = ValidationWarning(this)
        override fun errors(errors: List<ValidationError>): FluentBuilder = apply { this.errors = errors }
    }
}
