// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes an IPv6 address pool.
 */
class Ipv6Pool private constructor(builder: BuilderImpl) {
    /**
     * The description for the address pool.
     */
    val description: String? = builder.description
    /**
     * The CIDR blocks for the address pool.
     */
    val poolCidrBlocks: List<PoolCidrBlock>? = builder.poolCidrBlocks
    /**
     * The ID of the address pool.
     */
    val poolId: String? = builder.poolId
    /**
     * Any tags for the address pool.
     */
    val tags: List<Tag>? = builder.tags

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): Ipv6Pool = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("Ipv6Pool(")
        append("description=$description,")
        append("poolCidrBlocks=$poolCidrBlocks,")
        append("poolId=$poolId,")
        append("tags=$tags)")
    }

    override fun hashCode(): kotlin.Int {
        var result = description?.hashCode() ?: 0
        result = 31 * result + (poolCidrBlocks?.hashCode() ?: 0)
        result = 31 * result + (poolId?.hashCode() ?: 0)
        result = 31 * result + (tags?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Ipv6Pool

        if (description != other.description) return false
        if (poolCidrBlocks != other.poolCidrBlocks) return false
        if (poolId != other.poolId) return false
        if (tags != other.tags) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): Ipv6Pool = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): Ipv6Pool
        /**
         * The description for the address pool.
         */
        fun description(description: String): FluentBuilder
        /**
         * The CIDR blocks for the address pool.
         */
        fun poolCidrBlocks(poolCidrBlocks: List<PoolCidrBlock>): FluentBuilder
        /**
         * The ID of the address pool.
         */
        fun poolId(poolId: String): FluentBuilder
        /**
         * Any tags for the address pool.
         */
        fun tags(tags: List<Tag>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The description for the address pool.
         */
        var description: String?
        /**
         * The CIDR blocks for the address pool.
         */
        var poolCidrBlocks: List<PoolCidrBlock>?
        /**
         * The ID of the address pool.
         */
        var poolId: String?
        /**
         * Any tags for the address pool.
         */
        var tags: List<Tag>?

        fun build(): Ipv6Pool
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var description: String? = null
        override var poolCidrBlocks: List<PoolCidrBlock>? = null
        override var poolId: String? = null
        override var tags: List<Tag>? = null

        constructor(x: Ipv6Pool) : this() {
            this.description = x.description
            this.poolCidrBlocks = x.poolCidrBlocks
            this.poolId = x.poolId
            this.tags = x.tags
        }

        override fun build(): Ipv6Pool = Ipv6Pool(this)
        override fun description(description: String): FluentBuilder = apply { this.description = description }
        override fun poolCidrBlocks(poolCidrBlocks: List<PoolCidrBlock>): FluentBuilder = apply { this.poolCidrBlocks = poolCidrBlocks }
        override fun poolId(poolId: String): FluentBuilder = apply { this.poolId = poolId }
        override fun tags(tags: List<Tag>): FluentBuilder = apply { this.tags = tags }
    }
}
