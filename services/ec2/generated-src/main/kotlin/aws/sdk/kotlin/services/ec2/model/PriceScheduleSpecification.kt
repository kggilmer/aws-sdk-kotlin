// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the price for a Reserved Instance.
 */
class PriceScheduleSpecification private constructor(builder: BuilderImpl) {
    /**
     * The currency for transacting the Reserved Instance resale.
     * At this time, the only supported currency is USD.
     */
    val currencyCode: CurrencyCodeValues? = builder.currencyCode
    /**
     * The fixed price for the term.
     */
    val price: Double? = builder.price
    /**
     * The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.
     */
    val term: Long? = builder.term

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): PriceScheduleSpecification = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("PriceScheduleSpecification(")
        append("currencyCode=$currencyCode,")
        append("price=$price,")
        append("term=$term)")
    }

    override fun hashCode(): kotlin.Int {
        var result = currencyCode?.hashCode() ?: 0
        result = 31 * result + (price?.hashCode() ?: 0)
        result = 31 * result + (term?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as PriceScheduleSpecification

        if (currencyCode != other.currencyCode) return false
        if (price != other.price) return false
        if (term != other.term) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): PriceScheduleSpecification = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): PriceScheduleSpecification
        /**
         * The currency for transacting the Reserved Instance resale.
         * At this time, the only supported currency is USD.
         */
        fun currencyCode(currencyCode: CurrencyCodeValues): FluentBuilder
        /**
         * The fixed price for the term.
         */
        fun price(price: Double): FluentBuilder
        /**
         * The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.
         */
        fun term(term: Long): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The currency for transacting the Reserved Instance resale.
         * At this time, the only supported currency is USD.
         */
        var currencyCode: CurrencyCodeValues?
        /**
         * The fixed price for the term.
         */
        var price: Double?
        /**
         * The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.
         */
        var term: Long?

        fun build(): PriceScheduleSpecification
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var currencyCode: CurrencyCodeValues? = null
        override var price: Double? = null
        override var term: Long? = null

        constructor(x: PriceScheduleSpecification) : this() {
            this.currencyCode = x.currencyCode
            this.price = x.price
            this.term = x.term
        }

        override fun build(): PriceScheduleSpecification = PriceScheduleSpecification(this)
        override fun currencyCode(currencyCode: CurrencyCodeValues): FluentBuilder = apply { this.currencyCode = currencyCode }
        override fun price(price: Double): FluentBuilder = apply { this.price = price }
        override fun term(term: Long): FluentBuilder = apply { this.term = term }
    }
}
