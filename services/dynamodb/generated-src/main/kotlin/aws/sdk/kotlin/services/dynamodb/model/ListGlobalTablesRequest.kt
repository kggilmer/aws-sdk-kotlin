// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



class ListGlobalTablesRequest private constructor(builder: BuilderImpl) {
    /**
     * The first global table name that this operation will evaluate.
     */
    val exclusiveStartGlobalTableName: String? = builder.exclusiveStartGlobalTableName
    /**
     * The maximum number of table names to return, if the parameter is not specified DynamoDB defaults to 100.
     * If the number of global tables DynamoDB finds reaches this limit, it stops the operation and returns the table names collected up to that point,
     * with a table name in the LastEvaluatedGlobalTableName to apply in a subsequent operation to the ExclusiveStartGlobalTableName parameter.
     */
    val limit: Int? = builder.limit
    /**
     * Lists the global tables in a specific Region.
     */
    val regionName: String? = builder.regionName

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ListGlobalTablesRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ListGlobalTablesRequest(")
        append("exclusiveStartGlobalTableName=$exclusiveStartGlobalTableName,")
        append("limit=$limit,")
        append("regionName=$regionName)")
    }

    override fun hashCode(): kotlin.Int {
        var result = exclusiveStartGlobalTableName?.hashCode() ?: 0
        result = 31 * result + (limit ?: 0)
        result = 31 * result + (regionName?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ListGlobalTablesRequest

        if (exclusiveStartGlobalTableName != other.exclusiveStartGlobalTableName) return false
        if (limit != other.limit) return false
        if (regionName != other.regionName) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ListGlobalTablesRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ListGlobalTablesRequest
        /**
         * The first global table name that this operation will evaluate.
         */
        fun exclusiveStartGlobalTableName(exclusiveStartGlobalTableName: String): FluentBuilder
        /**
         * The maximum number of table names to return, if the parameter is not specified DynamoDB defaults to 100.
         * If the number of global tables DynamoDB finds reaches this limit, it stops the operation and returns the table names collected up to that point,
         * with a table name in the LastEvaluatedGlobalTableName to apply in a subsequent operation to the ExclusiveStartGlobalTableName parameter.
         */
        fun limit(limit: Int): FluentBuilder
        /**
         * Lists the global tables in a specific Region.
         */
        fun regionName(regionName: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The first global table name that this operation will evaluate.
         */
        var exclusiveStartGlobalTableName: String?
        /**
         * The maximum number of table names to return, if the parameter is not specified DynamoDB defaults to 100.
         * If the number of global tables DynamoDB finds reaches this limit, it stops the operation and returns the table names collected up to that point,
         * with a table name in the LastEvaluatedGlobalTableName to apply in a subsequent operation to the ExclusiveStartGlobalTableName parameter.
         */
        var limit: Int?
        /**
         * Lists the global tables in a specific Region.
         */
        var regionName: String?

        fun build(): ListGlobalTablesRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var exclusiveStartGlobalTableName: String? = null
        override var limit: Int? = null
        override var regionName: String? = null

        constructor(x: ListGlobalTablesRequest) : this() {
            this.exclusiveStartGlobalTableName = x.exclusiveStartGlobalTableName
            this.limit = x.limit
            this.regionName = x.regionName
        }

        override fun build(): ListGlobalTablesRequest = ListGlobalTablesRequest(this)
        override fun exclusiveStartGlobalTableName(exclusiveStartGlobalTableName: String): FluentBuilder = apply { this.exclusiveStartGlobalTableName = exclusiveStartGlobalTableName }
        override fun limit(limit: Int): FluentBuilder = apply { this.limit = limit }
        override fun regionName(regionName: String): FluentBuilder = apply { this.regionName = regionName }
    }
}
