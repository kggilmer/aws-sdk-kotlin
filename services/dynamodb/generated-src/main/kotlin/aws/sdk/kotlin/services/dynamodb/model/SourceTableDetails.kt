// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model

import aws.smithy.kotlin.runtime.time.Instant

/**
 * Contains the details of the table when the backup was created.
 */
class SourceTableDetails private constructor(builder: BuilderImpl) {
    /**
     * Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.
     * PROVISIONED - Sets the read/write capacity mode to PROVISIONED. We recommend using PROVISIONED for predictable workloads.
     * PAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST. We recommend using PAY_PER_REQUEST for unpredictable workloads.
     */
    val billingMode: BillingMode? = builder.billingMode
    /**
     * Number of items in the table. Note that this is an approximate value.
     */
    val itemCount: Long? = builder.itemCount
    /**
     * Schema of the table.
     */
    val keySchema: List<KeySchemaElement>? = builder.keySchema
    /**
     * Read IOPs and Write IOPS on the table when the backup was created.
     */
    val provisionedThroughput: ProvisionedThroughput? = builder.provisionedThroughput
    /**
     * ARN of the table for which backup was created.
     */
    val tableArn: String? = builder.tableArn
    /**
     * Time when the source table was created.
     */
    val tableCreationDateTime: Instant? = builder.tableCreationDateTime
    /**
     * Unique identifier for the table for which the backup was created.
     */
    val tableId: String? = builder.tableId
    /**
     * The name of the table for which the backup was created.
     */
    val tableName: String? = builder.tableName
    /**
     * Size of the table in bytes. Note that this is an approximate value.
     */
    val tableSizeBytes: Long = builder.tableSizeBytes

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): SourceTableDetails = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("SourceTableDetails(")
        append("billingMode=$billingMode,")
        append("itemCount=$itemCount,")
        append("keySchema=$keySchema,")
        append("provisionedThroughput=$provisionedThroughput,")
        append("tableArn=$tableArn,")
        append("tableCreationDateTime=$tableCreationDateTime,")
        append("tableId=$tableId,")
        append("tableName=$tableName,")
        append("tableSizeBytes=$tableSizeBytes)")
    }

    override fun hashCode(): kotlin.Int {
        var result = billingMode?.hashCode() ?: 0
        result = 31 * result + (itemCount?.hashCode() ?: 0)
        result = 31 * result + (keySchema?.hashCode() ?: 0)
        result = 31 * result + (provisionedThroughput?.hashCode() ?: 0)
        result = 31 * result + (tableArn?.hashCode() ?: 0)
        result = 31 * result + (tableCreationDateTime?.hashCode() ?: 0)
        result = 31 * result + (tableId?.hashCode() ?: 0)
        result = 31 * result + (tableName?.hashCode() ?: 0)
        result = 31 * result + (tableSizeBytes.hashCode())
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as SourceTableDetails

        if (billingMode != other.billingMode) return false
        if (itemCount != other.itemCount) return false
        if (keySchema != other.keySchema) return false
        if (provisionedThroughput != other.provisionedThroughput) return false
        if (tableArn != other.tableArn) return false
        if (tableCreationDateTime != other.tableCreationDateTime) return false
        if (tableId != other.tableId) return false
        if (tableName != other.tableName) return false
        if (tableSizeBytes != other.tableSizeBytes) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): SourceTableDetails = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): SourceTableDetails
        /**
         * Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.
         * PROVISIONED - Sets the read/write capacity mode to PROVISIONED. We recommend using PROVISIONED for predictable workloads.
         * PAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST. We recommend using PAY_PER_REQUEST for unpredictable workloads.
         */
        fun billingMode(billingMode: BillingMode): FluentBuilder
        /**
         * Number of items in the table. Note that this is an approximate value.
         */
        fun itemCount(itemCount: Long): FluentBuilder
        /**
         * Schema of the table.
         */
        fun keySchema(keySchema: List<KeySchemaElement>): FluentBuilder
        /**
         * Read IOPs and Write IOPS on the table when the backup was created.
         */
        fun provisionedThroughput(provisionedThroughput: ProvisionedThroughput): FluentBuilder
        /**
         * ARN of the table for which backup was created.
         */
        fun tableArn(tableArn: String): FluentBuilder
        /**
         * Time when the source table was created.
         */
        fun tableCreationDateTime(tableCreationDateTime: Instant): FluentBuilder
        /**
         * Unique identifier for the table for which the backup was created.
         */
        fun tableId(tableId: String): FluentBuilder
        /**
         * The name of the table for which the backup was created.
         */
        fun tableName(tableName: String): FluentBuilder
        /**
         * Size of the table in bytes. Note that this is an approximate value.
         */
        fun tableSizeBytes(tableSizeBytes: Long): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.
         * PROVISIONED - Sets the read/write capacity mode to PROVISIONED. We recommend using PROVISIONED for predictable workloads.
         * PAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST. We recommend using PAY_PER_REQUEST for unpredictable workloads.
         */
        var billingMode: BillingMode?
        /**
         * Number of items in the table. Note that this is an approximate value.
         */
        var itemCount: Long?
        /**
         * Schema of the table.
         */
        var keySchema: List<KeySchemaElement>?
        /**
         * Read IOPs and Write IOPS on the table when the backup was created.
         */
        var provisionedThroughput: ProvisionedThroughput?
        /**
         * ARN of the table for which backup was created.
         */
        var tableArn: String?
        /**
         * Time when the source table was created.
         */
        var tableCreationDateTime: Instant?
        /**
         * Unique identifier for the table for which the backup was created.
         */
        var tableId: String?
        /**
         * The name of the table for which the backup was created.
         */
        var tableName: String?
        /**
         * Size of the table in bytes. Note that this is an approximate value.
         */
        var tableSizeBytes: Long

        fun build(): SourceTableDetails
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.ProvisionedThroughput] inside the given [block]
         */
        fun provisionedThroughput(block: ProvisionedThroughput.DslBuilder.() -> kotlin.Unit) {
            this.provisionedThroughput = ProvisionedThroughput.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var billingMode: BillingMode? = null
        override var itemCount: Long? = null
        override var keySchema: List<KeySchemaElement>? = null
        override var provisionedThroughput: ProvisionedThroughput? = null
        override var tableArn: String? = null
        override var tableCreationDateTime: Instant? = null
        override var tableId: String? = null
        override var tableName: String? = null
        override var tableSizeBytes: Long = 0L

        constructor(x: SourceTableDetails) : this() {
            this.billingMode = x.billingMode
            this.itemCount = x.itemCount
            this.keySchema = x.keySchema
            this.provisionedThroughput = x.provisionedThroughput
            this.tableArn = x.tableArn
            this.tableCreationDateTime = x.tableCreationDateTime
            this.tableId = x.tableId
            this.tableName = x.tableName
            this.tableSizeBytes = x.tableSizeBytes
        }

        override fun build(): SourceTableDetails = SourceTableDetails(this)
        override fun billingMode(billingMode: BillingMode): FluentBuilder = apply { this.billingMode = billingMode }
        override fun itemCount(itemCount: Long): FluentBuilder = apply { this.itemCount = itemCount }
        override fun keySchema(keySchema: List<KeySchemaElement>): FluentBuilder = apply { this.keySchema = keySchema }
        override fun provisionedThroughput(provisionedThroughput: ProvisionedThroughput): FluentBuilder = apply { this.provisionedThroughput = provisionedThroughput }
        override fun tableArn(tableArn: String): FluentBuilder = apply { this.tableArn = tableArn }
        override fun tableCreationDateTime(tableCreationDateTime: Instant): FluentBuilder = apply { this.tableCreationDateTime = tableCreationDateTime }
        override fun tableId(tableId: String): FluentBuilder = apply { this.tableId = tableId }
        override fun tableName(tableName: String): FluentBuilder = apply { this.tableName = tableName }
        override fun tableSizeBytes(tableSizeBytes: Long): FluentBuilder = apply { this.tableSizeBytes = tableSizeBytes }
    }
}
