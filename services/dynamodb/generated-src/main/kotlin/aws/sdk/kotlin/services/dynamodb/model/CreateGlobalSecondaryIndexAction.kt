// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents a new global secondary index to be added to an existing table.
 */
class CreateGlobalSecondaryIndexAction private constructor(builder: BuilderImpl) {
    /**
     * The name of the global secondary index to be created.
     */
    val indexName: String? = builder.indexName
    /**
     * The key schema for the global secondary index.
     */
    val keySchema: List<KeySchemaElement>? = builder.keySchema
    /**
     * Represents attributes that are copied (projected) from the table into an index. These
     * are in addition to the primary key attributes and index key attributes, which are
     * automatically projected.
     */
    val projection: Projection? = builder.projection
    /**
     * Represents the provisioned throughput settings for the specified global secondary index.
     * For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide.
     */
    val provisionedThroughput: ProvisionedThroughput? = builder.provisionedThroughput

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CreateGlobalSecondaryIndexAction = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CreateGlobalSecondaryIndexAction(")
        append("indexName=$indexName,")
        append("keySchema=$keySchema,")
        append("projection=$projection,")
        append("provisionedThroughput=$provisionedThroughput)")
    }

    override fun hashCode(): kotlin.Int {
        var result = indexName?.hashCode() ?: 0
        result = 31 * result + (keySchema?.hashCode() ?: 0)
        result = 31 * result + (projection?.hashCode() ?: 0)
        result = 31 * result + (provisionedThroughput?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CreateGlobalSecondaryIndexAction

        if (indexName != other.indexName) return false
        if (keySchema != other.keySchema) return false
        if (projection != other.projection) return false
        if (provisionedThroughput != other.provisionedThroughput) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CreateGlobalSecondaryIndexAction = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CreateGlobalSecondaryIndexAction
        /**
         * The name of the global secondary index to be created.
         */
        fun indexName(indexName: String): FluentBuilder
        /**
         * The key schema for the global secondary index.
         */
        fun keySchema(keySchema: List<KeySchemaElement>): FluentBuilder
        /**
         * Represents attributes that are copied (projected) from the table into an index. These
         * are in addition to the primary key attributes and index key attributes, which are
         * automatically projected.
         */
        fun projection(projection: Projection): FluentBuilder
        /**
         * Represents the provisioned throughput settings for the specified global secondary index.
         * For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide.
         */
        fun provisionedThroughput(provisionedThroughput: ProvisionedThroughput): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The name of the global secondary index to be created.
         */
        var indexName: String?
        /**
         * The key schema for the global secondary index.
         */
        var keySchema: List<KeySchemaElement>?
        /**
         * Represents attributes that are copied (projected) from the table into an index. These
         * are in addition to the primary key attributes and index key attributes, which are
         * automatically projected.
         */
        var projection: Projection?
        /**
         * Represents the provisioned throughput settings for the specified global secondary index.
         * For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide.
         */
        var provisionedThroughput: ProvisionedThroughput?

        fun build(): CreateGlobalSecondaryIndexAction
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.Projection] inside the given [block]
         */
        fun projection(block: Projection.DslBuilder.() -> kotlin.Unit) {
            this.projection = Projection.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.ProvisionedThroughput] inside the given [block]
         */
        fun provisionedThroughput(block: ProvisionedThroughput.DslBuilder.() -> kotlin.Unit) {
            this.provisionedThroughput = ProvisionedThroughput.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var indexName: String? = null
        override var keySchema: List<KeySchemaElement>? = null
        override var projection: Projection? = null
        override var provisionedThroughput: ProvisionedThroughput? = null

        constructor(x: CreateGlobalSecondaryIndexAction) : this() {
            this.indexName = x.indexName
            this.keySchema = x.keySchema
            this.projection = x.projection
            this.provisionedThroughput = x.provisionedThroughput
        }

        override fun build(): CreateGlobalSecondaryIndexAction = CreateGlobalSecondaryIndexAction(this)
        override fun indexName(indexName: String): FluentBuilder = apply { this.indexName = indexName }
        override fun keySchema(keySchema: List<KeySchemaElement>): FluentBuilder = apply { this.keySchema = keySchema }
        override fun projection(projection: Projection): FluentBuilder = apply { this.projection = projection }
        override fun provisionedThroughput(provisionedThroughput: ProvisionedThroughput): FluentBuilder = apply { this.provisionedThroughput = provisionedThroughput }
    }
}
