// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Replica-specific provisioned throughput settings. If not specified, uses the
 * source table's provisioned throughput settings.
 */
class ProvisionedThroughputOverride private constructor(builder: BuilderImpl) {
    /**
     * Replica-specific read capacity units. If not specified, uses the source table's
     * read capacity settings.
     */
    val readCapacityUnits: Long? = builder.readCapacityUnits

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ProvisionedThroughputOverride = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ProvisionedThroughputOverride(")
        append("readCapacityUnits=$readCapacityUnits)")
    }

    override fun hashCode(): kotlin.Int {
        var result = readCapacityUnits?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ProvisionedThroughputOverride

        if (readCapacityUnits != other.readCapacityUnits) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ProvisionedThroughputOverride = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ProvisionedThroughputOverride
        /**
         * Replica-specific read capacity units. If not specified, uses the source table's
         * read capacity settings.
         */
        fun readCapacityUnits(readCapacityUnits: Long): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Replica-specific read capacity units. If not specified, uses the source table's
         * read capacity settings.
         */
        var readCapacityUnits: Long?

        fun build(): ProvisionedThroughputOverride
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var readCapacityUnits: Long? = null

        constructor(x: ProvisionedThroughputOverride) : this() {
            this.readCapacityUnits = x.readCapacityUnits
        }

        override fun build(): ProvisionedThroughputOverride = ProvisionedThroughputOverride(this)
        override fun readCapacityUnits(readCapacityUnits: Long): FluentBuilder = apply { this.readCapacityUnits = readCapacityUnits }
    }
}
