// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents a request to perform a DeleteItem operation.
 */
class Delete private constructor(builder: BuilderImpl) {
    /**
     * A condition that must be satisfied in order for a conditional delete to succeed.
     */
    val conditionExpression: String? = builder.conditionExpression
    /**
     * One or more substitution tokens for attribute names in an expression.
     */
    val expressionAttributeNames: Map<String, String>? = builder.expressionAttributeNames
    /**
     * One or more values that can be substituted in an expression.
     */
    val expressionAttributeValues: Map<String, AttributeValue>? = builder.expressionAttributeValues
    /**
     * The primary key of the item to be deleted. Each element consists of an
     * attribute name and a value for that attribute.
     */
    val key: Map<String, AttributeValue>? = builder.key
    /**
     * Use ReturnValuesOnConditionCheckFailure to
     * get the item attributes if the Delete condition fails.
     * For ReturnValuesOnConditionCheckFailure, the valid
     * values are: NONE and ALL_OLD.
     */
    val returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = builder.returnValuesOnConditionCheckFailure
    /**
     * Name of the table in which the item to be deleted resides.
     */
    val tableName: String? = builder.tableName

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): Delete = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("Delete(")
        append("conditionExpression=$conditionExpression,")
        append("expressionAttributeNames=$expressionAttributeNames,")
        append("expressionAttributeValues=$expressionAttributeValues,")
        append("key=$key,")
        append("returnValuesOnConditionCheckFailure=$returnValuesOnConditionCheckFailure,")
        append("tableName=$tableName)")
    }

    override fun hashCode(): kotlin.Int {
        var result = conditionExpression?.hashCode() ?: 0
        result = 31 * result + (expressionAttributeNames?.hashCode() ?: 0)
        result = 31 * result + (expressionAttributeValues?.hashCode() ?: 0)
        result = 31 * result + (key?.hashCode() ?: 0)
        result = 31 * result + (returnValuesOnConditionCheckFailure?.hashCode() ?: 0)
        result = 31 * result + (tableName?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Delete

        if (conditionExpression != other.conditionExpression) return false
        if (expressionAttributeNames != other.expressionAttributeNames) return false
        if (expressionAttributeValues != other.expressionAttributeValues) return false
        if (key != other.key) return false
        if (returnValuesOnConditionCheckFailure != other.returnValuesOnConditionCheckFailure) return false
        if (tableName != other.tableName) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): Delete = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): Delete
        /**
         * A condition that must be satisfied in order for a conditional delete to succeed.
         */
        fun conditionExpression(conditionExpression: String): FluentBuilder
        /**
         * One or more substitution tokens for attribute names in an expression.
         */
        fun expressionAttributeNames(expressionAttributeNames: Map<String, String>): FluentBuilder
        /**
         * One or more values that can be substituted in an expression.
         */
        fun expressionAttributeValues(expressionAttributeValues: Map<String, AttributeValue>): FluentBuilder
        /**
         * The primary key of the item to be deleted. Each element consists of an
         * attribute name and a value for that attribute.
         */
        fun key(key: Map<String, AttributeValue>): FluentBuilder
        /**
         * Use ReturnValuesOnConditionCheckFailure to
         * get the item attributes if the Delete condition fails.
         * For ReturnValuesOnConditionCheckFailure, the valid
         * values are: NONE and ALL_OLD.
         */
        fun returnValuesOnConditionCheckFailure(returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure): FluentBuilder
        /**
         * Name of the table in which the item to be deleted resides.
         */
        fun tableName(tableName: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * A condition that must be satisfied in order for a conditional delete to succeed.
         */
        var conditionExpression: String?
        /**
         * One or more substitution tokens for attribute names in an expression.
         */
        var expressionAttributeNames: Map<String, String>?
        /**
         * One or more values that can be substituted in an expression.
         */
        var expressionAttributeValues: Map<String, AttributeValue>?
        /**
         * The primary key of the item to be deleted. Each element consists of an
         * attribute name and a value for that attribute.
         */
        var key: Map<String, AttributeValue>?
        /**
         * Use ReturnValuesOnConditionCheckFailure to
         * get the item attributes if the Delete condition fails.
         * For ReturnValuesOnConditionCheckFailure, the valid
         * values are: NONE and ALL_OLD.
         */
        var returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure?
        /**
         * Name of the table in which the item to be deleted resides.
         */
        var tableName: String?

        fun build(): Delete
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var conditionExpression: String? = null
        override var expressionAttributeNames: Map<String, String>? = null
        override var expressionAttributeValues: Map<String, AttributeValue>? = null
        override var key: Map<String, AttributeValue>? = null
        override var returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = null
        override var tableName: String? = null

        constructor(x: Delete) : this() {
            this.conditionExpression = x.conditionExpression
            this.expressionAttributeNames = x.expressionAttributeNames
            this.expressionAttributeValues = x.expressionAttributeValues
            this.key = x.key
            this.returnValuesOnConditionCheckFailure = x.returnValuesOnConditionCheckFailure
            this.tableName = x.tableName
        }

        override fun build(): Delete = Delete(this)
        override fun conditionExpression(conditionExpression: String): FluentBuilder = apply { this.conditionExpression = conditionExpression }
        override fun expressionAttributeNames(expressionAttributeNames: Map<String, String>): FluentBuilder = apply { this.expressionAttributeNames = expressionAttributeNames }
        override fun expressionAttributeValues(expressionAttributeValues: Map<String, AttributeValue>): FluentBuilder = apply { this.expressionAttributeValues = expressionAttributeValues }
        override fun key(key: Map<String, AttributeValue>): FluentBuilder = apply { this.key = key }
        override fun returnValuesOnConditionCheckFailure(returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure): FluentBuilder = apply { this.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure }
        override fun tableName(tableName: String): FluentBuilder = apply { this.tableName = tableName }
    }
}
