// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents the properties of a local secondary index for the table
 * when the backup was created.
 */
class LocalSecondaryIndexInfo private constructor(builder: BuilderImpl) {
    /**
     * Represents the name of the local secondary index.
     */
    val indexName: String? = builder.indexName
    /**
     * The complete key schema for a local secondary index, which consists of one or more pairs of attribute names and key types:
     * HASH - partition key
     * RANGE - sort key
     * The partition key of an item is also known as its hash attribute.  The
     * term "hash attribute" derives from DynamoDB's usage of an internal hash function to
     * evenly distribute data items across partitions, based on their partition key values.
     * The sort key of an item is also known as its range attribute.
     * The term "range attribute" derives from the way DynamoDB stores items with the same
     * partition key physically close together, in sorted order by the sort key value.
     */
    val keySchema: List<KeySchemaElement>? = builder.keySchema
    /**
     * Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
     */
    val projection: Projection? = builder.projection

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): LocalSecondaryIndexInfo = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("LocalSecondaryIndexInfo(")
        append("indexName=$indexName,")
        append("keySchema=$keySchema,")
        append("projection=$projection)")
    }

    override fun hashCode(): kotlin.Int {
        var result = indexName?.hashCode() ?: 0
        result = 31 * result + (keySchema?.hashCode() ?: 0)
        result = 31 * result + (projection?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as LocalSecondaryIndexInfo

        if (indexName != other.indexName) return false
        if (keySchema != other.keySchema) return false
        if (projection != other.projection) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): LocalSecondaryIndexInfo = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): LocalSecondaryIndexInfo
        /**
         * Represents the name of the local secondary index.
         */
        fun indexName(indexName: String): FluentBuilder
        /**
         * The complete key schema for a local secondary index, which consists of one or more pairs of attribute names and key types:
         * HASH - partition key
         * RANGE - sort key
         * The partition key of an item is also known as its hash attribute.  The
         * term "hash attribute" derives from DynamoDB's usage of an internal hash function to
         * evenly distribute data items across partitions, based on their partition key values.
         * The sort key of an item is also known as its range attribute.
         * The term "range attribute" derives from the way DynamoDB stores items with the same
         * partition key physically close together, in sorted order by the sort key value.
         */
        fun keySchema(keySchema: List<KeySchemaElement>): FluentBuilder
        /**
         * Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
         */
        fun projection(projection: Projection): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Represents the name of the local secondary index.
         */
        var indexName: String?
        /**
         * The complete key schema for a local secondary index, which consists of one or more pairs of attribute names and key types:
         * HASH - partition key
         * RANGE - sort key
         * The partition key of an item is also known as its hash attribute.  The
         * term "hash attribute" derives from DynamoDB's usage of an internal hash function to
         * evenly distribute data items across partitions, based on their partition key values.
         * The sort key of an item is also known as its range attribute.
         * The term "range attribute" derives from the way DynamoDB stores items with the same
         * partition key physically close together, in sorted order by the sort key value.
         */
        var keySchema: List<KeySchemaElement>?
        /**
         * Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
         */
        var projection: Projection?

        fun build(): LocalSecondaryIndexInfo
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.Projection] inside the given [block]
         */
        fun projection(block: Projection.DslBuilder.() -> kotlin.Unit) {
            this.projection = Projection.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var indexName: String? = null
        override var keySchema: List<KeySchemaElement>? = null
        override var projection: Projection? = null

        constructor(x: LocalSecondaryIndexInfo) : this() {
            this.indexName = x.indexName
            this.keySchema = x.keySchema
            this.projection = x.projection
        }

        override fun build(): LocalSecondaryIndexInfo = LocalSecondaryIndexInfo(this)
        override fun indexName(indexName: String): FluentBuilder = apply { this.indexName = indexName }
        override fun keySchema(keySchema: List<KeySchemaElement>): FluentBuilder = apply { this.keySchema = keySchema }
        override fun projection(projection: Projection): FluentBuilder = apply { this.projection = projection }
    }
}
