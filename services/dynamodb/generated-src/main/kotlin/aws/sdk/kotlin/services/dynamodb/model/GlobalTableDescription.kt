// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model

import aws.smithy.kotlin.runtime.time.Instant

/**
 * Contains details about the global table.
 */
class GlobalTableDescription private constructor(builder: BuilderImpl) {
    /**
     * The creation time of the global table.
     */
    val creationDateTime: Instant? = builder.creationDateTime
    /**
     * The unique identifier of the global table.
     */
    val globalTableArn: String? = builder.globalTableArn
    /**
     * The global table name.
     */
    val globalTableName: String? = builder.globalTableName
    /**
     * The current state of the global table:
     * CREATING - The global table is being created.
     * UPDATING - The global table is being updated.
     * DELETING - The global table is being deleted.
     * ACTIVE - The global table is ready for use.
     */
    val globalTableStatus: GlobalTableStatus? = builder.globalTableStatus
    /**
     * The Regions where the global table has replicas.
     */
    val replicationGroup: List<ReplicaDescription>? = builder.replicationGroup

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): GlobalTableDescription = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("GlobalTableDescription(")
        append("creationDateTime=$creationDateTime,")
        append("globalTableArn=$globalTableArn,")
        append("globalTableName=$globalTableName,")
        append("globalTableStatus=$globalTableStatus,")
        append("replicationGroup=$replicationGroup)")
    }

    override fun hashCode(): kotlin.Int {
        var result = creationDateTime?.hashCode() ?: 0
        result = 31 * result + (globalTableArn?.hashCode() ?: 0)
        result = 31 * result + (globalTableName?.hashCode() ?: 0)
        result = 31 * result + (globalTableStatus?.hashCode() ?: 0)
        result = 31 * result + (replicationGroup?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as GlobalTableDescription

        if (creationDateTime != other.creationDateTime) return false
        if (globalTableArn != other.globalTableArn) return false
        if (globalTableName != other.globalTableName) return false
        if (globalTableStatus != other.globalTableStatus) return false
        if (replicationGroup != other.replicationGroup) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): GlobalTableDescription = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): GlobalTableDescription
        /**
         * The creation time of the global table.
         */
        fun creationDateTime(creationDateTime: Instant): FluentBuilder
        /**
         * The unique identifier of the global table.
         */
        fun globalTableArn(globalTableArn: String): FluentBuilder
        /**
         * The global table name.
         */
        fun globalTableName(globalTableName: String): FluentBuilder
        /**
         * The current state of the global table:
         * CREATING - The global table is being created.
         * UPDATING - The global table is being updated.
         * DELETING - The global table is being deleted.
         * ACTIVE - The global table is ready for use.
         */
        fun globalTableStatus(globalTableStatus: GlobalTableStatus): FluentBuilder
        /**
         * The Regions where the global table has replicas.
         */
        fun replicationGroup(replicationGroup: List<ReplicaDescription>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The creation time of the global table.
         */
        var creationDateTime: Instant?
        /**
         * The unique identifier of the global table.
         */
        var globalTableArn: String?
        /**
         * The global table name.
         */
        var globalTableName: String?
        /**
         * The current state of the global table:
         * CREATING - The global table is being created.
         * UPDATING - The global table is being updated.
         * DELETING - The global table is being deleted.
         * ACTIVE - The global table is ready for use.
         */
        var globalTableStatus: GlobalTableStatus?
        /**
         * The Regions where the global table has replicas.
         */
        var replicationGroup: List<ReplicaDescription>?

        fun build(): GlobalTableDescription
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var creationDateTime: Instant? = null
        override var globalTableArn: String? = null
        override var globalTableName: String? = null
        override var globalTableStatus: GlobalTableStatus? = null
        override var replicationGroup: List<ReplicaDescription>? = null

        constructor(x: GlobalTableDescription) : this() {
            this.creationDateTime = x.creationDateTime
            this.globalTableArn = x.globalTableArn
            this.globalTableName = x.globalTableName
            this.globalTableStatus = x.globalTableStatus
            this.replicationGroup = x.replicationGroup
        }

        override fun build(): GlobalTableDescription = GlobalTableDescription(this)
        override fun creationDateTime(creationDateTime: Instant): FluentBuilder = apply { this.creationDateTime = creationDateTime }
        override fun globalTableArn(globalTableArn: String): FluentBuilder = apply { this.globalTableArn = globalTableArn }
        override fun globalTableName(globalTableName: String): FluentBuilder = apply { this.globalTableName = globalTableName }
        override fun globalTableStatus(globalTableStatus: GlobalTableStatus): FluentBuilder = apply { this.globalTableStatus = globalTableStatus }
        override fun replicationGroup(replicationGroup: List<ReplicaDescription>): FluentBuilder = apply { this.replicationGroup = replicationGroup }
    }
}
