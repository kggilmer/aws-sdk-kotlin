// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents the input of a ListTables operation.
 */
class ListTablesRequest private constructor(builder: BuilderImpl) {
    /**
     * The first table name that this operation will evaluate. Use the value that was returned for
     * LastEvaluatedTableName in a previous operation, so that you can obtain the next page
     * of results.
     */
    val exclusiveStartTableName: String? = builder.exclusiveStartTableName
    /**
     * A maximum number of table names to return. If this parameter is not specified, the limit is 100.
     */
    val limit: Int? = builder.limit

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ListTablesRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ListTablesRequest(")
        append("exclusiveStartTableName=$exclusiveStartTableName,")
        append("limit=$limit)")
    }

    override fun hashCode(): kotlin.Int {
        var result = exclusiveStartTableName?.hashCode() ?: 0
        result = 31 * result + (limit ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ListTablesRequest

        if (exclusiveStartTableName != other.exclusiveStartTableName) return false
        if (limit != other.limit) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ListTablesRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ListTablesRequest
        /**
         * The first table name that this operation will evaluate. Use the value that was returned for
         * LastEvaluatedTableName in a previous operation, so that you can obtain the next page
         * of results.
         */
        fun exclusiveStartTableName(exclusiveStartTableName: String): FluentBuilder
        /**
         * A maximum number of table names to return. If this parameter is not specified, the limit is 100.
         */
        fun limit(limit: Int): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The first table name that this operation will evaluate. Use the value that was returned for
         * LastEvaluatedTableName in a previous operation, so that you can obtain the next page
         * of results.
         */
        var exclusiveStartTableName: String?
        /**
         * A maximum number of table names to return. If this parameter is not specified, the limit is 100.
         */
        var limit: Int?

        fun build(): ListTablesRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var exclusiveStartTableName: String? = null
        override var limit: Int? = null

        constructor(x: ListTablesRequest) : this() {
            this.exclusiveStartTableName = x.exclusiveStartTableName
            this.limit = x.limit
        }

        override fun build(): ListTablesRequest = ListTablesRequest(this)
        override fun exclusiveStartTableName(exclusiveStartTableName: String): FluentBuilder = apply { this.exclusiveStartTableName = exclusiveStartTableName }
        override fun limit(limit: Int): FluentBuilder = apply { this.limit = limit }
    }
}
