// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



class RestoreTableFromBackupRequest private constructor(builder: BuilderImpl) {
    /**
     * The Amazon Resource Name (ARN) associated with the backup.
     */
    val backupArn: String? = builder.backupArn
    /**
     * The billing mode of the restored table.
     */
    val billingModeOverride: BillingMode? = builder.billingModeOverride
    /**
     * List of global secondary indexes for the restored table. The indexes
     * provided should match existing secondary indexes. You can choose to exclude
     * some or all of the indexes at the time of restore.
     */
    val globalSecondaryIndexOverride: List<GlobalSecondaryIndex>? = builder.globalSecondaryIndexOverride
    /**
     * List of local secondary indexes for the restored table. The indexes
     * provided should match existing secondary indexes. You can choose to exclude
     * some or all of the indexes at the time of restore.
     */
    val localSecondaryIndexOverride: List<LocalSecondaryIndex>? = builder.localSecondaryIndexOverride
    /**
     * Provisioned throughput settings for the restored table.
     */
    val provisionedThroughputOverride: ProvisionedThroughput? = builder.provisionedThroughputOverride
    /**
     * The new server-side encryption settings for the restored table.
     */
    val sseSpecificationOverride: SseSpecification? = builder.sseSpecificationOverride
    /**
     * The name of the new table to which the backup must be restored.
     */
    val targetTableName: String? = builder.targetTableName

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): RestoreTableFromBackupRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("RestoreTableFromBackupRequest(")
        append("backupArn=$backupArn,")
        append("billingModeOverride=$billingModeOverride,")
        append("globalSecondaryIndexOverride=$globalSecondaryIndexOverride,")
        append("localSecondaryIndexOverride=$localSecondaryIndexOverride,")
        append("provisionedThroughputOverride=$provisionedThroughputOverride,")
        append("sseSpecificationOverride=$sseSpecificationOverride,")
        append("targetTableName=$targetTableName)")
    }

    override fun hashCode(): kotlin.Int {
        var result = backupArn?.hashCode() ?: 0
        result = 31 * result + (billingModeOverride?.hashCode() ?: 0)
        result = 31 * result + (globalSecondaryIndexOverride?.hashCode() ?: 0)
        result = 31 * result + (localSecondaryIndexOverride?.hashCode() ?: 0)
        result = 31 * result + (provisionedThroughputOverride?.hashCode() ?: 0)
        result = 31 * result + (sseSpecificationOverride?.hashCode() ?: 0)
        result = 31 * result + (targetTableName?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as RestoreTableFromBackupRequest

        if (backupArn != other.backupArn) return false
        if (billingModeOverride != other.billingModeOverride) return false
        if (globalSecondaryIndexOverride != other.globalSecondaryIndexOverride) return false
        if (localSecondaryIndexOverride != other.localSecondaryIndexOverride) return false
        if (provisionedThroughputOverride != other.provisionedThroughputOverride) return false
        if (sseSpecificationOverride != other.sseSpecificationOverride) return false
        if (targetTableName != other.targetTableName) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): RestoreTableFromBackupRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): RestoreTableFromBackupRequest
        /**
         * The Amazon Resource Name (ARN) associated with the backup.
         */
        fun backupArn(backupArn: String): FluentBuilder
        /**
         * The billing mode of the restored table.
         */
        fun billingModeOverride(billingModeOverride: BillingMode): FluentBuilder
        /**
         * List of global secondary indexes for the restored table. The indexes
         * provided should match existing secondary indexes. You can choose to exclude
         * some or all of the indexes at the time of restore.
         */
        fun globalSecondaryIndexOverride(globalSecondaryIndexOverride: List<GlobalSecondaryIndex>): FluentBuilder
        /**
         * List of local secondary indexes for the restored table. The indexes
         * provided should match existing secondary indexes. You can choose to exclude
         * some or all of the indexes at the time of restore.
         */
        fun localSecondaryIndexOverride(localSecondaryIndexOverride: List<LocalSecondaryIndex>): FluentBuilder
        /**
         * Provisioned throughput settings for the restored table.
         */
        fun provisionedThroughputOverride(provisionedThroughputOverride: ProvisionedThroughput): FluentBuilder
        /**
         * The new server-side encryption settings for the restored table.
         */
        fun sseSpecificationOverride(sseSpecificationOverride: SseSpecification): FluentBuilder
        /**
         * The name of the new table to which the backup must be restored.
         */
        fun targetTableName(targetTableName: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The Amazon Resource Name (ARN) associated with the backup.
         */
        var backupArn: String?
        /**
         * The billing mode of the restored table.
         */
        var billingModeOverride: BillingMode?
        /**
         * List of global secondary indexes for the restored table. The indexes
         * provided should match existing secondary indexes. You can choose to exclude
         * some or all of the indexes at the time of restore.
         */
        var globalSecondaryIndexOverride: List<GlobalSecondaryIndex>?
        /**
         * List of local secondary indexes for the restored table. The indexes
         * provided should match existing secondary indexes. You can choose to exclude
         * some or all of the indexes at the time of restore.
         */
        var localSecondaryIndexOverride: List<LocalSecondaryIndex>?
        /**
         * Provisioned throughput settings for the restored table.
         */
        var provisionedThroughputOverride: ProvisionedThroughput?
        /**
         * The new server-side encryption settings for the restored table.
         */
        var sseSpecificationOverride: SseSpecification?
        /**
         * The name of the new table to which the backup must be restored.
         */
        var targetTableName: String?

        fun build(): RestoreTableFromBackupRequest
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.ProvisionedThroughput] inside the given [block]
         */
        fun provisionedThroughputOverride(block: ProvisionedThroughput.DslBuilder.() -> kotlin.Unit) {
            this.provisionedThroughputOverride = ProvisionedThroughput.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.SseSpecification] inside the given [block]
         */
        fun sseSpecificationOverride(block: SseSpecification.DslBuilder.() -> kotlin.Unit) {
            this.sseSpecificationOverride = SseSpecification.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var backupArn: String? = null
        override var billingModeOverride: BillingMode? = null
        override var globalSecondaryIndexOverride: List<GlobalSecondaryIndex>? = null
        override var localSecondaryIndexOverride: List<LocalSecondaryIndex>? = null
        override var provisionedThroughputOverride: ProvisionedThroughput? = null
        override var sseSpecificationOverride: SseSpecification? = null
        override var targetTableName: String? = null

        constructor(x: RestoreTableFromBackupRequest) : this() {
            this.backupArn = x.backupArn
            this.billingModeOverride = x.billingModeOverride
            this.globalSecondaryIndexOverride = x.globalSecondaryIndexOverride
            this.localSecondaryIndexOverride = x.localSecondaryIndexOverride
            this.provisionedThroughputOverride = x.provisionedThroughputOverride
            this.sseSpecificationOverride = x.sseSpecificationOverride
            this.targetTableName = x.targetTableName
        }

        override fun build(): RestoreTableFromBackupRequest = RestoreTableFromBackupRequest(this)
        override fun backupArn(backupArn: String): FluentBuilder = apply { this.backupArn = backupArn }
        override fun billingModeOverride(billingModeOverride: BillingMode): FluentBuilder = apply { this.billingModeOverride = billingModeOverride }
        override fun globalSecondaryIndexOverride(globalSecondaryIndexOverride: List<GlobalSecondaryIndex>): FluentBuilder = apply { this.globalSecondaryIndexOverride = globalSecondaryIndexOverride }
        override fun localSecondaryIndexOverride(localSecondaryIndexOverride: List<LocalSecondaryIndex>): FluentBuilder = apply { this.localSecondaryIndexOverride = localSecondaryIndexOverride }
        override fun provisionedThroughputOverride(provisionedThroughputOverride: ProvisionedThroughput): FluentBuilder = apply { this.provisionedThroughputOverride = provisionedThroughputOverride }
        override fun sseSpecificationOverride(sseSpecificationOverride: SseSpecification): FluentBuilder = apply { this.sseSpecificationOverride = sseSpecificationOverride }
        override fun targetTableName(targetTableName: String): FluentBuilder = apply { this.targetTableName = targetTableName }
    }
}
