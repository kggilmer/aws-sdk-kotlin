// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



class DescribeTimeToLiveResponse private constructor(builder: BuilderImpl) {
    /**
     *
     */
    val timeToLiveDescription: TimeToLiveDescription? = builder.timeToLiveDescription

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DescribeTimeToLiveResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DescribeTimeToLiveResponse(")
        append("timeToLiveDescription=$timeToLiveDescription)")
    }

    override fun hashCode(): kotlin.Int {
        var result = timeToLiveDescription?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DescribeTimeToLiveResponse

        if (timeToLiveDescription != other.timeToLiveDescription) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DescribeTimeToLiveResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DescribeTimeToLiveResponse
        /**
         *
         */
        fun timeToLiveDescription(timeToLiveDescription: TimeToLiveDescription): FluentBuilder
    }

    interface DslBuilder {
        /**
         *
         */
        var timeToLiveDescription: TimeToLiveDescription?

        fun build(): DescribeTimeToLiveResponse
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.TimeToLiveDescription] inside the given [block]
         */
        fun timeToLiveDescription(block: TimeToLiveDescription.DslBuilder.() -> kotlin.Unit) {
            this.timeToLiveDescription = TimeToLiveDescription.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var timeToLiveDescription: TimeToLiveDescription? = null

        constructor(x: DescribeTimeToLiveResponse) : this() {
            this.timeToLiveDescription = x.timeToLiveDescription
        }

        override fun build(): DescribeTimeToLiveResponse = DescribeTimeToLiveResponse(this)
        override fun timeToLiveDescription(timeToLiveDescription: TimeToLiveDescription): FluentBuilder = apply { this.timeToLiveDescription = timeToLiveDescription }
    }
}
