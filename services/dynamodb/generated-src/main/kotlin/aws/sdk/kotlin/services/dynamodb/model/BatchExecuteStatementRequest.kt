// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



class BatchExecuteStatementRequest private constructor(builder: BuilderImpl) {
    /**
     * The list of PartiQL statements representing the batch to run.
     */
    val statements: List<BatchStatementRequest>? = builder.statements

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): BatchExecuteStatementRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("BatchExecuteStatementRequest(")
        append("statements=$statements)")
    }

    override fun hashCode(): kotlin.Int {
        var result = statements?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as BatchExecuteStatementRequest

        if (statements != other.statements) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): BatchExecuteStatementRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): BatchExecuteStatementRequest
        /**
         * The list of PartiQL statements representing the batch to run.
         */
        fun statements(statements: List<BatchStatementRequest>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The list of PartiQL statements representing the batch to run.
         */
        var statements: List<BatchStatementRequest>?

        fun build(): BatchExecuteStatementRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var statements: List<BatchStatementRequest>? = null

        constructor(x: BatchExecuteStatementRequest) : this() {
            this.statements = x.statements
        }

        override fun build(): BatchExecuteStatementRequest = BatchExecuteStatementRequest(this)
        override fun statements(statements: List<BatchStatementRequest>): FluentBuilder = apply { this.statements = statements }
    }
}
