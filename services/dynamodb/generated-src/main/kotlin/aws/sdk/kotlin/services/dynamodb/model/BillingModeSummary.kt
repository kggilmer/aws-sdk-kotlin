// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model

import aws.smithy.kotlin.runtime.time.Instant

/**
 * Contains the details for the read/write capacity mode.
 */
class BillingModeSummary private constructor(builder: BuilderImpl) {
    /**
     * Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.
     * PROVISIONED - Sets the read/write capacity mode to PROVISIONED. We recommend using PROVISIONED for predictable workloads.
     * PAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST. We recommend using PAY_PER_REQUEST for unpredictable workloads.
     */
    val billingMode: BillingMode? = builder.billingMode
    /**
     * Represents the time when PAY_PER_REQUEST was last set as the read/write capacity mode.
     */
    val lastUpdateToPayPerRequestDateTime: Instant? = builder.lastUpdateToPayPerRequestDateTime

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): BillingModeSummary = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("BillingModeSummary(")
        append("billingMode=$billingMode,")
        append("lastUpdateToPayPerRequestDateTime=$lastUpdateToPayPerRequestDateTime)")
    }

    override fun hashCode(): kotlin.Int {
        var result = billingMode?.hashCode() ?: 0
        result = 31 * result + (lastUpdateToPayPerRequestDateTime?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as BillingModeSummary

        if (billingMode != other.billingMode) return false
        if (lastUpdateToPayPerRequestDateTime != other.lastUpdateToPayPerRequestDateTime) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): BillingModeSummary = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): BillingModeSummary
        /**
         * Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.
         * PROVISIONED - Sets the read/write capacity mode to PROVISIONED. We recommend using PROVISIONED for predictable workloads.
         * PAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST. We recommend using PAY_PER_REQUEST for unpredictable workloads.
         */
        fun billingMode(billingMode: BillingMode): FluentBuilder
        /**
         * Represents the time when PAY_PER_REQUEST was last set as the read/write capacity mode.
         */
        fun lastUpdateToPayPerRequestDateTime(lastUpdateToPayPerRequestDateTime: Instant): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.
         * PROVISIONED - Sets the read/write capacity mode to PROVISIONED. We recommend using PROVISIONED for predictable workloads.
         * PAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST. We recommend using PAY_PER_REQUEST for unpredictable workloads.
         */
        var billingMode: BillingMode?
        /**
         * Represents the time when PAY_PER_REQUEST was last set as the read/write capacity mode.
         */
        var lastUpdateToPayPerRequestDateTime: Instant?

        fun build(): BillingModeSummary
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var billingMode: BillingMode? = null
        override var lastUpdateToPayPerRequestDateTime: Instant? = null

        constructor(x: BillingModeSummary) : this() {
            this.billingMode = x.billingMode
            this.lastUpdateToPayPerRequestDateTime = x.lastUpdateToPayPerRequestDateTime
        }

        override fun build(): BillingModeSummary = BillingModeSummary(this)
        override fun billingMode(billingMode: BillingMode): FluentBuilder = apply { this.billingMode = billingMode }
        override fun lastUpdateToPayPerRequestDateTime(lastUpdateToPayPerRequestDateTime: Instant): FluentBuilder = apply { this.lastUpdateToPayPerRequestDateTime = lastUpdateToPayPerRequestDateTime }
    }
}
