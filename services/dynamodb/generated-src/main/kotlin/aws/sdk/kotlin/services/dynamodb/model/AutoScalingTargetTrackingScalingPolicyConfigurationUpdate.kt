// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents the settings of a target tracking scaling policy that will be modified.
 */
class AutoScalingTargetTrackingScalingPolicyConfigurationUpdate private constructor(builder: BuilderImpl) {
    /**
     * Indicates whether scale in by the target tracking policy is disabled. If the value is true,
     * scale in is disabled and the target tracking policy won't remove capacity from the scalable resource.
     * Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource.
     * The default value is false.
     */
    val disableScaleIn: Boolean? = builder.disableScaleIn
    /**
     * The amount of time, in seconds, after a scale in activity completes before another scale
     * in activity can start. The cooldown period is used to block subsequent scale in requests
     * until it has expired. You should scale in conservatively to protect your application's
     * availability. However, if another alarm triggers a scale out policy during the cooldown
     * period after a scale-in, application auto scaling scales out your scalable target
     * immediately.
     */
    val scaleInCooldown: Int? = builder.scaleInCooldown
    /**
     * The amount of time, in seconds, after a scale out activity completes before another scale out
     * activity can start. While the cooldown period is in effect, the capacity that has been added
     * by the previous scale out event that initiated the cooldown is calculated as part of the
     * desired capacity for the next scale out. You should continuously (but not excessively)
     * scale out.
     */
    val scaleOutCooldown: Int? = builder.scaleOutCooldown
    /**
     * The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
     */
    val targetValue: Double? = builder.targetValue

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): AutoScalingTargetTrackingScalingPolicyConfigurationUpdate = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("AutoScalingTargetTrackingScalingPolicyConfigurationUpdate(")
        append("disableScaleIn=$disableScaleIn,")
        append("scaleInCooldown=$scaleInCooldown,")
        append("scaleOutCooldown=$scaleOutCooldown,")
        append("targetValue=$targetValue)")
    }

    override fun hashCode(): kotlin.Int {
        var result = disableScaleIn?.hashCode() ?: 0
        result = 31 * result + (scaleInCooldown ?: 0)
        result = 31 * result + (scaleOutCooldown ?: 0)
        result = 31 * result + (targetValue?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as AutoScalingTargetTrackingScalingPolicyConfigurationUpdate

        if (disableScaleIn != other.disableScaleIn) return false
        if (scaleInCooldown != other.scaleInCooldown) return false
        if (scaleOutCooldown != other.scaleOutCooldown) return false
        if (targetValue != other.targetValue) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): AutoScalingTargetTrackingScalingPolicyConfigurationUpdate = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): AutoScalingTargetTrackingScalingPolicyConfigurationUpdate
        /**
         * Indicates whether scale in by the target tracking policy is disabled. If the value is true,
         * scale in is disabled and the target tracking policy won't remove capacity from the scalable resource.
         * Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource.
         * The default value is false.
         */
        fun disableScaleIn(disableScaleIn: Boolean): FluentBuilder
        /**
         * The amount of time, in seconds, after a scale in activity completes before another scale
         * in activity can start. The cooldown period is used to block subsequent scale in requests
         * until it has expired. You should scale in conservatively to protect your application's
         * availability. However, if another alarm triggers a scale out policy during the cooldown
         * period after a scale-in, application auto scaling scales out your scalable target
         * immediately.
         */
        fun scaleInCooldown(scaleInCooldown: Int): FluentBuilder
        /**
         * The amount of time, in seconds, after a scale out activity completes before another scale out
         * activity can start. While the cooldown period is in effect, the capacity that has been added
         * by the previous scale out event that initiated the cooldown is calculated as part of the
         * desired capacity for the next scale out. You should continuously (but not excessively)
         * scale out.
         */
        fun scaleOutCooldown(scaleOutCooldown: Int): FluentBuilder
        /**
         * The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
         */
        fun targetValue(targetValue: Double): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Indicates whether scale in by the target tracking policy is disabled. If the value is true,
         * scale in is disabled and the target tracking policy won't remove capacity from the scalable resource.
         * Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource.
         * The default value is false.
         */
        var disableScaleIn: Boolean?
        /**
         * The amount of time, in seconds, after a scale in activity completes before another scale
         * in activity can start. The cooldown period is used to block subsequent scale in requests
         * until it has expired. You should scale in conservatively to protect your application's
         * availability. However, if another alarm triggers a scale out policy during the cooldown
         * period after a scale-in, application auto scaling scales out your scalable target
         * immediately.
         */
        var scaleInCooldown: Int?
        /**
         * The amount of time, in seconds, after a scale out activity completes before another scale out
         * activity can start. While the cooldown period is in effect, the capacity that has been added
         * by the previous scale out event that initiated the cooldown is calculated as part of the
         * desired capacity for the next scale out. You should continuously (but not excessively)
         * scale out.
         */
        var scaleOutCooldown: Int?
        /**
         * The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
         */
        var targetValue: Double?

        fun build(): AutoScalingTargetTrackingScalingPolicyConfigurationUpdate
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var disableScaleIn: Boolean? = null
        override var scaleInCooldown: Int? = null
        override var scaleOutCooldown: Int? = null
        override var targetValue: Double? = null

        constructor(x: AutoScalingTargetTrackingScalingPolicyConfigurationUpdate) : this() {
            this.disableScaleIn = x.disableScaleIn
            this.scaleInCooldown = x.scaleInCooldown
            this.scaleOutCooldown = x.scaleOutCooldown
            this.targetValue = x.targetValue
        }

        override fun build(): AutoScalingTargetTrackingScalingPolicyConfigurationUpdate = AutoScalingTargetTrackingScalingPolicyConfigurationUpdate(this)
        override fun disableScaleIn(disableScaleIn: Boolean): FluentBuilder = apply { this.disableScaleIn = disableScaleIn }
        override fun scaleInCooldown(scaleInCooldown: Int): FluentBuilder = apply { this.scaleInCooldown = scaleInCooldown }
        override fun scaleOutCooldown(scaleOutCooldown: Int): FluentBuilder = apply { this.scaleOutCooldown = scaleOutCooldown }
        override fun targetValue(targetValue: Double): FluentBuilder = apply { this.targetValue = targetValue }
    }
}
