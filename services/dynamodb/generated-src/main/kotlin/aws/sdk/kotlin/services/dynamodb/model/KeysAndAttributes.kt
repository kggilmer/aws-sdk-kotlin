// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents a set of primary keys and, for each key, the attributes to retrieve from the table.
 * For each primary key, you must provide all of the key attributes. For example, with a
 * simple primary key, you only need to provide the partition key. For a composite
 * primary key, you must provide both the partition key and the sort key.
 */
class KeysAndAttributes private constructor(builder: BuilderImpl) {
    /**
     * This is a legacy parameter.  Use ProjectionExpression instead.  For more information, see
     * <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html">Legacy Conditional Parameters in the Amazon DynamoDB Developer Guide.
     */
    val attributesToGet: List<String>? = builder.attributesToGet
    /**
     * The consistency of a read operation. If set to true, then a strongly consistent
     * read is used; otherwise, an eventually consistent read is used.
     */
    val consistentRead: Boolean? = builder.consistentRead
    /**
     * One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:
     * To access an attribute whose name conflicts with a DynamoDB reserved word.
     * To create a placeholder for repeating occurrences of an attribute name in an expression.
     * To prevent special characters in an attribute name from being misinterpreted in an expression.
     * Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
     * Percentile
     * The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:
     * {"#P":"Percentile"}
     * You could then use this substitution in an expression, as in this example:
     * #P = :val
     * Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.
     * For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes in the Amazon DynamoDB Developer Guide.
     */
    val expressionAttributeNames: Map<String, String>? = builder.expressionAttributeNames
    /**
     * The primary key attribute values that define the items and the attributes associated with the items.
     */
    val keys: List<Map<String, AttributeValue>>? = builder.keys
    /**
     * A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars,
     * sets, or elements of a JSON document. The attributes in the ProjectionExpression must be separated by
     * commas.
     * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.
     * For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes in the Amazon DynamoDB Developer Guide.
     */
    val projectionExpression: String? = builder.projectionExpression

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): KeysAndAttributes = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("KeysAndAttributes(")
        append("attributesToGet=$attributesToGet,")
        append("consistentRead=$consistentRead,")
        append("expressionAttributeNames=$expressionAttributeNames,")
        append("keys=$keys,")
        append("projectionExpression=$projectionExpression)")
    }

    override fun hashCode(): kotlin.Int {
        var result = attributesToGet?.hashCode() ?: 0
        result = 31 * result + (consistentRead?.hashCode() ?: 0)
        result = 31 * result + (expressionAttributeNames?.hashCode() ?: 0)
        result = 31 * result + (keys?.hashCode() ?: 0)
        result = 31 * result + (projectionExpression?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as KeysAndAttributes

        if (attributesToGet != other.attributesToGet) return false
        if (consistentRead != other.consistentRead) return false
        if (expressionAttributeNames != other.expressionAttributeNames) return false
        if (keys != other.keys) return false
        if (projectionExpression != other.projectionExpression) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): KeysAndAttributes = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): KeysAndAttributes
        /**
         * This is a legacy parameter.  Use ProjectionExpression instead.  For more information, see
         * <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html">Legacy Conditional Parameters in the Amazon DynamoDB Developer Guide.
         */
        fun attributesToGet(attributesToGet: List<String>): FluentBuilder
        /**
         * The consistency of a read operation. If set to true, then a strongly consistent
         * read is used; otherwise, an eventually consistent read is used.
         */
        fun consistentRead(consistentRead: Boolean): FluentBuilder
        /**
         * One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:
         * To access an attribute whose name conflicts with a DynamoDB reserved word.
         * To create a placeholder for repeating occurrences of an attribute name in an expression.
         * To prevent special characters in an attribute name from being misinterpreted in an expression.
         * Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
         * Percentile
         * The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:
         * {"#P":"Percentile"}
         * You could then use this substitution in an expression, as in this example:
         * #P = :val
         * Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.
         * For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes in the Amazon DynamoDB Developer Guide.
         */
        fun expressionAttributeNames(expressionAttributeNames: Map<String, String>): FluentBuilder
        /**
         * The primary key attribute values that define the items and the attributes associated with the items.
         */
        fun keys(keys: List<Map<String, AttributeValue>>): FluentBuilder
        /**
         * A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars,
         * sets, or elements of a JSON document. The attributes in the ProjectionExpression must be separated by
         * commas.
         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.
         * For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes in the Amazon DynamoDB Developer Guide.
         */
        fun projectionExpression(projectionExpression: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * This is a legacy parameter.  Use ProjectionExpression instead.  For more information, see
         * <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html">Legacy Conditional Parameters in the Amazon DynamoDB Developer Guide.
         */
        var attributesToGet: List<String>?
        /**
         * The consistency of a read operation. If set to true, then a strongly consistent
         * read is used; otherwise, an eventually consistent read is used.
         */
        var consistentRead: Boolean?
        /**
         * One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:
         * To access an attribute whose name conflicts with a DynamoDB reserved word.
         * To create a placeholder for repeating occurrences of an attribute name in an expression.
         * To prevent special characters in an attribute name from being misinterpreted in an expression.
         * Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
         * Percentile
         * The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:
         * {"#P":"Percentile"}
         * You could then use this substitution in an expression, as in this example:
         * #P = :val
         * Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.
         * For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes in the Amazon DynamoDB Developer Guide.
         */
        var expressionAttributeNames: Map<String, String>?
        /**
         * The primary key attribute values that define the items and the attributes associated with the items.
         */
        var keys: List<Map<String, AttributeValue>>?
        /**
         * A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars,
         * sets, or elements of a JSON document. The attributes in the ProjectionExpression must be separated by
         * commas.
         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.
         * For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes in the Amazon DynamoDB Developer Guide.
         */
        var projectionExpression: String?

        fun build(): KeysAndAttributes
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var attributesToGet: List<String>? = null
        override var consistentRead: Boolean? = null
        override var expressionAttributeNames: Map<String, String>? = null
        override var keys: List<Map<String, AttributeValue>>? = null
        override var projectionExpression: String? = null

        constructor(x: KeysAndAttributes) : this() {
            this.attributesToGet = x.attributesToGet
            this.consistentRead = x.consistentRead
            this.expressionAttributeNames = x.expressionAttributeNames
            this.keys = x.keys
            this.projectionExpression = x.projectionExpression
        }

        override fun build(): KeysAndAttributes = KeysAndAttributes(this)
        override fun attributesToGet(attributesToGet: List<String>): FluentBuilder = apply { this.attributesToGet = attributesToGet }
        override fun consistentRead(consistentRead: Boolean): FluentBuilder = apply { this.consistentRead = consistentRead }
        override fun expressionAttributeNames(expressionAttributeNames: Map<String, String>): FluentBuilder = apply { this.expressionAttributeNames = expressionAttributeNames }
        override fun keys(keys: List<Map<String, AttributeValue>>): FluentBuilder = apply { this.keys = keys }
        override fun projectionExpression(projectionExpression: String): FluentBuilder = apply { this.projectionExpression = projectionExpression }
    }
}
