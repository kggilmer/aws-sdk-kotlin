// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents the output of a BatchGetItem operation.
 */
class BatchGetItemResponse private constructor(builder: BuilderImpl) {
    /**
     * The read capacity units consumed by the entire BatchGetItem operation.
     * Each element consists of:
     * TableName - The table that consumed the provisioned throughput.
     * CapacityUnits - The total number of capacity units consumed.
     */
    val consumedCapacity: List<ConsumedCapacity>? = builder.consumedCapacity
    /**
     * A map of table name to a list of items. Each object in Responses consists of a table
     * name, along with a map of attribute data consisting of the data type and attribute value.
     */
    val responses: Map<String, List<Map<String, AttributeValue>>>? = builder.responses
    /**
     * A map of tables and their respective keys that were not processed with the current response.
     * The UnprocessedKeys value is in the same form as RequestItems, so the value can
     * be provided directly to a subsequent BatchGetItem operation. For more information, see
     * RequestItems in the Request Parameters section.
     * Each element consists of:
     * Keys - An array of primary key attribute values that define specific items in the
     * table.
     * ProjectionExpression - One or more attributes to be
     * retrieved from the table or index. By default, all attributes are returned. If a
     * requested attribute is not found, it does not appear in the result.
     * ConsistentRead - The consistency of a read operation. If set to true,
     * then a strongly consistent read is used; otherwise, an eventually consistent read is
     * used.
     * If there are no unprocessed keys remaining, the response contains an empty
     * UnprocessedKeys map.
     */
    val unprocessedKeys: Map<String, KeysAndAttributes>? = builder.unprocessedKeys

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): BatchGetItemResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("BatchGetItemResponse(")
        append("consumedCapacity=$consumedCapacity,")
        append("responses=$responses,")
        append("unprocessedKeys=$unprocessedKeys)")
    }

    override fun hashCode(): kotlin.Int {
        var result = consumedCapacity?.hashCode() ?: 0
        result = 31 * result + (responses?.hashCode() ?: 0)
        result = 31 * result + (unprocessedKeys?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as BatchGetItemResponse

        if (consumedCapacity != other.consumedCapacity) return false
        if (responses != other.responses) return false
        if (unprocessedKeys != other.unprocessedKeys) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): BatchGetItemResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): BatchGetItemResponse
        /**
         * The read capacity units consumed by the entire BatchGetItem operation.
         * Each element consists of:
         * TableName - The table that consumed the provisioned throughput.
         * CapacityUnits - The total number of capacity units consumed.
         */
        fun consumedCapacity(consumedCapacity: List<ConsumedCapacity>): FluentBuilder
        /**
         * A map of table name to a list of items. Each object in Responses consists of a table
         * name, along with a map of attribute data consisting of the data type and attribute value.
         */
        fun responses(responses: Map<String, List<Map<String, AttributeValue>>>): FluentBuilder
        /**
         * A map of tables and their respective keys that were not processed with the current response.
         * The UnprocessedKeys value is in the same form as RequestItems, so the value can
         * be provided directly to a subsequent BatchGetItem operation. For more information, see
         * RequestItems in the Request Parameters section.
         * Each element consists of:
         * Keys - An array of primary key attribute values that define specific items in the
         * table.
         * ProjectionExpression - One or more attributes to be
         * retrieved from the table or index. By default, all attributes are returned. If a
         * requested attribute is not found, it does not appear in the result.
         * ConsistentRead - The consistency of a read operation. If set to true,
         * then a strongly consistent read is used; otherwise, an eventually consistent read is
         * used.
         * If there are no unprocessed keys remaining, the response contains an empty
         * UnprocessedKeys map.
         */
        fun unprocessedKeys(unprocessedKeys: Map<String, KeysAndAttributes>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The read capacity units consumed by the entire BatchGetItem operation.
         * Each element consists of:
         * TableName - The table that consumed the provisioned throughput.
         * CapacityUnits - The total number of capacity units consumed.
         */
        var consumedCapacity: List<ConsumedCapacity>?
        /**
         * A map of table name to a list of items. Each object in Responses consists of a table
         * name, along with a map of attribute data consisting of the data type and attribute value.
         */
        var responses: Map<String, List<Map<String, AttributeValue>>>?
        /**
         * A map of tables and their respective keys that were not processed with the current response.
         * The UnprocessedKeys value is in the same form as RequestItems, so the value can
         * be provided directly to a subsequent BatchGetItem operation. For more information, see
         * RequestItems in the Request Parameters section.
         * Each element consists of:
         * Keys - An array of primary key attribute values that define specific items in the
         * table.
         * ProjectionExpression - One or more attributes to be
         * retrieved from the table or index. By default, all attributes are returned. If a
         * requested attribute is not found, it does not appear in the result.
         * ConsistentRead - The consistency of a read operation. If set to true,
         * then a strongly consistent read is used; otherwise, an eventually consistent read is
         * used.
         * If there are no unprocessed keys remaining, the response contains an empty
         * UnprocessedKeys map.
         */
        var unprocessedKeys: Map<String, KeysAndAttributes>?

        fun build(): BatchGetItemResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var consumedCapacity: List<ConsumedCapacity>? = null
        override var responses: Map<String, List<Map<String, AttributeValue>>>? = null
        override var unprocessedKeys: Map<String, KeysAndAttributes>? = null

        constructor(x: BatchGetItemResponse) : this() {
            this.consumedCapacity = x.consumedCapacity
            this.responses = x.responses
            this.unprocessedKeys = x.unprocessedKeys
        }

        override fun build(): BatchGetItemResponse = BatchGetItemResponse(this)
        override fun consumedCapacity(consumedCapacity: List<ConsumedCapacity>): FluentBuilder = apply { this.consumedCapacity = consumedCapacity }
        override fun responses(responses: Map<String, List<Map<String, AttributeValue>>>): FluentBuilder = apply { this.responses = responses }
        override fun unprocessedKeys(unprocessedKeys: Map<String, KeysAndAttributes>): FluentBuilder = apply { this.unprocessedKeys = unprocessedKeys }
    }
}
