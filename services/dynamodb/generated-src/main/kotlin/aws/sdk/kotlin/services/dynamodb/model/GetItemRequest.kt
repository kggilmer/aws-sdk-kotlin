// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents the input of a GetItem operation.
 */
class GetItemRequest private constructor(builder: BuilderImpl) {
    /**
     * This is a legacy parameter.  Use ProjectionExpression instead.  For more information, see
     * <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet in the Amazon DynamoDB Developer Guide.
     */
    val attributesToGet: List<String>? = builder.attributesToGet
    /**
     * Determines the read consistency model:  If set to true, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.
     */
    val consistentRead: Boolean? = builder.consistentRead
    /**
     * One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:
     * To access an attribute whose name conflicts with a DynamoDB reserved word.
     * To create a placeholder for repeating occurrences of an attribute name in an expression.
     * To prevent special characters in an attribute name from being misinterpreted in an expression.
     * Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
     * Percentile
     * The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:
     * {"#P":"Percentile"}
     * You could then use this substitution in an expression, as in this example:
     * #P = :val
     * Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.
     * For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes in the Amazon DynamoDB Developer
     * Guide.
     */
    val expressionAttributeNames: Map<String, String>? = builder.expressionAttributeNames
    /**
     * A map of attribute names to AttributeValue objects, representing the primary key of
     * the item to retrieve.
     * For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.
     */
    val key: Map<String, AttributeValue>? = builder.key
    /**
     * A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.
     * If no attribute names are specified, then all attributes are returned. If any of the
     * requested attributes are not found, they do not appear in the result.
     * For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes in the Amazon DynamoDB Developer
     * Guide.
     */
    val projectionExpression: String? = builder.projectionExpression
    /**
     * Determines the level of detail about provisioned throughput consumption that is returned in the response:
     * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed.
     * Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all.  In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
     * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
     * NONE - No ConsumedCapacity details are included in the response.
     */
    val returnConsumedCapacity: ReturnConsumedCapacity? = builder.returnConsumedCapacity
    /**
     * The name of the table containing the requested item.
     */
    val tableName: String? = builder.tableName

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): GetItemRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("GetItemRequest(")
        append("attributesToGet=$attributesToGet,")
        append("consistentRead=$consistentRead,")
        append("expressionAttributeNames=$expressionAttributeNames,")
        append("key=$key,")
        append("projectionExpression=$projectionExpression,")
        append("returnConsumedCapacity=$returnConsumedCapacity,")
        append("tableName=$tableName)")
    }

    override fun hashCode(): kotlin.Int {
        var result = attributesToGet?.hashCode() ?: 0
        result = 31 * result + (consistentRead?.hashCode() ?: 0)
        result = 31 * result + (expressionAttributeNames?.hashCode() ?: 0)
        result = 31 * result + (key?.hashCode() ?: 0)
        result = 31 * result + (projectionExpression?.hashCode() ?: 0)
        result = 31 * result + (returnConsumedCapacity?.hashCode() ?: 0)
        result = 31 * result + (tableName?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as GetItemRequest

        if (attributesToGet != other.attributesToGet) return false
        if (consistentRead != other.consistentRead) return false
        if (expressionAttributeNames != other.expressionAttributeNames) return false
        if (key != other.key) return false
        if (projectionExpression != other.projectionExpression) return false
        if (returnConsumedCapacity != other.returnConsumedCapacity) return false
        if (tableName != other.tableName) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): GetItemRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): GetItemRequest
        /**
         * This is a legacy parameter.  Use ProjectionExpression instead.  For more information, see
         * <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet in the Amazon DynamoDB Developer Guide.
         */
        fun attributesToGet(attributesToGet: List<String>): FluentBuilder
        /**
         * Determines the read consistency model:  If set to true, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.
         */
        fun consistentRead(consistentRead: Boolean): FluentBuilder
        /**
         * One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:
         * To access an attribute whose name conflicts with a DynamoDB reserved word.
         * To create a placeholder for repeating occurrences of an attribute name in an expression.
         * To prevent special characters in an attribute name from being misinterpreted in an expression.
         * Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
         * Percentile
         * The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:
         * {"#P":"Percentile"}
         * You could then use this substitution in an expression, as in this example:
         * #P = :val
         * Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.
         * For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes in the Amazon DynamoDB Developer
         * Guide.
         */
        fun expressionAttributeNames(expressionAttributeNames: Map<String, String>): FluentBuilder
        /**
         * A map of attribute names to AttributeValue objects, representing the primary key of
         * the item to retrieve.
         * For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.
         */
        fun key(key: Map<String, AttributeValue>): FluentBuilder
        /**
         * A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.
         * If no attribute names are specified, then all attributes are returned. If any of the
         * requested attributes are not found, they do not appear in the result.
         * For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes in the Amazon DynamoDB Developer
         * Guide.
         */
        fun projectionExpression(projectionExpression: String): FluentBuilder
        /**
         * Determines the level of detail about provisioned throughput consumption that is returned in the response:
         * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed.
         * Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all.  In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
         * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
         * NONE - No ConsumedCapacity details are included in the response.
         */
        fun returnConsumedCapacity(returnConsumedCapacity: ReturnConsumedCapacity): FluentBuilder
        /**
         * The name of the table containing the requested item.
         */
        fun tableName(tableName: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * This is a legacy parameter.  Use ProjectionExpression instead.  For more information, see
         * <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet in the Amazon DynamoDB Developer Guide.
         */
        var attributesToGet: List<String>?
        /**
         * Determines the read consistency model:  If set to true, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.
         */
        var consistentRead: Boolean?
        /**
         * One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:
         * To access an attribute whose name conflicts with a DynamoDB reserved word.
         * To create a placeholder for repeating occurrences of an attribute name in an expression.
         * To prevent special characters in an attribute name from being misinterpreted in an expression.
         * Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
         * Percentile
         * The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:
         * {"#P":"Percentile"}
         * You could then use this substitution in an expression, as in this example:
         * #P = :val
         * Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.
         * For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes in the Amazon DynamoDB Developer
         * Guide.
         */
        var expressionAttributeNames: Map<String, String>?
        /**
         * A map of attribute names to AttributeValue objects, representing the primary key of
         * the item to retrieve.
         * For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.
         */
        var key: Map<String, AttributeValue>?
        /**
         * A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.
         * If no attribute names are specified, then all attributes are returned. If any of the
         * requested attributes are not found, they do not appear in the result.
         * For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes in the Amazon DynamoDB Developer
         * Guide.
         */
        var projectionExpression: String?
        /**
         * Determines the level of detail about provisioned throughput consumption that is returned in the response:
         * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed.
         * Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all.  In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
         * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
         * NONE - No ConsumedCapacity details are included in the response.
         */
        var returnConsumedCapacity: ReturnConsumedCapacity?
        /**
         * The name of the table containing the requested item.
         */
        var tableName: String?

        fun build(): GetItemRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var attributesToGet: List<String>? = null
        override var consistentRead: Boolean? = null
        override var expressionAttributeNames: Map<String, String>? = null
        override var key: Map<String, AttributeValue>? = null
        override var projectionExpression: String? = null
        override var returnConsumedCapacity: ReturnConsumedCapacity? = null
        override var tableName: String? = null

        constructor(x: GetItemRequest) : this() {
            this.attributesToGet = x.attributesToGet
            this.consistentRead = x.consistentRead
            this.expressionAttributeNames = x.expressionAttributeNames
            this.key = x.key
            this.projectionExpression = x.projectionExpression
            this.returnConsumedCapacity = x.returnConsumedCapacity
            this.tableName = x.tableName
        }

        override fun build(): GetItemRequest = GetItemRequest(this)
        override fun attributesToGet(attributesToGet: List<String>): FluentBuilder = apply { this.attributesToGet = attributesToGet }
        override fun consistentRead(consistentRead: Boolean): FluentBuilder = apply { this.consistentRead = consistentRead }
        override fun expressionAttributeNames(expressionAttributeNames: Map<String, String>): FluentBuilder = apply { this.expressionAttributeNames = expressionAttributeNames }
        override fun key(key: Map<String, AttributeValue>): FluentBuilder = apply { this.key = key }
        override fun projectionExpression(projectionExpression: String): FluentBuilder = apply { this.projectionExpression = projectionExpression }
        override fun returnConsumedCapacity(returnConsumedCapacity: ReturnConsumedCapacity): FluentBuilder = apply { this.returnConsumedCapacity = returnConsumedCapacity }
        override fun tableName(tableName: String): FluentBuilder = apply { this.tableName = tableName }
    }
}
