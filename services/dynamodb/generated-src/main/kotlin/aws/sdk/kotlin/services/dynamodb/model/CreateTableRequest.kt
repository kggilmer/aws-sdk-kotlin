// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents the input of a CreateTable operation.
 */
class CreateTableRequest private constructor(builder: BuilderImpl) {
    /**
     * An array of attributes that describe the key schema for the table and indexes.
     */
    val attributeDefinitions: List<AttributeDefinition>? = builder.attributeDefinitions
    /**
     * Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.
     * PROVISIONED - We recommend using PROVISIONED for predictable workloads. PROVISIONED sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode.
     * PAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable workloads. PAY_PER_REQUEST sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode.
     */
    val billingMode: BillingMode? = builder.billingMode
    /**
     * One or more global secondary indexes (the maximum is 20) to be created on the table. Each global secondary index in the array includes the following:
     * IndexName - The name of the global secondary index. Must be unique only for this table.
     * KeySchema - Specifies the key schema for the global secondary index.
     * Projection - Specifies
     * attributes that are copied (projected) from the table into the index. These are in
     * addition to the primary key attributes and index key
     * attributes, which are automatically projected. Each
     * attribute specification is composed of:
     * ProjectionType - One
     * of the following:
     * KEYS_ONLY - Only the index and primary keys are projected into the
     * index.
     * INCLUDE - Only the specified table attributes are
     * projected into the index. The list of projected attributes is in
     * NonKeyAttributes.
     * ALL - All of the table attributes are projected into the
     * index.
     * NonKeyAttributes - A list of one or more non-key attribute names that are
     * projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
     * ProvisionedThroughput - The provisioned throughput settings for the global secondary index,
     * consisting of read and write capacity units.
     */
    val globalSecondaryIndexes: List<GlobalSecondaryIndex>? = builder.globalSecondaryIndexes
    /**
     * Specifies the attributes that make up the primary key for a table or an index. The attributes
     * in KeySchema must also be defined in the AttributeDefinitions array. For more
     * information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html">Data Model in the
     * Amazon DynamoDB Developer Guide.
     * Each KeySchemaElement in the array is composed of:
     * AttributeName - The name of this key attribute.
     * KeyType - The role that the key attribute will assume:
     * HASH - partition key
     * RANGE - sort key
     * The partition key of an item is also known as its hash
     * attribute. The term "hash attribute" derives from the DynamoDB usage of
     * an internal hash function to evenly distribute data items across partitions, based
     * on their partition key values.
     * The sort key of an item is also known as its range attribute.
     * The term "range attribute" derives from the way DynamoDB stores items with the same
     * partition key physically close together, in sorted order by the sort key value.
     * For a simple primary key (partition key), you must provide
     * exactly one element with a KeyType of HASH.
     * For a composite primary key (partition key and sort key), you must provide exactly two
     * elements, in this order: The first element must have a KeyType of HASH,
     * and the second element must have a KeyType of RANGE.
     * For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key">Working with Tables in the Amazon DynamoDB Developer
     * Guide.
     */
    val keySchema: List<KeySchemaElement>? = builder.keySchema
    /**
     * One or more local secondary indexes (the maximum is 5) to be created on the table. Each index is scoped to a given partition key value. There is a 10 GB size limit per partition key value; otherwise, the size of a local secondary index is unconstrained.
     * Each local secondary index in the array includes the following:
     * IndexName - The name of the local secondary index. Must be unique only for this table.
     * KeySchema - Specifies the key schema for the local secondary index. The key schema must begin with
     * the same partition key as the table.
     * Projection - Specifies
     * attributes that are copied (projected) from the table into the index. These are in
     * addition to the primary key attributes and index key
     * attributes, which are automatically projected. Each
     * attribute specification is composed of:
     * ProjectionType - One
     * of the following:
     * KEYS_ONLY - Only the index and primary keys are projected into the
     * index.
     * INCLUDE - Only the specified table attributes are
     * projected into the index. The list of projected attributes is in
     * NonKeyAttributes.
     * ALL - All of the table attributes are projected into the
     * index.
     * NonKeyAttributes - A list of one or more non-key
     * attribute names that are projected into the secondary index. The total
     * count of attributes provided in NonKeyAttributes,
     * summed across all of the secondary indexes, must not exceed 100. If you
     * project the same attribute into two different indexes, this counts as
     * two distinct attributes when determining the total.
     */
    val localSecondaryIndexes: List<LocalSecondaryIndex>? = builder.localSecondaryIndexes
    /**
     * Represents the provisioned throughput settings for a specified table or index. The
     * settings can be modified using the UpdateTable operation.
     * If you set BillingMode as PROVISIONED, you must specify this property. If you
     * set BillingMode as PAY_PER_REQUEST, you cannot specify this
     * property.
     * For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service,
     * Account, and Table Quotas in the Amazon DynamoDB Developer
     * Guide.
     */
    val provisionedThroughput: ProvisionedThroughput? = builder.provisionedThroughput
    /**
     * Represents the settings used to enable server-side encryption.
     */
    val sseSpecification: SseSpecification? = builder.sseSpecification
    /**
     * The settings for DynamoDB Streams on the table. These settings consist of:
     * StreamEnabled - Indicates whether DynamoDB Streams is to be enabled
     * (true) or disabled (false).
     * StreamViewType - When an item in the table is modified, StreamViewType
     * determines what information is written to the table's stream. Valid values for
     * StreamViewType are:
     * KEYS_ONLY - Only the key attributes of the modified item are written to the
     * stream.
     * NEW_IMAGE - The entire item, as it appears after it was modified, is written
     * to the stream.
     * OLD_IMAGE - The entire item, as it appeared before it was modified, is
     * written to the stream.
     * NEW_AND_OLD_IMAGES - Both the new and the old item images of the item are
     * written to the stream.
     */
    val streamSpecification: StreamSpecification? = builder.streamSpecification
    /**
     * The name of the table to create.
     */
    val tableName: String? = builder.tableName
    /**
     * A list of key-value pairs to label the table. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging for DynamoDB.
     */
    val tags: List<Tag>? = builder.tags

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): CreateTableRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("CreateTableRequest(")
        append("attributeDefinitions=$attributeDefinitions,")
        append("billingMode=$billingMode,")
        append("globalSecondaryIndexes=$globalSecondaryIndexes,")
        append("keySchema=$keySchema,")
        append("localSecondaryIndexes=$localSecondaryIndexes,")
        append("provisionedThroughput=$provisionedThroughput,")
        append("sseSpecification=$sseSpecification,")
        append("streamSpecification=$streamSpecification,")
        append("tableName=$tableName,")
        append("tags=$tags)")
    }

    override fun hashCode(): kotlin.Int {
        var result = attributeDefinitions?.hashCode() ?: 0
        result = 31 * result + (billingMode?.hashCode() ?: 0)
        result = 31 * result + (globalSecondaryIndexes?.hashCode() ?: 0)
        result = 31 * result + (keySchema?.hashCode() ?: 0)
        result = 31 * result + (localSecondaryIndexes?.hashCode() ?: 0)
        result = 31 * result + (provisionedThroughput?.hashCode() ?: 0)
        result = 31 * result + (sseSpecification?.hashCode() ?: 0)
        result = 31 * result + (streamSpecification?.hashCode() ?: 0)
        result = 31 * result + (tableName?.hashCode() ?: 0)
        result = 31 * result + (tags?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CreateTableRequest

        if (attributeDefinitions != other.attributeDefinitions) return false
        if (billingMode != other.billingMode) return false
        if (globalSecondaryIndexes != other.globalSecondaryIndexes) return false
        if (keySchema != other.keySchema) return false
        if (localSecondaryIndexes != other.localSecondaryIndexes) return false
        if (provisionedThroughput != other.provisionedThroughput) return false
        if (sseSpecification != other.sseSpecification) return false
        if (streamSpecification != other.streamSpecification) return false
        if (tableName != other.tableName) return false
        if (tags != other.tags) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): CreateTableRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): CreateTableRequest
        /**
         * An array of attributes that describe the key schema for the table and indexes.
         */
        fun attributeDefinitions(attributeDefinitions: List<AttributeDefinition>): FluentBuilder
        /**
         * Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.
         * PROVISIONED - We recommend using PROVISIONED for predictable workloads. PROVISIONED sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode.
         * PAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable workloads. PAY_PER_REQUEST sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode.
         */
        fun billingMode(billingMode: BillingMode): FluentBuilder
        /**
         * One or more global secondary indexes (the maximum is 20) to be created on the table. Each global secondary index in the array includes the following:
         * IndexName - The name of the global secondary index. Must be unique only for this table.
         * KeySchema - Specifies the key schema for the global secondary index.
         * Projection - Specifies
         * attributes that are copied (projected) from the table into the index. These are in
         * addition to the primary key attributes and index key
         * attributes, which are automatically projected. Each
         * attribute specification is composed of:
         * ProjectionType - One
         * of the following:
         * KEYS_ONLY - Only the index and primary keys are projected into the
         * index.
         * INCLUDE - Only the specified table attributes are
         * projected into the index. The list of projected attributes is in
         * NonKeyAttributes.
         * ALL - All of the table attributes are projected into the
         * index.
         * NonKeyAttributes - A list of one or more non-key attribute names that are
         * projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
         * ProvisionedThroughput - The provisioned throughput settings for the global secondary index,
         * consisting of read and write capacity units.
         */
        fun globalSecondaryIndexes(globalSecondaryIndexes: List<GlobalSecondaryIndex>): FluentBuilder
        /**
         * Specifies the attributes that make up the primary key for a table or an index. The attributes
         * in KeySchema must also be defined in the AttributeDefinitions array. For more
         * information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html">Data Model in the
         * Amazon DynamoDB Developer Guide.
         * Each KeySchemaElement in the array is composed of:
         * AttributeName - The name of this key attribute.
         * KeyType - The role that the key attribute will assume:
         * HASH - partition key
         * RANGE - sort key
         * The partition key of an item is also known as its hash
         * attribute. The term "hash attribute" derives from the DynamoDB usage of
         * an internal hash function to evenly distribute data items across partitions, based
         * on their partition key values.
         * The sort key of an item is also known as its range attribute.
         * The term "range attribute" derives from the way DynamoDB stores items with the same
         * partition key physically close together, in sorted order by the sort key value.
         * For a simple primary key (partition key), you must provide
         * exactly one element with a KeyType of HASH.
         * For a composite primary key (partition key and sort key), you must provide exactly two
         * elements, in this order: The first element must have a KeyType of HASH,
         * and the second element must have a KeyType of RANGE.
         * For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key">Working with Tables in the Amazon DynamoDB Developer
         * Guide.
         */
        fun keySchema(keySchema: List<KeySchemaElement>): FluentBuilder
        /**
         * One or more local secondary indexes (the maximum is 5) to be created on the table. Each index is scoped to a given partition key value. There is a 10 GB size limit per partition key value; otherwise, the size of a local secondary index is unconstrained.
         * Each local secondary index in the array includes the following:
         * IndexName - The name of the local secondary index. Must be unique only for this table.
         * KeySchema - Specifies the key schema for the local secondary index. The key schema must begin with
         * the same partition key as the table.
         * Projection - Specifies
         * attributes that are copied (projected) from the table into the index. These are in
         * addition to the primary key attributes and index key
         * attributes, which are automatically projected. Each
         * attribute specification is composed of:
         * ProjectionType - One
         * of the following:
         * KEYS_ONLY - Only the index and primary keys are projected into the
         * index.
         * INCLUDE - Only the specified table attributes are
         * projected into the index. The list of projected attributes is in
         * NonKeyAttributes.
         * ALL - All of the table attributes are projected into the
         * index.
         * NonKeyAttributes - A list of one or more non-key
         * attribute names that are projected into the secondary index. The total
         * count of attributes provided in NonKeyAttributes,
         * summed across all of the secondary indexes, must not exceed 100. If you
         * project the same attribute into two different indexes, this counts as
         * two distinct attributes when determining the total.
         */
        fun localSecondaryIndexes(localSecondaryIndexes: List<LocalSecondaryIndex>): FluentBuilder
        /**
         * Represents the provisioned throughput settings for a specified table or index. The
         * settings can be modified using the UpdateTable operation.
         * If you set BillingMode as PROVISIONED, you must specify this property. If you
         * set BillingMode as PAY_PER_REQUEST, you cannot specify this
         * property.
         * For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service,
         * Account, and Table Quotas in the Amazon DynamoDB Developer
         * Guide.
         */
        fun provisionedThroughput(provisionedThroughput: ProvisionedThroughput): FluentBuilder
        /**
         * Represents the settings used to enable server-side encryption.
         */
        fun sseSpecification(sseSpecification: SseSpecification): FluentBuilder
        /**
         * The settings for DynamoDB Streams on the table. These settings consist of:
         * StreamEnabled - Indicates whether DynamoDB Streams is to be enabled
         * (true) or disabled (false).
         * StreamViewType - When an item in the table is modified, StreamViewType
         * determines what information is written to the table's stream. Valid values for
         * StreamViewType are:
         * KEYS_ONLY - Only the key attributes of the modified item are written to the
         * stream.
         * NEW_IMAGE - The entire item, as it appears after it was modified, is written
         * to the stream.
         * OLD_IMAGE - The entire item, as it appeared before it was modified, is
         * written to the stream.
         * NEW_AND_OLD_IMAGES - Both the new and the old item images of the item are
         * written to the stream.
         */
        fun streamSpecification(streamSpecification: StreamSpecification): FluentBuilder
        /**
         * The name of the table to create.
         */
        fun tableName(tableName: String): FluentBuilder
        /**
         * A list of key-value pairs to label the table. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging for DynamoDB.
         */
        fun tags(tags: List<Tag>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * An array of attributes that describe the key schema for the table and indexes.
         */
        var attributeDefinitions: List<AttributeDefinition>?
        /**
         * Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.
         * PROVISIONED - We recommend using PROVISIONED for predictable workloads. PROVISIONED sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode.
         * PAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable workloads. PAY_PER_REQUEST sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode.
         */
        var billingMode: BillingMode?
        /**
         * One or more global secondary indexes (the maximum is 20) to be created on the table. Each global secondary index in the array includes the following:
         * IndexName - The name of the global secondary index. Must be unique only for this table.
         * KeySchema - Specifies the key schema for the global secondary index.
         * Projection - Specifies
         * attributes that are copied (projected) from the table into the index. These are in
         * addition to the primary key attributes and index key
         * attributes, which are automatically projected. Each
         * attribute specification is composed of:
         * ProjectionType - One
         * of the following:
         * KEYS_ONLY - Only the index and primary keys are projected into the
         * index.
         * INCLUDE - Only the specified table attributes are
         * projected into the index. The list of projected attributes is in
         * NonKeyAttributes.
         * ALL - All of the table attributes are projected into the
         * index.
         * NonKeyAttributes - A list of one or more non-key attribute names that are
         * projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
         * ProvisionedThroughput - The provisioned throughput settings for the global secondary index,
         * consisting of read and write capacity units.
         */
        var globalSecondaryIndexes: List<GlobalSecondaryIndex>?
        /**
         * Specifies the attributes that make up the primary key for a table or an index. The attributes
         * in KeySchema must also be defined in the AttributeDefinitions array. For more
         * information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html">Data Model in the
         * Amazon DynamoDB Developer Guide.
         * Each KeySchemaElement in the array is composed of:
         * AttributeName - The name of this key attribute.
         * KeyType - The role that the key attribute will assume:
         * HASH - partition key
         * RANGE - sort key
         * The partition key of an item is also known as its hash
         * attribute. The term "hash attribute" derives from the DynamoDB usage of
         * an internal hash function to evenly distribute data items across partitions, based
         * on their partition key values.
         * The sort key of an item is also known as its range attribute.
         * The term "range attribute" derives from the way DynamoDB stores items with the same
         * partition key physically close together, in sorted order by the sort key value.
         * For a simple primary key (partition key), you must provide
         * exactly one element with a KeyType of HASH.
         * For a composite primary key (partition key and sort key), you must provide exactly two
         * elements, in this order: The first element must have a KeyType of HASH,
         * and the second element must have a KeyType of RANGE.
         * For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key">Working with Tables in the Amazon DynamoDB Developer
         * Guide.
         */
        var keySchema: List<KeySchemaElement>?
        /**
         * One or more local secondary indexes (the maximum is 5) to be created on the table. Each index is scoped to a given partition key value. There is a 10 GB size limit per partition key value; otherwise, the size of a local secondary index is unconstrained.
         * Each local secondary index in the array includes the following:
         * IndexName - The name of the local secondary index. Must be unique only for this table.
         * KeySchema - Specifies the key schema for the local secondary index. The key schema must begin with
         * the same partition key as the table.
         * Projection - Specifies
         * attributes that are copied (projected) from the table into the index. These are in
         * addition to the primary key attributes and index key
         * attributes, which are automatically projected. Each
         * attribute specification is composed of:
         * ProjectionType - One
         * of the following:
         * KEYS_ONLY - Only the index and primary keys are projected into the
         * index.
         * INCLUDE - Only the specified table attributes are
         * projected into the index. The list of projected attributes is in
         * NonKeyAttributes.
         * ALL - All of the table attributes are projected into the
         * index.
         * NonKeyAttributes - A list of one or more non-key
         * attribute names that are projected into the secondary index. The total
         * count of attributes provided in NonKeyAttributes,
         * summed across all of the secondary indexes, must not exceed 100. If you
         * project the same attribute into two different indexes, this counts as
         * two distinct attributes when determining the total.
         */
        var localSecondaryIndexes: List<LocalSecondaryIndex>?
        /**
         * Represents the provisioned throughput settings for a specified table or index. The
         * settings can be modified using the UpdateTable operation.
         * If you set BillingMode as PROVISIONED, you must specify this property. If you
         * set BillingMode as PAY_PER_REQUEST, you cannot specify this
         * property.
         * For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service,
         * Account, and Table Quotas in the Amazon DynamoDB Developer
         * Guide.
         */
        var provisionedThroughput: ProvisionedThroughput?
        /**
         * Represents the settings used to enable server-side encryption.
         */
        var sseSpecification: SseSpecification?
        /**
         * The settings for DynamoDB Streams on the table. These settings consist of:
         * StreamEnabled - Indicates whether DynamoDB Streams is to be enabled
         * (true) or disabled (false).
         * StreamViewType - When an item in the table is modified, StreamViewType
         * determines what information is written to the table's stream. Valid values for
         * StreamViewType are:
         * KEYS_ONLY - Only the key attributes of the modified item are written to the
         * stream.
         * NEW_IMAGE - The entire item, as it appears after it was modified, is written
         * to the stream.
         * OLD_IMAGE - The entire item, as it appeared before it was modified, is
         * written to the stream.
         * NEW_AND_OLD_IMAGES - Both the new and the old item images of the item are
         * written to the stream.
         */
        var streamSpecification: StreamSpecification?
        /**
         * The name of the table to create.
         */
        var tableName: String?
        /**
         * A list of key-value pairs to label the table. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging for DynamoDB.
         */
        var tags: List<Tag>?

        fun build(): CreateTableRequest
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.ProvisionedThroughput] inside the given [block]
         */
        fun provisionedThroughput(block: ProvisionedThroughput.DslBuilder.() -> kotlin.Unit) {
            this.provisionedThroughput = ProvisionedThroughput.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.SseSpecification] inside the given [block]
         */
        fun sseSpecification(block: SseSpecification.DslBuilder.() -> kotlin.Unit) {
            this.sseSpecification = SseSpecification.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.StreamSpecification] inside the given [block]
         */
        fun streamSpecification(block: StreamSpecification.DslBuilder.() -> kotlin.Unit) {
            this.streamSpecification = StreamSpecification.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var attributeDefinitions: List<AttributeDefinition>? = null
        override var billingMode: BillingMode? = null
        override var globalSecondaryIndexes: List<GlobalSecondaryIndex>? = null
        override var keySchema: List<KeySchemaElement>? = null
        override var localSecondaryIndexes: List<LocalSecondaryIndex>? = null
        override var provisionedThroughput: ProvisionedThroughput? = null
        override var sseSpecification: SseSpecification? = null
        override var streamSpecification: StreamSpecification? = null
        override var tableName: String? = null
        override var tags: List<Tag>? = null

        constructor(x: CreateTableRequest) : this() {
            this.attributeDefinitions = x.attributeDefinitions
            this.billingMode = x.billingMode
            this.globalSecondaryIndexes = x.globalSecondaryIndexes
            this.keySchema = x.keySchema
            this.localSecondaryIndexes = x.localSecondaryIndexes
            this.provisionedThroughput = x.provisionedThroughput
            this.sseSpecification = x.sseSpecification
            this.streamSpecification = x.streamSpecification
            this.tableName = x.tableName
            this.tags = x.tags
        }

        override fun build(): CreateTableRequest = CreateTableRequest(this)
        override fun attributeDefinitions(attributeDefinitions: List<AttributeDefinition>): FluentBuilder = apply { this.attributeDefinitions = attributeDefinitions }
        override fun billingMode(billingMode: BillingMode): FluentBuilder = apply { this.billingMode = billingMode }
        override fun globalSecondaryIndexes(globalSecondaryIndexes: List<GlobalSecondaryIndex>): FluentBuilder = apply { this.globalSecondaryIndexes = globalSecondaryIndexes }
        override fun keySchema(keySchema: List<KeySchemaElement>): FluentBuilder = apply { this.keySchema = keySchema }
        override fun localSecondaryIndexes(localSecondaryIndexes: List<LocalSecondaryIndex>): FluentBuilder = apply { this.localSecondaryIndexes = localSecondaryIndexes }
        override fun provisionedThroughput(provisionedThroughput: ProvisionedThroughput): FluentBuilder = apply { this.provisionedThroughput = provisionedThroughput }
        override fun sseSpecification(sseSpecification: SseSpecification): FluentBuilder = apply { this.sseSpecification = sseSpecification }
        override fun streamSpecification(streamSpecification: StreamSpecification): FluentBuilder = apply { this.streamSpecification = streamSpecification }
        override fun tableName(tableName: String): FluentBuilder = apply { this.tableName = tableName }
        override fun tags(tags: List<Tag>): FluentBuilder = apply { this.tags = tags }
    }
}
