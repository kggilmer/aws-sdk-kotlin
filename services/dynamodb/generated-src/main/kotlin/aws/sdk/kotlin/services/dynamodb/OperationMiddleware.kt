// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb

import aws.sdk.kotlin.runtime.auth.signing.AwsSigV4SigningMiddleware
import aws.sdk.kotlin.runtime.http.ApiMetadata
import aws.sdk.kotlin.runtime.http.AwsUserAgentMetadata
import aws.sdk.kotlin.runtime.http.middleware.ResolveAwsEndpoint
import aws.sdk.kotlin.runtime.http.middleware.UserAgent
import aws.sdk.kotlin.runtime.http.retries.AwsDefaultRetryPolicy
import aws.sdk.kotlin.runtime.protocol.json.AwsJsonProtocol
import aws.sdk.kotlin.services.dynamodb.model.*
import aws.smithy.kotlin.runtime.http.middleware.RetryFeature
import aws.smithy.kotlin.runtime.http.operation.SdkHttpOperation

private val awsUserAgentMetadata = AwsUserAgentMetadata.fromEnvironment(ApiMetadata(ServiceId, SdkVersion))

internal fun registerBatchExecuteStatementMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<BatchExecuteStatementRequest,BatchExecuteStatementResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerBatchGetItemMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<BatchGetItemRequest,BatchGetItemResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerBatchWriteItemMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<BatchWriteItemRequest,BatchWriteItemResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerCreateBackupMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<CreateBackupRequest,CreateBackupResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerCreateGlobalTableMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<CreateGlobalTableRequest,CreateGlobalTableResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerCreateTableMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<CreateTableRequest,CreateTableResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerDeleteBackupMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<DeleteBackupRequest,DeleteBackupResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerDeleteItemMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<DeleteItemRequest,DeleteItemResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerDeleteTableMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<DeleteTableRequest,DeleteTableResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerDescribeBackupMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<DescribeBackupRequest,DescribeBackupResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerDescribeContinuousBackupsMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<DescribeContinuousBackupsRequest,DescribeContinuousBackupsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerDescribeContributorInsightsMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<DescribeContributorInsightsRequest,DescribeContributorInsightsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerDescribeEndpointsMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<DescribeEndpointsRequest,DescribeEndpointsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerDescribeExportMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<DescribeExportRequest,DescribeExportResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerDescribeGlobalTableMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<DescribeGlobalTableRequest,DescribeGlobalTableResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerDescribeGlobalTableSettingsMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<DescribeGlobalTableSettingsRequest,DescribeGlobalTableSettingsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerDescribeKinesisStreamingDestinationMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<DescribeKinesisStreamingDestinationRequest,DescribeKinesisStreamingDestinationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerDescribeLimitsMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<DescribeLimitsRequest,DescribeLimitsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerDescribeTableMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<DescribeTableRequest,DescribeTableResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerDescribeTableReplicaAutoScalingMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<DescribeTableReplicaAutoScalingRequest,DescribeTableReplicaAutoScalingResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerDescribeTimeToLiveMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<DescribeTimeToLiveRequest,DescribeTimeToLiveResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerDisableKinesisStreamingDestinationMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<DisableKinesisStreamingDestinationRequest,DisableKinesisStreamingDestinationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerEnableKinesisStreamingDestinationMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<EnableKinesisStreamingDestinationRequest,EnableKinesisStreamingDestinationResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerExecuteStatementMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<ExecuteStatementRequest,ExecuteStatementResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerExecuteTransactionMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<ExecuteTransactionRequest,ExecuteTransactionResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerExportTableToPointInTimeMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<ExportTableToPointInTimeRequest,ExportTableToPointInTimeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerGetItemMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<GetItemRequest,GetItemResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerListBackupsMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<ListBackupsRequest,ListBackupsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerListContributorInsightsMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<ListContributorInsightsRequest,ListContributorInsightsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerListExportsMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<ListExportsRequest,ListExportsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerListGlobalTablesMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<ListGlobalTablesRequest,ListGlobalTablesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerListTablesMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<ListTablesRequest,ListTablesResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerListTagsOfResourceMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<ListTagsOfResourceRequest,ListTagsOfResourceResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerPutItemMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<PutItemRequest,PutItemResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerQueryMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<QueryRequest,QueryResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerRestoreTableFromBackupMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<RestoreTableFromBackupRequest,RestoreTableFromBackupResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerRestoreTableToPointInTimeMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<RestoreTableToPointInTimeRequest,RestoreTableToPointInTimeResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerScanMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<ScanRequest,ScanResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerTagResourceMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<TagResourceRequest,TagResourceResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerTransactGetItemsMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<TransactGetItemsRequest,TransactGetItemsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerTransactWriteItemsMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<TransactWriteItemsRequest,TransactWriteItemsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerUntagResourceMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<UntagResourceRequest,UntagResourceResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerUpdateContinuousBackupsMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<UpdateContinuousBackupsRequest,UpdateContinuousBackupsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerUpdateContributorInsightsMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<UpdateContributorInsightsRequest,UpdateContributorInsightsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerUpdateGlobalTableMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<UpdateGlobalTableRequest,UpdateGlobalTableResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerUpdateGlobalTableSettingsMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<UpdateGlobalTableSettingsRequest,UpdateGlobalTableSettingsResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerUpdateItemMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<UpdateItemRequest,UpdateItemResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerUpdateTableMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<UpdateTableRequest,UpdateTableResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerUpdateTableReplicaAutoScalingMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<UpdateTableReplicaAutoScalingRequest,UpdateTableReplicaAutoScalingResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}

internal fun registerUpdateTimeToLiveMiddleware(config: DynamoDbClient.Config, op: SdkHttpOperation<UpdateTimeToLiveRequest,UpdateTimeToLiveResponse>) {
    op.apply {
        install(ResolveAwsEndpoint) {
            serviceId = ServiceId
            resolver = config.endpointResolver
        }
        install(RetryFeature) {
            strategy = config.retryStrategy
            policy = AwsDefaultRetryPolicy
        }
        install(AwsJsonProtocol) {
            serviceShapeName = "DynamoDB_20120810"
            version = "1.0"
        }
        install(UserAgent) {
            staticMetadata = awsUserAgentMetadata
        }
        install(AwsSigV4SigningMiddleware) {
            this.credentialsProvider = config.credentialsProvider
            this.signingService = "dynamodb"
        }
    }
}
