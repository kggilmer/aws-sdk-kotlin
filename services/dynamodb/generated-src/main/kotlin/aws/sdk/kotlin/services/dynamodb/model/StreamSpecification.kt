// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents the DynamoDB Streams configuration for a table in DynamoDB.
 */
class StreamSpecification private constructor(builder: BuilderImpl) {
    /**
     * Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.
     */
    val streamEnabled: Boolean? = builder.streamEnabled
    /**
     * When an item in the table is modified, StreamViewType
     * determines what information is written to the stream for this table. Valid values for
     * StreamViewType are:
     * KEYS_ONLY - Only the key attributes of the modified item are written to the stream.
     * NEW_IMAGE - The entire item, as it appears after it was modified, is written
     * to the stream.
     * OLD_IMAGE - The entire item, as it appeared before it was modified, is
     * written to the stream.
     * NEW_AND_OLD_IMAGES - Both the new and the old item images of the item are
     * written to the stream.
     */
    val streamViewType: StreamViewType? = builder.streamViewType

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): StreamSpecification = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("StreamSpecification(")
        append("streamEnabled=$streamEnabled,")
        append("streamViewType=$streamViewType)")
    }

    override fun hashCode(): kotlin.Int {
        var result = streamEnabled?.hashCode() ?: 0
        result = 31 * result + (streamViewType?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as StreamSpecification

        if (streamEnabled != other.streamEnabled) return false
        if (streamViewType != other.streamViewType) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): StreamSpecification = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): StreamSpecification
        /**
         * Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.
         */
        fun streamEnabled(streamEnabled: Boolean): FluentBuilder
        /**
         * When an item in the table is modified, StreamViewType
         * determines what information is written to the stream for this table. Valid values for
         * StreamViewType are:
         * KEYS_ONLY - Only the key attributes of the modified item are written to the stream.
         * NEW_IMAGE - The entire item, as it appears after it was modified, is written
         * to the stream.
         * OLD_IMAGE - The entire item, as it appeared before it was modified, is
         * written to the stream.
         * NEW_AND_OLD_IMAGES - Both the new and the old item images of the item are
         * written to the stream.
         */
        fun streamViewType(streamViewType: StreamViewType): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.
         */
        var streamEnabled: Boolean?
        /**
         * When an item in the table is modified, StreamViewType
         * determines what information is written to the stream for this table. Valid values for
         * StreamViewType are:
         * KEYS_ONLY - Only the key attributes of the modified item are written to the stream.
         * NEW_IMAGE - The entire item, as it appears after it was modified, is written
         * to the stream.
         * OLD_IMAGE - The entire item, as it appeared before it was modified, is
         * written to the stream.
         * NEW_AND_OLD_IMAGES - Both the new and the old item images of the item are
         * written to the stream.
         */
        var streamViewType: StreamViewType?

        fun build(): StreamSpecification
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var streamEnabled: Boolean? = null
        override var streamViewType: StreamViewType? = null

        constructor(x: StreamSpecification) : this() {
            this.streamEnabled = x.streamEnabled
            this.streamViewType = x.streamViewType
        }

        override fun build(): StreamSpecification = StreamSpecification(this)
        override fun streamEnabled(streamEnabled: Boolean): FluentBuilder = apply { this.streamEnabled = streamEnabled }
        override fun streamViewType(streamViewType: StreamViewType): FluentBuilder = apply { this.streamViewType = streamViewType }
    }
}
