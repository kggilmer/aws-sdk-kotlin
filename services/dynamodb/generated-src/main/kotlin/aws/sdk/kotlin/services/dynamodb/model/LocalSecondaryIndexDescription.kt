// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents the properties of a local secondary index.
 */
class LocalSecondaryIndexDescription private constructor(builder: BuilderImpl) {
    /**
     * The Amazon Resource Name (ARN) that uniquely identifies the index.
     */
    val indexArn: String? = builder.indexArn
    /**
     * Represents the name of the local secondary index.
     */
    val indexName: String? = builder.indexName
    /**
     * The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
     */
    val indexSizeBytes: Long = builder.indexSizeBytes
    /**
     * The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
     */
    val itemCount: Long = builder.itemCount
    /**
     * The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:
     * HASH - partition key
     * RANGE - sort key
     * The partition key of an item is also known as its hash attribute.  The
     * term "hash attribute" derives from DynamoDB's usage of an internal hash function to
     * evenly distribute data items across partitions, based on their partition key values.
     * The sort key of an item is also known as its range attribute.
     * The term "range attribute" derives from the way DynamoDB stores items with the same
     * partition key physically close together, in sorted order by the sort key value.
     */
    val keySchema: List<KeySchemaElement>? = builder.keySchema
    /**
     * Represents attributes that are copied (projected) from the table into the global
     * secondary index. These are in addition to the primary key attributes and index key
     * attributes, which are automatically projected.
     */
    val projection: Projection? = builder.projection

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): LocalSecondaryIndexDescription = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("LocalSecondaryIndexDescription(")
        append("indexArn=$indexArn,")
        append("indexName=$indexName,")
        append("indexSizeBytes=$indexSizeBytes,")
        append("itemCount=$itemCount,")
        append("keySchema=$keySchema,")
        append("projection=$projection)")
    }

    override fun hashCode(): kotlin.Int {
        var result = indexArn?.hashCode() ?: 0
        result = 31 * result + (indexName?.hashCode() ?: 0)
        result = 31 * result + (indexSizeBytes.hashCode())
        result = 31 * result + (itemCount.hashCode())
        result = 31 * result + (keySchema?.hashCode() ?: 0)
        result = 31 * result + (projection?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as LocalSecondaryIndexDescription

        if (indexArn != other.indexArn) return false
        if (indexName != other.indexName) return false
        if (indexSizeBytes != other.indexSizeBytes) return false
        if (itemCount != other.itemCount) return false
        if (keySchema != other.keySchema) return false
        if (projection != other.projection) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): LocalSecondaryIndexDescription = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): LocalSecondaryIndexDescription
        /**
         * The Amazon Resource Name (ARN) that uniquely identifies the index.
         */
        fun indexArn(indexArn: String): FluentBuilder
        /**
         * Represents the name of the local secondary index.
         */
        fun indexName(indexName: String): FluentBuilder
        /**
         * The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
         */
        fun indexSizeBytes(indexSizeBytes: Long): FluentBuilder
        /**
         * The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
         */
        fun itemCount(itemCount: Long): FluentBuilder
        /**
         * The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:
         * HASH - partition key
         * RANGE - sort key
         * The partition key of an item is also known as its hash attribute.  The
         * term "hash attribute" derives from DynamoDB's usage of an internal hash function to
         * evenly distribute data items across partitions, based on their partition key values.
         * The sort key of an item is also known as its range attribute.
         * The term "range attribute" derives from the way DynamoDB stores items with the same
         * partition key physically close together, in sorted order by the sort key value.
         */
        fun keySchema(keySchema: List<KeySchemaElement>): FluentBuilder
        /**
         * Represents attributes that are copied (projected) from the table into the global
         * secondary index. These are in addition to the primary key attributes and index key
         * attributes, which are automatically projected.
         */
        fun projection(projection: Projection): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The Amazon Resource Name (ARN) that uniquely identifies the index.
         */
        var indexArn: String?
        /**
         * Represents the name of the local secondary index.
         */
        var indexName: String?
        /**
         * The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
         */
        var indexSizeBytes: Long
        /**
         * The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
         */
        var itemCount: Long
        /**
         * The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:
         * HASH - partition key
         * RANGE - sort key
         * The partition key of an item is also known as its hash attribute.  The
         * term "hash attribute" derives from DynamoDB's usage of an internal hash function to
         * evenly distribute data items across partitions, based on their partition key values.
         * The sort key of an item is also known as its range attribute.
         * The term "range attribute" derives from the way DynamoDB stores items with the same
         * partition key physically close together, in sorted order by the sort key value.
         */
        var keySchema: List<KeySchemaElement>?
        /**
         * Represents attributes that are copied (projected) from the table into the global
         * secondary index. These are in addition to the primary key attributes and index key
         * attributes, which are automatically projected.
         */
        var projection: Projection?

        fun build(): LocalSecondaryIndexDescription
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.Projection] inside the given [block]
         */
        fun projection(block: Projection.DslBuilder.() -> kotlin.Unit) {
            this.projection = Projection.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var indexArn: String? = null
        override var indexName: String? = null
        override var indexSizeBytes: Long = 0L
        override var itemCount: Long = 0L
        override var keySchema: List<KeySchemaElement>? = null
        override var projection: Projection? = null

        constructor(x: LocalSecondaryIndexDescription) : this() {
            this.indexArn = x.indexArn
            this.indexName = x.indexName
            this.indexSizeBytes = x.indexSizeBytes
            this.itemCount = x.itemCount
            this.keySchema = x.keySchema
            this.projection = x.projection
        }

        override fun build(): LocalSecondaryIndexDescription = LocalSecondaryIndexDescription(this)
        override fun indexArn(indexArn: String): FluentBuilder = apply { this.indexArn = indexArn }
        override fun indexName(indexName: String): FluentBuilder = apply { this.indexName = indexName }
        override fun indexSizeBytes(indexSizeBytes: Long): FluentBuilder = apply { this.indexSizeBytes = indexSizeBytes }
        override fun itemCount(itemCount: Long): FluentBuilder = apply { this.itemCount = itemCount }
        override fun keySchema(keySchema: List<KeySchemaElement>): FluentBuilder = apply { this.keySchema = keySchema }
        override fun projection(projection: Projection): FluentBuilder = apply { this.projection = projection }
    }
}
