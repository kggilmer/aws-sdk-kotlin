// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model

import aws.smithy.kotlin.runtime.time.Instant

/**
 * Represents the properties of the exported table.
 */
class ExportDescription private constructor(builder: BuilderImpl) {
    /**
     * The billable size of the table export.
     */
    val billedSizeBytes: Long? = builder.billedSizeBytes
    /**
     * The client token that was provided for the export task. A client token makes calls to
     * ExportTableToPointInTimeInput idempotent, meaning that multiple
     * identical calls have the same effect as one single call.
     */
    val clientToken: String? = builder.clientToken
    /**
     * The time at which the export task completed.
     */
    val endTime: Instant? = builder.endTime
    /**
     * The Amazon Resource Name (ARN) of the table export.
     */
    val exportArn: String? = builder.exportArn
    /**
     * The format of the exported data. Valid values for ExportFormat are
     * DYNAMODB_JSON or ION.
     */
    val exportFormat: ExportFormat? = builder.exportFormat
    /**
     * The name of the manifest file for the export task.
     */
    val exportManifest: String? = builder.exportManifest
    /**
     * Export can be in one of the following states: IN_PROGRESS, COMPLETED, or FAILED.
     */
    val exportStatus: ExportStatus? = builder.exportStatus
    /**
     * Point in time from which table data was exported.
     */
    val exportTime: Instant? = builder.exportTime
    /**
     * Status code for the result of the failed export.
     */
    val failureCode: String? = builder.failureCode
    /**
     * Export failure reason description.
     */
    val failureMessage: String? = builder.failureMessage
    /**
     * The number of items exported.
     */
    val itemCount: Long? = builder.itemCount
    /**
     * The name of the Amazon S3 bucket containing the export.
     */
    val s3Bucket: String? = builder.s3Bucket
    /**
     * The ID of the AWS account that owns the bucket containing the export.
     */
    val s3BucketOwner: String? = builder.s3BucketOwner
    /**
     * The Amazon S3 bucket prefix used as the file name and path of the exported
     * snapshot.
     */
    val s3Prefix: String? = builder.s3Prefix
    /**
     * Type of encryption used on the bucket where export data is stored. Valid values
     * for S3SseAlgorithm are:
     * AES256 - server-side encryption with Amazon S3 managed keys
     * KMS - server-side encryption with AWS KMS managed keys
     */
    val s3SseAlgorithm: S3SseAlgorithm? = builder.s3SseAlgorithm
    /**
     * The ID of the AWS KMS managed key used to encrypt the S3 bucket where export data is
     * stored (if applicable).
     */
    val s3SseKmsKeyId: String? = builder.s3SseKmsKeyId
    /**
     * The time at which the export task began.
     */
    val startTime: Instant? = builder.startTime
    /**
     * The Amazon Resource Name (ARN) of the table that was exported.
     */
    val tableArn: String? = builder.tableArn
    /**
     * Unique ID of the table that was exported.
     */
    val tableId: String? = builder.tableId

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ExportDescription = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ExportDescription(")
        append("billedSizeBytes=$billedSizeBytes,")
        append("clientToken=$clientToken,")
        append("endTime=$endTime,")
        append("exportArn=$exportArn,")
        append("exportFormat=$exportFormat,")
        append("exportManifest=$exportManifest,")
        append("exportStatus=$exportStatus,")
        append("exportTime=$exportTime,")
        append("failureCode=$failureCode,")
        append("failureMessage=$failureMessage,")
        append("itemCount=$itemCount,")
        append("s3Bucket=$s3Bucket,")
        append("s3BucketOwner=$s3BucketOwner,")
        append("s3Prefix=$s3Prefix,")
        append("s3SseAlgorithm=$s3SseAlgorithm,")
        append("s3SseKmsKeyId=$s3SseKmsKeyId,")
        append("startTime=$startTime,")
        append("tableArn=$tableArn,")
        append("tableId=$tableId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = billedSizeBytes?.hashCode() ?: 0
        result = 31 * result + (clientToken?.hashCode() ?: 0)
        result = 31 * result + (endTime?.hashCode() ?: 0)
        result = 31 * result + (exportArn?.hashCode() ?: 0)
        result = 31 * result + (exportFormat?.hashCode() ?: 0)
        result = 31 * result + (exportManifest?.hashCode() ?: 0)
        result = 31 * result + (exportStatus?.hashCode() ?: 0)
        result = 31 * result + (exportTime?.hashCode() ?: 0)
        result = 31 * result + (failureCode?.hashCode() ?: 0)
        result = 31 * result + (failureMessage?.hashCode() ?: 0)
        result = 31 * result + (itemCount?.hashCode() ?: 0)
        result = 31 * result + (s3Bucket?.hashCode() ?: 0)
        result = 31 * result + (s3BucketOwner?.hashCode() ?: 0)
        result = 31 * result + (s3Prefix?.hashCode() ?: 0)
        result = 31 * result + (s3SseAlgorithm?.hashCode() ?: 0)
        result = 31 * result + (s3SseKmsKeyId?.hashCode() ?: 0)
        result = 31 * result + (startTime?.hashCode() ?: 0)
        result = 31 * result + (tableArn?.hashCode() ?: 0)
        result = 31 * result + (tableId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ExportDescription

        if (billedSizeBytes != other.billedSizeBytes) return false
        if (clientToken != other.clientToken) return false
        if (endTime != other.endTime) return false
        if (exportArn != other.exportArn) return false
        if (exportFormat != other.exportFormat) return false
        if (exportManifest != other.exportManifest) return false
        if (exportStatus != other.exportStatus) return false
        if (exportTime != other.exportTime) return false
        if (failureCode != other.failureCode) return false
        if (failureMessage != other.failureMessage) return false
        if (itemCount != other.itemCount) return false
        if (s3Bucket != other.s3Bucket) return false
        if (s3BucketOwner != other.s3BucketOwner) return false
        if (s3Prefix != other.s3Prefix) return false
        if (s3SseAlgorithm != other.s3SseAlgorithm) return false
        if (s3SseKmsKeyId != other.s3SseKmsKeyId) return false
        if (startTime != other.startTime) return false
        if (tableArn != other.tableArn) return false
        if (tableId != other.tableId) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ExportDescription = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ExportDescription
        /**
         * The billable size of the table export.
         */
        fun billedSizeBytes(billedSizeBytes: Long): FluentBuilder
        /**
         * The client token that was provided for the export task. A client token makes calls to
         * ExportTableToPointInTimeInput idempotent, meaning that multiple
         * identical calls have the same effect as one single call.
         */
        fun clientToken(clientToken: String): FluentBuilder
        /**
         * The time at which the export task completed.
         */
        fun endTime(endTime: Instant): FluentBuilder
        /**
         * The Amazon Resource Name (ARN) of the table export.
         */
        fun exportArn(exportArn: String): FluentBuilder
        /**
         * The format of the exported data. Valid values for ExportFormat are
         * DYNAMODB_JSON or ION.
         */
        fun exportFormat(exportFormat: ExportFormat): FluentBuilder
        /**
         * The name of the manifest file for the export task.
         */
        fun exportManifest(exportManifest: String): FluentBuilder
        /**
         * Export can be in one of the following states: IN_PROGRESS, COMPLETED, or FAILED.
         */
        fun exportStatus(exportStatus: ExportStatus): FluentBuilder
        /**
         * Point in time from which table data was exported.
         */
        fun exportTime(exportTime: Instant): FluentBuilder
        /**
         * Status code for the result of the failed export.
         */
        fun failureCode(failureCode: String): FluentBuilder
        /**
         * Export failure reason description.
         */
        fun failureMessage(failureMessage: String): FluentBuilder
        /**
         * The number of items exported.
         */
        fun itemCount(itemCount: Long): FluentBuilder
        /**
         * The name of the Amazon S3 bucket containing the export.
         */
        fun s3Bucket(s3Bucket: String): FluentBuilder
        /**
         * The ID of the AWS account that owns the bucket containing the export.
         */
        fun s3BucketOwner(s3BucketOwner: String): FluentBuilder
        /**
         * The Amazon S3 bucket prefix used as the file name and path of the exported
         * snapshot.
         */
        fun s3Prefix(s3Prefix: String): FluentBuilder
        /**
         * Type of encryption used on the bucket where export data is stored. Valid values
         * for S3SseAlgorithm are:
         * AES256 - server-side encryption with Amazon S3 managed keys
         * KMS - server-side encryption with AWS KMS managed keys
         */
        fun s3SseAlgorithm(s3SseAlgorithm: S3SseAlgorithm): FluentBuilder
        /**
         * The ID of the AWS KMS managed key used to encrypt the S3 bucket where export data is
         * stored (if applicable).
         */
        fun s3SseKmsKeyId(s3SseKmsKeyId: String): FluentBuilder
        /**
         * The time at which the export task began.
         */
        fun startTime(startTime: Instant): FluentBuilder
        /**
         * The Amazon Resource Name (ARN) of the table that was exported.
         */
        fun tableArn(tableArn: String): FluentBuilder
        /**
         * Unique ID of the table that was exported.
         */
        fun tableId(tableId: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The billable size of the table export.
         */
        var billedSizeBytes: Long?
        /**
         * The client token that was provided for the export task. A client token makes calls to
         * ExportTableToPointInTimeInput idempotent, meaning that multiple
         * identical calls have the same effect as one single call.
         */
        var clientToken: String?
        /**
         * The time at which the export task completed.
         */
        var endTime: Instant?
        /**
         * The Amazon Resource Name (ARN) of the table export.
         */
        var exportArn: String?
        /**
         * The format of the exported data. Valid values for ExportFormat are
         * DYNAMODB_JSON or ION.
         */
        var exportFormat: ExportFormat?
        /**
         * The name of the manifest file for the export task.
         */
        var exportManifest: String?
        /**
         * Export can be in one of the following states: IN_PROGRESS, COMPLETED, or FAILED.
         */
        var exportStatus: ExportStatus?
        /**
         * Point in time from which table data was exported.
         */
        var exportTime: Instant?
        /**
         * Status code for the result of the failed export.
         */
        var failureCode: String?
        /**
         * Export failure reason description.
         */
        var failureMessage: String?
        /**
         * The number of items exported.
         */
        var itemCount: Long?
        /**
         * The name of the Amazon S3 bucket containing the export.
         */
        var s3Bucket: String?
        /**
         * The ID of the AWS account that owns the bucket containing the export.
         */
        var s3BucketOwner: String?
        /**
         * The Amazon S3 bucket prefix used as the file name and path of the exported
         * snapshot.
         */
        var s3Prefix: String?
        /**
         * Type of encryption used on the bucket where export data is stored. Valid values
         * for S3SseAlgorithm are:
         * AES256 - server-side encryption with Amazon S3 managed keys
         * KMS - server-side encryption with AWS KMS managed keys
         */
        var s3SseAlgorithm: S3SseAlgorithm?
        /**
         * The ID of the AWS KMS managed key used to encrypt the S3 bucket where export data is
         * stored (if applicable).
         */
        var s3SseKmsKeyId: String?
        /**
         * The time at which the export task began.
         */
        var startTime: Instant?
        /**
         * The Amazon Resource Name (ARN) of the table that was exported.
         */
        var tableArn: String?
        /**
         * Unique ID of the table that was exported.
         */
        var tableId: String?

        fun build(): ExportDescription
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var billedSizeBytes: Long? = null
        override var clientToken: String? = null
        override var endTime: Instant? = null
        override var exportArn: String? = null
        override var exportFormat: ExportFormat? = null
        override var exportManifest: String? = null
        override var exportStatus: ExportStatus? = null
        override var exportTime: Instant? = null
        override var failureCode: String? = null
        override var failureMessage: String? = null
        override var itemCount: Long? = null
        override var s3Bucket: String? = null
        override var s3BucketOwner: String? = null
        override var s3Prefix: String? = null
        override var s3SseAlgorithm: S3SseAlgorithm? = null
        override var s3SseKmsKeyId: String? = null
        override var startTime: Instant? = null
        override var tableArn: String? = null
        override var tableId: String? = null

        constructor(x: ExportDescription) : this() {
            this.billedSizeBytes = x.billedSizeBytes
            this.clientToken = x.clientToken
            this.endTime = x.endTime
            this.exportArn = x.exportArn
            this.exportFormat = x.exportFormat
            this.exportManifest = x.exportManifest
            this.exportStatus = x.exportStatus
            this.exportTime = x.exportTime
            this.failureCode = x.failureCode
            this.failureMessage = x.failureMessage
            this.itemCount = x.itemCount
            this.s3Bucket = x.s3Bucket
            this.s3BucketOwner = x.s3BucketOwner
            this.s3Prefix = x.s3Prefix
            this.s3SseAlgorithm = x.s3SseAlgorithm
            this.s3SseKmsKeyId = x.s3SseKmsKeyId
            this.startTime = x.startTime
            this.tableArn = x.tableArn
            this.tableId = x.tableId
        }

        override fun build(): ExportDescription = ExportDescription(this)
        override fun billedSizeBytes(billedSizeBytes: Long): FluentBuilder = apply { this.billedSizeBytes = billedSizeBytes }
        override fun clientToken(clientToken: String): FluentBuilder = apply { this.clientToken = clientToken }
        override fun endTime(endTime: Instant): FluentBuilder = apply { this.endTime = endTime }
        override fun exportArn(exportArn: String): FluentBuilder = apply { this.exportArn = exportArn }
        override fun exportFormat(exportFormat: ExportFormat): FluentBuilder = apply { this.exportFormat = exportFormat }
        override fun exportManifest(exportManifest: String): FluentBuilder = apply { this.exportManifest = exportManifest }
        override fun exportStatus(exportStatus: ExportStatus): FluentBuilder = apply { this.exportStatus = exportStatus }
        override fun exportTime(exportTime: Instant): FluentBuilder = apply { this.exportTime = exportTime }
        override fun failureCode(failureCode: String): FluentBuilder = apply { this.failureCode = failureCode }
        override fun failureMessage(failureMessage: String): FluentBuilder = apply { this.failureMessage = failureMessage }
        override fun itemCount(itemCount: Long): FluentBuilder = apply { this.itemCount = itemCount }
        override fun s3Bucket(s3Bucket: String): FluentBuilder = apply { this.s3Bucket = s3Bucket }
        override fun s3BucketOwner(s3BucketOwner: String): FluentBuilder = apply { this.s3BucketOwner = s3BucketOwner }
        override fun s3Prefix(s3Prefix: String): FluentBuilder = apply { this.s3Prefix = s3Prefix }
        override fun s3SseAlgorithm(s3SseAlgorithm: S3SseAlgorithm): FluentBuilder = apply { this.s3SseAlgorithm = s3SseAlgorithm }
        override fun s3SseKmsKeyId(s3SseKmsKeyId: String): FluentBuilder = apply { this.s3SseKmsKeyId = s3SseKmsKeyId }
        override fun startTime(startTime: Instant): FluentBuilder = apply { this.startTime = startTime }
        override fun tableArn(tableArn: String): FluentBuilder = apply { this.tableArn = tableArn }
        override fun tableId(tableId: String): FluentBuilder = apply { this.tableId = tableId }
    }
}
