// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model

import aws.smithy.kotlin.runtime.time.Instant

/**
 * Represents the provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.
 */
class ProvisionedThroughputDescription private constructor(builder: BuilderImpl) {
    /**
     * The date and time of the last provisioned throughput decrease for this table.
     */
    val lastDecreaseDateTime: Instant? = builder.lastDecreaseDateTime
    /**
     * The date and time of the last provisioned throughput increase for this table.
     */
    val lastIncreaseDateTime: Instant? = builder.lastIncreaseDateTime
    /**
     * The number of provisioned throughput decreases for this table during this UTC calendar day.
     * For current maximums on provisioned throughput decreases, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide.
     */
    val numberOfDecreasesToday: Long? = builder.numberOfDecreasesToday
    /**
     * The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
     * ThrottlingException. Eventually consistent reads require less effort than strongly
     * consistent reads, so a setting of 50 ReadCapacityUnits per second provides 100
     * eventually consistent ReadCapacityUnits per second.
     */
    val readCapacityUnits: Long? = builder.readCapacityUnits
    /**
     * The maximum number of writes consumed per second before DynamoDB returns a
     * ThrottlingException.
     */
    val writeCapacityUnits: Long? = builder.writeCapacityUnits

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ProvisionedThroughputDescription = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ProvisionedThroughputDescription(")
        append("lastDecreaseDateTime=$lastDecreaseDateTime,")
        append("lastIncreaseDateTime=$lastIncreaseDateTime,")
        append("numberOfDecreasesToday=$numberOfDecreasesToday,")
        append("readCapacityUnits=$readCapacityUnits,")
        append("writeCapacityUnits=$writeCapacityUnits)")
    }

    override fun hashCode(): kotlin.Int {
        var result = lastDecreaseDateTime?.hashCode() ?: 0
        result = 31 * result + (lastIncreaseDateTime?.hashCode() ?: 0)
        result = 31 * result + (numberOfDecreasesToday?.hashCode() ?: 0)
        result = 31 * result + (readCapacityUnits?.hashCode() ?: 0)
        result = 31 * result + (writeCapacityUnits?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ProvisionedThroughputDescription

        if (lastDecreaseDateTime != other.lastDecreaseDateTime) return false
        if (lastIncreaseDateTime != other.lastIncreaseDateTime) return false
        if (numberOfDecreasesToday != other.numberOfDecreasesToday) return false
        if (readCapacityUnits != other.readCapacityUnits) return false
        if (writeCapacityUnits != other.writeCapacityUnits) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ProvisionedThroughputDescription = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ProvisionedThroughputDescription
        /**
         * The date and time of the last provisioned throughput decrease for this table.
         */
        fun lastDecreaseDateTime(lastDecreaseDateTime: Instant): FluentBuilder
        /**
         * The date and time of the last provisioned throughput increase for this table.
         */
        fun lastIncreaseDateTime(lastIncreaseDateTime: Instant): FluentBuilder
        /**
         * The number of provisioned throughput decreases for this table during this UTC calendar day.
         * For current maximums on provisioned throughput decreases, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide.
         */
        fun numberOfDecreasesToday(numberOfDecreasesToday: Long): FluentBuilder
        /**
         * The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
         * ThrottlingException. Eventually consistent reads require less effort than strongly
         * consistent reads, so a setting of 50 ReadCapacityUnits per second provides 100
         * eventually consistent ReadCapacityUnits per second.
         */
        fun readCapacityUnits(readCapacityUnits: Long): FluentBuilder
        /**
         * The maximum number of writes consumed per second before DynamoDB returns a
         * ThrottlingException.
         */
        fun writeCapacityUnits(writeCapacityUnits: Long): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The date and time of the last provisioned throughput decrease for this table.
         */
        var lastDecreaseDateTime: Instant?
        /**
         * The date and time of the last provisioned throughput increase for this table.
         */
        var lastIncreaseDateTime: Instant?
        /**
         * The number of provisioned throughput decreases for this table during this UTC calendar day.
         * For current maximums on provisioned throughput decreases, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide.
         */
        var numberOfDecreasesToday: Long?
        /**
         * The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
         * ThrottlingException. Eventually consistent reads require less effort than strongly
         * consistent reads, so a setting of 50 ReadCapacityUnits per second provides 100
         * eventually consistent ReadCapacityUnits per second.
         */
        var readCapacityUnits: Long?
        /**
         * The maximum number of writes consumed per second before DynamoDB returns a
         * ThrottlingException.
         */
        var writeCapacityUnits: Long?

        fun build(): ProvisionedThroughputDescription
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var lastDecreaseDateTime: Instant? = null
        override var lastIncreaseDateTime: Instant? = null
        override var numberOfDecreasesToday: Long? = null
        override var readCapacityUnits: Long? = null
        override var writeCapacityUnits: Long? = null

        constructor(x: ProvisionedThroughputDescription) : this() {
            this.lastDecreaseDateTime = x.lastDecreaseDateTime
            this.lastIncreaseDateTime = x.lastIncreaseDateTime
            this.numberOfDecreasesToday = x.numberOfDecreasesToday
            this.readCapacityUnits = x.readCapacityUnits
            this.writeCapacityUnits = x.writeCapacityUnits
        }

        override fun build(): ProvisionedThroughputDescription = ProvisionedThroughputDescription(this)
        override fun lastDecreaseDateTime(lastDecreaseDateTime: Instant): FluentBuilder = apply { this.lastDecreaseDateTime = lastDecreaseDateTime }
        override fun lastIncreaseDateTime(lastIncreaseDateTime: Instant): FluentBuilder = apply { this.lastIncreaseDateTime = lastIncreaseDateTime }
        override fun numberOfDecreasesToday(numberOfDecreasesToday: Long): FluentBuilder = apply { this.numberOfDecreasesToday = numberOfDecreasesToday }
        override fun readCapacityUnits(readCapacityUnits: Long): FluentBuilder = apply { this.readCapacityUnits = readCapacityUnits }
        override fun writeCapacityUnits(writeCapacityUnits: Long): FluentBuilder = apply { this.writeCapacityUnits = writeCapacityUnits }
    }
}
