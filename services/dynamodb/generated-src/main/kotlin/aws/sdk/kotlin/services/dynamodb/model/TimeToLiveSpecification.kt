// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents the settings used to enable or disable Time to Live (TTL) for the specified
 * table.
 */
class TimeToLiveSpecification private constructor(builder: BuilderImpl) {
    /**
     * The name of the TTL attribute used to store the expiration time for items in the
     * table.
     */
    val attributeName: String? = builder.attributeName
    /**
     * Indicates whether TTL is to be enabled (true) or disabled (false) on the table.
     */
    val enabled: Boolean? = builder.enabled

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): TimeToLiveSpecification = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("TimeToLiveSpecification(")
        append("attributeName=$attributeName,")
        append("enabled=$enabled)")
    }

    override fun hashCode(): kotlin.Int {
        var result = attributeName?.hashCode() ?: 0
        result = 31 * result + (enabled?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as TimeToLiveSpecification

        if (attributeName != other.attributeName) return false
        if (enabled != other.enabled) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): TimeToLiveSpecification = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): TimeToLiveSpecification
        /**
         * The name of the TTL attribute used to store the expiration time for items in the
         * table.
         */
        fun attributeName(attributeName: String): FluentBuilder
        /**
         * Indicates whether TTL is to be enabled (true) or disabled (false) on the table.
         */
        fun enabled(enabled: Boolean): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The name of the TTL attribute used to store the expiration time for items in the
         * table.
         */
        var attributeName: String?
        /**
         * Indicates whether TTL is to be enabled (true) or disabled (false) on the table.
         */
        var enabled: Boolean?

        fun build(): TimeToLiveSpecification
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var attributeName: String? = null
        override var enabled: Boolean? = null

        constructor(x: TimeToLiveSpecification) : this() {
            this.attributeName = x.attributeName
            this.enabled = x.enabled
        }

        override fun build(): TimeToLiveSpecification = TimeToLiveSpecification(this)
        override fun attributeName(attributeName: String): FluentBuilder = apply { this.attributeName = attributeName }
        override fun enabled(enabled: Boolean): FluentBuilder = apply { this.enabled = enabled }
    }
}
