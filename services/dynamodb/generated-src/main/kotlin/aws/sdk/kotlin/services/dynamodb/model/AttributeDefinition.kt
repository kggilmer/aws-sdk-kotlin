// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents an attribute for describing the key schema for the table and indexes.
 */
class AttributeDefinition private constructor(builder: BuilderImpl) {
    /**
     * A name for the attribute.
     */
    val attributeName: String? = builder.attributeName
    /**
     * The data type for the attribute, where:
     * S - the attribute is of type String
     * N - the attribute is of type Number
     * B - the attribute is of type Binary
     */
    val attributeType: ScalarAttributeType? = builder.attributeType

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): AttributeDefinition = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("AttributeDefinition(")
        append("attributeName=$attributeName,")
        append("attributeType=$attributeType)")
    }

    override fun hashCode(): kotlin.Int {
        var result = attributeName?.hashCode() ?: 0
        result = 31 * result + (attributeType?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as AttributeDefinition

        if (attributeName != other.attributeName) return false
        if (attributeType != other.attributeType) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): AttributeDefinition = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): AttributeDefinition
        /**
         * A name for the attribute.
         */
        fun attributeName(attributeName: String): FluentBuilder
        /**
         * The data type for the attribute, where:
         * S - the attribute is of type String
         * N - the attribute is of type Number
         * B - the attribute is of type Binary
         */
        fun attributeType(attributeType: ScalarAttributeType): FluentBuilder
    }

    interface DslBuilder {
        /**
         * A name for the attribute.
         */
        var attributeName: String?
        /**
         * The data type for the attribute, where:
         * S - the attribute is of type String
         * N - the attribute is of type Number
         * B - the attribute is of type Binary
         */
        var attributeType: ScalarAttributeType?

        fun build(): AttributeDefinition
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var attributeName: String? = null
        override var attributeType: ScalarAttributeType? = null

        constructor(x: AttributeDefinition) : this() {
            this.attributeName = x.attributeName
            this.attributeType = x.attributeType
        }

        override fun build(): AttributeDefinition = AttributeDefinition(this)
        override fun attributeName(attributeName: String): FluentBuilder = apply { this.attributeName = attributeName }
        override fun attributeType(attributeType: ScalarAttributeType): FluentBuilder = apply { this.attributeType = attributeType }
    }
}
