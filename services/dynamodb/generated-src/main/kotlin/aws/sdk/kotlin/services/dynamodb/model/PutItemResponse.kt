// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents the output of a PutItem operation.
 */
class PutItemResponse private constructor(builder: BuilderImpl) {
    /**
     * The attribute values as they appeared before the PutItem operation, but only if
     * ReturnValues is specified as ALL_OLD in the request. Each element
     * consists of an attribute name and an attribute value.
     */
    val attributes: Map<String, AttributeValue>? = builder.attributes
    /**
     * The capacity units consumed by the PutItem operation. The data returned
     * includes the total provisioned throughput consumed, along with statistics for the table
     * and any indexes involved in the operation. ConsumedCapacity is only
     * returned if the ReturnConsumedCapacity parameter was specified. For more
     * information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Read/Write Capacity Mode in the Amazon DynamoDB Developer
     * Guide.
     */
    val consumedCapacity: ConsumedCapacity? = builder.consumedCapacity
    /**
     * Information about item collections, if any, that were affected by the
     * PutItem operation. ItemCollectionMetrics
     * is only returned if the ReturnItemCollectionMetrics parameter was specified. If the table does not have any local
     * secondary indexes, this information is not returned in the response.
     * Each ItemCollectionMetrics
     * element consists of:
     * ItemCollectionKey - The partition key value of the item
     * collection. This is the same as the partition key value of the item itself.
     * SizeEstimateRangeGB - An estimate of item collection size,
     * in gigabytes. This value is a two-element array
     * containing a lower bound and an upper bound for the
     * estimate. The estimate includes the size of all the
     * items in the table, plus the size of all attributes
     * projected into all of the local secondary indexes on that
     * table. Use this estimate to measure whether a local secondary index is approaching its size limit.
     * The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
     */
    val itemCollectionMetrics: ItemCollectionMetrics? = builder.itemCollectionMetrics

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): PutItemResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("PutItemResponse(")
        append("attributes=$attributes,")
        append("consumedCapacity=$consumedCapacity,")
        append("itemCollectionMetrics=$itemCollectionMetrics)")
    }

    override fun hashCode(): kotlin.Int {
        var result = attributes?.hashCode() ?: 0
        result = 31 * result + (consumedCapacity?.hashCode() ?: 0)
        result = 31 * result + (itemCollectionMetrics?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as PutItemResponse

        if (attributes != other.attributes) return false
        if (consumedCapacity != other.consumedCapacity) return false
        if (itemCollectionMetrics != other.itemCollectionMetrics) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): PutItemResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): PutItemResponse
        /**
         * The attribute values as they appeared before the PutItem operation, but only if
         * ReturnValues is specified as ALL_OLD in the request. Each element
         * consists of an attribute name and an attribute value.
         */
        fun attributes(attributes: Map<String, AttributeValue>): FluentBuilder
        /**
         * The capacity units consumed by the PutItem operation. The data returned
         * includes the total provisioned throughput consumed, along with statistics for the table
         * and any indexes involved in the operation. ConsumedCapacity is only
         * returned if the ReturnConsumedCapacity parameter was specified. For more
         * information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Read/Write Capacity Mode in the Amazon DynamoDB Developer
         * Guide.
         */
        fun consumedCapacity(consumedCapacity: ConsumedCapacity): FluentBuilder
        /**
         * Information about item collections, if any, that were affected by the
         * PutItem operation. ItemCollectionMetrics
         * is only returned if the ReturnItemCollectionMetrics parameter was specified. If the table does not have any local
         * secondary indexes, this information is not returned in the response.
         * Each ItemCollectionMetrics
         * element consists of:
         * ItemCollectionKey - The partition key value of the item
         * collection. This is the same as the partition key value of the item itself.
         * SizeEstimateRangeGB - An estimate of item collection size,
         * in gigabytes. This value is a two-element array
         * containing a lower bound and an upper bound for the
         * estimate. The estimate includes the size of all the
         * items in the table, plus the size of all attributes
         * projected into all of the local secondary indexes on that
         * table. Use this estimate to measure whether a local secondary index is approaching its size limit.
         * The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
         */
        fun itemCollectionMetrics(itemCollectionMetrics: ItemCollectionMetrics): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The attribute values as they appeared before the PutItem operation, but only if
         * ReturnValues is specified as ALL_OLD in the request. Each element
         * consists of an attribute name and an attribute value.
         */
        var attributes: Map<String, AttributeValue>?
        /**
         * The capacity units consumed by the PutItem operation. The data returned
         * includes the total provisioned throughput consumed, along with statistics for the table
         * and any indexes involved in the operation. ConsumedCapacity is only
         * returned if the ReturnConsumedCapacity parameter was specified. For more
         * information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Read/Write Capacity Mode in the Amazon DynamoDB Developer
         * Guide.
         */
        var consumedCapacity: ConsumedCapacity?
        /**
         * Information about item collections, if any, that were affected by the
         * PutItem operation. ItemCollectionMetrics
         * is only returned if the ReturnItemCollectionMetrics parameter was specified. If the table does not have any local
         * secondary indexes, this information is not returned in the response.
         * Each ItemCollectionMetrics
         * element consists of:
         * ItemCollectionKey - The partition key value of the item
         * collection. This is the same as the partition key value of the item itself.
         * SizeEstimateRangeGB - An estimate of item collection size,
         * in gigabytes. This value is a two-element array
         * containing a lower bound and an upper bound for the
         * estimate. The estimate includes the size of all the
         * items in the table, plus the size of all attributes
         * projected into all of the local secondary indexes on that
         * table. Use this estimate to measure whether a local secondary index is approaching its size limit.
         * The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
         */
        var itemCollectionMetrics: ItemCollectionMetrics?

        fun build(): PutItemResponse
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.ConsumedCapacity] inside the given [block]
         */
        fun consumedCapacity(block: ConsumedCapacity.DslBuilder.() -> kotlin.Unit) {
            this.consumedCapacity = ConsumedCapacity.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.ItemCollectionMetrics] inside the given [block]
         */
        fun itemCollectionMetrics(block: ItemCollectionMetrics.DslBuilder.() -> kotlin.Unit) {
            this.itemCollectionMetrics = ItemCollectionMetrics.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var attributes: Map<String, AttributeValue>? = null
        override var consumedCapacity: ConsumedCapacity? = null
        override var itemCollectionMetrics: ItemCollectionMetrics? = null

        constructor(x: PutItemResponse) : this() {
            this.attributes = x.attributes
            this.consumedCapacity = x.consumedCapacity
            this.itemCollectionMetrics = x.itemCollectionMetrics
        }

        override fun build(): PutItemResponse = PutItemResponse(this)
        override fun attributes(attributes: Map<String, AttributeValue>): FluentBuilder = apply { this.attributes = attributes }
        override fun consumedCapacity(consumedCapacity: ConsumedCapacity): FluentBuilder = apply { this.consumedCapacity = consumedCapacity }
        override fun itemCollectionMetrics(itemCollectionMetrics: ItemCollectionMetrics): FluentBuilder = apply { this.itemCollectionMetrics = itemCollectionMetrics }
    }
}
