// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * A PartiQL batch statement request.
 */
class BatchStatementRequest private constructor(builder: BuilderImpl) {
    /**
     * The read consistency of the PartiQL batch request.
     */
    val consistentRead: Boolean? = builder.consistentRead
    /**
     * The parameters associated with a PartiQL statement in the batch request.
     */
    val parameters: List<AttributeValue>? = builder.parameters
    /**
     * A valid PartiQL statement.
     */
    val statement: String? = builder.statement

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): BatchStatementRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("BatchStatementRequest(")
        append("consistentRead=$consistentRead,")
        append("parameters=$parameters,")
        append("statement=$statement)")
    }

    override fun hashCode(): kotlin.Int {
        var result = consistentRead?.hashCode() ?: 0
        result = 31 * result + (parameters?.hashCode() ?: 0)
        result = 31 * result + (statement?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as BatchStatementRequest

        if (consistentRead != other.consistentRead) return false
        if (parameters != other.parameters) return false
        if (statement != other.statement) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): BatchStatementRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): BatchStatementRequest
        /**
         * The read consistency of the PartiQL batch request.
         */
        fun consistentRead(consistentRead: Boolean): FluentBuilder
        /**
         * The parameters associated with a PartiQL statement in the batch request.
         */
        fun parameters(parameters: List<AttributeValue>): FluentBuilder
        /**
         * A valid PartiQL statement.
         */
        fun statement(statement: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The read consistency of the PartiQL batch request.
         */
        var consistentRead: Boolean?
        /**
         * The parameters associated with a PartiQL statement in the batch request.
         */
        var parameters: List<AttributeValue>?
        /**
         * A valid PartiQL statement.
         */
        var statement: String?

        fun build(): BatchStatementRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var consistentRead: Boolean? = null
        override var parameters: List<AttributeValue>? = null
        override var statement: String? = null

        constructor(x: BatchStatementRequest) : this() {
            this.consistentRead = x.consistentRead
            this.parameters = x.parameters
            this.statement = x.statement
        }

        override fun build(): BatchStatementRequest = BatchStatementRequest(this)
        override fun consistentRead(consistentRead: Boolean): FluentBuilder = apply { this.consistentRead = consistentRead }
        override fun parameters(parameters: List<AttributeValue>): FluentBuilder = apply { this.parameters = parameters }
        override fun statement(statement: String): FluentBuilder = apply { this.statement = statement }
    }
}
