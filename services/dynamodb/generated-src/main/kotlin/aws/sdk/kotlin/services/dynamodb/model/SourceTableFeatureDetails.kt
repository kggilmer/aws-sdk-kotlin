// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Contains the details of the features enabled on the table when the backup was created. For example, LSIs, GSIs, streams, TTL.
 */
class SourceTableFeatureDetails private constructor(builder: BuilderImpl) {
    /**
     * Represents the GSI properties for the table when the backup was created. It includes the
     * IndexName, KeySchema, Projection, and ProvisionedThroughput for the GSIs on the table at
     * the time of backup.
     */
    val globalSecondaryIndexes: List<GlobalSecondaryIndexInfo>? = builder.globalSecondaryIndexes
    /**
     * Represents the LSI properties for the table when the backup was created. It includes the IndexName, KeySchema and Projection for the LSIs on the table at the time of backup.
     */
    val localSecondaryIndexes: List<LocalSecondaryIndexInfo>? = builder.localSecondaryIndexes
    /**
     * The description of the server-side encryption status on the table when the backup was created.
     */
    val sseDescription: SseDescription? = builder.sseDescription
    /**
     * Stream settings on the table when the backup was created.
     */
    val streamDescription: StreamSpecification? = builder.streamDescription
    /**
     * Time to Live settings on the table when the backup was created.
     */
    val timeToLiveDescription: TimeToLiveDescription? = builder.timeToLiveDescription

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): SourceTableFeatureDetails = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("SourceTableFeatureDetails(")
        append("globalSecondaryIndexes=$globalSecondaryIndexes,")
        append("localSecondaryIndexes=$localSecondaryIndexes,")
        append("sseDescription=$sseDescription,")
        append("streamDescription=$streamDescription,")
        append("timeToLiveDescription=$timeToLiveDescription)")
    }

    override fun hashCode(): kotlin.Int {
        var result = globalSecondaryIndexes?.hashCode() ?: 0
        result = 31 * result + (localSecondaryIndexes?.hashCode() ?: 0)
        result = 31 * result + (sseDescription?.hashCode() ?: 0)
        result = 31 * result + (streamDescription?.hashCode() ?: 0)
        result = 31 * result + (timeToLiveDescription?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as SourceTableFeatureDetails

        if (globalSecondaryIndexes != other.globalSecondaryIndexes) return false
        if (localSecondaryIndexes != other.localSecondaryIndexes) return false
        if (sseDescription != other.sseDescription) return false
        if (streamDescription != other.streamDescription) return false
        if (timeToLiveDescription != other.timeToLiveDescription) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): SourceTableFeatureDetails = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): SourceTableFeatureDetails
        /**
         * Represents the GSI properties for the table when the backup was created. It includes the
         * IndexName, KeySchema, Projection, and ProvisionedThroughput for the GSIs on the table at
         * the time of backup.
         */
        fun globalSecondaryIndexes(globalSecondaryIndexes: List<GlobalSecondaryIndexInfo>): FluentBuilder
        /**
         * Represents the LSI properties for the table when the backup was created. It includes the IndexName, KeySchema and Projection for the LSIs on the table at the time of backup.
         */
        fun localSecondaryIndexes(localSecondaryIndexes: List<LocalSecondaryIndexInfo>): FluentBuilder
        /**
         * The description of the server-side encryption status on the table when the backup was created.
         */
        fun sseDescription(sseDescription: SseDescription): FluentBuilder
        /**
         * Stream settings on the table when the backup was created.
         */
        fun streamDescription(streamDescription: StreamSpecification): FluentBuilder
        /**
         * Time to Live settings on the table when the backup was created.
         */
        fun timeToLiveDescription(timeToLiveDescription: TimeToLiveDescription): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Represents the GSI properties for the table when the backup was created. It includes the
         * IndexName, KeySchema, Projection, and ProvisionedThroughput for the GSIs on the table at
         * the time of backup.
         */
        var globalSecondaryIndexes: List<GlobalSecondaryIndexInfo>?
        /**
         * Represents the LSI properties for the table when the backup was created. It includes the IndexName, KeySchema and Projection for the LSIs on the table at the time of backup.
         */
        var localSecondaryIndexes: List<LocalSecondaryIndexInfo>?
        /**
         * The description of the server-side encryption status on the table when the backup was created.
         */
        var sseDescription: SseDescription?
        /**
         * Stream settings on the table when the backup was created.
         */
        var streamDescription: StreamSpecification?
        /**
         * Time to Live settings on the table when the backup was created.
         */
        var timeToLiveDescription: TimeToLiveDescription?

        fun build(): SourceTableFeatureDetails
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.SseDescription] inside the given [block]
         */
        fun sseDescription(block: SseDescription.DslBuilder.() -> kotlin.Unit) {
            this.sseDescription = SseDescription.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.StreamSpecification] inside the given [block]
         */
        fun streamDescription(block: StreamSpecification.DslBuilder.() -> kotlin.Unit) {
            this.streamDescription = StreamSpecification.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.TimeToLiveDescription] inside the given [block]
         */
        fun timeToLiveDescription(block: TimeToLiveDescription.DslBuilder.() -> kotlin.Unit) {
            this.timeToLiveDescription = TimeToLiveDescription.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var globalSecondaryIndexes: List<GlobalSecondaryIndexInfo>? = null
        override var localSecondaryIndexes: List<LocalSecondaryIndexInfo>? = null
        override var sseDescription: SseDescription? = null
        override var streamDescription: StreamSpecification? = null
        override var timeToLiveDescription: TimeToLiveDescription? = null

        constructor(x: SourceTableFeatureDetails) : this() {
            this.globalSecondaryIndexes = x.globalSecondaryIndexes
            this.localSecondaryIndexes = x.localSecondaryIndexes
            this.sseDescription = x.sseDescription
            this.streamDescription = x.streamDescription
            this.timeToLiveDescription = x.timeToLiveDescription
        }

        override fun build(): SourceTableFeatureDetails = SourceTableFeatureDetails(this)
        override fun globalSecondaryIndexes(globalSecondaryIndexes: List<GlobalSecondaryIndexInfo>): FluentBuilder = apply { this.globalSecondaryIndexes = globalSecondaryIndexes }
        override fun localSecondaryIndexes(localSecondaryIndexes: List<LocalSecondaryIndexInfo>): FluentBuilder = apply { this.localSecondaryIndexes = localSecondaryIndexes }
        override fun sseDescription(sseDescription: SseDescription): FluentBuilder = apply { this.sseDescription = sseDescription }
        override fun streamDescription(streamDescription: StreamSpecification): FluentBuilder = apply { this.streamDescription = streamDescription }
        override fun timeToLiveDescription(timeToLiveDescription: TimeToLiveDescription): FluentBuilder = apply { this.timeToLiveDescription = timeToLiveDescription }
    }
}
