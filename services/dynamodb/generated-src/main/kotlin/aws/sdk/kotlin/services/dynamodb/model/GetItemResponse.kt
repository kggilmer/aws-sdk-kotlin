// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents the output of a GetItem operation.
 */
class GetItemResponse private constructor(builder: BuilderImpl) {
    /**
     * The capacity units consumed by the GetItem operation. The data returned
     * includes the total provisioned throughput consumed, along with statistics for the table
     * and any indexes involved in the operation. ConsumedCapacity is only
     * returned if the ReturnConsumedCapacity parameter was specified. For more
     * information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Read/Write Capacity Mode in the Amazon DynamoDB Developer
     * Guide.
     */
    val consumedCapacity: ConsumedCapacity? = builder.consumedCapacity
    /**
     * A map of attribute names to AttributeValue objects, as specified
     * by ProjectionExpression.
     */
    val item: Map<String, AttributeValue>? = builder.item

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): GetItemResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("GetItemResponse(")
        append("consumedCapacity=$consumedCapacity,")
        append("item=$item)")
    }

    override fun hashCode(): kotlin.Int {
        var result = consumedCapacity?.hashCode() ?: 0
        result = 31 * result + (item?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as GetItemResponse

        if (consumedCapacity != other.consumedCapacity) return false
        if (item != other.item) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): GetItemResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): GetItemResponse
        /**
         * The capacity units consumed by the GetItem operation. The data returned
         * includes the total provisioned throughput consumed, along with statistics for the table
         * and any indexes involved in the operation. ConsumedCapacity is only
         * returned if the ReturnConsumedCapacity parameter was specified. For more
         * information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Read/Write Capacity Mode in the Amazon DynamoDB Developer
         * Guide.
         */
        fun consumedCapacity(consumedCapacity: ConsumedCapacity): FluentBuilder
        /**
         * A map of attribute names to AttributeValue objects, as specified
         * by ProjectionExpression.
         */
        fun item(item: Map<String, AttributeValue>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The capacity units consumed by the GetItem operation. The data returned
         * includes the total provisioned throughput consumed, along with statistics for the table
         * and any indexes involved in the operation. ConsumedCapacity is only
         * returned if the ReturnConsumedCapacity parameter was specified. For more
         * information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Read/Write Capacity Mode in the Amazon DynamoDB Developer
         * Guide.
         */
        var consumedCapacity: ConsumedCapacity?
        /**
         * A map of attribute names to AttributeValue objects, as specified
         * by ProjectionExpression.
         */
        var item: Map<String, AttributeValue>?

        fun build(): GetItemResponse
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.ConsumedCapacity] inside the given [block]
         */
        fun consumedCapacity(block: ConsumedCapacity.DslBuilder.() -> kotlin.Unit) {
            this.consumedCapacity = ConsumedCapacity.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var consumedCapacity: ConsumedCapacity? = null
        override var item: Map<String, AttributeValue>? = null

        constructor(x: GetItemResponse) : this() {
            this.consumedCapacity = x.consumedCapacity
            this.item = x.item
        }

        override fun build(): GetItemResponse = GetItemResponse(this)
        override fun consumedCapacity(consumedCapacity: ConsumedCapacity): FluentBuilder = apply { this.consumedCapacity = consumedCapacity }
        override fun item(item: Map<String, AttributeValue>): FluentBuilder = apply { this.item = item }
    }
}
