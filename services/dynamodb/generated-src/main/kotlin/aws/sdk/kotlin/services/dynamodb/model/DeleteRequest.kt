// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents a request to perform a DeleteItem operation on an item.
 */
class DeleteRequest private constructor(builder: BuilderImpl) {
    /**
     * A map of attribute name to attribute values, representing the primary key of the item to delete. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema.
     */
    val key: Map<String, AttributeValue>? = builder.key

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): DeleteRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("DeleteRequest(")
        append("key=$key)")
    }

    override fun hashCode(): kotlin.Int {
        var result = key?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DeleteRequest

        if (key != other.key) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): DeleteRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): DeleteRequest
        /**
         * A map of attribute name to attribute values, representing the primary key of the item to delete. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema.
         */
        fun key(key: Map<String, AttributeValue>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * A map of attribute name to attribute values, representing the primary key of the item to delete. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema.
         */
        var key: Map<String, AttributeValue>?

        fun build(): DeleteRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var key: Map<String, AttributeValue>? = null

        constructor(x: DeleteRequest) : this() {
            this.key = x.key
        }

        override fun build(): DeleteRequest = DeleteRequest(this)
        override fun key(key: Map<String, AttributeValue>): FluentBuilder = apply { this.key = key }
    }
}
