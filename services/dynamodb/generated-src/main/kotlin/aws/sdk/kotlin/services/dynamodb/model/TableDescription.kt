// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model

import aws.smithy.kotlin.runtime.time.Instant

/**
 * Represents the properties of a table.
 */
class TableDescription private constructor(builder: BuilderImpl) {
    /**
     * Contains information about the table archive.
     */
    val archivalSummary: ArchivalSummary? = builder.archivalSummary
    /**
     * An array of AttributeDefinition objects. Each of these objects describes one attribute
     * in the table and index key schema.
     * Each AttributeDefinition object in this array is composed of:
     * AttributeName - The name of the attribute.
     * AttributeType - The data type for the attribute.
     */
    val attributeDefinitions: List<AttributeDefinition>? = builder.attributeDefinitions
    /**
     * Contains the details for the read/write capacity mode.
     */
    val billingModeSummary: BillingModeSummary? = builder.billingModeSummary
    /**
     * The date and time when the table was created, in <a href="http://www.epochconverter.com/">UNIX epoch time format.
     */
    val creationDateTime: Instant? = builder.creationDateTime
    /**
     * The global secondary indexes, if any, on the table. Each index is scoped to a given partition key value. Each element is composed of:
     * Backfilling - If true, then the index is currently in the backfilling
     * phase. Backfilling occurs only when a new global secondary index is added to the
     * table. It is the process by which DynamoDB populates the new index with data from the
     * table. (This attribute does not appear for indexes that were created during a
     * CreateTable operation.)
     * You can delete an index that is being created during the Backfilling
     * phase when IndexStatus is set to CREATING and Backfilling
     * is true. You can't delete the index that is being created when
     * IndexStatus is set to CREATING and Backfilling is false.
     * (This attribute does not appear for indexes that were created during a
     * CreateTable operation.)
     * IndexName - The name of the global secondary index.
     * IndexSizeBytes - The total size of the global secondary index, in bytes. DynamoDB updates this value approximately every six
     * hours. Recent changes might not be reflected in this value.
     * IndexStatus - The current status of the global secondary index:
     * CREATING - The index is being created.
     * UPDATING - The index is being updated.
     * DELETING - The index is being deleted.
     * ACTIVE - The index is ready for use.
     * ItemCount - The number of items in the global secondary index. DynamoDB updates this value approximately every six
     * hours. Recent changes might not be reflected in this value.
     * KeySchema - Specifies the complete index key schema. The attribute names in the
     * key schema must be between 1 and 255 characters (inclusive). The key schema must begin
     * with the same partition key as the table.
     * Projection - Specifies
     * attributes that are copied (projected) from the table into the index. These are in
     * addition to the primary key attributes and index key
     * attributes, which are automatically projected. Each
     * attribute specification is composed of:
     * ProjectionType - One
     * of the following:
     * KEYS_ONLY - Only the index and primary keys are projected into the
     * index.
     * INCLUDE - In addition to the attributes described in KEYS_ONLY, the secondary index will include other non-key attributes that you specify.
     * ALL - All of the table attributes are projected into the
     * index.
     * NonKeyAttributes - A list of one or more non-key attribute names that are
     * projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
     * ProvisionedThroughput - The provisioned throughput settings for the global secondary index,
     * consisting of read and write capacity units, along with data about increases and
     * decreases.
     * If the table is in the DELETING state, no information about indexes will be
     * returned.
     */
    val globalSecondaryIndexes: List<GlobalSecondaryIndexDescription>? = builder.globalSecondaryIndexes
    /**
     * Represents the version of <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html">global tables in use, if the table is replicated across AWS Regions.
     */
    val globalTableVersion: String? = builder.globalTableVersion
    /**
     * The number of items in the specified table. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
     */
    val itemCount: Long = builder.itemCount
    /**
     * The primary key structure for the table. Each KeySchemaElement consists of:
     * AttributeName - The name of the attribute.
     * KeyType - The role of the attribute:
     * HASH -  partition key
     * RANGE - sort key
     * The partition key of an item is also known as its hash attribute.  The
     * term "hash attribute" derives from DynamoDB's usage of an internal hash function to
     * evenly distribute data items across partitions, based on their partition key values.
     * The sort key of an item is also known as its range attribute.
     * The term "range attribute" derives from the way DynamoDB stores items with the same
     * partition key physically close together, in sorted order by the sort key value.
     * For more information about primary keys, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey">Primary Key in the
     * Amazon DynamoDB Developer Guide.
     */
    val keySchema: List<KeySchemaElement>? = builder.keySchema
    /**
     * The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.
     */
    val latestStreamArn: String? = builder.latestStreamArn
    /**
     * A timestamp, in ISO 8601 format, for this stream.
     * Note that LatestStreamLabel is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:
     * AWS customer ID
     * Table name
     * StreamLabel
     */
    val latestStreamLabel: String? = builder.latestStreamLabel
    /**
     * Represents one or more local secondary indexes on the table. Each index is scoped to a given partition key value. Tables with one or more local secondary indexes are subject to an item collection size limit, where the amount of data within a given item collection cannot exceed 10 GB. Each element is composed of:
     * IndexName - The name of the local secondary index.
     * KeySchema - Specifies the complete index key schema. The attribute names in the
     * key schema must be between 1 and 255 characters (inclusive). The key schema must begin
     * with the same partition key as the table.
     * Projection - Specifies
     * attributes that are copied (projected) from the table into the index. These are in
     * addition to the primary key attributes and index key
     * attributes, which are automatically projected. Each
     * attribute specification is composed of:
     * ProjectionType - One
     * of the following:
     * KEYS_ONLY - Only the index and primary keys are projected into the
     * index.
     * INCLUDE - Only the specified table attributes are projected
     * into the index. The list of projected attributes is in
     * NonKeyAttributes.
     * ALL - All of the table attributes are projected into the
     * index.
     * NonKeyAttributes - A list of one or more non-key attribute names that are
     * projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
     * IndexSizeBytes - Represents the total size of the index, in bytes. DynamoDB updates
     * this value approximately every six hours. Recent changes might not be reflected in this
     * value.
     * ItemCount - Represents the number of items in the index. DynamoDB updates this value
     * approximately every six hours. Recent changes might not be reflected in this value.
     * If the table is in the DELETING state, no information about indexes will be
     * returned.
     */
    val localSecondaryIndexes: List<LocalSecondaryIndexDescription>? = builder.localSecondaryIndexes
    /**
     * The provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.
     */
    val provisionedThroughput: ProvisionedThroughputDescription? = builder.provisionedThroughput
    /**
     * Represents replicas of the table.
     */
    val replicas: List<ReplicaDescription>? = builder.replicas
    /**
     * Contains details for the restore.
     */
    val restoreSummary: RestoreSummary? = builder.restoreSummary
    /**
     * The description of the server-side encryption status on the specified table.
     */
    val sseDescription: SseDescription? = builder.sseDescription
    /**
     * The current DynamoDB Streams configuration for the table.
     */
    val streamSpecification: StreamSpecification? = builder.streamSpecification
    /**
     * The Amazon Resource Name (ARN) that uniquely identifies the table.
     */
    val tableArn: String? = builder.tableArn
    /**
     * Unique identifier for the table for which the backup was created.
     */
    val tableId: String? = builder.tableId
    /**
     * The name of the table.
     */
    val tableName: String? = builder.tableName
    /**
     * The total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
     */
    val tableSizeBytes: Long = builder.tableSizeBytes
    /**
     * The current state of the table:
     * CREATING - The table is being created.
     * UPDATING - The table is being updated.
     * DELETING - The table is being deleted.
     * ACTIVE - The table is ready for use.
     * INACCESSIBLE_ENCRYPTION_CREDENTIALS - The AWS KMS
     * key used to encrypt the table in inaccessible. Table operations
     * may fail due to failure to use the AWS KMS key. DynamoDB will
     * initiate the table archival process when a table's AWS KMS key
     * remains inaccessible for more than seven days.
     * ARCHIVING - The table is being archived. Operations
     * are not allowed until archival is complete.
     * ARCHIVED - The table has been archived. See the
     * ArchivalReason for more information.
     */
    val tableStatus: TableStatus? = builder.tableStatus

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): TableDescription = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("TableDescription(")
        append("archivalSummary=$archivalSummary,")
        append("attributeDefinitions=$attributeDefinitions,")
        append("billingModeSummary=$billingModeSummary,")
        append("creationDateTime=$creationDateTime,")
        append("globalSecondaryIndexes=$globalSecondaryIndexes,")
        append("globalTableVersion=$globalTableVersion,")
        append("itemCount=$itemCount,")
        append("keySchema=$keySchema,")
        append("latestStreamArn=$latestStreamArn,")
        append("latestStreamLabel=$latestStreamLabel,")
        append("localSecondaryIndexes=$localSecondaryIndexes,")
        append("provisionedThroughput=$provisionedThroughput,")
        append("replicas=$replicas,")
        append("restoreSummary=$restoreSummary,")
        append("sseDescription=$sseDescription,")
        append("streamSpecification=$streamSpecification,")
        append("tableArn=$tableArn,")
        append("tableId=$tableId,")
        append("tableName=$tableName,")
        append("tableSizeBytes=$tableSizeBytes,")
        append("tableStatus=$tableStatus)")
    }

    override fun hashCode(): kotlin.Int {
        var result = archivalSummary?.hashCode() ?: 0
        result = 31 * result + (attributeDefinitions?.hashCode() ?: 0)
        result = 31 * result + (billingModeSummary?.hashCode() ?: 0)
        result = 31 * result + (creationDateTime?.hashCode() ?: 0)
        result = 31 * result + (globalSecondaryIndexes?.hashCode() ?: 0)
        result = 31 * result + (globalTableVersion?.hashCode() ?: 0)
        result = 31 * result + (itemCount.hashCode())
        result = 31 * result + (keySchema?.hashCode() ?: 0)
        result = 31 * result + (latestStreamArn?.hashCode() ?: 0)
        result = 31 * result + (latestStreamLabel?.hashCode() ?: 0)
        result = 31 * result + (localSecondaryIndexes?.hashCode() ?: 0)
        result = 31 * result + (provisionedThroughput?.hashCode() ?: 0)
        result = 31 * result + (replicas?.hashCode() ?: 0)
        result = 31 * result + (restoreSummary?.hashCode() ?: 0)
        result = 31 * result + (sseDescription?.hashCode() ?: 0)
        result = 31 * result + (streamSpecification?.hashCode() ?: 0)
        result = 31 * result + (tableArn?.hashCode() ?: 0)
        result = 31 * result + (tableId?.hashCode() ?: 0)
        result = 31 * result + (tableName?.hashCode() ?: 0)
        result = 31 * result + (tableSizeBytes.hashCode())
        result = 31 * result + (tableStatus?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as TableDescription

        if (archivalSummary != other.archivalSummary) return false
        if (attributeDefinitions != other.attributeDefinitions) return false
        if (billingModeSummary != other.billingModeSummary) return false
        if (creationDateTime != other.creationDateTime) return false
        if (globalSecondaryIndexes != other.globalSecondaryIndexes) return false
        if (globalTableVersion != other.globalTableVersion) return false
        if (itemCount != other.itemCount) return false
        if (keySchema != other.keySchema) return false
        if (latestStreamArn != other.latestStreamArn) return false
        if (latestStreamLabel != other.latestStreamLabel) return false
        if (localSecondaryIndexes != other.localSecondaryIndexes) return false
        if (provisionedThroughput != other.provisionedThroughput) return false
        if (replicas != other.replicas) return false
        if (restoreSummary != other.restoreSummary) return false
        if (sseDescription != other.sseDescription) return false
        if (streamSpecification != other.streamSpecification) return false
        if (tableArn != other.tableArn) return false
        if (tableId != other.tableId) return false
        if (tableName != other.tableName) return false
        if (tableSizeBytes != other.tableSizeBytes) return false
        if (tableStatus != other.tableStatus) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): TableDescription = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): TableDescription
        /**
         * Contains information about the table archive.
         */
        fun archivalSummary(archivalSummary: ArchivalSummary): FluentBuilder
        /**
         * An array of AttributeDefinition objects. Each of these objects describes one attribute
         * in the table and index key schema.
         * Each AttributeDefinition object in this array is composed of:
         * AttributeName - The name of the attribute.
         * AttributeType - The data type for the attribute.
         */
        fun attributeDefinitions(attributeDefinitions: List<AttributeDefinition>): FluentBuilder
        /**
         * Contains the details for the read/write capacity mode.
         */
        fun billingModeSummary(billingModeSummary: BillingModeSummary): FluentBuilder
        /**
         * The date and time when the table was created, in <a href="http://www.epochconverter.com/">UNIX epoch time format.
         */
        fun creationDateTime(creationDateTime: Instant): FluentBuilder
        /**
         * The global secondary indexes, if any, on the table. Each index is scoped to a given partition key value. Each element is composed of:
         * Backfilling - If true, then the index is currently in the backfilling
         * phase. Backfilling occurs only when a new global secondary index is added to the
         * table. It is the process by which DynamoDB populates the new index with data from the
         * table. (This attribute does not appear for indexes that were created during a
         * CreateTable operation.)
         * You can delete an index that is being created during the Backfilling
         * phase when IndexStatus is set to CREATING and Backfilling
         * is true. You can't delete the index that is being created when
         * IndexStatus is set to CREATING and Backfilling is false.
         * (This attribute does not appear for indexes that were created during a
         * CreateTable operation.)
         * IndexName - The name of the global secondary index.
         * IndexSizeBytes - The total size of the global secondary index, in bytes. DynamoDB updates this value approximately every six
         * hours. Recent changes might not be reflected in this value.
         * IndexStatus - The current status of the global secondary index:
         * CREATING - The index is being created.
         * UPDATING - The index is being updated.
         * DELETING - The index is being deleted.
         * ACTIVE - The index is ready for use.
         * ItemCount - The number of items in the global secondary index. DynamoDB updates this value approximately every six
         * hours. Recent changes might not be reflected in this value.
         * KeySchema - Specifies the complete index key schema. The attribute names in the
         * key schema must be between 1 and 255 characters (inclusive). The key schema must begin
         * with the same partition key as the table.
         * Projection - Specifies
         * attributes that are copied (projected) from the table into the index. These are in
         * addition to the primary key attributes and index key
         * attributes, which are automatically projected. Each
         * attribute specification is composed of:
         * ProjectionType - One
         * of the following:
         * KEYS_ONLY - Only the index and primary keys are projected into the
         * index.
         * INCLUDE - In addition to the attributes described in KEYS_ONLY, the secondary index will include other non-key attributes that you specify.
         * ALL - All of the table attributes are projected into the
         * index.
         * NonKeyAttributes - A list of one or more non-key attribute names that are
         * projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
         * ProvisionedThroughput - The provisioned throughput settings for the global secondary index,
         * consisting of read and write capacity units, along with data about increases and
         * decreases.
         * If the table is in the DELETING state, no information about indexes will be
         * returned.
         */
        fun globalSecondaryIndexes(globalSecondaryIndexes: List<GlobalSecondaryIndexDescription>): FluentBuilder
        /**
         * Represents the version of <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html">global tables in use, if the table is replicated across AWS Regions.
         */
        fun globalTableVersion(globalTableVersion: String): FluentBuilder
        /**
         * The number of items in the specified table. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
         */
        fun itemCount(itemCount: Long): FluentBuilder
        /**
         * The primary key structure for the table. Each KeySchemaElement consists of:
         * AttributeName - The name of the attribute.
         * KeyType - The role of the attribute:
         * HASH -  partition key
         * RANGE - sort key
         * The partition key of an item is also known as its hash attribute.  The
         * term "hash attribute" derives from DynamoDB's usage of an internal hash function to
         * evenly distribute data items across partitions, based on their partition key values.
         * The sort key of an item is also known as its range attribute.
         * The term "range attribute" derives from the way DynamoDB stores items with the same
         * partition key physically close together, in sorted order by the sort key value.
         * For more information about primary keys, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey">Primary Key in the
         * Amazon DynamoDB Developer Guide.
         */
        fun keySchema(keySchema: List<KeySchemaElement>): FluentBuilder
        /**
         * The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.
         */
        fun latestStreamArn(latestStreamArn: String): FluentBuilder
        /**
         * A timestamp, in ISO 8601 format, for this stream.
         * Note that LatestStreamLabel is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:
         * AWS customer ID
         * Table name
         * StreamLabel
         */
        fun latestStreamLabel(latestStreamLabel: String): FluentBuilder
        /**
         * Represents one or more local secondary indexes on the table. Each index is scoped to a given partition key value. Tables with one or more local secondary indexes are subject to an item collection size limit, where the amount of data within a given item collection cannot exceed 10 GB. Each element is composed of:
         * IndexName - The name of the local secondary index.
         * KeySchema - Specifies the complete index key schema. The attribute names in the
         * key schema must be between 1 and 255 characters (inclusive). The key schema must begin
         * with the same partition key as the table.
         * Projection - Specifies
         * attributes that are copied (projected) from the table into the index. These are in
         * addition to the primary key attributes and index key
         * attributes, which are automatically projected. Each
         * attribute specification is composed of:
         * ProjectionType - One
         * of the following:
         * KEYS_ONLY - Only the index and primary keys are projected into the
         * index.
         * INCLUDE - Only the specified table attributes are projected
         * into the index. The list of projected attributes is in
         * NonKeyAttributes.
         * ALL - All of the table attributes are projected into the
         * index.
         * NonKeyAttributes - A list of one or more non-key attribute names that are
         * projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
         * IndexSizeBytes - Represents the total size of the index, in bytes. DynamoDB updates
         * this value approximately every six hours. Recent changes might not be reflected in this
         * value.
         * ItemCount - Represents the number of items in the index. DynamoDB updates this value
         * approximately every six hours. Recent changes might not be reflected in this value.
         * If the table is in the DELETING state, no information about indexes will be
         * returned.
         */
        fun localSecondaryIndexes(localSecondaryIndexes: List<LocalSecondaryIndexDescription>): FluentBuilder
        /**
         * The provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.
         */
        fun provisionedThroughput(provisionedThroughput: ProvisionedThroughputDescription): FluentBuilder
        /**
         * Represents replicas of the table.
         */
        fun replicas(replicas: List<ReplicaDescription>): FluentBuilder
        /**
         * Contains details for the restore.
         */
        fun restoreSummary(restoreSummary: RestoreSummary): FluentBuilder
        /**
         * The description of the server-side encryption status on the specified table.
         */
        fun sseDescription(sseDescription: SseDescription): FluentBuilder
        /**
         * The current DynamoDB Streams configuration for the table.
         */
        fun streamSpecification(streamSpecification: StreamSpecification): FluentBuilder
        /**
         * The Amazon Resource Name (ARN) that uniquely identifies the table.
         */
        fun tableArn(tableArn: String): FluentBuilder
        /**
         * Unique identifier for the table for which the backup was created.
         */
        fun tableId(tableId: String): FluentBuilder
        /**
         * The name of the table.
         */
        fun tableName(tableName: String): FluentBuilder
        /**
         * The total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
         */
        fun tableSizeBytes(tableSizeBytes: Long): FluentBuilder
        /**
         * The current state of the table:
         * CREATING - The table is being created.
         * UPDATING - The table is being updated.
         * DELETING - The table is being deleted.
         * ACTIVE - The table is ready for use.
         * INACCESSIBLE_ENCRYPTION_CREDENTIALS - The AWS KMS
         * key used to encrypt the table in inaccessible. Table operations
         * may fail due to failure to use the AWS KMS key. DynamoDB will
         * initiate the table archival process when a table's AWS KMS key
         * remains inaccessible for more than seven days.
         * ARCHIVING - The table is being archived. Operations
         * are not allowed until archival is complete.
         * ARCHIVED - The table has been archived. See the
         * ArchivalReason for more information.
         */
        fun tableStatus(tableStatus: TableStatus): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Contains information about the table archive.
         */
        var archivalSummary: ArchivalSummary?
        /**
         * An array of AttributeDefinition objects. Each of these objects describes one attribute
         * in the table and index key schema.
         * Each AttributeDefinition object in this array is composed of:
         * AttributeName - The name of the attribute.
         * AttributeType - The data type for the attribute.
         */
        var attributeDefinitions: List<AttributeDefinition>?
        /**
         * Contains the details for the read/write capacity mode.
         */
        var billingModeSummary: BillingModeSummary?
        /**
         * The date and time when the table was created, in <a href="http://www.epochconverter.com/">UNIX epoch time format.
         */
        var creationDateTime: Instant?
        /**
         * The global secondary indexes, if any, on the table. Each index is scoped to a given partition key value. Each element is composed of:
         * Backfilling - If true, then the index is currently in the backfilling
         * phase. Backfilling occurs only when a new global secondary index is added to the
         * table. It is the process by which DynamoDB populates the new index with data from the
         * table. (This attribute does not appear for indexes that were created during a
         * CreateTable operation.)
         * You can delete an index that is being created during the Backfilling
         * phase when IndexStatus is set to CREATING and Backfilling
         * is true. You can't delete the index that is being created when
         * IndexStatus is set to CREATING and Backfilling is false.
         * (This attribute does not appear for indexes that were created during a
         * CreateTable operation.)
         * IndexName - The name of the global secondary index.
         * IndexSizeBytes - The total size of the global secondary index, in bytes. DynamoDB updates this value approximately every six
         * hours. Recent changes might not be reflected in this value.
         * IndexStatus - The current status of the global secondary index:
         * CREATING - The index is being created.
         * UPDATING - The index is being updated.
         * DELETING - The index is being deleted.
         * ACTIVE - The index is ready for use.
         * ItemCount - The number of items in the global secondary index. DynamoDB updates this value approximately every six
         * hours. Recent changes might not be reflected in this value.
         * KeySchema - Specifies the complete index key schema. The attribute names in the
         * key schema must be between 1 and 255 characters (inclusive). The key schema must begin
         * with the same partition key as the table.
         * Projection - Specifies
         * attributes that are copied (projected) from the table into the index. These are in
         * addition to the primary key attributes and index key
         * attributes, which are automatically projected. Each
         * attribute specification is composed of:
         * ProjectionType - One
         * of the following:
         * KEYS_ONLY - Only the index and primary keys are projected into the
         * index.
         * INCLUDE - In addition to the attributes described in KEYS_ONLY, the secondary index will include other non-key attributes that you specify.
         * ALL - All of the table attributes are projected into the
         * index.
         * NonKeyAttributes - A list of one or more non-key attribute names that are
         * projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
         * ProvisionedThroughput - The provisioned throughput settings for the global secondary index,
         * consisting of read and write capacity units, along with data about increases and
         * decreases.
         * If the table is in the DELETING state, no information about indexes will be
         * returned.
         */
        var globalSecondaryIndexes: List<GlobalSecondaryIndexDescription>?
        /**
         * Represents the version of <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html">global tables in use, if the table is replicated across AWS Regions.
         */
        var globalTableVersion: String?
        /**
         * The number of items in the specified table. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
         */
        var itemCount: Long
        /**
         * The primary key structure for the table. Each KeySchemaElement consists of:
         * AttributeName - The name of the attribute.
         * KeyType - The role of the attribute:
         * HASH -  partition key
         * RANGE - sort key
         * The partition key of an item is also known as its hash attribute.  The
         * term "hash attribute" derives from DynamoDB's usage of an internal hash function to
         * evenly distribute data items across partitions, based on their partition key values.
         * The sort key of an item is also known as its range attribute.
         * The term "range attribute" derives from the way DynamoDB stores items with the same
         * partition key physically close together, in sorted order by the sort key value.
         * For more information about primary keys, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey">Primary Key in the
         * Amazon DynamoDB Developer Guide.
         */
        var keySchema: List<KeySchemaElement>?
        /**
         * The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.
         */
        var latestStreamArn: String?
        /**
         * A timestamp, in ISO 8601 format, for this stream.
         * Note that LatestStreamLabel is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:
         * AWS customer ID
         * Table name
         * StreamLabel
         */
        var latestStreamLabel: String?
        /**
         * Represents one or more local secondary indexes on the table. Each index is scoped to a given partition key value. Tables with one or more local secondary indexes are subject to an item collection size limit, where the amount of data within a given item collection cannot exceed 10 GB. Each element is composed of:
         * IndexName - The name of the local secondary index.
         * KeySchema - Specifies the complete index key schema. The attribute names in the
         * key schema must be between 1 and 255 characters (inclusive). The key schema must begin
         * with the same partition key as the table.
         * Projection - Specifies
         * attributes that are copied (projected) from the table into the index. These are in
         * addition to the primary key attributes and index key
         * attributes, which are automatically projected. Each
         * attribute specification is composed of:
         * ProjectionType - One
         * of the following:
         * KEYS_ONLY - Only the index and primary keys are projected into the
         * index.
         * INCLUDE - Only the specified table attributes are projected
         * into the index. The list of projected attributes is in
         * NonKeyAttributes.
         * ALL - All of the table attributes are projected into the
         * index.
         * NonKeyAttributes - A list of one or more non-key attribute names that are
         * projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
         * IndexSizeBytes - Represents the total size of the index, in bytes. DynamoDB updates
         * this value approximately every six hours. Recent changes might not be reflected in this
         * value.
         * ItemCount - Represents the number of items in the index. DynamoDB updates this value
         * approximately every six hours. Recent changes might not be reflected in this value.
         * If the table is in the DELETING state, no information about indexes will be
         * returned.
         */
        var localSecondaryIndexes: List<LocalSecondaryIndexDescription>?
        /**
         * The provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.
         */
        var provisionedThroughput: ProvisionedThroughputDescription?
        /**
         * Represents replicas of the table.
         */
        var replicas: List<ReplicaDescription>?
        /**
         * Contains details for the restore.
         */
        var restoreSummary: RestoreSummary?
        /**
         * The description of the server-side encryption status on the specified table.
         */
        var sseDescription: SseDescription?
        /**
         * The current DynamoDB Streams configuration for the table.
         */
        var streamSpecification: StreamSpecification?
        /**
         * The Amazon Resource Name (ARN) that uniquely identifies the table.
         */
        var tableArn: String?
        /**
         * Unique identifier for the table for which the backup was created.
         */
        var tableId: String?
        /**
         * The name of the table.
         */
        var tableName: String?
        /**
         * The total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
         */
        var tableSizeBytes: Long
        /**
         * The current state of the table:
         * CREATING - The table is being created.
         * UPDATING - The table is being updated.
         * DELETING - The table is being deleted.
         * ACTIVE - The table is ready for use.
         * INACCESSIBLE_ENCRYPTION_CREDENTIALS - The AWS KMS
         * key used to encrypt the table in inaccessible. Table operations
         * may fail due to failure to use the AWS KMS key. DynamoDB will
         * initiate the table archival process when a table's AWS KMS key
         * remains inaccessible for more than seven days.
         * ARCHIVING - The table is being archived. Operations
         * are not allowed until archival is complete.
         * ARCHIVED - The table has been archived. See the
         * ArchivalReason for more information.
         */
        var tableStatus: TableStatus?

        fun build(): TableDescription
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.ArchivalSummary] inside the given [block]
         */
        fun archivalSummary(block: ArchivalSummary.DslBuilder.() -> kotlin.Unit) {
            this.archivalSummary = ArchivalSummary.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.BillingModeSummary] inside the given [block]
         */
        fun billingModeSummary(block: BillingModeSummary.DslBuilder.() -> kotlin.Unit) {
            this.billingModeSummary = BillingModeSummary.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.ProvisionedThroughputDescription] inside the given [block]
         */
        fun provisionedThroughput(block: ProvisionedThroughputDescription.DslBuilder.() -> kotlin.Unit) {
            this.provisionedThroughput = ProvisionedThroughputDescription.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.RestoreSummary] inside the given [block]
         */
        fun restoreSummary(block: RestoreSummary.DslBuilder.() -> kotlin.Unit) {
            this.restoreSummary = RestoreSummary.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.SseDescription] inside the given [block]
         */
        fun sseDescription(block: SseDescription.DslBuilder.() -> kotlin.Unit) {
            this.sseDescription = SseDescription.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.StreamSpecification] inside the given [block]
         */
        fun streamSpecification(block: StreamSpecification.DslBuilder.() -> kotlin.Unit) {
            this.streamSpecification = StreamSpecification.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var archivalSummary: ArchivalSummary? = null
        override var attributeDefinitions: List<AttributeDefinition>? = null
        override var billingModeSummary: BillingModeSummary? = null
        override var creationDateTime: Instant? = null
        override var globalSecondaryIndexes: List<GlobalSecondaryIndexDescription>? = null
        override var globalTableVersion: String? = null
        override var itemCount: Long = 0L
        override var keySchema: List<KeySchemaElement>? = null
        override var latestStreamArn: String? = null
        override var latestStreamLabel: String? = null
        override var localSecondaryIndexes: List<LocalSecondaryIndexDescription>? = null
        override var provisionedThroughput: ProvisionedThroughputDescription? = null
        override var replicas: List<ReplicaDescription>? = null
        override var restoreSummary: RestoreSummary? = null
        override var sseDescription: SseDescription? = null
        override var streamSpecification: StreamSpecification? = null
        override var tableArn: String? = null
        override var tableId: String? = null
        override var tableName: String? = null
        override var tableSizeBytes: Long = 0L
        override var tableStatus: TableStatus? = null

        constructor(x: TableDescription) : this() {
            this.archivalSummary = x.archivalSummary
            this.attributeDefinitions = x.attributeDefinitions
            this.billingModeSummary = x.billingModeSummary
            this.creationDateTime = x.creationDateTime
            this.globalSecondaryIndexes = x.globalSecondaryIndexes
            this.globalTableVersion = x.globalTableVersion
            this.itemCount = x.itemCount
            this.keySchema = x.keySchema
            this.latestStreamArn = x.latestStreamArn
            this.latestStreamLabel = x.latestStreamLabel
            this.localSecondaryIndexes = x.localSecondaryIndexes
            this.provisionedThroughput = x.provisionedThroughput
            this.replicas = x.replicas
            this.restoreSummary = x.restoreSummary
            this.sseDescription = x.sseDescription
            this.streamSpecification = x.streamSpecification
            this.tableArn = x.tableArn
            this.tableId = x.tableId
            this.tableName = x.tableName
            this.tableSizeBytes = x.tableSizeBytes
            this.tableStatus = x.tableStatus
        }

        override fun build(): TableDescription = TableDescription(this)
        override fun archivalSummary(archivalSummary: ArchivalSummary): FluentBuilder = apply { this.archivalSummary = archivalSummary }
        override fun attributeDefinitions(attributeDefinitions: List<AttributeDefinition>): FluentBuilder = apply { this.attributeDefinitions = attributeDefinitions }
        override fun billingModeSummary(billingModeSummary: BillingModeSummary): FluentBuilder = apply { this.billingModeSummary = billingModeSummary }
        override fun creationDateTime(creationDateTime: Instant): FluentBuilder = apply { this.creationDateTime = creationDateTime }
        override fun globalSecondaryIndexes(globalSecondaryIndexes: List<GlobalSecondaryIndexDescription>): FluentBuilder = apply { this.globalSecondaryIndexes = globalSecondaryIndexes }
        override fun globalTableVersion(globalTableVersion: String): FluentBuilder = apply { this.globalTableVersion = globalTableVersion }
        override fun itemCount(itemCount: Long): FluentBuilder = apply { this.itemCount = itemCount }
        override fun keySchema(keySchema: List<KeySchemaElement>): FluentBuilder = apply { this.keySchema = keySchema }
        override fun latestStreamArn(latestStreamArn: String): FluentBuilder = apply { this.latestStreamArn = latestStreamArn }
        override fun latestStreamLabel(latestStreamLabel: String): FluentBuilder = apply { this.latestStreamLabel = latestStreamLabel }
        override fun localSecondaryIndexes(localSecondaryIndexes: List<LocalSecondaryIndexDescription>): FluentBuilder = apply { this.localSecondaryIndexes = localSecondaryIndexes }
        override fun provisionedThroughput(provisionedThroughput: ProvisionedThroughputDescription): FluentBuilder = apply { this.provisionedThroughput = provisionedThroughput }
        override fun replicas(replicas: List<ReplicaDescription>): FluentBuilder = apply { this.replicas = replicas }
        override fun restoreSummary(restoreSummary: RestoreSummary): FluentBuilder = apply { this.restoreSummary = restoreSummary }
        override fun sseDescription(sseDescription: SseDescription): FluentBuilder = apply { this.sseDescription = sseDescription }
        override fun streamSpecification(streamSpecification: StreamSpecification): FluentBuilder = apply { this.streamSpecification = streamSpecification }
        override fun tableArn(tableArn: String): FluentBuilder = apply { this.tableArn = tableArn }
        override fun tableId(tableId: String): FluentBuilder = apply { this.tableId = tableId }
        override fun tableName(tableName: String): FluentBuilder = apply { this.tableName = tableName }
        override fun tableSizeBytes(tableSizeBytes: Long): FluentBuilder = apply { this.tableSizeBytes = tableSizeBytes }
        override fun tableStatus(tableStatus: TableStatus): FluentBuilder = apply { this.tableStatus = tableStatus }
    }
}
