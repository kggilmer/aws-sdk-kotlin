// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents a request to perform a PutItem operation on an item.
 */
class PutRequest private constructor(builder: BuilderImpl) {
    /**
     * A map of attribute name to attribute values, representing the primary key of an item to
     * be processed by PutItem. All of the table's primary key attributes must be
     * specified, and their data types must match those of the table's key schema. If any
     * attributes are present in the item that are part of an index key schema for the table,
     * their types must match the index key schema.
     */
    val item: Map<String, AttributeValue>? = builder.item

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): PutRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("PutRequest(")
        append("item=$item)")
    }

    override fun hashCode(): kotlin.Int {
        var result = item?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as PutRequest

        if (item != other.item) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): PutRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): PutRequest
        /**
         * A map of attribute name to attribute values, representing the primary key of an item to
         * be processed by PutItem. All of the table's primary key attributes must be
         * specified, and their data types must match those of the table's key schema. If any
         * attributes are present in the item that are part of an index key schema for the table,
         * their types must match the index key schema.
         */
        fun item(item: Map<String, AttributeValue>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * A map of attribute name to attribute values, representing the primary key of an item to
         * be processed by PutItem. All of the table's primary key attributes must be
         * specified, and their data types must match those of the table's key schema. If any
         * attributes are present in the item that are part of an index key schema for the table,
         * their types must match the index key schema.
         */
        var item: Map<String, AttributeValue>?

        fun build(): PutRequest
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var item: Map<String, AttributeValue>? = null

        constructor(x: PutRequest) : this() {
            this.item = x.item
        }

        override fun build(): PutRequest = PutRequest(this)
        override fun item(item: Map<String, AttributeValue>): FluentBuilder = apply { this.item = item }
    }
}
