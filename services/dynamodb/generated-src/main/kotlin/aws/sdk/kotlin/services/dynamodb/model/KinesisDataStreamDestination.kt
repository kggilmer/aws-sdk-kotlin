// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Describes a Kinesis data stream destination.
 */
class KinesisDataStreamDestination private constructor(builder: BuilderImpl) {
    /**
     * The current status of replication.
     */
    val destinationStatus: DestinationStatus? = builder.destinationStatus
    /**
     * The human-readable string that corresponds to the replica status.
     */
    val destinationStatusDescription: String? = builder.destinationStatusDescription
    /**
     * The ARN for a specific Kinesis data stream.
     */
    val streamArn: String? = builder.streamArn

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): KinesisDataStreamDestination = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("KinesisDataStreamDestination(")
        append("destinationStatus=$destinationStatus,")
        append("destinationStatusDescription=$destinationStatusDescription,")
        append("streamArn=$streamArn)")
    }

    override fun hashCode(): kotlin.Int {
        var result = destinationStatus?.hashCode() ?: 0
        result = 31 * result + (destinationStatusDescription?.hashCode() ?: 0)
        result = 31 * result + (streamArn?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as KinesisDataStreamDestination

        if (destinationStatus != other.destinationStatus) return false
        if (destinationStatusDescription != other.destinationStatusDescription) return false
        if (streamArn != other.streamArn) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): KinesisDataStreamDestination = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): KinesisDataStreamDestination
        /**
         * The current status of replication.
         */
        fun destinationStatus(destinationStatus: DestinationStatus): FluentBuilder
        /**
         * The human-readable string that corresponds to the replica status.
         */
        fun destinationStatusDescription(destinationStatusDescription: String): FluentBuilder
        /**
         * The ARN for a specific Kinesis data stream.
         */
        fun streamArn(streamArn: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The current status of replication.
         */
        var destinationStatus: DestinationStatus?
        /**
         * The human-readable string that corresponds to the replica status.
         */
        var destinationStatusDescription: String?
        /**
         * The ARN for a specific Kinesis data stream.
         */
        var streamArn: String?

        fun build(): KinesisDataStreamDestination
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var destinationStatus: DestinationStatus? = null
        override var destinationStatusDescription: String? = null
        override var streamArn: String? = null

        constructor(x: KinesisDataStreamDestination) : this() {
            this.destinationStatus = x.destinationStatus
            this.destinationStatusDescription = x.destinationStatusDescription
            this.streamArn = x.streamArn
        }

        override fun build(): KinesisDataStreamDestination = KinesisDataStreamDestination(this)
        override fun destinationStatus(destinationStatus: DestinationStatus): FluentBuilder = apply { this.destinationStatus = destinationStatus }
        override fun destinationStatusDescription(destinationStatusDescription: String): FluentBuilder = apply { this.destinationStatusDescription = destinationStatusDescription }
        override fun streamArn(streamArn: String): FluentBuilder = apply { this.streamArn = streamArn }
    }
}
