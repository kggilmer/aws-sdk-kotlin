// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * A list of requests that can perform update, put, delete, or check operations on multiple items in one or more tables atomically.
 */
class TransactWriteItem private constructor(builder: BuilderImpl) {
    /**
     * A request to perform a check item operation.
     */
    val conditionCheck: ConditionCheck? = builder.conditionCheck
    /**
     * A request to perform a DeleteItem operation.
     */
    val delete: Delete? = builder.delete
    /**
     * A request to perform a PutItem operation.
     */
    val put: Put? = builder.put
    /**
     * A request to perform an UpdateItem operation.
     */
    val update: Update? = builder.update

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): TransactWriteItem = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("TransactWriteItem(")
        append("conditionCheck=$conditionCheck,")
        append("delete=$delete,")
        append("put=$put,")
        append("update=$update)")
    }

    override fun hashCode(): kotlin.Int {
        var result = conditionCheck?.hashCode() ?: 0
        result = 31 * result + (delete?.hashCode() ?: 0)
        result = 31 * result + (put?.hashCode() ?: 0)
        result = 31 * result + (update?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as TransactWriteItem

        if (conditionCheck != other.conditionCheck) return false
        if (delete != other.delete) return false
        if (put != other.put) return false
        if (update != other.update) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): TransactWriteItem = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): TransactWriteItem
        /**
         * A request to perform a check item operation.
         */
        fun conditionCheck(conditionCheck: ConditionCheck): FluentBuilder
        /**
         * A request to perform a DeleteItem operation.
         */
        fun delete(delete: Delete): FluentBuilder
        /**
         * A request to perform a PutItem operation.
         */
        fun put(put: Put): FluentBuilder
        /**
         * A request to perform an UpdateItem operation.
         */
        fun update(update: Update): FluentBuilder
    }

    interface DslBuilder {
        /**
         * A request to perform a check item operation.
         */
        var conditionCheck: ConditionCheck?
        /**
         * A request to perform a DeleteItem operation.
         */
        var delete: Delete?
        /**
         * A request to perform a PutItem operation.
         */
        var put: Put?
        /**
         * A request to perform an UpdateItem operation.
         */
        var update: Update?

        fun build(): TransactWriteItem
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.ConditionCheck] inside the given [block]
         */
        fun conditionCheck(block: ConditionCheck.DslBuilder.() -> kotlin.Unit) {
            this.conditionCheck = ConditionCheck.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.Delete] inside the given [block]
         */
        fun delete(block: Delete.DslBuilder.() -> kotlin.Unit) {
            this.delete = Delete.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.Put] inside the given [block]
         */
        fun put(block: Put.DslBuilder.() -> kotlin.Unit) {
            this.put = Put.invoke(block)
        }
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.Update] inside the given [block]
         */
        fun update(block: Update.DslBuilder.() -> kotlin.Unit) {
            this.update = Update.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var conditionCheck: ConditionCheck? = null
        override var delete: Delete? = null
        override var put: Put? = null
        override var update: Update? = null

        constructor(x: TransactWriteItem) : this() {
            this.conditionCheck = x.conditionCheck
            this.delete = x.delete
            this.put = x.put
            this.update = x.update
        }

        override fun build(): TransactWriteItem = TransactWriteItem(this)
        override fun conditionCheck(conditionCheck: ConditionCheck): FluentBuilder = apply { this.conditionCheck = conditionCheck }
        override fun delete(delete: Delete): FluentBuilder = apply { this.delete = delete }
        override fun put(put: Put): FluentBuilder = apply { this.put = put }
        override fun update(update: Update): FluentBuilder = apply { this.update = update }
    }
}
