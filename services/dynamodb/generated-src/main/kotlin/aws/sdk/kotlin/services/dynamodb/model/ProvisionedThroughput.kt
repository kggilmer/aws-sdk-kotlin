// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents the provisioned throughput settings for a specified table or index. The settings
 * can be modified using the UpdateTable operation.
 * For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide.
 */
class ProvisionedThroughput private constructor(builder: BuilderImpl) {
    /**
     * The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
     * ThrottlingException. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write
     * Requirements in the Amazon DynamoDB Developer Guide.
     * If read/write capacity mode is PAY_PER_REQUEST the value is set to 0.
     */
    val readCapacityUnits: Long? = builder.readCapacityUnits
    /**
     * The maximum number of writes consumed per second before DynamoDB returns a
     * ThrottlingException. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write
     * Requirements in the Amazon DynamoDB Developer Guide.
     * If read/write capacity mode is PAY_PER_REQUEST the value is set to 0.
     */
    val writeCapacityUnits: Long? = builder.writeCapacityUnits

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ProvisionedThroughput = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ProvisionedThroughput(")
        append("readCapacityUnits=$readCapacityUnits,")
        append("writeCapacityUnits=$writeCapacityUnits)")
    }

    override fun hashCode(): kotlin.Int {
        var result = readCapacityUnits?.hashCode() ?: 0
        result = 31 * result + (writeCapacityUnits?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ProvisionedThroughput

        if (readCapacityUnits != other.readCapacityUnits) return false
        if (writeCapacityUnits != other.writeCapacityUnits) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ProvisionedThroughput = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ProvisionedThroughput
        /**
         * The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
         * ThrottlingException. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write
         * Requirements in the Amazon DynamoDB Developer Guide.
         * If read/write capacity mode is PAY_PER_REQUEST the value is set to 0.
         */
        fun readCapacityUnits(readCapacityUnits: Long): FluentBuilder
        /**
         * The maximum number of writes consumed per second before DynamoDB returns a
         * ThrottlingException. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write
         * Requirements in the Amazon DynamoDB Developer Guide.
         * If read/write capacity mode is PAY_PER_REQUEST the value is set to 0.
         */
        fun writeCapacityUnits(writeCapacityUnits: Long): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
         * ThrottlingException. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write
         * Requirements in the Amazon DynamoDB Developer Guide.
         * If read/write capacity mode is PAY_PER_REQUEST the value is set to 0.
         */
        var readCapacityUnits: Long?
        /**
         * The maximum number of writes consumed per second before DynamoDB returns a
         * ThrottlingException. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write
         * Requirements in the Amazon DynamoDB Developer Guide.
         * If read/write capacity mode is PAY_PER_REQUEST the value is set to 0.
         */
        var writeCapacityUnits: Long?

        fun build(): ProvisionedThroughput
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var readCapacityUnits: Long? = null
        override var writeCapacityUnits: Long? = null

        constructor(x: ProvisionedThroughput) : this() {
            this.readCapacityUnits = x.readCapacityUnits
            this.writeCapacityUnits = x.writeCapacityUnits
        }

        override fun build(): ProvisionedThroughput = ProvisionedThroughput(this)
        override fun readCapacityUnits(readCapacityUnits: Long): FluentBuilder = apply { this.readCapacityUnits = readCapacityUnits }
        override fun writeCapacityUnits(writeCapacityUnits: Long): FluentBuilder = apply { this.writeCapacityUnits = writeCapacityUnits }
    }
}
