// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Specifies an item and related attribute values to retrieve in a
 * TransactGetItem object.
 */
class Get private constructor(builder: BuilderImpl) {
    /**
     * One or more substitution tokens for attribute names in the
     * ProjectionExpression parameter.
     */
    val expressionAttributeNames: Map<String, String>? = builder.expressionAttributeNames
    /**
     * A map of attribute names to AttributeValue objects that
     * specifies the primary key of the item to retrieve.
     */
    val key: Map<String, AttributeValue>? = builder.key
    /**
     * A string that identifies one or more attributes of the specified item
     * to retrieve from the table.  The attributes in the expression must be
     * separated by commas. If no attribute names are specified, then all
     * attributes of the specified item are returned. If any of the requested
     * attributes are not found, they do not appear in the result.
     */
    val projectionExpression: String? = builder.projectionExpression
    /**
     * The name of the table from which to retrieve the specified item.
     */
    val tableName: String? = builder.tableName

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): Get = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("Get(")
        append("expressionAttributeNames=$expressionAttributeNames,")
        append("key=$key,")
        append("projectionExpression=$projectionExpression,")
        append("tableName=$tableName)")
    }

    override fun hashCode(): kotlin.Int {
        var result = expressionAttributeNames?.hashCode() ?: 0
        result = 31 * result + (key?.hashCode() ?: 0)
        result = 31 * result + (projectionExpression?.hashCode() ?: 0)
        result = 31 * result + (tableName?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Get

        if (expressionAttributeNames != other.expressionAttributeNames) return false
        if (key != other.key) return false
        if (projectionExpression != other.projectionExpression) return false
        if (tableName != other.tableName) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): Get = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): Get
        /**
         * One or more substitution tokens for attribute names in the
         * ProjectionExpression parameter.
         */
        fun expressionAttributeNames(expressionAttributeNames: Map<String, String>): FluentBuilder
        /**
         * A map of attribute names to AttributeValue objects that
         * specifies the primary key of the item to retrieve.
         */
        fun key(key: Map<String, AttributeValue>): FluentBuilder
        /**
         * A string that identifies one or more attributes of the specified item
         * to retrieve from the table.  The attributes in the expression must be
         * separated by commas. If no attribute names are specified, then all
         * attributes of the specified item are returned. If any of the requested
         * attributes are not found, they do not appear in the result.
         */
        fun projectionExpression(projectionExpression: String): FluentBuilder
        /**
         * The name of the table from which to retrieve the specified item.
         */
        fun tableName(tableName: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * One or more substitution tokens for attribute names in the
         * ProjectionExpression parameter.
         */
        var expressionAttributeNames: Map<String, String>?
        /**
         * A map of attribute names to AttributeValue objects that
         * specifies the primary key of the item to retrieve.
         */
        var key: Map<String, AttributeValue>?
        /**
         * A string that identifies one or more attributes of the specified item
         * to retrieve from the table.  The attributes in the expression must be
         * separated by commas. If no attribute names are specified, then all
         * attributes of the specified item are returned. If any of the requested
         * attributes are not found, they do not appear in the result.
         */
        var projectionExpression: String?
        /**
         * The name of the table from which to retrieve the specified item.
         */
        var tableName: String?

        fun build(): Get
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var expressionAttributeNames: Map<String, String>? = null
        override var key: Map<String, AttributeValue>? = null
        override var projectionExpression: String? = null
        override var tableName: String? = null

        constructor(x: Get) : this() {
            this.expressionAttributeNames = x.expressionAttributeNames
            this.key = x.key
            this.projectionExpression = x.projectionExpression
            this.tableName = x.tableName
        }

        override fun build(): Get = Get(this)
        override fun expressionAttributeNames(expressionAttributeNames: Map<String, String>): FluentBuilder = apply { this.expressionAttributeNames = expressionAttributeNames }
        override fun key(key: Map<String, AttributeValue>): FluentBuilder = apply { this.key = key }
        override fun projectionExpression(projectionExpression: String): FluentBuilder = apply { this.projectionExpression = projectionExpression }
        override fun tableName(tableName: String): FluentBuilder = apply { this.tableName = tableName }
    }
}
