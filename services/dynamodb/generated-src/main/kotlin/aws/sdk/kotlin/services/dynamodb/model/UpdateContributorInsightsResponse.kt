// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



class UpdateContributorInsightsResponse private constructor(builder: BuilderImpl) {
    /**
     * The status of contributor insights
     */
    val contributorInsightsStatus: ContributorInsightsStatus? = builder.contributorInsightsStatus
    /**
     * The name of the global secondary index, if applicable.
     */
    val indexName: String? = builder.indexName
    /**
     * The name of the table.
     */
    val tableName: String? = builder.tableName

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): UpdateContributorInsightsResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("UpdateContributorInsightsResponse(")
        append("contributorInsightsStatus=$contributorInsightsStatus,")
        append("indexName=$indexName,")
        append("tableName=$tableName)")
    }

    override fun hashCode(): kotlin.Int {
        var result = contributorInsightsStatus?.hashCode() ?: 0
        result = 31 * result + (indexName?.hashCode() ?: 0)
        result = 31 * result + (tableName?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as UpdateContributorInsightsResponse

        if (contributorInsightsStatus != other.contributorInsightsStatus) return false
        if (indexName != other.indexName) return false
        if (tableName != other.tableName) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): UpdateContributorInsightsResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): UpdateContributorInsightsResponse
        /**
         * The status of contributor insights
         */
        fun contributorInsightsStatus(contributorInsightsStatus: ContributorInsightsStatus): FluentBuilder
        /**
         * The name of the global secondary index, if applicable.
         */
        fun indexName(indexName: String): FluentBuilder
        /**
         * The name of the table.
         */
        fun tableName(tableName: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The status of contributor insights
         */
        var contributorInsightsStatus: ContributorInsightsStatus?
        /**
         * The name of the global secondary index, if applicable.
         */
        var indexName: String?
        /**
         * The name of the table.
         */
        var tableName: String?

        fun build(): UpdateContributorInsightsResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var contributorInsightsStatus: ContributorInsightsStatus? = null
        override var indexName: String? = null
        override var tableName: String? = null

        constructor(x: UpdateContributorInsightsResponse) : this() {
            this.contributorInsightsStatus = x.contributorInsightsStatus
            this.indexName = x.indexName
            this.tableName = x.tableName
        }

        override fun build(): UpdateContributorInsightsResponse = UpdateContributorInsightsResponse(this)
        override fun contributorInsightsStatus(contributorInsightsStatus: ContributorInsightsStatus): FluentBuilder = apply { this.contributorInsightsStatus = contributorInsightsStatus }
        override fun indexName(indexName: String): FluentBuilder = apply { this.indexName = indexName }
        override fun tableName(tableName: String): FluentBuilder = apply { this.tableName = tableName }
    }
}
