// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * A PartiQL batch statement response..
 */
class BatchStatementResponse private constructor(builder: BuilderImpl) {
    /**
     * The error associated with a failed PartiQL batch statement.
     */
    val error: BatchStatementError? = builder.error
    /**
     * A DynamoDB item associated with a BatchStatementResponse
     */
    val item: Map<String, AttributeValue>? = builder.item
    /**
     * The table name associated with a failed PartiQL batch statement.
     */
    val tableName: String? = builder.tableName

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): BatchStatementResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("BatchStatementResponse(")
        append("error=$error,")
        append("item=$item,")
        append("tableName=$tableName)")
    }

    override fun hashCode(): kotlin.Int {
        var result = error?.hashCode() ?: 0
        result = 31 * result + (item?.hashCode() ?: 0)
        result = 31 * result + (tableName?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as BatchStatementResponse

        if (error != other.error) return false
        if (item != other.item) return false
        if (tableName != other.tableName) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): BatchStatementResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): BatchStatementResponse
        /**
         * The error associated with a failed PartiQL batch statement.
         */
        fun error(error: BatchStatementError): FluentBuilder
        /**
         * A DynamoDB item associated with a BatchStatementResponse
         */
        fun item(item: Map<String, AttributeValue>): FluentBuilder
        /**
         * The table name associated with a failed PartiQL batch statement.
         */
        fun tableName(tableName: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The error associated with a failed PartiQL batch statement.
         */
        var error: BatchStatementError?
        /**
         * A DynamoDB item associated with a BatchStatementResponse
         */
        var item: Map<String, AttributeValue>?
        /**
         * The table name associated with a failed PartiQL batch statement.
         */
        var tableName: String?

        fun build(): BatchStatementResponse
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.BatchStatementError] inside the given [block]
         */
        fun error(block: BatchStatementError.DslBuilder.() -> kotlin.Unit) {
            this.error = BatchStatementError.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var error: BatchStatementError? = null
        override var item: Map<String, AttributeValue>? = null
        override var tableName: String? = null

        constructor(x: BatchStatementResponse) : this() {
            this.error = x.error
            this.item = x.item
            this.tableName = x.tableName
        }

        override fun build(): BatchStatementResponse = BatchStatementResponse(this)
        override fun error(error: BatchStatementError): FluentBuilder = apply { this.error = error }
        override fun item(item: Map<String, AttributeValue>): FluentBuilder = apply { this.item = item }
        override fun tableName(tableName: String): FluentBuilder = apply { this.tableName = tableName }
    }
}
