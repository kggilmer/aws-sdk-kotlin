// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents a PartiQL statment that uses parameters.
 */
class ParameterizedStatement private constructor(builder: BuilderImpl) {
    /**
     * The parameter values.
     */
    val parameters: List<AttributeValue>? = builder.parameters
    /**
     * A PartiQL statment that uses parameters.
     */
    val statement: String? = builder.statement

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ParameterizedStatement = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ParameterizedStatement(")
        append("parameters=$parameters,")
        append("statement=$statement)")
    }

    override fun hashCode(): kotlin.Int {
        var result = parameters?.hashCode() ?: 0
        result = 31 * result + (statement?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ParameterizedStatement

        if (parameters != other.parameters) return false
        if (statement != other.statement) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ParameterizedStatement = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ParameterizedStatement
        /**
         * The parameter values.
         */
        fun parameters(parameters: List<AttributeValue>): FluentBuilder
        /**
         * A PartiQL statment that uses parameters.
         */
        fun statement(statement: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The parameter values.
         */
        var parameters: List<AttributeValue>?
        /**
         * A PartiQL statment that uses parameters.
         */
        var statement: String?

        fun build(): ParameterizedStatement
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var parameters: List<AttributeValue>? = null
        override var statement: String? = null

        constructor(x: ParameterizedStatement) : this() {
            this.parameters = x.parameters
            this.statement = x.statement
        }

        override fun build(): ParameterizedStatement = ParameterizedStatement(this)
        override fun parameters(parameters: List<AttributeValue>): FluentBuilder = apply { this.parameters = parameters }
        override fun statement(statement: String): FluentBuilder = apply { this.statement = statement }
    }
}
