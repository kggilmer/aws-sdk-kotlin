// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents the auto scaling configuration for a global table.
 */
class TableAutoScalingDescription private constructor(builder: BuilderImpl) {
    /**
     * Represents replicas of the global table.
     */
    val replicas: List<ReplicaAutoScalingDescription>? = builder.replicas
    /**
     * The name of the table.
     */
    val tableName: String? = builder.tableName
    /**
     * The current state of the table:
     * CREATING - The table is being created.
     * UPDATING - The table is being updated.
     * DELETING - The table is being deleted.
     * ACTIVE - The table is ready for use.
     */
    val tableStatus: TableStatus? = builder.tableStatus

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): TableAutoScalingDescription = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("TableAutoScalingDescription(")
        append("replicas=$replicas,")
        append("tableName=$tableName,")
        append("tableStatus=$tableStatus)")
    }

    override fun hashCode(): kotlin.Int {
        var result = replicas?.hashCode() ?: 0
        result = 31 * result + (tableName?.hashCode() ?: 0)
        result = 31 * result + (tableStatus?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as TableAutoScalingDescription

        if (replicas != other.replicas) return false
        if (tableName != other.tableName) return false
        if (tableStatus != other.tableStatus) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): TableAutoScalingDescription = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): TableAutoScalingDescription
        /**
         * Represents replicas of the global table.
         */
        fun replicas(replicas: List<ReplicaAutoScalingDescription>): FluentBuilder
        /**
         * The name of the table.
         */
        fun tableName(tableName: String): FluentBuilder
        /**
         * The current state of the table:
         * CREATING - The table is being created.
         * UPDATING - The table is being updated.
         * DELETING - The table is being deleted.
         * ACTIVE - The table is ready for use.
         */
        fun tableStatus(tableStatus: TableStatus): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Represents replicas of the global table.
         */
        var replicas: List<ReplicaAutoScalingDescription>?
        /**
         * The name of the table.
         */
        var tableName: String?
        /**
         * The current state of the table:
         * CREATING - The table is being created.
         * UPDATING - The table is being updated.
         * DELETING - The table is being deleted.
         * ACTIVE - The table is ready for use.
         */
        var tableStatus: TableStatus?

        fun build(): TableAutoScalingDescription
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var replicas: List<ReplicaAutoScalingDescription>? = null
        override var tableName: String? = null
        override var tableStatus: TableStatus? = null

        constructor(x: TableAutoScalingDescription) : this() {
            this.replicas = x.replicas
            this.tableName = x.tableName
            this.tableStatus = x.tableStatus
        }

        override fun build(): TableAutoScalingDescription = TableAutoScalingDescription(this)
        override fun replicas(replicas: List<ReplicaAutoScalingDescription>): FluentBuilder = apply { this.replicas = replicas }
        override fun tableName(tableName: String): FluentBuilder = apply { this.tableName = tableName }
        override fun tableStatus(tableStatus: TableStatus): FluentBuilder = apply { this.tableStatus = tableStatus }
    }
}
