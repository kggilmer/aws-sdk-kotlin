// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * The capacity units consumed by an operation. The data returned includes the total
 * provisioned throughput consumed, along with statistics for the table and any indexes involved
 * in the operation. ConsumedCapacity is only returned if the request asked for it.
 * For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned
 * Throughput in the Amazon DynamoDB Developer Guide.
 */
class ConsumedCapacity private constructor(builder: BuilderImpl) {
    /**
     * The total number of capacity units consumed by the operation.
     */
    val capacityUnits: Double? = builder.capacityUnits
    /**
     * The amount of throughput consumed on each global index affected by the operation.
     */
    val globalSecondaryIndexes: Map<String, Capacity>? = builder.globalSecondaryIndexes
    /**
     * The amount of throughput consumed on each local index affected by the operation.
     */
    val localSecondaryIndexes: Map<String, Capacity>? = builder.localSecondaryIndexes
    /**
     * The total number of read capacity units consumed by the operation.
     */
    val readCapacityUnits: Double? = builder.readCapacityUnits
    /**
     * The amount of throughput consumed on the table affected by the operation.
     */
    val table: Capacity? = builder.table
    /**
     * The name of the table that was affected by the operation.
     */
    val tableName: String? = builder.tableName
    /**
     * The total number of write capacity units consumed by the operation.
     */
    val writeCapacityUnits: Double? = builder.writeCapacityUnits

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ConsumedCapacity = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("ConsumedCapacity(")
        append("capacityUnits=$capacityUnits,")
        append("globalSecondaryIndexes=$globalSecondaryIndexes,")
        append("localSecondaryIndexes=$localSecondaryIndexes,")
        append("readCapacityUnits=$readCapacityUnits,")
        append("table=$table,")
        append("tableName=$tableName,")
        append("writeCapacityUnits=$writeCapacityUnits)")
    }

    override fun hashCode(): kotlin.Int {
        var result = capacityUnits?.hashCode() ?: 0
        result = 31 * result + (globalSecondaryIndexes?.hashCode() ?: 0)
        result = 31 * result + (localSecondaryIndexes?.hashCode() ?: 0)
        result = 31 * result + (readCapacityUnits?.hashCode() ?: 0)
        result = 31 * result + (table?.hashCode() ?: 0)
        result = 31 * result + (tableName?.hashCode() ?: 0)
        result = 31 * result + (writeCapacityUnits?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ConsumedCapacity

        if (capacityUnits != other.capacityUnits) return false
        if (globalSecondaryIndexes != other.globalSecondaryIndexes) return false
        if (localSecondaryIndexes != other.localSecondaryIndexes) return false
        if (readCapacityUnits != other.readCapacityUnits) return false
        if (table != other.table) return false
        if (tableName != other.tableName) return false
        if (writeCapacityUnits != other.writeCapacityUnits) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): ConsumedCapacity = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): ConsumedCapacity
        /**
         * The total number of capacity units consumed by the operation.
         */
        fun capacityUnits(capacityUnits: Double): FluentBuilder
        /**
         * The amount of throughput consumed on each global index affected by the operation.
         */
        fun globalSecondaryIndexes(globalSecondaryIndexes: Map<String, Capacity>): FluentBuilder
        /**
         * The amount of throughput consumed on each local index affected by the operation.
         */
        fun localSecondaryIndexes(localSecondaryIndexes: Map<String, Capacity>): FluentBuilder
        /**
         * The total number of read capacity units consumed by the operation.
         */
        fun readCapacityUnits(readCapacityUnits: Double): FluentBuilder
        /**
         * The amount of throughput consumed on the table affected by the operation.
         */
        fun table(table: Capacity): FluentBuilder
        /**
         * The name of the table that was affected by the operation.
         */
        fun tableName(tableName: String): FluentBuilder
        /**
         * The total number of write capacity units consumed by the operation.
         */
        fun writeCapacityUnits(writeCapacityUnits: Double): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The total number of capacity units consumed by the operation.
         */
        var capacityUnits: Double?
        /**
         * The amount of throughput consumed on each global index affected by the operation.
         */
        var globalSecondaryIndexes: Map<String, Capacity>?
        /**
         * The amount of throughput consumed on each local index affected by the operation.
         */
        var localSecondaryIndexes: Map<String, Capacity>?
        /**
         * The total number of read capacity units consumed by the operation.
         */
        var readCapacityUnits: Double?
        /**
         * The amount of throughput consumed on the table affected by the operation.
         */
        var table: Capacity?
        /**
         * The name of the table that was affected by the operation.
         */
        var tableName: String?
        /**
         * The total number of write capacity units consumed by the operation.
         */
        var writeCapacityUnits: Double?

        fun build(): ConsumedCapacity
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.Capacity] inside the given [block]
         */
        fun table(block: Capacity.DslBuilder.() -> kotlin.Unit) {
            this.table = Capacity.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var capacityUnits: Double? = null
        override var globalSecondaryIndexes: Map<String, Capacity>? = null
        override var localSecondaryIndexes: Map<String, Capacity>? = null
        override var readCapacityUnits: Double? = null
        override var table: Capacity? = null
        override var tableName: String? = null
        override var writeCapacityUnits: Double? = null

        constructor(x: ConsumedCapacity) : this() {
            this.capacityUnits = x.capacityUnits
            this.globalSecondaryIndexes = x.globalSecondaryIndexes
            this.localSecondaryIndexes = x.localSecondaryIndexes
            this.readCapacityUnits = x.readCapacityUnits
            this.table = x.table
            this.tableName = x.tableName
            this.writeCapacityUnits = x.writeCapacityUnits
        }

        override fun build(): ConsumedCapacity = ConsumedCapacity(this)
        override fun capacityUnits(capacityUnits: Double): FluentBuilder = apply { this.capacityUnits = capacityUnits }
        override fun globalSecondaryIndexes(globalSecondaryIndexes: Map<String, Capacity>): FluentBuilder = apply { this.globalSecondaryIndexes = globalSecondaryIndexes }
        override fun localSecondaryIndexes(localSecondaryIndexes: Map<String, Capacity>): FluentBuilder = apply { this.localSecondaryIndexes = localSecondaryIndexes }
        override fun readCapacityUnits(readCapacityUnits: Double): FluentBuilder = apply { this.readCapacityUnits = readCapacityUnits }
        override fun table(table: Capacity): FluentBuilder = apply { this.table = table }
        override fun tableName(tableName: String): FluentBuilder = apply { this.tableName = tableName }
        override fun writeCapacityUnits(writeCapacityUnits: Double): FluentBuilder = apply { this.writeCapacityUnits = writeCapacityUnits }
    }
}
