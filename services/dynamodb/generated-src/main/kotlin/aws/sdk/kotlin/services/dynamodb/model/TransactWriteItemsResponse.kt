// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



class TransactWriteItemsResponse private constructor(builder: BuilderImpl) {
    /**
     * The capacity units consumed by the entire TransactWriteItems
     * operation. The values of the list are ordered according to
     * the ordering of the TransactItems request parameter.
     */
    val consumedCapacity: List<ConsumedCapacity>? = builder.consumedCapacity
    /**
     * A list of tables that were processed by TransactWriteItems and, for each
     * table, information about any item collections that were affected by individual
     * UpdateItem, PutItem, or DeleteItem
     * operations.
     */
    val itemCollectionMetrics: Map<String, List<ItemCollectionMetrics>>? = builder.itemCollectionMetrics

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): TransactWriteItemsResponse = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("TransactWriteItemsResponse(")
        append("consumedCapacity=$consumedCapacity,")
        append("itemCollectionMetrics=$itemCollectionMetrics)")
    }

    override fun hashCode(): kotlin.Int {
        var result = consumedCapacity?.hashCode() ?: 0
        result = 31 * result + (itemCollectionMetrics?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as TransactWriteItemsResponse

        if (consumedCapacity != other.consumedCapacity) return false
        if (itemCollectionMetrics != other.itemCollectionMetrics) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): TransactWriteItemsResponse = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): TransactWriteItemsResponse
        /**
         * The capacity units consumed by the entire TransactWriteItems
         * operation. The values of the list are ordered according to
         * the ordering of the TransactItems request parameter.
         */
        fun consumedCapacity(consumedCapacity: List<ConsumedCapacity>): FluentBuilder
        /**
         * A list of tables that were processed by TransactWriteItems and, for each
         * table, information about any item collections that were affected by individual
         * UpdateItem, PutItem, or DeleteItem
         * operations.
         */
        fun itemCollectionMetrics(itemCollectionMetrics: Map<String, List<ItemCollectionMetrics>>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The capacity units consumed by the entire TransactWriteItems
         * operation. The values of the list are ordered according to
         * the ordering of the TransactItems request parameter.
         */
        var consumedCapacity: List<ConsumedCapacity>?
        /**
         * A list of tables that were processed by TransactWriteItems and, for each
         * table, information about any item collections that were affected by individual
         * UpdateItem, PutItem, or DeleteItem
         * operations.
         */
        var itemCollectionMetrics: Map<String, List<ItemCollectionMetrics>>?

        fun build(): TransactWriteItemsResponse
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var consumedCapacity: List<ConsumedCapacity>? = null
        override var itemCollectionMetrics: Map<String, List<ItemCollectionMetrics>>? = null

        constructor(x: TransactWriteItemsResponse) : this() {
            this.consumedCapacity = x.consumedCapacity
            this.itemCollectionMetrics = x.itemCollectionMetrics
        }

        override fun build(): TransactWriteItemsResponse = TransactWriteItemsResponse(this)
        override fun consumedCapacity(consumedCapacity: List<ConsumedCapacity>): FluentBuilder = apply { this.consumedCapacity = consumedCapacity }
        override fun itemCollectionMetrics(itemCollectionMetrics: Map<String, List<ItemCollectionMetrics>>): FluentBuilder = apply { this.itemCollectionMetrics = itemCollectionMetrics }
    }
}
