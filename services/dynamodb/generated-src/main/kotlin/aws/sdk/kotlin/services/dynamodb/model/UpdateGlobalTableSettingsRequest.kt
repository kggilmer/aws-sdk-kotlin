// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



class UpdateGlobalTableSettingsRequest private constructor(builder: BuilderImpl) {
    /**
     * The billing mode of the global table. If GlobalTableBillingMode is not specified, the global table defaults to PROVISIONED capacity billing mode.
     * PROVISIONED - We recommend using PROVISIONED for predictable workloads. PROVISIONED sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode.
     * PAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable workloads. PAY_PER_REQUEST sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode.
     */
    val globalTableBillingMode: BillingMode? = builder.globalTableBillingMode
    /**
     * Represents the settings of a global secondary index for a global table that will be modified.
     */
    val globalTableGlobalSecondaryIndexSettingsUpdate: List<GlobalTableGlobalSecondaryIndexSettingsUpdate>? = builder.globalTableGlobalSecondaryIndexSettingsUpdate
    /**
     * The name of the global table
     */
    val globalTableName: String? = builder.globalTableName
    /**
     * Auto scaling settings for managing provisioned write capacity for the global
     * table.
     */
    val globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate? = builder.globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate
    /**
     * The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.
     */
    val globalTableProvisionedWriteCapacityUnits: Long? = builder.globalTableProvisionedWriteCapacityUnits
    /**
     * Represents the settings for a global table in a Region that will be modified.
     */
    val replicaSettingsUpdate: List<ReplicaSettingsUpdate>? = builder.replicaSettingsUpdate

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): UpdateGlobalTableSettingsRequest = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("UpdateGlobalTableSettingsRequest(")
        append("globalTableBillingMode=$globalTableBillingMode,")
        append("globalTableGlobalSecondaryIndexSettingsUpdate=$globalTableGlobalSecondaryIndexSettingsUpdate,")
        append("globalTableName=$globalTableName,")
        append("globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate=$globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate,")
        append("globalTableProvisionedWriteCapacityUnits=$globalTableProvisionedWriteCapacityUnits,")
        append("replicaSettingsUpdate=$replicaSettingsUpdate)")
    }

    override fun hashCode(): kotlin.Int {
        var result = globalTableBillingMode?.hashCode() ?: 0
        result = 31 * result + (globalTableGlobalSecondaryIndexSettingsUpdate?.hashCode() ?: 0)
        result = 31 * result + (globalTableName?.hashCode() ?: 0)
        result = 31 * result + (globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate?.hashCode() ?: 0)
        result = 31 * result + (globalTableProvisionedWriteCapacityUnits?.hashCode() ?: 0)
        result = 31 * result + (replicaSettingsUpdate?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as UpdateGlobalTableSettingsRequest

        if (globalTableBillingMode != other.globalTableBillingMode) return false
        if (globalTableGlobalSecondaryIndexSettingsUpdate != other.globalTableGlobalSecondaryIndexSettingsUpdate) return false
        if (globalTableName != other.globalTableName) return false
        if (globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate != other.globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate) return false
        if (globalTableProvisionedWriteCapacityUnits != other.globalTableProvisionedWriteCapacityUnits) return false
        if (replicaSettingsUpdate != other.replicaSettingsUpdate) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): UpdateGlobalTableSettingsRequest = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): UpdateGlobalTableSettingsRequest
        /**
         * The billing mode of the global table. If GlobalTableBillingMode is not specified, the global table defaults to PROVISIONED capacity billing mode.
         * PROVISIONED - We recommend using PROVISIONED for predictable workloads. PROVISIONED sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode.
         * PAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable workloads. PAY_PER_REQUEST sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode.
         */
        fun globalTableBillingMode(globalTableBillingMode: BillingMode): FluentBuilder
        /**
         * Represents the settings of a global secondary index for a global table that will be modified.
         */
        fun globalTableGlobalSecondaryIndexSettingsUpdate(globalTableGlobalSecondaryIndexSettingsUpdate: List<GlobalTableGlobalSecondaryIndexSettingsUpdate>): FluentBuilder
        /**
         * The name of the global table
         */
        fun globalTableName(globalTableName: String): FluentBuilder
        /**
         * Auto scaling settings for managing provisioned write capacity for the global
         * table.
         */
        fun globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate(globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate): FluentBuilder
        /**
         * The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.
         */
        fun globalTableProvisionedWriteCapacityUnits(globalTableProvisionedWriteCapacityUnits: Long): FluentBuilder
        /**
         * Represents the settings for a global table in a Region that will be modified.
         */
        fun replicaSettingsUpdate(replicaSettingsUpdate: List<ReplicaSettingsUpdate>): FluentBuilder
    }

    interface DslBuilder {
        /**
         * The billing mode of the global table. If GlobalTableBillingMode is not specified, the global table defaults to PROVISIONED capacity billing mode.
         * PROVISIONED - We recommend using PROVISIONED for predictable workloads. PROVISIONED sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode.
         * PAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable workloads. PAY_PER_REQUEST sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode.
         */
        var globalTableBillingMode: BillingMode?
        /**
         * Represents the settings of a global secondary index for a global table that will be modified.
         */
        var globalTableGlobalSecondaryIndexSettingsUpdate: List<GlobalTableGlobalSecondaryIndexSettingsUpdate>?
        /**
         * The name of the global table
         */
        var globalTableName: String?
        /**
         * Auto scaling settings for managing provisioned write capacity for the global
         * table.
         */
        var globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate?
        /**
         * The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.
         */
        var globalTableProvisionedWriteCapacityUnits: Long?
        /**
         * Represents the settings for a global table in a Region that will be modified.
         */
        var replicaSettingsUpdate: List<ReplicaSettingsUpdate>?

        fun build(): UpdateGlobalTableSettingsRequest
        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.AutoScalingSettingsUpdate] inside the given [block]
         */
        fun globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate(block: AutoScalingSettingsUpdate.DslBuilder.() -> kotlin.Unit) {
            this.globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate = AutoScalingSettingsUpdate.invoke(block)
        }
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var globalTableBillingMode: BillingMode? = null
        override var globalTableGlobalSecondaryIndexSettingsUpdate: List<GlobalTableGlobalSecondaryIndexSettingsUpdate>? = null
        override var globalTableName: String? = null
        override var globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate? = null
        override var globalTableProvisionedWriteCapacityUnits: Long? = null
        override var replicaSettingsUpdate: List<ReplicaSettingsUpdate>? = null

        constructor(x: UpdateGlobalTableSettingsRequest) : this() {
            this.globalTableBillingMode = x.globalTableBillingMode
            this.globalTableGlobalSecondaryIndexSettingsUpdate = x.globalTableGlobalSecondaryIndexSettingsUpdate
            this.globalTableName = x.globalTableName
            this.globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate = x.globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate
            this.globalTableProvisionedWriteCapacityUnits = x.globalTableProvisionedWriteCapacityUnits
            this.replicaSettingsUpdate = x.replicaSettingsUpdate
        }

        override fun build(): UpdateGlobalTableSettingsRequest = UpdateGlobalTableSettingsRequest(this)
        override fun globalTableBillingMode(globalTableBillingMode: BillingMode): FluentBuilder = apply { this.globalTableBillingMode = globalTableBillingMode }
        override fun globalTableGlobalSecondaryIndexSettingsUpdate(globalTableGlobalSecondaryIndexSettingsUpdate: List<GlobalTableGlobalSecondaryIndexSettingsUpdate>): FluentBuilder = apply { this.globalTableGlobalSecondaryIndexSettingsUpdate = globalTableGlobalSecondaryIndexSettingsUpdate }
        override fun globalTableName(globalTableName: String): FluentBuilder = apply { this.globalTableName = globalTableName }
        override fun globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate(globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate): FluentBuilder = apply { this.globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate = globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate }
        override fun globalTableProvisionedWriteCapacityUnits(globalTableProvisionedWriteCapacityUnits: Long): FluentBuilder = apply { this.globalTableProvisionedWriteCapacityUnits = globalTableProvisionedWriteCapacityUnits }
        override fun replicaSettingsUpdate(replicaSettingsUpdate: List<ReplicaSettingsUpdate>): FluentBuilder = apply { this.replicaSettingsUpdate = replicaSettingsUpdate }
    }
}
