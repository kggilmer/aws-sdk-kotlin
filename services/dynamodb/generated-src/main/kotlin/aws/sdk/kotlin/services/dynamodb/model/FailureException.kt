// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



/**
 * Represents a failure a contributor insights operation.
 */
class FailureException private constructor(builder: BuilderImpl) {
    /**
     * Description of the failure.
     */
    val exceptionDescription: String? = builder.exceptionDescription
    /**
     * Exception name.
     */
    val exceptionName: String? = builder.exceptionName

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): FailureException = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("FailureException(")
        append("exceptionDescription=$exceptionDescription,")
        append("exceptionName=$exceptionName)")
    }

    override fun hashCode(): kotlin.Int {
        var result = exceptionDescription?.hashCode() ?: 0
        result = 31 * result + (exceptionName?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as FailureException

        if (exceptionDescription != other.exceptionDescription) return false
        if (exceptionName != other.exceptionName) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): FailureException = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): FailureException
        /**
         * Description of the failure.
         */
        fun exceptionDescription(exceptionDescription: String): FluentBuilder
        /**
         * Exception name.
         */
        fun exceptionName(exceptionName: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * Description of the failure.
         */
        var exceptionDescription: String?
        /**
         * Exception name.
         */
        var exceptionName: String?

        fun build(): FailureException
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var exceptionDescription: String? = null
        override var exceptionName: String? = null

        constructor(x: FailureException) : this() {
            this.exceptionDescription = x.exceptionDescription
            this.exceptionName = x.exceptionName
        }

        override fun build(): FailureException = FailureException(this)
        override fun exceptionDescription(exceptionDescription: String): FluentBuilder = apply { this.exceptionDescription = exceptionDescription }
        override fun exceptionName(exceptionName: String): FluentBuilder = apply { this.exceptionName = exceptionName }
    }
}
