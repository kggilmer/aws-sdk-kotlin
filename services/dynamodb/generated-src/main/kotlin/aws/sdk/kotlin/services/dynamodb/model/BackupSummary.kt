// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model

import aws.smithy.kotlin.runtime.time.Instant

/**
 * Contains details for the backup.
 */
class BackupSummary private constructor(builder: BuilderImpl) {
    /**
     * ARN associated with the backup.
     */
    val backupArn: String? = builder.backupArn
    /**
     * Time at which the backup was created.
     */
    val backupCreationDateTime: Instant? = builder.backupCreationDateTime
    /**
     * Time at which the automatic on-demand backup created by DynamoDB will expire. This
     * SYSTEM on-demand backup expires automatically 35 days after its
     * creation.
     */
    val backupExpiryDateTime: Instant? = builder.backupExpiryDateTime
    /**
     * Name of the specified backup.
     */
    val backupName: String? = builder.backupName
    /**
     * Size of the backup in bytes.
     */
    val backupSizeBytes: Long? = builder.backupSizeBytes
    /**
     * Backup can be in one of the following states: CREATING, ACTIVE, DELETED.
     */
    val backupStatus: BackupStatus? = builder.backupStatus
    /**
     * BackupType:
     * USER - You create and manage these using the on-demand backup feature.
     * SYSTEM - If you delete a table with point-in-time recovery enabled, a SYSTEM backup is automatically
     * created and is retained for 35 days (at no additional cost). System backups allow you to restore the deleted
     * table to the state it was in just before the point of deletion.
     * AWS_BACKUP - On-demand backup created by you from AWS Backup service.
     */
    val backupType: BackupType? = builder.backupType
    /**
     * ARN associated with the table.
     */
    val tableArn: String? = builder.tableArn
    /**
     * Unique identifier for the table.
     */
    val tableId: String? = builder.tableId
    /**
     * Name of the table.
     */
    val tableName: String? = builder.tableName

    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()

        internal fun builder(): DslBuilder = BuilderImpl()

        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): BackupSummary = BuilderImpl().apply(block).build()

    }

    override fun toString(): kotlin.String = buildString {
        append("BackupSummary(")
        append("backupArn=$backupArn,")
        append("backupCreationDateTime=$backupCreationDateTime,")
        append("backupExpiryDateTime=$backupExpiryDateTime,")
        append("backupName=$backupName,")
        append("backupSizeBytes=$backupSizeBytes,")
        append("backupStatus=$backupStatus,")
        append("backupType=$backupType,")
        append("tableArn=$tableArn,")
        append("tableId=$tableId,")
        append("tableName=$tableName)")
    }

    override fun hashCode(): kotlin.Int {
        var result = backupArn?.hashCode() ?: 0
        result = 31 * result + (backupCreationDateTime?.hashCode() ?: 0)
        result = 31 * result + (backupExpiryDateTime?.hashCode() ?: 0)
        result = 31 * result + (backupName?.hashCode() ?: 0)
        result = 31 * result + (backupSizeBytes?.hashCode() ?: 0)
        result = 31 * result + (backupStatus?.hashCode() ?: 0)
        result = 31 * result + (backupType?.hashCode() ?: 0)
        result = 31 * result + (tableArn?.hashCode() ?: 0)
        result = 31 * result + (tableId?.hashCode() ?: 0)
        result = 31 * result + (tableName?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as BackupSummary

        if (backupArn != other.backupArn) return false
        if (backupCreationDateTime != other.backupCreationDateTime) return false
        if (backupExpiryDateTime != other.backupExpiryDateTime) return false
        if (backupName != other.backupName) return false
        if (backupSizeBytes != other.backupSizeBytes) return false
        if (backupStatus != other.backupStatus) return false
        if (backupType != other.backupType) return false
        if (tableArn != other.tableArn) return false
        if (tableId != other.tableId) return false
        if (tableName != other.tableName) return false

        return true
    }

    fun copy(block: DslBuilder.() -> kotlin.Unit = {}): BackupSummary = BuilderImpl(this).apply(block).build()

    interface FluentBuilder {
        fun build(): BackupSummary
        /**
         * ARN associated with the backup.
         */
        fun backupArn(backupArn: String): FluentBuilder
        /**
         * Time at which the backup was created.
         */
        fun backupCreationDateTime(backupCreationDateTime: Instant): FluentBuilder
        /**
         * Time at which the automatic on-demand backup created by DynamoDB will expire. This
         * SYSTEM on-demand backup expires automatically 35 days after its
         * creation.
         */
        fun backupExpiryDateTime(backupExpiryDateTime: Instant): FluentBuilder
        /**
         * Name of the specified backup.
         */
        fun backupName(backupName: String): FluentBuilder
        /**
         * Size of the backup in bytes.
         */
        fun backupSizeBytes(backupSizeBytes: Long): FluentBuilder
        /**
         * Backup can be in one of the following states: CREATING, ACTIVE, DELETED.
         */
        fun backupStatus(backupStatus: BackupStatus): FluentBuilder
        /**
         * BackupType:
         * USER - You create and manage these using the on-demand backup feature.
         * SYSTEM - If you delete a table with point-in-time recovery enabled, a SYSTEM backup is automatically
         * created and is retained for 35 days (at no additional cost). System backups allow you to restore the deleted
         * table to the state it was in just before the point of deletion.
         * AWS_BACKUP - On-demand backup created by you from AWS Backup service.
         */
        fun backupType(backupType: BackupType): FluentBuilder
        /**
         * ARN associated with the table.
         */
        fun tableArn(tableArn: String): FluentBuilder
        /**
         * Unique identifier for the table.
         */
        fun tableId(tableId: String): FluentBuilder
        /**
         * Name of the table.
         */
        fun tableName(tableName: String): FluentBuilder
    }

    interface DslBuilder {
        /**
         * ARN associated with the backup.
         */
        var backupArn: String?
        /**
         * Time at which the backup was created.
         */
        var backupCreationDateTime: Instant?
        /**
         * Time at which the automatic on-demand backup created by DynamoDB will expire. This
         * SYSTEM on-demand backup expires automatically 35 days after its
         * creation.
         */
        var backupExpiryDateTime: Instant?
        /**
         * Name of the specified backup.
         */
        var backupName: String?
        /**
         * Size of the backup in bytes.
         */
        var backupSizeBytes: Long?
        /**
         * Backup can be in one of the following states: CREATING, ACTIVE, DELETED.
         */
        var backupStatus: BackupStatus?
        /**
         * BackupType:
         * USER - You create and manage these using the on-demand backup feature.
         * SYSTEM - If you delete a table with point-in-time recovery enabled, a SYSTEM backup is automatically
         * created and is retained for 35 days (at no additional cost). System backups allow you to restore the deleted
         * table to the state it was in just before the point of deletion.
         * AWS_BACKUP - On-demand backup created by you from AWS Backup service.
         */
        var backupType: BackupType?
        /**
         * ARN associated with the table.
         */
        var tableArn: String?
        /**
         * Unique identifier for the table.
         */
        var tableId: String?
        /**
         * Name of the table.
         */
        var tableName: String?

        fun build(): BackupSummary
    }

    private class BuilderImpl() : FluentBuilder, DslBuilder {
        override var backupArn: String? = null
        override var backupCreationDateTime: Instant? = null
        override var backupExpiryDateTime: Instant? = null
        override var backupName: String? = null
        override var backupSizeBytes: Long? = null
        override var backupStatus: BackupStatus? = null
        override var backupType: BackupType? = null
        override var tableArn: String? = null
        override var tableId: String? = null
        override var tableName: String? = null

        constructor(x: BackupSummary) : this() {
            this.backupArn = x.backupArn
            this.backupCreationDateTime = x.backupCreationDateTime
            this.backupExpiryDateTime = x.backupExpiryDateTime
            this.backupName = x.backupName
            this.backupSizeBytes = x.backupSizeBytes
            this.backupStatus = x.backupStatus
            this.backupType = x.backupType
            this.tableArn = x.tableArn
            this.tableId = x.tableId
            this.tableName = x.tableName
        }

        override fun build(): BackupSummary = BackupSummary(this)
        override fun backupArn(backupArn: String): FluentBuilder = apply { this.backupArn = backupArn }
        override fun backupCreationDateTime(backupCreationDateTime: Instant): FluentBuilder = apply { this.backupCreationDateTime = backupCreationDateTime }
        override fun backupExpiryDateTime(backupExpiryDateTime: Instant): FluentBuilder = apply { this.backupExpiryDateTime = backupExpiryDateTime }
        override fun backupName(backupName: String): FluentBuilder = apply { this.backupName = backupName }
        override fun backupSizeBytes(backupSizeBytes: Long): FluentBuilder = apply { this.backupSizeBytes = backupSizeBytes }
        override fun backupStatus(backupStatus: BackupStatus): FluentBuilder = apply { this.backupStatus = backupStatus }
        override fun backupType(backupType: BackupType): FluentBuilder = apply { this.backupType = backupType }
        override fun tableArn(tableArn: String): FluentBuilder = apply { this.tableArn = tableArn }
        override fun tableId(tableId: String): FluentBuilder = apply { this.tableId = tableId }
        override fun tableName(tableName: String): FluentBuilder = apply { this.tableName = tableName }
    }
}
